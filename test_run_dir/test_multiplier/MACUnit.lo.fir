circuit MACUnit :
  module booth2Encoder :
    input clock : Clock
    input reset : UInt<1>
    input input_multiplier : UInt<8>
    output output_X2 : UInt<4>
    output output_inv : UInt<4>
    output output_set0 : UInt<4>

    node _multiplier2_T = cat(input_multiplier, UInt<1>("h0")) @[Cat.scala 33:92]
    node multiplier2 = _multiplier2_T @[booth2_encoder.scala 22:27 29:17]
    node _bits_0_T = bits(multiplier2, 2, 0) @[booth2_encoder.scala 32:31]
    node _bits_1_T = bits(multiplier2, 4, 2) @[booth2_encoder.scala 32:31]
    node _bits_2_T = bits(multiplier2, 6, 4) @[booth2_encoder.scala 32:31]
    node _bits_3_T = bits(multiplier2, 8, 6) @[booth2_encoder.scala 32:31]
    node bits_0 = _bits_0_T @[booth2_encoder.scala 23:27 32:17]
    node _X2Bools_0_T = bits(bits_0, 0, 0) @[booth2_encoder.scala 36:35]
    node _X2Bools_0_T_1 = bits(bits_0, 1, 1) @[booth2_encoder.scala 36:46]
    node _X2Bools_0_T_2 = xor(_X2Bools_0_T, _X2Bools_0_T_1) @[booth2_encoder.scala 36:38]
    node _X2Bools_0_T_3 = not(_X2Bools_0_T_2) @[booth2_encoder.scala 36:26]
    node _X2Bools_0_T_4 = bits(_X2Bools_0_T_3, 0, 0) @[booth2_encoder.scala 36:52]
    node _invBools_0_T = bits(bits_0, 2, 2) @[booth2_encoder.scala 37:32]
    node _invBools_0_T_1 = bits(_invBools_0_T, 0, 0) @[booth2_encoder.scala 37:36]
    node _set0Bools_0_T = andr(bits_0) @[booth2_encoder.scala 38:33]
    node _set0Bools_0_T_1 = not(bits_0) @[booth2_encoder.scala 38:48]
    node _set0Bools_0_T_2 = andr(_set0Bools_0_T_1) @[booth2_encoder.scala 38:58]
    node _set0Bools_0_T_3 = bits(_set0Bools_0_T_2, 0, 0) @[booth2_encoder.scala 38:63]
    node _set0Bools_0_T_4 = or(_set0Bools_0_T, _set0Bools_0_T_3) @[booth2_encoder.scala 38:45]
    node bits_1 = _bits_1_T @[booth2_encoder.scala 23:27 32:17]
    node _X2Bools_1_T = bits(bits_1, 0, 0) @[booth2_encoder.scala 36:35]
    node _X2Bools_1_T_1 = bits(bits_1, 1, 1) @[booth2_encoder.scala 36:46]
    node _X2Bools_1_T_2 = xor(_X2Bools_1_T, _X2Bools_1_T_1) @[booth2_encoder.scala 36:38]
    node _X2Bools_1_T_3 = not(_X2Bools_1_T_2) @[booth2_encoder.scala 36:26]
    node _X2Bools_1_T_4 = bits(_X2Bools_1_T_3, 0, 0) @[booth2_encoder.scala 36:52]
    node _invBools_1_T = bits(bits_1, 2, 2) @[booth2_encoder.scala 37:32]
    node _invBools_1_T_1 = bits(_invBools_1_T, 0, 0) @[booth2_encoder.scala 37:36]
    node _set0Bools_1_T = andr(bits_1) @[booth2_encoder.scala 38:33]
    node _set0Bools_1_T_1 = not(bits_1) @[booth2_encoder.scala 38:48]
    node _set0Bools_1_T_2 = andr(_set0Bools_1_T_1) @[booth2_encoder.scala 38:58]
    node _set0Bools_1_T_3 = bits(_set0Bools_1_T_2, 0, 0) @[booth2_encoder.scala 38:63]
    node _set0Bools_1_T_4 = or(_set0Bools_1_T, _set0Bools_1_T_3) @[booth2_encoder.scala 38:45]
    node bits_2 = _bits_2_T @[booth2_encoder.scala 23:27 32:17]
    node _X2Bools_2_T = bits(bits_2, 0, 0) @[booth2_encoder.scala 36:35]
    node _X2Bools_2_T_1 = bits(bits_2, 1, 1) @[booth2_encoder.scala 36:46]
    node _X2Bools_2_T_2 = xor(_X2Bools_2_T, _X2Bools_2_T_1) @[booth2_encoder.scala 36:38]
    node _X2Bools_2_T_3 = not(_X2Bools_2_T_2) @[booth2_encoder.scala 36:26]
    node _X2Bools_2_T_4 = bits(_X2Bools_2_T_3, 0, 0) @[booth2_encoder.scala 36:52]
    node _invBools_2_T = bits(bits_2, 2, 2) @[booth2_encoder.scala 37:32]
    node _invBools_2_T_1 = bits(_invBools_2_T, 0, 0) @[booth2_encoder.scala 37:36]
    node _set0Bools_2_T = andr(bits_2) @[booth2_encoder.scala 38:33]
    node _set0Bools_2_T_1 = not(bits_2) @[booth2_encoder.scala 38:48]
    node _set0Bools_2_T_2 = andr(_set0Bools_2_T_1) @[booth2_encoder.scala 38:58]
    node _set0Bools_2_T_3 = bits(_set0Bools_2_T_2, 0, 0) @[booth2_encoder.scala 38:63]
    node _set0Bools_2_T_4 = or(_set0Bools_2_T, _set0Bools_2_T_3) @[booth2_encoder.scala 38:45]
    node bits_3 = _bits_3_T @[booth2_encoder.scala 23:27 32:17]
    node _X2Bools_3_T = bits(bits_3, 0, 0) @[booth2_encoder.scala 36:35]
    node _X2Bools_3_T_1 = bits(bits_3, 1, 1) @[booth2_encoder.scala 36:46]
    node _X2Bools_3_T_2 = xor(_X2Bools_3_T, _X2Bools_3_T_1) @[booth2_encoder.scala 36:38]
    node _X2Bools_3_T_3 = not(_X2Bools_3_T_2) @[booth2_encoder.scala 36:26]
    node _X2Bools_3_T_4 = bits(_X2Bools_3_T_3, 0, 0) @[booth2_encoder.scala 36:52]
    node _invBools_3_T = bits(bits_3, 2, 2) @[booth2_encoder.scala 37:32]
    node _invBools_3_T_1 = bits(_invBools_3_T, 0, 0) @[booth2_encoder.scala 37:36]
    node _set0Bools_3_T = andr(bits_3) @[booth2_encoder.scala 38:33]
    node _set0Bools_3_T_1 = not(bits_3) @[booth2_encoder.scala 38:48]
    node _set0Bools_3_T_2 = andr(_set0Bools_3_T_1) @[booth2_encoder.scala 38:58]
    node _set0Bools_3_T_3 = bits(_set0Bools_3_T_2, 0, 0) @[booth2_encoder.scala 38:63]
    node _set0Bools_3_T_4 = or(_set0Bools_3_T, _set0Bools_3_T_3) @[booth2_encoder.scala 38:45]
    node X2Bools_1 = _X2Bools_1_T_4 @[booth2_encoder.scala 25:30 36:22]
    node X2Bools_0 = _X2Bools_0_T_4 @[booth2_encoder.scala 25:30 36:22]
    node output_X2_lo = cat(X2Bools_1, X2Bools_0) @[booth2_encoder.scala 42:28]
    node X2Bools_3 = _X2Bools_3_T_4 @[booth2_encoder.scala 25:30 36:22]
    node X2Bools_2 = _X2Bools_2_T_4 @[booth2_encoder.scala 25:30 36:22]
    node output_X2_hi = cat(X2Bools_3, X2Bools_2) @[booth2_encoder.scala 42:28]
    node _output_X2_T = cat(output_X2_hi, output_X2_lo) @[booth2_encoder.scala 42:28]
    node invBools_1 = _invBools_1_T_1 @[booth2_encoder.scala 26:30 37:22]
    node invBools_0 = _invBools_0_T_1 @[booth2_encoder.scala 26:30 37:22]
    node output_inv_lo = cat(invBools_1, invBools_0) @[booth2_encoder.scala 43:29]
    node invBools_3 = _invBools_3_T_1 @[booth2_encoder.scala 26:30 37:22]
    node invBools_2 = _invBools_2_T_1 @[booth2_encoder.scala 26:30 37:22]
    node output_inv_hi = cat(invBools_3, invBools_2) @[booth2_encoder.scala 43:29]
    node _output_inv_T = cat(output_inv_hi, output_inv_lo) @[booth2_encoder.scala 43:29]
    node set0Bools_1 = _set0Bools_1_T_4 @[booth2_encoder.scala 27:30 38:22]
    node set0Bools_0 = _set0Bools_0_T_4 @[booth2_encoder.scala 27:30 38:22]
    node output_set0_lo = cat(set0Bools_1, set0Bools_0) @[booth2_encoder.scala 44:30]
    node set0Bools_3 = _set0Bools_3_T_4 @[booth2_encoder.scala 27:30 38:22]
    node set0Bools_2 = _set0Bools_2_T_4 @[booth2_encoder.scala 27:30 38:22]
    node output_set0_hi = cat(set0Bools_3, set0Bools_2) @[booth2_encoder.scala 44:30]
    node _output_set0_T = cat(output_set0_hi, output_set0_lo) @[booth2_encoder.scala 44:30]
    output_X2 <= _output_X2_T @[booth2_encoder.scala 42:17]
    output_inv <= _output_inv_T @[booth2_encoder.scala 43:17]
    output_set0 <= _output_set0_T @[booth2_encoder.scala 44:17]

  module ppGenerator :
    input clock : Clock
    input reset : UInt<1>
    input inputData_multiplicand : UInt<8>
    input inputCtrl_X2 : UInt<4>
    input inputCtrl_inv : UInt<4>
    input inputCtrl_Set0 : UInt<4>
    output outputData_pp0_out : UInt<16>
    output outputData_pp1_out : UInt<16>
    output outputData_pp2_out : UInt<16>
    output outputData_pp3_out : UInt<16>
    output outputData_sig_out : UInt<16>

    reg pp0 : UInt<16>, clock with :
      reset => (UInt<1>("h0"), pp0) @[pp_generator.scala 39:29]
    reg pp1 : UInt<16>, clock with :
      reset => (UInt<1>("h0"), pp1) @[pp_generator.scala 40:29]
    reg pp2 : UInt<16>, clock with :
      reset => (UInt<1>("h0"), pp2) @[pp_generator.scala 41:29]
    reg pp3 : UInt<16>, clock with :
      reset => (UInt<1>("h0"), pp3) @[pp_generator.scala 42:29]
    reg sign_com : UInt<16>, clock with :
      reset => (UInt<1>("h0"), sign_com) @[pp_generator.scala 43:29]
    node _pp_X2_0_T = bits(inputCtrl_X2, 0, 0) @[pp_generator.scala 46:38]
    node _pp_X2_0_T_1 = cat(inputData_multiplicand, UInt<1>("h0")) @[Cat.scala 33:92]
    node _pp_X2_0_T_2 = bits(inputData_multiplicand, 7, 7) @[pp_generator.scala 47:51]
    node _pp_X2_0_T_3 = cat(_pp_X2_0_T_2, inputData_multiplicand) @[Cat.scala 33:92]
    node _pp_X2_0_T_4 = mux(_pp_X2_0_T, _pp_X2_0_T_1, _pp_X2_0_T_3) @[pp_generator.scala 46:25]
    node _pp_set_0_T = bits(inputCtrl_Set0, 0, 0) @[pp_generator.scala 48:40]
    node pp_X2_0 = _pp_X2_0_T_4 @[pp_generator.scala 34:26 46:19]
    node _pp_set_0_T_1 = mux(_pp_set_0_T, UInt<9>("h0"), pp_X2_0) @[pp_generator.scala 48:25]
    node _pp_inv_0_T = bits(inputCtrl_inv, 0, 0) @[pp_generator.scala 49:39]
    node pp_set_0 = _pp_set_0_T_1 @[pp_generator.scala 35:26 48:19]
    node _pp_inv_0_T_1 = not(pp_set_0) @[pp_generator.scala 49:44]
    node _pp_inv_0_T_2 = mux(_pp_inv_0_T, _pp_inv_0_T_1, pp_set_0) @[pp_generator.scala 49:25]
    node _E_inv_0_T = bits(inputCtrl_Set0, 0, 0) @[pp_generator.scala 50:40]
    node _E_inv_0_T_1 = bits(inputCtrl_inv, 0, 0) @[pp_generator.scala 50:58]
    node _E_inv_0_T_2 = bits(_E_inv_0_T_1, 0, 0) @[pp_generator.scala 50:62]
    node _E_inv_0_T_3 = bits(inputCtrl_inv, 0, 0) @[pp_generator.scala 50:84]
    node _E_inv_0_T_4 = bits(inputData_multiplicand, 7, 7) @[pp_generator.scala 50:110]
    node _E_inv_0_T_5 = xor(_E_inv_0_T_3, _E_inv_0_T_4) @[pp_generator.scala 50:87]
    node _E_inv_0_T_6 = bits(_E_inv_0_T_5, 0, 0) @[pp_generator.scala 50:124]
    node _E_inv_0_T_7 = mux(_E_inv_0_T, _E_inv_0_T_2, _E_inv_0_T_6) @[pp_generator.scala 50:25]
    node E_inv_0 = _E_inv_0_T_7 @[pp_generator.scala 32:26 50:19]
    node _E_0_T = not(E_inv_0) @[pp_generator.scala 51:22]
    node pp_inv_0 = _pp_inv_0_T_2 @[pp_generator.scala 36:26 49:19]
    node pp_temp_0_lo = cat(E_inv_0, pp_inv_0) @[Cat.scala 33:92]
    node E_0 = _E_0_T @[pp_generator.scala 31:26 51:19]
    node pp_temp_0_hi_hi = cat(UInt<4>("h0"), E_0) @[Cat.scala 33:92]
    node pp_temp_0_hi = cat(pp_temp_0_hi_hi, E_inv_0) @[Cat.scala 33:92]
    node _pp_temp_0_T = cat(pp_temp_0_hi, pp_temp_0_lo) @[Cat.scala 33:92]
    node _pp_X2_1_T = bits(inputCtrl_X2, 1, 1) @[pp_generator.scala 46:38]
    node _pp_X2_1_T_1 = cat(inputData_multiplicand, UInt<1>("h0")) @[Cat.scala 33:92]
    node _pp_X2_1_T_2 = bits(inputData_multiplicand, 7, 7) @[pp_generator.scala 47:51]
    node _pp_X2_1_T_3 = cat(_pp_X2_1_T_2, inputData_multiplicand) @[Cat.scala 33:92]
    node _pp_X2_1_T_4 = mux(_pp_X2_1_T, _pp_X2_1_T_1, _pp_X2_1_T_3) @[pp_generator.scala 46:25]
    node _pp_set_1_T = bits(inputCtrl_Set0, 1, 1) @[pp_generator.scala 48:40]
    node pp_X2_1 = _pp_X2_1_T_4 @[pp_generator.scala 34:26 46:19]
    node _pp_set_1_T_1 = mux(_pp_set_1_T, UInt<9>("h0"), pp_X2_1) @[pp_generator.scala 48:25]
    node _pp_inv_1_T = bits(inputCtrl_inv, 1, 1) @[pp_generator.scala 49:39]
    node pp_set_1 = _pp_set_1_T_1 @[pp_generator.scala 35:26 48:19]
    node _pp_inv_1_T_1 = not(pp_set_1) @[pp_generator.scala 49:44]
    node _pp_inv_1_T_2 = mux(_pp_inv_1_T, _pp_inv_1_T_1, pp_set_1) @[pp_generator.scala 49:25]
    node _E_inv_1_T = bits(inputCtrl_Set0, 1, 1) @[pp_generator.scala 50:40]
    node _E_inv_1_T_1 = bits(inputCtrl_inv, 1, 1) @[pp_generator.scala 50:58]
    node _E_inv_1_T_2 = bits(_E_inv_1_T_1, 0, 0) @[pp_generator.scala 50:62]
    node _E_inv_1_T_3 = bits(inputCtrl_inv, 1, 1) @[pp_generator.scala 50:84]
    node _E_inv_1_T_4 = bits(inputData_multiplicand, 7, 7) @[pp_generator.scala 50:110]
    node _E_inv_1_T_5 = xor(_E_inv_1_T_3, _E_inv_1_T_4) @[pp_generator.scala 50:87]
    node _E_inv_1_T_6 = bits(_E_inv_1_T_5, 0, 0) @[pp_generator.scala 50:124]
    node _E_inv_1_T_7 = mux(_E_inv_1_T, _E_inv_1_T_2, _E_inv_1_T_6) @[pp_generator.scala 50:25]
    node E_inv_1 = _E_inv_1_T_7 @[pp_generator.scala 32:26 50:19]
    node _E_1_T = not(E_inv_1) @[pp_generator.scala 51:22]
    node E_1 = _E_1_T @[pp_generator.scala 31:26 51:19]
    node pp_inv_1 = _pp_inv_1_T_2 @[pp_generator.scala 36:26 49:19]
    node pp_temp_1_lo = cat(E_1, pp_inv_1) @[Cat.scala 33:92]
    node pp_temp_1_hi = cat(UInt<5>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
    node _pp_temp_1_T = cat(pp_temp_1_hi, pp_temp_1_lo) @[Cat.scala 33:92]
    node _pp_X2_2_T = bits(inputCtrl_X2, 2, 2) @[pp_generator.scala 46:38]
    node _pp_X2_2_T_1 = cat(inputData_multiplicand, UInt<1>("h0")) @[Cat.scala 33:92]
    node _pp_X2_2_T_2 = bits(inputData_multiplicand, 7, 7) @[pp_generator.scala 47:51]
    node _pp_X2_2_T_3 = cat(_pp_X2_2_T_2, inputData_multiplicand) @[Cat.scala 33:92]
    node _pp_X2_2_T_4 = mux(_pp_X2_2_T, _pp_X2_2_T_1, _pp_X2_2_T_3) @[pp_generator.scala 46:25]
    node _pp_set_2_T = bits(inputCtrl_Set0, 2, 2) @[pp_generator.scala 48:40]
    node pp_X2_2 = _pp_X2_2_T_4 @[pp_generator.scala 34:26 46:19]
    node _pp_set_2_T_1 = mux(_pp_set_2_T, UInt<9>("h0"), pp_X2_2) @[pp_generator.scala 48:25]
    node _pp_inv_2_T = bits(inputCtrl_inv, 2, 2) @[pp_generator.scala 49:39]
    node pp_set_2 = _pp_set_2_T_1 @[pp_generator.scala 35:26 48:19]
    node _pp_inv_2_T_1 = not(pp_set_2) @[pp_generator.scala 49:44]
    node _pp_inv_2_T_2 = mux(_pp_inv_2_T, _pp_inv_2_T_1, pp_set_2) @[pp_generator.scala 49:25]
    node _E_inv_2_T = bits(inputCtrl_Set0, 2, 2) @[pp_generator.scala 50:40]
    node _E_inv_2_T_1 = bits(inputCtrl_inv, 2, 2) @[pp_generator.scala 50:58]
    node _E_inv_2_T_2 = bits(_E_inv_2_T_1, 0, 0) @[pp_generator.scala 50:62]
    node _E_inv_2_T_3 = bits(inputCtrl_inv, 2, 2) @[pp_generator.scala 50:84]
    node _E_inv_2_T_4 = bits(inputData_multiplicand, 7, 7) @[pp_generator.scala 50:110]
    node _E_inv_2_T_5 = xor(_E_inv_2_T_3, _E_inv_2_T_4) @[pp_generator.scala 50:87]
    node _E_inv_2_T_6 = bits(_E_inv_2_T_5, 0, 0) @[pp_generator.scala 50:124]
    node _E_inv_2_T_7 = mux(_E_inv_2_T, _E_inv_2_T_2, _E_inv_2_T_6) @[pp_generator.scala 50:25]
    node E_inv_2 = _E_inv_2_T_7 @[pp_generator.scala 32:26 50:19]
    node _E_2_T = not(E_inv_2) @[pp_generator.scala 51:22]
    node E_2 = _E_2_T @[pp_generator.scala 31:26 51:19]
    node pp_inv_2 = _pp_inv_2_T_2 @[pp_generator.scala 36:26 49:19]
    node pp_temp_2_lo = cat(E_2, pp_inv_2) @[Cat.scala 33:92]
    node pp_temp_2_hi = cat(UInt<5>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
    node _pp_temp_2_T = cat(pp_temp_2_hi, pp_temp_2_lo) @[Cat.scala 33:92]
    node _pp_X2_3_T = bits(inputCtrl_X2, 3, 3) @[pp_generator.scala 46:38]
    node _pp_X2_3_T_1 = cat(inputData_multiplicand, UInt<1>("h0")) @[Cat.scala 33:92]
    node _pp_X2_3_T_2 = bits(inputData_multiplicand, 7, 7) @[pp_generator.scala 47:51]
    node _pp_X2_3_T_3 = cat(_pp_X2_3_T_2, inputData_multiplicand) @[Cat.scala 33:92]
    node _pp_X2_3_T_4 = mux(_pp_X2_3_T, _pp_X2_3_T_1, _pp_X2_3_T_3) @[pp_generator.scala 46:25]
    node _pp_set_3_T = bits(inputCtrl_Set0, 3, 3) @[pp_generator.scala 48:40]
    node pp_X2_3 = _pp_X2_3_T_4 @[pp_generator.scala 34:26 46:19]
    node _pp_set_3_T_1 = mux(_pp_set_3_T, UInt<9>("h0"), pp_X2_3) @[pp_generator.scala 48:25]
    node _pp_inv_3_T = bits(inputCtrl_inv, 3, 3) @[pp_generator.scala 49:39]
    node pp_set_3 = _pp_set_3_T_1 @[pp_generator.scala 35:26 48:19]
    node _pp_inv_3_T_1 = not(pp_set_3) @[pp_generator.scala 49:44]
    node _pp_inv_3_T_2 = mux(_pp_inv_3_T, _pp_inv_3_T_1, pp_set_3) @[pp_generator.scala 49:25]
    node _E_inv_3_T = bits(inputCtrl_Set0, 3, 3) @[pp_generator.scala 50:40]
    node _E_inv_3_T_1 = bits(inputCtrl_inv, 3, 3) @[pp_generator.scala 50:58]
    node _E_inv_3_T_2 = bits(_E_inv_3_T_1, 0, 0) @[pp_generator.scala 50:62]
    node _E_inv_3_T_3 = bits(inputCtrl_inv, 3, 3) @[pp_generator.scala 50:84]
    node _E_inv_3_T_4 = bits(inputData_multiplicand, 7, 7) @[pp_generator.scala 50:110]
    node _E_inv_3_T_5 = xor(_E_inv_3_T_3, _E_inv_3_T_4) @[pp_generator.scala 50:87]
    node _E_inv_3_T_6 = bits(_E_inv_3_T_5, 0, 0) @[pp_generator.scala 50:124]
    node _E_inv_3_T_7 = mux(_E_inv_3_T, _E_inv_3_T_2, _E_inv_3_T_6) @[pp_generator.scala 50:25]
    node E_inv_3 = _E_inv_3_T_7 @[pp_generator.scala 32:26 50:19]
    node _E_3_T = not(E_inv_3) @[pp_generator.scala 51:22]
    node E_3 = _E_3_T @[pp_generator.scala 31:26 51:19]
    node pp_inv_3 = _pp_inv_3_T_2 @[pp_generator.scala 36:26 49:19]
    node pp_temp_3_lo = cat(E_3, pp_inv_3) @[Cat.scala 33:92]
    node pp_temp_3_hi = cat(UInt<5>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
    node _pp_temp_3_T = cat(pp_temp_3_hi, pp_temp_3_lo) @[Cat.scala 33:92]
    node pp_temp_1 = _pp_temp_1_T @[pp_generator.scala 37:26 57:24]
    node _pp1_T = bits(pp_temp_1, 13, 0) @[pp_generator.scala 62:31]
    node _pp1_T_1 = bits(inputCtrl_inv, 0, 0) @[pp_generator.scala 62:69]
    node pp1_hi = cat(_pp1_T, UInt<1>("h0")) @[Cat.scala 33:92]
    node _pp1_T_2 = cat(pp1_hi, _pp1_T_1) @[Cat.scala 33:92]
    node pp_temp_2 = _pp_temp_2_T @[pp_generator.scala 37:26 57:24]
    node _pp2_T = bits(pp_temp_2, 11, 0) @[pp_generator.scala 63:31]
    node _pp2_T_1 = bits(inputCtrl_inv, 1, 1) @[pp_generator.scala 63:69]
    node pp2_lo = cat(_pp2_T_1, UInt<2>("h0")) @[Cat.scala 33:92]
    node pp2_hi = cat(_pp2_T, UInt<1>("h0")) @[Cat.scala 33:92]
    node _pp2_T_2 = cat(pp2_hi, pp2_lo) @[Cat.scala 33:92]
    node pp_temp_3 = _pp_temp_3_T @[pp_generator.scala 37:26 57:24]
    node _pp3_T = bits(pp_temp_3, 9, 0) @[pp_generator.scala 64:31]
    node _pp3_T_1 = bits(inputCtrl_inv, 2, 2) @[pp_generator.scala 64:69]
    node pp3_lo = cat(_pp3_T_1, UInt<4>("h0")) @[Cat.scala 33:92]
    node pp3_hi = cat(_pp3_T, UInt<1>("h0")) @[Cat.scala 33:92]
    node _pp3_T_2 = cat(pp3_hi, pp3_lo) @[Cat.scala 33:92]
    node _sign_com_T = bits(inputCtrl_inv, 3, 3) @[pp_generator.scala 65:54]
    node sign_com_hi = cat(UInt<9>("h0"), _sign_com_T) @[Cat.scala 33:92]
    node _sign_com_T_1 = cat(sign_com_hi, UInt<6>("h0")) @[Cat.scala 33:92]
    node pp_temp_0 = _pp_temp_0_T @[pp_generator.scala 37:26 54:24]
    outputData_pp0_out <= pp0 @[pp_generator.scala 67:25]
    outputData_pp1_out <= pp1 @[pp_generator.scala 68:25]
    outputData_pp2_out <= pp2 @[pp_generator.scala 69:25]
    outputData_pp3_out <= pp3 @[pp_generator.scala 70:25]
    outputData_sig_out <= sign_com @[pp_generator.scala 71:25]
    pp0 <= mux(reset, UInt<16>("h0"), pp_temp_0) @[pp_generator.scala 39:{29,29} 61:14]
    pp1 <= mux(reset, UInt<16>("h0"), _pp1_T_2) @[pp_generator.scala 40:{29,29} 62:14]
    pp2 <= mux(reset, UInt<16>("h0"), _pp2_T_2) @[pp_generator.scala 41:{29,29} 63:14]
    pp3 <= mux(reset, UInt<16>("h0"), _pp3_T_2) @[pp_generator.scala 42:{29,29} 64:14]
    sign_com <= mux(reset, UInt<16>("h0"), _sign_com_T_1) @[pp_generator.scala 43:{29,29} 65:14]

  module CSA4_2 :
    input clock : Clock
    input reset : UInt<1>
    input input_i1 : UInt<1>
    input input_i2 : UInt<1>
    input input_i3 : UInt<1>
    input input_i4 : UInt<1>
    input input_cin : UInt<1>
    output output_S : UInt<1>
    output output_C : UInt<1>
    output output_cout : UInt<1>

    node _output_S_T = xor(input_i1, input_i2) @[pp_compressor4_2.scala 38:29]
    node _output_S_T_1 = xor(_output_S_T, input_i3) @[pp_compressor4_2.scala 38:40]
    node _output_S_T_2 = xor(_output_S_T_1, input_i4) @[pp_compressor4_2.scala 38:51]
    node _output_S_T_3 = xor(_output_S_T_2, input_cin) @[pp_compressor4_2.scala 38:62]
    node _output_C_T = xor(input_i1, input_i2) @[pp_compressor4_2.scala 39:43]
    node _output_C_T_1 = xor(_output_C_T, input_i3) @[pp_compressor4_2.scala 39:54]
    node _output_C_T_2 = xor(_output_C_T_1, input_i4) @[pp_compressor4_2.scala 39:65]
    node _output_C_T_3 = not(_output_C_T_2) @[pp_compressor4_2.scala 39:32]
    node _output_C_T_4 = and(input_i1, _output_C_T_3) @[pp_compressor4_2.scala 39:30]
    node _output_C_T_5 = xor(input_i1, input_i2) @[pp_compressor4_2.scala 40:43]
    node _output_C_T_6 = xor(_output_C_T_5, input_i3) @[pp_compressor4_2.scala 40:54]
    node _output_C_T_7 = xor(_output_C_T_6, input_i4) @[pp_compressor4_2.scala 40:65]
    node _output_C_T_8 = and(input_cin, _output_C_T_7) @[pp_compressor4_2.scala 40:31]
    node _output_C_T_9 = or(_output_C_T_4, _output_C_T_8) @[pp_compressor4_2.scala 39:78]
    node _output_cout_T = and(input_i4, input_i3) @[pp_compressor4_2.scala 41:30]
    node _output_cout_T_1 = and(input_i3, input_i2) @[pp_compressor4_2.scala 41:54]
    node _output_cout_T_2 = or(_output_cout_T, _output_cout_T_1) @[pp_compressor4_2.scala 41:42]
    node _output_cout_T_3 = and(input_i4, input_i2) @[pp_compressor4_2.scala 41:78]
    node _output_cout_T_4 = or(_output_cout_T_2, _output_cout_T_3) @[pp_compressor4_2.scala 41:66]
    output_S <= _output_S_T_3 @[pp_compressor4_2.scala 38:17]
    output_C <= _output_C_T_9 @[pp_compressor4_2.scala 39:17]
    output_cout <= _output_cout_T_4 @[pp_compressor4_2.scala 41:17]

  module pp_compressor4_2 :
    input clock : Clock
    input reset : UInt<1>
    input input_pp0_in : UInt<16>
    input input_pp1_in : UInt<16>
    input input_pp2_in : UInt<16>
    input input_pp3_in : UInt<16>
    output output_C : UInt<16>
    output output_S : UInt<16>

    inst csa4_2 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_1 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_2 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_3 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_4 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_5 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_6 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_7 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_8 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_9 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_10 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_11 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_12 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_13 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_14 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_15 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    node _csa4_2_input_i1_T = bits(input_pp0_in, 0, 0) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T = bits(input_pp1_in, 0, 0) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T = bits(input_pp2_in, 0, 0) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T = bits(input_pp3_in, 0, 0) @[pp_compressor4_2.scala 60:41]
    node _s_comb_0_T = bits(csa4_2.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_0_T = bits(csa4_2.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_1_T = bits(csa4_2.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_1 = bits(input_pp0_in, 1, 1) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_1 = bits(input_pp1_in, 1, 1) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_1 = bits(input_pp2_in, 1, 1) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_1 = bits(input_pp3_in, 1, 1) @[pp_compressor4_2.scala 60:41]
    node _s_comb_1_T = bits(csa4_2_1.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_1_T = bits(csa4_2_1.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_2_T = bits(csa4_2_1.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_2 = bits(input_pp0_in, 2, 2) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_2 = bits(input_pp1_in, 2, 2) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_2 = bits(input_pp2_in, 2, 2) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_2 = bits(input_pp3_in, 2, 2) @[pp_compressor4_2.scala 60:41]
    node _s_comb_2_T = bits(csa4_2_2.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_2_T = bits(csa4_2_2.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_3_T = bits(csa4_2_2.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_3 = bits(input_pp0_in, 3, 3) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_3 = bits(input_pp1_in, 3, 3) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_3 = bits(input_pp2_in, 3, 3) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_3 = bits(input_pp3_in, 3, 3) @[pp_compressor4_2.scala 60:41]
    node _s_comb_3_T = bits(csa4_2_3.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_3_T = bits(csa4_2_3.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_4_T = bits(csa4_2_3.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_4 = bits(input_pp0_in, 4, 4) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_4 = bits(input_pp1_in, 4, 4) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_4 = bits(input_pp2_in, 4, 4) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_4 = bits(input_pp3_in, 4, 4) @[pp_compressor4_2.scala 60:41]
    node _s_comb_4_T = bits(csa4_2_4.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_4_T = bits(csa4_2_4.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_5_T = bits(csa4_2_4.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_5 = bits(input_pp0_in, 5, 5) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_5 = bits(input_pp1_in, 5, 5) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_5 = bits(input_pp2_in, 5, 5) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_5 = bits(input_pp3_in, 5, 5) @[pp_compressor4_2.scala 60:41]
    node _s_comb_5_T = bits(csa4_2_5.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_5_T = bits(csa4_2_5.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_6_T = bits(csa4_2_5.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_6 = bits(input_pp0_in, 6, 6) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_6 = bits(input_pp1_in, 6, 6) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_6 = bits(input_pp2_in, 6, 6) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_6 = bits(input_pp3_in, 6, 6) @[pp_compressor4_2.scala 60:41]
    node _s_comb_6_T = bits(csa4_2_6.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_6_T = bits(csa4_2_6.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_7_T = bits(csa4_2_6.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_7 = bits(input_pp0_in, 7, 7) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_7 = bits(input_pp1_in, 7, 7) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_7 = bits(input_pp2_in, 7, 7) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_7 = bits(input_pp3_in, 7, 7) @[pp_compressor4_2.scala 60:41]
    node _s_comb_7_T = bits(csa4_2_7.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_7_T = bits(csa4_2_7.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_8_T = bits(csa4_2_7.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_8 = bits(input_pp0_in, 8, 8) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_8 = bits(input_pp1_in, 8, 8) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_8 = bits(input_pp2_in, 8, 8) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_8 = bits(input_pp3_in, 8, 8) @[pp_compressor4_2.scala 60:41]
    node _s_comb_8_T = bits(csa4_2_8.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_8_T = bits(csa4_2_8.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_9_T = bits(csa4_2_8.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_9 = bits(input_pp0_in, 9, 9) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_9 = bits(input_pp1_in, 9, 9) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_9 = bits(input_pp2_in, 9, 9) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_9 = bits(input_pp3_in, 9, 9) @[pp_compressor4_2.scala 60:41]
    node _s_comb_9_T = bits(csa4_2_9.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_9_T = bits(csa4_2_9.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_10_T = bits(csa4_2_9.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_10 = bits(input_pp0_in, 10, 10) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_10 = bits(input_pp1_in, 10, 10) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_10 = bits(input_pp2_in, 10, 10) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_10 = bits(input_pp3_in, 10, 10) @[pp_compressor4_2.scala 60:41]
    node _s_comb_10_T = bits(csa4_2_10.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_10_T = bits(csa4_2_10.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_11_T = bits(csa4_2_10.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_11 = bits(input_pp0_in, 11, 11) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_11 = bits(input_pp1_in, 11, 11) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_11 = bits(input_pp2_in, 11, 11) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_11 = bits(input_pp3_in, 11, 11) @[pp_compressor4_2.scala 60:41]
    node _s_comb_11_T = bits(csa4_2_11.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_11_T = bits(csa4_2_11.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_12_T = bits(csa4_2_11.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_12 = bits(input_pp0_in, 12, 12) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_12 = bits(input_pp1_in, 12, 12) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_12 = bits(input_pp2_in, 12, 12) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_12 = bits(input_pp3_in, 12, 12) @[pp_compressor4_2.scala 60:41]
    node _s_comb_12_T = bits(csa4_2_12.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_12_T = bits(csa4_2_12.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_13_T = bits(csa4_2_12.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_13 = bits(input_pp0_in, 13, 13) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_13 = bits(input_pp1_in, 13, 13) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_13 = bits(input_pp2_in, 13, 13) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_13 = bits(input_pp3_in, 13, 13) @[pp_compressor4_2.scala 60:41]
    node _s_comb_13_T = bits(csa4_2_13.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_13_T = bits(csa4_2_13.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_14_T = bits(csa4_2_13.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_14 = bits(input_pp0_in, 14, 14) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_14 = bits(input_pp1_in, 14, 14) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_14 = bits(input_pp2_in, 14, 14) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_14 = bits(input_pp3_in, 14, 14) @[pp_compressor4_2.scala 60:41]
    node _s_comb_14_T = bits(csa4_2_14.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_14_T = bits(csa4_2_14.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_15_T = bits(csa4_2_14.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_15 = bits(input_pp0_in, 15, 15) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_15 = bits(input_pp1_in, 15, 15) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_15 = bits(input_pp2_in, 15, 15) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_15 = bits(input_pp3_in, 15, 15) @[pp_compressor4_2.scala 60:41]
    node _s_comb_15_T = bits(csa4_2_15.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_15_T = bits(csa4_2_15.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_16_T = bits(csa4_2_15.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node s_comb_1 = _s_comb_1_T @[pp_compressor4_2.scala 51:26 63:26]
    node s_comb_0 = _s_comb_0_T @[pp_compressor4_2.scala 51:26 63:26]
    node output_S_lo_lo_lo = cat(s_comb_1, s_comb_0) @[pp_compressor4_2.scala 68:26]
    node s_comb_3 = _s_comb_3_T @[pp_compressor4_2.scala 51:26 63:26]
    node s_comb_2 = _s_comb_2_T @[pp_compressor4_2.scala 51:26 63:26]
    node output_S_lo_lo_hi = cat(s_comb_3, s_comb_2) @[pp_compressor4_2.scala 68:26]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[pp_compressor4_2.scala 68:26]
    node s_comb_5 = _s_comb_5_T @[pp_compressor4_2.scala 51:26 63:26]
    node s_comb_4 = _s_comb_4_T @[pp_compressor4_2.scala 51:26 63:26]
    node output_S_lo_hi_lo = cat(s_comb_5, s_comb_4) @[pp_compressor4_2.scala 68:26]
    node s_comb_7 = _s_comb_7_T @[pp_compressor4_2.scala 51:26 63:26]
    node s_comb_6 = _s_comb_6_T @[pp_compressor4_2.scala 51:26 63:26]
    node output_S_lo_hi_hi = cat(s_comb_7, s_comb_6) @[pp_compressor4_2.scala 68:26]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[pp_compressor4_2.scala 68:26]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[pp_compressor4_2.scala 68:26]
    node s_comb_9 = _s_comb_9_T @[pp_compressor4_2.scala 51:26 63:26]
    node s_comb_8 = _s_comb_8_T @[pp_compressor4_2.scala 51:26 63:26]
    node output_S_hi_lo_lo = cat(s_comb_9, s_comb_8) @[pp_compressor4_2.scala 68:26]
    node s_comb_11 = _s_comb_11_T @[pp_compressor4_2.scala 51:26 63:26]
    node s_comb_10 = _s_comb_10_T @[pp_compressor4_2.scala 51:26 63:26]
    node output_S_hi_lo_hi = cat(s_comb_11, s_comb_10) @[pp_compressor4_2.scala 68:26]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[pp_compressor4_2.scala 68:26]
    node s_comb_13 = _s_comb_13_T @[pp_compressor4_2.scala 51:26 63:26]
    node s_comb_12 = _s_comb_12_T @[pp_compressor4_2.scala 51:26 63:26]
    node output_S_hi_hi_lo = cat(s_comb_13, s_comb_12) @[pp_compressor4_2.scala 68:26]
    node s_comb_15 = _s_comb_15_T @[pp_compressor4_2.scala 51:26 63:26]
    node s_comb_14 = _s_comb_14_T @[pp_compressor4_2.scala 51:26 63:26]
    node output_S_hi_hi_hi = cat(s_comb_15, s_comb_14) @[pp_compressor4_2.scala 68:26]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[pp_compressor4_2.scala 68:26]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[pp_compressor4_2.scala 68:26]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[pp_compressor4_2.scala 68:26]
    node c_comb_1 = _c_comb_1_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_0 = _c_comb_0_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_int_lo_lo_lo = cat(c_comb_1, c_comb_0) @[pp_compressor4_2.scala 69:26]
    node c_comb_3 = _c_comb_3_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_2 = _c_comb_2_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_int_lo_lo_hi = cat(c_comb_3, c_comb_2) @[pp_compressor4_2.scala 69:26]
    node c_comb_int_lo_lo = cat(c_comb_int_lo_lo_hi, c_comb_int_lo_lo_lo) @[pp_compressor4_2.scala 69:26]
    node c_comb_5 = _c_comb_5_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_4 = _c_comb_4_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_int_lo_hi_lo = cat(c_comb_5, c_comb_4) @[pp_compressor4_2.scala 69:26]
    node c_comb_7 = _c_comb_7_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_6 = _c_comb_6_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_int_lo_hi_hi = cat(c_comb_7, c_comb_6) @[pp_compressor4_2.scala 69:26]
    node c_comb_int_lo_hi = cat(c_comb_int_lo_hi_hi, c_comb_int_lo_hi_lo) @[pp_compressor4_2.scala 69:26]
    node c_comb_int_lo = cat(c_comb_int_lo_hi, c_comb_int_lo_lo) @[pp_compressor4_2.scala 69:26]
    node c_comb_9 = _c_comb_9_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_8 = _c_comb_8_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_int_hi_lo_lo = cat(c_comb_9, c_comb_8) @[pp_compressor4_2.scala 69:26]
    node c_comb_11 = _c_comb_11_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_10 = _c_comb_10_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_int_hi_lo_hi = cat(c_comb_11, c_comb_10) @[pp_compressor4_2.scala 69:26]
    node c_comb_int_hi_lo = cat(c_comb_int_hi_lo_hi, c_comb_int_hi_lo_lo) @[pp_compressor4_2.scala 69:26]
    node c_comb_13 = _c_comb_13_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_12 = _c_comb_12_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_int_hi_hi_lo = cat(c_comb_13, c_comb_12) @[pp_compressor4_2.scala 69:26]
    node c_comb_15 = _c_comb_15_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_14 = _c_comb_14_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_int_hi_hi_hi = cat(c_comb_15, c_comb_14) @[pp_compressor4_2.scala 69:26]
    node c_comb_int_hi_hi = cat(c_comb_int_hi_hi_hi, c_comb_int_hi_hi_lo) @[pp_compressor4_2.scala 69:26]
    node c_comb_int_hi = cat(c_comb_int_hi_hi, c_comb_int_hi_lo) @[pp_compressor4_2.scala 69:26]
    node _c_comb_int_T = cat(c_comb_int_hi, c_comb_int_lo) @[pp_compressor4_2.scala 69:26]
    node c_comb_int = _c_comb_int_T @[pp_compressor4_2.scala 53:26 69:16]
    node _output_C_T = bits(c_comb_int, 14, 0) @[pp_compressor4_2.scala 70:33]
    node _output_C_T_1 = cat(_output_C_T, UInt<1>("h0")) @[Cat.scala 33:92]
    node c_temp_0 = UInt<1>("h0") @[pp_compressor4_2.scala 48:22 49:15]
    node c_temp_1 = _c_temp_1_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_2 = _c_temp_2_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_3 = _c_temp_3_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_4 = _c_temp_4_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_5 = _c_temp_5_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_6 = _c_temp_6_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_7 = _c_temp_7_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_8 = _c_temp_8_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_9 = _c_temp_9_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_10 = _c_temp_10_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_11 = _c_temp_11_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_12 = _c_temp_12_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_13 = _c_temp_13_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_14 = _c_temp_14_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_15 = _c_temp_15_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_16 = _c_temp_16_T @[pp_compressor4_2.scala 48:22 65:26]
    output_C <= _output_C_T_1 @[pp_compressor4_2.scala 70:16]
    output_S <= _output_S_T @[pp_compressor4_2.scala 68:16]
    csa4_2.clock <= clock
    csa4_2.reset <= reset
    csa4_2.input_i1 <= _csa4_2_input_i1_T @[pp_compressor4_2.scala 57:26]
    csa4_2.input_i2 <= _csa4_2_input_i2_T @[pp_compressor4_2.scala 58:26]
    csa4_2.input_i3 <= _csa4_2_input_i3_T @[pp_compressor4_2.scala 59:26]
    csa4_2.input_i4 <= _csa4_2_input_i4_T @[pp_compressor4_2.scala 60:26]
    csa4_2.input_cin <= c_temp_0 @[pp_compressor4_2.scala 61:26]
    csa4_2_1.clock <= clock
    csa4_2_1.reset <= reset
    csa4_2_1.input_i1 <= _csa4_2_input_i1_T_1 @[pp_compressor4_2.scala 57:26]
    csa4_2_1.input_i2 <= _csa4_2_input_i2_T_1 @[pp_compressor4_2.scala 58:26]
    csa4_2_1.input_i3 <= _csa4_2_input_i3_T_1 @[pp_compressor4_2.scala 59:26]
    csa4_2_1.input_i4 <= _csa4_2_input_i4_T_1 @[pp_compressor4_2.scala 60:26]
    csa4_2_1.input_cin <= c_temp_1 @[pp_compressor4_2.scala 61:26]
    csa4_2_2.clock <= clock
    csa4_2_2.reset <= reset
    csa4_2_2.input_i1 <= _csa4_2_input_i1_T_2 @[pp_compressor4_2.scala 57:26]
    csa4_2_2.input_i2 <= _csa4_2_input_i2_T_2 @[pp_compressor4_2.scala 58:26]
    csa4_2_2.input_i3 <= _csa4_2_input_i3_T_2 @[pp_compressor4_2.scala 59:26]
    csa4_2_2.input_i4 <= _csa4_2_input_i4_T_2 @[pp_compressor4_2.scala 60:26]
    csa4_2_2.input_cin <= c_temp_2 @[pp_compressor4_2.scala 61:26]
    csa4_2_3.clock <= clock
    csa4_2_3.reset <= reset
    csa4_2_3.input_i1 <= _csa4_2_input_i1_T_3 @[pp_compressor4_2.scala 57:26]
    csa4_2_3.input_i2 <= _csa4_2_input_i2_T_3 @[pp_compressor4_2.scala 58:26]
    csa4_2_3.input_i3 <= _csa4_2_input_i3_T_3 @[pp_compressor4_2.scala 59:26]
    csa4_2_3.input_i4 <= _csa4_2_input_i4_T_3 @[pp_compressor4_2.scala 60:26]
    csa4_2_3.input_cin <= c_temp_3 @[pp_compressor4_2.scala 61:26]
    csa4_2_4.clock <= clock
    csa4_2_4.reset <= reset
    csa4_2_4.input_i1 <= _csa4_2_input_i1_T_4 @[pp_compressor4_2.scala 57:26]
    csa4_2_4.input_i2 <= _csa4_2_input_i2_T_4 @[pp_compressor4_2.scala 58:26]
    csa4_2_4.input_i3 <= _csa4_2_input_i3_T_4 @[pp_compressor4_2.scala 59:26]
    csa4_2_4.input_i4 <= _csa4_2_input_i4_T_4 @[pp_compressor4_2.scala 60:26]
    csa4_2_4.input_cin <= c_temp_4 @[pp_compressor4_2.scala 61:26]
    csa4_2_5.clock <= clock
    csa4_2_5.reset <= reset
    csa4_2_5.input_i1 <= _csa4_2_input_i1_T_5 @[pp_compressor4_2.scala 57:26]
    csa4_2_5.input_i2 <= _csa4_2_input_i2_T_5 @[pp_compressor4_2.scala 58:26]
    csa4_2_5.input_i3 <= _csa4_2_input_i3_T_5 @[pp_compressor4_2.scala 59:26]
    csa4_2_5.input_i4 <= _csa4_2_input_i4_T_5 @[pp_compressor4_2.scala 60:26]
    csa4_2_5.input_cin <= c_temp_5 @[pp_compressor4_2.scala 61:26]
    csa4_2_6.clock <= clock
    csa4_2_6.reset <= reset
    csa4_2_6.input_i1 <= _csa4_2_input_i1_T_6 @[pp_compressor4_2.scala 57:26]
    csa4_2_6.input_i2 <= _csa4_2_input_i2_T_6 @[pp_compressor4_2.scala 58:26]
    csa4_2_6.input_i3 <= _csa4_2_input_i3_T_6 @[pp_compressor4_2.scala 59:26]
    csa4_2_6.input_i4 <= _csa4_2_input_i4_T_6 @[pp_compressor4_2.scala 60:26]
    csa4_2_6.input_cin <= c_temp_6 @[pp_compressor4_2.scala 61:26]
    csa4_2_7.clock <= clock
    csa4_2_7.reset <= reset
    csa4_2_7.input_i1 <= _csa4_2_input_i1_T_7 @[pp_compressor4_2.scala 57:26]
    csa4_2_7.input_i2 <= _csa4_2_input_i2_T_7 @[pp_compressor4_2.scala 58:26]
    csa4_2_7.input_i3 <= _csa4_2_input_i3_T_7 @[pp_compressor4_2.scala 59:26]
    csa4_2_7.input_i4 <= _csa4_2_input_i4_T_7 @[pp_compressor4_2.scala 60:26]
    csa4_2_7.input_cin <= c_temp_7 @[pp_compressor4_2.scala 61:26]
    csa4_2_8.clock <= clock
    csa4_2_8.reset <= reset
    csa4_2_8.input_i1 <= _csa4_2_input_i1_T_8 @[pp_compressor4_2.scala 57:26]
    csa4_2_8.input_i2 <= _csa4_2_input_i2_T_8 @[pp_compressor4_2.scala 58:26]
    csa4_2_8.input_i3 <= _csa4_2_input_i3_T_8 @[pp_compressor4_2.scala 59:26]
    csa4_2_8.input_i4 <= _csa4_2_input_i4_T_8 @[pp_compressor4_2.scala 60:26]
    csa4_2_8.input_cin <= c_temp_8 @[pp_compressor4_2.scala 61:26]
    csa4_2_9.clock <= clock
    csa4_2_9.reset <= reset
    csa4_2_9.input_i1 <= _csa4_2_input_i1_T_9 @[pp_compressor4_2.scala 57:26]
    csa4_2_9.input_i2 <= _csa4_2_input_i2_T_9 @[pp_compressor4_2.scala 58:26]
    csa4_2_9.input_i3 <= _csa4_2_input_i3_T_9 @[pp_compressor4_2.scala 59:26]
    csa4_2_9.input_i4 <= _csa4_2_input_i4_T_9 @[pp_compressor4_2.scala 60:26]
    csa4_2_9.input_cin <= c_temp_9 @[pp_compressor4_2.scala 61:26]
    csa4_2_10.clock <= clock
    csa4_2_10.reset <= reset
    csa4_2_10.input_i1 <= _csa4_2_input_i1_T_10 @[pp_compressor4_2.scala 57:26]
    csa4_2_10.input_i2 <= _csa4_2_input_i2_T_10 @[pp_compressor4_2.scala 58:26]
    csa4_2_10.input_i3 <= _csa4_2_input_i3_T_10 @[pp_compressor4_2.scala 59:26]
    csa4_2_10.input_i4 <= _csa4_2_input_i4_T_10 @[pp_compressor4_2.scala 60:26]
    csa4_2_10.input_cin <= c_temp_10 @[pp_compressor4_2.scala 61:26]
    csa4_2_11.clock <= clock
    csa4_2_11.reset <= reset
    csa4_2_11.input_i1 <= _csa4_2_input_i1_T_11 @[pp_compressor4_2.scala 57:26]
    csa4_2_11.input_i2 <= _csa4_2_input_i2_T_11 @[pp_compressor4_2.scala 58:26]
    csa4_2_11.input_i3 <= _csa4_2_input_i3_T_11 @[pp_compressor4_2.scala 59:26]
    csa4_2_11.input_i4 <= _csa4_2_input_i4_T_11 @[pp_compressor4_2.scala 60:26]
    csa4_2_11.input_cin <= c_temp_11 @[pp_compressor4_2.scala 61:26]
    csa4_2_12.clock <= clock
    csa4_2_12.reset <= reset
    csa4_2_12.input_i1 <= _csa4_2_input_i1_T_12 @[pp_compressor4_2.scala 57:26]
    csa4_2_12.input_i2 <= _csa4_2_input_i2_T_12 @[pp_compressor4_2.scala 58:26]
    csa4_2_12.input_i3 <= _csa4_2_input_i3_T_12 @[pp_compressor4_2.scala 59:26]
    csa4_2_12.input_i4 <= _csa4_2_input_i4_T_12 @[pp_compressor4_2.scala 60:26]
    csa4_2_12.input_cin <= c_temp_12 @[pp_compressor4_2.scala 61:26]
    csa4_2_13.clock <= clock
    csa4_2_13.reset <= reset
    csa4_2_13.input_i1 <= _csa4_2_input_i1_T_13 @[pp_compressor4_2.scala 57:26]
    csa4_2_13.input_i2 <= _csa4_2_input_i2_T_13 @[pp_compressor4_2.scala 58:26]
    csa4_2_13.input_i3 <= _csa4_2_input_i3_T_13 @[pp_compressor4_2.scala 59:26]
    csa4_2_13.input_i4 <= _csa4_2_input_i4_T_13 @[pp_compressor4_2.scala 60:26]
    csa4_2_13.input_cin <= c_temp_13 @[pp_compressor4_2.scala 61:26]
    csa4_2_14.clock <= clock
    csa4_2_14.reset <= reset
    csa4_2_14.input_i1 <= _csa4_2_input_i1_T_14 @[pp_compressor4_2.scala 57:26]
    csa4_2_14.input_i2 <= _csa4_2_input_i2_T_14 @[pp_compressor4_2.scala 58:26]
    csa4_2_14.input_i3 <= _csa4_2_input_i3_T_14 @[pp_compressor4_2.scala 59:26]
    csa4_2_14.input_i4 <= _csa4_2_input_i4_T_14 @[pp_compressor4_2.scala 60:26]
    csa4_2_14.input_cin <= c_temp_14 @[pp_compressor4_2.scala 61:26]
    csa4_2_15.clock <= clock
    csa4_2_15.reset <= reset
    csa4_2_15.input_i1 <= _csa4_2_input_i1_T_15 @[pp_compressor4_2.scala 57:26]
    csa4_2_15.input_i2 <= _csa4_2_input_i2_T_15 @[pp_compressor4_2.scala 58:26]
    csa4_2_15.input_i3 <= _csa4_2_input_i3_T_15 @[pp_compressor4_2.scala 59:26]
    csa4_2_15.input_i4 <= _csa4_2_input_i4_T_15 @[pp_compressor4_2.scala 60:26]
    csa4_2_15.input_cin <= c_temp_15 @[pp_compressor4_2.scala 61:26]

  module pp_compressor3_2 :
    input clock : Clock
    input reset : UInt<1>
    input input_pp0_in : UInt<16>
    input input_pp1_in : UInt<16>
    input input_pp2_in : UInt<16>
    output output_S : UInt<16>
    output output_C : UInt<16>

    node _g_comb_0_T = bits(input_pp0_in, 0, 0) @[pp_compressor3_2.scala 28:35]
    node _g_comb_0_T_1 = bits(input_pp1_in, 0, 0) @[pp_compressor3_2.scala 28:53]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_0_T = bits(input_pp0_in, 0, 0) @[pp_compressor3_2.scala 29:35]
    node _p_comb_0_T_1 = bits(input_pp1_in, 0, 0) @[pp_compressor3_2.scala 29:53]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_0_T = bits(input_pp2_in, 0, 0) @[pp_compressor3_2.scala 30:46]
    node _s_comb_0_T_1 = bits(_s_comb_0_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_0 = _p_comb_0_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_0_T_2 = xor(p_comb_0, _s_comb_0_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_0_T = bits(input_pp2_in, 0, 0) @[pp_compressor3_2.scala 31:34]
    node _c_comb_0_T_1 = bits(_c_comb_0_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_0_T_2 = and(_c_comb_0_T_1, p_comb_0) @[pp_compressor3_2.scala 31:45]
    node g_comb_0 = _g_comb_0_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_0_T_3 = or(_c_comb_0_T_2, g_comb_0) @[pp_compressor3_2.scala 31:57]
    node _g_comb_1_T = bits(input_pp0_in, 1, 1) @[pp_compressor3_2.scala 28:35]
    node _g_comb_1_T_1 = bits(input_pp1_in, 1, 1) @[pp_compressor3_2.scala 28:53]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_1_T = bits(input_pp0_in, 1, 1) @[pp_compressor3_2.scala 29:35]
    node _p_comb_1_T_1 = bits(input_pp1_in, 1, 1) @[pp_compressor3_2.scala 29:53]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_1_T = bits(input_pp2_in, 1, 1) @[pp_compressor3_2.scala 30:46]
    node _s_comb_1_T_1 = bits(_s_comb_1_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_1 = _p_comb_1_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_1_T_2 = xor(p_comb_1, _s_comb_1_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_1_T = bits(input_pp2_in, 1, 1) @[pp_compressor3_2.scala 31:34]
    node _c_comb_1_T_1 = bits(_c_comb_1_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_1_T_2 = and(_c_comb_1_T_1, p_comb_1) @[pp_compressor3_2.scala 31:45]
    node g_comb_1 = _g_comb_1_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_1_T_3 = or(_c_comb_1_T_2, g_comb_1) @[pp_compressor3_2.scala 31:57]
    node _g_comb_2_T = bits(input_pp0_in, 2, 2) @[pp_compressor3_2.scala 28:35]
    node _g_comb_2_T_1 = bits(input_pp1_in, 2, 2) @[pp_compressor3_2.scala 28:53]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_2_T = bits(input_pp0_in, 2, 2) @[pp_compressor3_2.scala 29:35]
    node _p_comb_2_T_1 = bits(input_pp1_in, 2, 2) @[pp_compressor3_2.scala 29:53]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_2_T = bits(input_pp2_in, 2, 2) @[pp_compressor3_2.scala 30:46]
    node _s_comb_2_T_1 = bits(_s_comb_2_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_2 = _p_comb_2_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_2_T_2 = xor(p_comb_2, _s_comb_2_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_2_T = bits(input_pp2_in, 2, 2) @[pp_compressor3_2.scala 31:34]
    node _c_comb_2_T_1 = bits(_c_comb_2_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_2_T_2 = and(_c_comb_2_T_1, p_comb_2) @[pp_compressor3_2.scala 31:45]
    node g_comb_2 = _g_comb_2_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_2_T_3 = or(_c_comb_2_T_2, g_comb_2) @[pp_compressor3_2.scala 31:57]
    node _g_comb_3_T = bits(input_pp0_in, 3, 3) @[pp_compressor3_2.scala 28:35]
    node _g_comb_3_T_1 = bits(input_pp1_in, 3, 3) @[pp_compressor3_2.scala 28:53]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_3_T = bits(input_pp0_in, 3, 3) @[pp_compressor3_2.scala 29:35]
    node _p_comb_3_T_1 = bits(input_pp1_in, 3, 3) @[pp_compressor3_2.scala 29:53]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_3_T = bits(input_pp2_in, 3, 3) @[pp_compressor3_2.scala 30:46]
    node _s_comb_3_T_1 = bits(_s_comb_3_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_3 = _p_comb_3_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_3_T_2 = xor(p_comb_3, _s_comb_3_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_3_T = bits(input_pp2_in, 3, 3) @[pp_compressor3_2.scala 31:34]
    node _c_comb_3_T_1 = bits(_c_comb_3_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_3_T_2 = and(_c_comb_3_T_1, p_comb_3) @[pp_compressor3_2.scala 31:45]
    node g_comb_3 = _g_comb_3_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_3_T_3 = or(_c_comb_3_T_2, g_comb_3) @[pp_compressor3_2.scala 31:57]
    node _g_comb_4_T = bits(input_pp0_in, 4, 4) @[pp_compressor3_2.scala 28:35]
    node _g_comb_4_T_1 = bits(input_pp1_in, 4, 4) @[pp_compressor3_2.scala 28:53]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_4_T = bits(input_pp0_in, 4, 4) @[pp_compressor3_2.scala 29:35]
    node _p_comb_4_T_1 = bits(input_pp1_in, 4, 4) @[pp_compressor3_2.scala 29:53]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_4_T = bits(input_pp2_in, 4, 4) @[pp_compressor3_2.scala 30:46]
    node _s_comb_4_T_1 = bits(_s_comb_4_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_4 = _p_comb_4_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_4_T_2 = xor(p_comb_4, _s_comb_4_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_4_T = bits(input_pp2_in, 4, 4) @[pp_compressor3_2.scala 31:34]
    node _c_comb_4_T_1 = bits(_c_comb_4_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_4_T_2 = and(_c_comb_4_T_1, p_comb_4) @[pp_compressor3_2.scala 31:45]
    node g_comb_4 = _g_comb_4_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_4_T_3 = or(_c_comb_4_T_2, g_comb_4) @[pp_compressor3_2.scala 31:57]
    node _g_comb_5_T = bits(input_pp0_in, 5, 5) @[pp_compressor3_2.scala 28:35]
    node _g_comb_5_T_1 = bits(input_pp1_in, 5, 5) @[pp_compressor3_2.scala 28:53]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_5_T = bits(input_pp0_in, 5, 5) @[pp_compressor3_2.scala 29:35]
    node _p_comb_5_T_1 = bits(input_pp1_in, 5, 5) @[pp_compressor3_2.scala 29:53]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_5_T = bits(input_pp2_in, 5, 5) @[pp_compressor3_2.scala 30:46]
    node _s_comb_5_T_1 = bits(_s_comb_5_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_5 = _p_comb_5_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_5_T_2 = xor(p_comb_5, _s_comb_5_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_5_T = bits(input_pp2_in, 5, 5) @[pp_compressor3_2.scala 31:34]
    node _c_comb_5_T_1 = bits(_c_comb_5_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_5_T_2 = and(_c_comb_5_T_1, p_comb_5) @[pp_compressor3_2.scala 31:45]
    node g_comb_5 = _g_comb_5_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_5_T_3 = or(_c_comb_5_T_2, g_comb_5) @[pp_compressor3_2.scala 31:57]
    node _g_comb_6_T = bits(input_pp0_in, 6, 6) @[pp_compressor3_2.scala 28:35]
    node _g_comb_6_T_1 = bits(input_pp1_in, 6, 6) @[pp_compressor3_2.scala 28:53]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_6_T = bits(input_pp0_in, 6, 6) @[pp_compressor3_2.scala 29:35]
    node _p_comb_6_T_1 = bits(input_pp1_in, 6, 6) @[pp_compressor3_2.scala 29:53]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_6_T = bits(input_pp2_in, 6, 6) @[pp_compressor3_2.scala 30:46]
    node _s_comb_6_T_1 = bits(_s_comb_6_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_6 = _p_comb_6_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_6_T_2 = xor(p_comb_6, _s_comb_6_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_6_T = bits(input_pp2_in, 6, 6) @[pp_compressor3_2.scala 31:34]
    node _c_comb_6_T_1 = bits(_c_comb_6_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_6_T_2 = and(_c_comb_6_T_1, p_comb_6) @[pp_compressor3_2.scala 31:45]
    node g_comb_6 = _g_comb_6_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_6_T_3 = or(_c_comb_6_T_2, g_comb_6) @[pp_compressor3_2.scala 31:57]
    node _g_comb_7_T = bits(input_pp0_in, 7, 7) @[pp_compressor3_2.scala 28:35]
    node _g_comb_7_T_1 = bits(input_pp1_in, 7, 7) @[pp_compressor3_2.scala 28:53]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_7_T = bits(input_pp0_in, 7, 7) @[pp_compressor3_2.scala 29:35]
    node _p_comb_7_T_1 = bits(input_pp1_in, 7, 7) @[pp_compressor3_2.scala 29:53]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_7_T = bits(input_pp2_in, 7, 7) @[pp_compressor3_2.scala 30:46]
    node _s_comb_7_T_1 = bits(_s_comb_7_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_7 = _p_comb_7_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_7_T_2 = xor(p_comb_7, _s_comb_7_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_7_T = bits(input_pp2_in, 7, 7) @[pp_compressor3_2.scala 31:34]
    node _c_comb_7_T_1 = bits(_c_comb_7_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_7_T_2 = and(_c_comb_7_T_1, p_comb_7) @[pp_compressor3_2.scala 31:45]
    node g_comb_7 = _g_comb_7_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_7_T_3 = or(_c_comb_7_T_2, g_comb_7) @[pp_compressor3_2.scala 31:57]
    node _g_comb_8_T = bits(input_pp0_in, 8, 8) @[pp_compressor3_2.scala 28:35]
    node _g_comb_8_T_1 = bits(input_pp1_in, 8, 8) @[pp_compressor3_2.scala 28:53]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_8_T = bits(input_pp0_in, 8, 8) @[pp_compressor3_2.scala 29:35]
    node _p_comb_8_T_1 = bits(input_pp1_in, 8, 8) @[pp_compressor3_2.scala 29:53]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_8_T = bits(input_pp2_in, 8, 8) @[pp_compressor3_2.scala 30:46]
    node _s_comb_8_T_1 = bits(_s_comb_8_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_8 = _p_comb_8_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_8_T_2 = xor(p_comb_8, _s_comb_8_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_8_T = bits(input_pp2_in, 8, 8) @[pp_compressor3_2.scala 31:34]
    node _c_comb_8_T_1 = bits(_c_comb_8_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_8_T_2 = and(_c_comb_8_T_1, p_comb_8) @[pp_compressor3_2.scala 31:45]
    node g_comb_8 = _g_comb_8_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_8_T_3 = or(_c_comb_8_T_2, g_comb_8) @[pp_compressor3_2.scala 31:57]
    node _g_comb_9_T = bits(input_pp0_in, 9, 9) @[pp_compressor3_2.scala 28:35]
    node _g_comb_9_T_1 = bits(input_pp1_in, 9, 9) @[pp_compressor3_2.scala 28:53]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_9_T = bits(input_pp0_in, 9, 9) @[pp_compressor3_2.scala 29:35]
    node _p_comb_9_T_1 = bits(input_pp1_in, 9, 9) @[pp_compressor3_2.scala 29:53]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_9_T = bits(input_pp2_in, 9, 9) @[pp_compressor3_2.scala 30:46]
    node _s_comb_9_T_1 = bits(_s_comb_9_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_9 = _p_comb_9_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_9_T_2 = xor(p_comb_9, _s_comb_9_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_9_T = bits(input_pp2_in, 9, 9) @[pp_compressor3_2.scala 31:34]
    node _c_comb_9_T_1 = bits(_c_comb_9_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_9_T_2 = and(_c_comb_9_T_1, p_comb_9) @[pp_compressor3_2.scala 31:45]
    node g_comb_9 = _g_comb_9_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_9_T_3 = or(_c_comb_9_T_2, g_comb_9) @[pp_compressor3_2.scala 31:57]
    node _g_comb_10_T = bits(input_pp0_in, 10, 10) @[pp_compressor3_2.scala 28:35]
    node _g_comb_10_T_1 = bits(input_pp1_in, 10, 10) @[pp_compressor3_2.scala 28:53]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_10_T = bits(input_pp0_in, 10, 10) @[pp_compressor3_2.scala 29:35]
    node _p_comb_10_T_1 = bits(input_pp1_in, 10, 10) @[pp_compressor3_2.scala 29:53]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_10_T = bits(input_pp2_in, 10, 10) @[pp_compressor3_2.scala 30:46]
    node _s_comb_10_T_1 = bits(_s_comb_10_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_10 = _p_comb_10_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_10_T_2 = xor(p_comb_10, _s_comb_10_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_10_T = bits(input_pp2_in, 10, 10) @[pp_compressor3_2.scala 31:34]
    node _c_comb_10_T_1 = bits(_c_comb_10_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_10_T_2 = and(_c_comb_10_T_1, p_comb_10) @[pp_compressor3_2.scala 31:45]
    node g_comb_10 = _g_comb_10_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_10_T_3 = or(_c_comb_10_T_2, g_comb_10) @[pp_compressor3_2.scala 31:57]
    node _g_comb_11_T = bits(input_pp0_in, 11, 11) @[pp_compressor3_2.scala 28:35]
    node _g_comb_11_T_1 = bits(input_pp1_in, 11, 11) @[pp_compressor3_2.scala 28:53]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_11_T = bits(input_pp0_in, 11, 11) @[pp_compressor3_2.scala 29:35]
    node _p_comb_11_T_1 = bits(input_pp1_in, 11, 11) @[pp_compressor3_2.scala 29:53]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_11_T = bits(input_pp2_in, 11, 11) @[pp_compressor3_2.scala 30:46]
    node _s_comb_11_T_1 = bits(_s_comb_11_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_11 = _p_comb_11_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_11_T_2 = xor(p_comb_11, _s_comb_11_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_11_T = bits(input_pp2_in, 11, 11) @[pp_compressor3_2.scala 31:34]
    node _c_comb_11_T_1 = bits(_c_comb_11_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_11_T_2 = and(_c_comb_11_T_1, p_comb_11) @[pp_compressor3_2.scala 31:45]
    node g_comb_11 = _g_comb_11_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_11_T_3 = or(_c_comb_11_T_2, g_comb_11) @[pp_compressor3_2.scala 31:57]
    node _g_comb_12_T = bits(input_pp0_in, 12, 12) @[pp_compressor3_2.scala 28:35]
    node _g_comb_12_T_1 = bits(input_pp1_in, 12, 12) @[pp_compressor3_2.scala 28:53]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_12_T = bits(input_pp0_in, 12, 12) @[pp_compressor3_2.scala 29:35]
    node _p_comb_12_T_1 = bits(input_pp1_in, 12, 12) @[pp_compressor3_2.scala 29:53]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_12_T = bits(input_pp2_in, 12, 12) @[pp_compressor3_2.scala 30:46]
    node _s_comb_12_T_1 = bits(_s_comb_12_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_12 = _p_comb_12_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_12_T_2 = xor(p_comb_12, _s_comb_12_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_12_T = bits(input_pp2_in, 12, 12) @[pp_compressor3_2.scala 31:34]
    node _c_comb_12_T_1 = bits(_c_comb_12_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_12_T_2 = and(_c_comb_12_T_1, p_comb_12) @[pp_compressor3_2.scala 31:45]
    node g_comb_12 = _g_comb_12_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_12_T_3 = or(_c_comb_12_T_2, g_comb_12) @[pp_compressor3_2.scala 31:57]
    node _g_comb_13_T = bits(input_pp0_in, 13, 13) @[pp_compressor3_2.scala 28:35]
    node _g_comb_13_T_1 = bits(input_pp1_in, 13, 13) @[pp_compressor3_2.scala 28:53]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_13_T = bits(input_pp0_in, 13, 13) @[pp_compressor3_2.scala 29:35]
    node _p_comb_13_T_1 = bits(input_pp1_in, 13, 13) @[pp_compressor3_2.scala 29:53]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_13_T = bits(input_pp2_in, 13, 13) @[pp_compressor3_2.scala 30:46]
    node _s_comb_13_T_1 = bits(_s_comb_13_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_13 = _p_comb_13_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_13_T_2 = xor(p_comb_13, _s_comb_13_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_13_T = bits(input_pp2_in, 13, 13) @[pp_compressor3_2.scala 31:34]
    node _c_comb_13_T_1 = bits(_c_comb_13_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_13_T_2 = and(_c_comb_13_T_1, p_comb_13) @[pp_compressor3_2.scala 31:45]
    node g_comb_13 = _g_comb_13_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_13_T_3 = or(_c_comb_13_T_2, g_comb_13) @[pp_compressor3_2.scala 31:57]
    node _g_comb_14_T = bits(input_pp0_in, 14, 14) @[pp_compressor3_2.scala 28:35]
    node _g_comb_14_T_1 = bits(input_pp1_in, 14, 14) @[pp_compressor3_2.scala 28:53]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_14_T = bits(input_pp0_in, 14, 14) @[pp_compressor3_2.scala 29:35]
    node _p_comb_14_T_1 = bits(input_pp1_in, 14, 14) @[pp_compressor3_2.scala 29:53]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_14_T = bits(input_pp2_in, 14, 14) @[pp_compressor3_2.scala 30:46]
    node _s_comb_14_T_1 = bits(_s_comb_14_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_14 = _p_comb_14_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_14_T_2 = xor(p_comb_14, _s_comb_14_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_14_T = bits(input_pp2_in, 14, 14) @[pp_compressor3_2.scala 31:34]
    node _c_comb_14_T_1 = bits(_c_comb_14_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_14_T_2 = and(_c_comb_14_T_1, p_comb_14) @[pp_compressor3_2.scala 31:45]
    node g_comb_14 = _g_comb_14_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_14_T_3 = or(_c_comb_14_T_2, g_comb_14) @[pp_compressor3_2.scala 31:57]
    node _g_comb_15_T = bits(input_pp0_in, 15, 15) @[pp_compressor3_2.scala 28:35]
    node _g_comb_15_T_1 = bits(input_pp1_in, 15, 15) @[pp_compressor3_2.scala 28:53]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_15_T = bits(input_pp0_in, 15, 15) @[pp_compressor3_2.scala 29:35]
    node _p_comb_15_T_1 = bits(input_pp1_in, 15, 15) @[pp_compressor3_2.scala 29:53]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_15_T = bits(input_pp2_in, 15, 15) @[pp_compressor3_2.scala 30:46]
    node _s_comb_15_T_1 = bits(_s_comb_15_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_15 = _p_comb_15_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_15_T_2 = xor(p_comb_15, _s_comb_15_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_15_T = bits(input_pp2_in, 15, 15) @[pp_compressor3_2.scala 31:34]
    node _c_comb_15_T_1 = bits(_c_comb_15_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_15_T_2 = and(_c_comb_15_T_1, p_comb_15) @[pp_compressor3_2.scala 31:45]
    node g_comb_15 = _g_comb_15_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_15_T_3 = or(_c_comb_15_T_2, g_comb_15) @[pp_compressor3_2.scala 31:57]
    node s_comb_1 = _s_comb_1_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node s_comb_0 = _s_comb_0_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node output_S_lo_lo_lo = cat(s_comb_1, s_comb_0) @[pp_compressor3_2.scala 34:24]
    node s_comb_3 = _s_comb_3_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node s_comb_2 = _s_comb_2_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node output_S_lo_lo_hi = cat(s_comb_3, s_comb_2) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[pp_compressor3_2.scala 34:24]
    node s_comb_5 = _s_comb_5_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node s_comb_4 = _s_comb_4_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node output_S_lo_hi_lo = cat(s_comb_5, s_comb_4) @[pp_compressor3_2.scala 34:24]
    node s_comb_7 = _s_comb_7_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node s_comb_6 = _s_comb_6_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node output_S_lo_hi_hi = cat(s_comb_7, s_comb_6) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[pp_compressor3_2.scala 34:24]
    node s_comb_9 = _s_comb_9_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node s_comb_8 = _s_comb_8_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node output_S_hi_lo_lo = cat(s_comb_9, s_comb_8) @[pp_compressor3_2.scala 34:24]
    node s_comb_11 = _s_comb_11_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node s_comb_10 = _s_comb_10_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node output_S_hi_lo_hi = cat(s_comb_11, s_comb_10) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[pp_compressor3_2.scala 34:24]
    node s_comb_13 = _s_comb_13_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node s_comb_12 = _s_comb_12_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node output_S_hi_hi_lo = cat(s_comb_13, s_comb_12) @[pp_compressor3_2.scala 34:24]
    node s_comb_15 = _s_comb_15_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node s_comb_14 = _s_comb_14_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node output_S_hi_hi_hi = cat(s_comb_15, s_comb_14) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[pp_compressor3_2.scala 34:24]
    node c_comb_1 = _c_comb_1_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node c_comb_0 = _c_comb_0_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node output_C_lo_lo_lo = cat(c_comb_1, c_comb_0) @[pp_compressor3_2.scala 35:29]
    node c_comb_3 = _c_comb_3_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node c_comb_2 = _c_comb_2_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node output_C_lo_lo_hi = cat(c_comb_3, c_comb_2) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo = cat(output_C_lo_lo_hi, output_C_lo_lo_lo) @[pp_compressor3_2.scala 35:29]
    node c_comb_5 = _c_comb_5_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node c_comb_4 = _c_comb_4_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node output_C_lo_hi_lo = cat(c_comb_5, c_comb_4) @[pp_compressor3_2.scala 35:29]
    node c_comb_7 = _c_comb_7_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node c_comb_6 = _c_comb_6_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node output_C_lo_hi_hi = cat(c_comb_7, c_comb_6) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi = cat(output_C_lo_hi_hi, output_C_lo_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo = cat(output_C_lo_hi, output_C_lo_lo) @[pp_compressor3_2.scala 35:29]
    node c_comb_9 = _c_comb_9_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node c_comb_8 = _c_comb_8_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node output_C_hi_lo_lo = cat(c_comb_9, c_comb_8) @[pp_compressor3_2.scala 35:29]
    node c_comb_11 = _c_comb_11_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node c_comb_10 = _c_comb_10_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node output_C_hi_lo_hi = cat(c_comb_11, c_comb_10) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo = cat(output_C_hi_lo_hi, output_C_hi_lo_lo) @[pp_compressor3_2.scala 35:29]
    node c_comb_13 = _c_comb_13_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node c_comb_12 = _c_comb_12_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node output_C_hi_hi_lo = cat(c_comb_13, c_comb_12) @[pp_compressor3_2.scala 35:29]
    node c_comb_15 = _c_comb_15_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node c_comb_14 = _c_comb_14_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node output_C_hi_hi_hi = cat(c_comb_15, c_comb_14) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi = cat(output_C_hi_hi_hi, output_C_hi_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi = cat(output_C_hi_hi, output_C_hi_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T = cat(output_C_hi, output_C_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T_1 = bits(_output_C_T, 14, 0) @[pp_compressor3_2.scala 35:36]
    node _output_C_T_2 = cat(_output_C_T_1, UInt<1>("h0")) @[Cat.scala 33:92]
    output_S <= _output_S_T @[pp_compressor3_2.scala 34:14]
    output_C <= _output_C_T_2 @[pp_compressor3_2.scala 35:14]

  module RCA :
    input clock : Clock
    input reset : UInt<1>
    input input_a_in : UInt<16>
    input input_b_in : UInt<16>
    input input_c_in : UInt<1>
    output output_S : UInt<16>
    output output_C : UInt<16>

    node _c_comb_0_T = bits(input_c_in, 0, 0) @[rca.scala 27:29]
    node _g_comb_0_T = bits(input_a_in, 0, 0) @[rca.scala 30:35]
    node _g_comb_0_T_1 = bits(input_b_in, 0, 0) @[rca.scala 30:51]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[rca.scala 30:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_0_T = bits(input_a_in, 0, 0) @[rca.scala 31:35]
    node _p_comb_0_T_1 = bits(input_b_in, 0, 0) @[rca.scala 31:51]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[rca.scala 31:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_0 = _p_comb_0_T_3 @[rca.scala 23:22 31:21]
    node c_comb_0 = _c_comb_0_T @[rca.scala 25:22 27:15]
    node _s_comb_0_T = xor(p_comb_0, c_comb_0) @[rca.scala 32:34]
    node _c_comb_1_T = and(c_comb_0, p_comb_0) @[rca.scala 33:34]
    node g_comb_0 = _g_comb_0_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_1_T_1 = or(_c_comb_1_T, g_comb_0) @[rca.scala 33:46]
    node _g_comb_1_T = bits(input_a_in, 1, 1) @[rca.scala 30:35]
    node _g_comb_1_T_1 = bits(input_b_in, 1, 1) @[rca.scala 30:51]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[rca.scala 30:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_1_T = bits(input_a_in, 1, 1) @[rca.scala 31:35]
    node _p_comb_1_T_1 = bits(input_b_in, 1, 1) @[rca.scala 31:51]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[rca.scala 31:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_1 = _p_comb_1_T_3 @[rca.scala 23:22 31:21]
    node c_comb_1 = _c_comb_1_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_1_T = xor(p_comb_1, c_comb_1) @[rca.scala 32:34]
    node _c_comb_2_T = and(c_comb_1, p_comb_1) @[rca.scala 33:34]
    node g_comb_1 = _g_comb_1_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_2_T_1 = or(_c_comb_2_T, g_comb_1) @[rca.scala 33:46]
    node _g_comb_2_T = bits(input_a_in, 2, 2) @[rca.scala 30:35]
    node _g_comb_2_T_1 = bits(input_b_in, 2, 2) @[rca.scala 30:51]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[rca.scala 30:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_2_T = bits(input_a_in, 2, 2) @[rca.scala 31:35]
    node _p_comb_2_T_1 = bits(input_b_in, 2, 2) @[rca.scala 31:51]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[rca.scala 31:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_2 = _p_comb_2_T_3 @[rca.scala 23:22 31:21]
    node c_comb_2 = _c_comb_2_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_2_T = xor(p_comb_2, c_comb_2) @[rca.scala 32:34]
    node _c_comb_3_T = and(c_comb_2, p_comb_2) @[rca.scala 33:34]
    node g_comb_2 = _g_comb_2_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_3_T_1 = or(_c_comb_3_T, g_comb_2) @[rca.scala 33:46]
    node _g_comb_3_T = bits(input_a_in, 3, 3) @[rca.scala 30:35]
    node _g_comb_3_T_1 = bits(input_b_in, 3, 3) @[rca.scala 30:51]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[rca.scala 30:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_3_T = bits(input_a_in, 3, 3) @[rca.scala 31:35]
    node _p_comb_3_T_1 = bits(input_b_in, 3, 3) @[rca.scala 31:51]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[rca.scala 31:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_3 = _p_comb_3_T_3 @[rca.scala 23:22 31:21]
    node c_comb_3 = _c_comb_3_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_3_T = xor(p_comb_3, c_comb_3) @[rca.scala 32:34]
    node _c_comb_4_T = and(c_comb_3, p_comb_3) @[rca.scala 33:34]
    node g_comb_3 = _g_comb_3_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_4_T_1 = or(_c_comb_4_T, g_comb_3) @[rca.scala 33:46]
    node _g_comb_4_T = bits(input_a_in, 4, 4) @[rca.scala 30:35]
    node _g_comb_4_T_1 = bits(input_b_in, 4, 4) @[rca.scala 30:51]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[rca.scala 30:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_4_T = bits(input_a_in, 4, 4) @[rca.scala 31:35]
    node _p_comb_4_T_1 = bits(input_b_in, 4, 4) @[rca.scala 31:51]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[rca.scala 31:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_4 = _p_comb_4_T_3 @[rca.scala 23:22 31:21]
    node c_comb_4 = _c_comb_4_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_4_T = xor(p_comb_4, c_comb_4) @[rca.scala 32:34]
    node _c_comb_5_T = and(c_comb_4, p_comb_4) @[rca.scala 33:34]
    node g_comb_4 = _g_comb_4_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_5_T_1 = or(_c_comb_5_T, g_comb_4) @[rca.scala 33:46]
    node _g_comb_5_T = bits(input_a_in, 5, 5) @[rca.scala 30:35]
    node _g_comb_5_T_1 = bits(input_b_in, 5, 5) @[rca.scala 30:51]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[rca.scala 30:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_5_T = bits(input_a_in, 5, 5) @[rca.scala 31:35]
    node _p_comb_5_T_1 = bits(input_b_in, 5, 5) @[rca.scala 31:51]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[rca.scala 31:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_5 = _p_comb_5_T_3 @[rca.scala 23:22 31:21]
    node c_comb_5 = _c_comb_5_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_5_T = xor(p_comb_5, c_comb_5) @[rca.scala 32:34]
    node _c_comb_6_T = and(c_comb_5, p_comb_5) @[rca.scala 33:34]
    node g_comb_5 = _g_comb_5_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_6_T_1 = or(_c_comb_6_T, g_comb_5) @[rca.scala 33:46]
    node _g_comb_6_T = bits(input_a_in, 6, 6) @[rca.scala 30:35]
    node _g_comb_6_T_1 = bits(input_b_in, 6, 6) @[rca.scala 30:51]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[rca.scala 30:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_6_T = bits(input_a_in, 6, 6) @[rca.scala 31:35]
    node _p_comb_6_T_1 = bits(input_b_in, 6, 6) @[rca.scala 31:51]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[rca.scala 31:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_6 = _p_comb_6_T_3 @[rca.scala 23:22 31:21]
    node c_comb_6 = _c_comb_6_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_6_T = xor(p_comb_6, c_comb_6) @[rca.scala 32:34]
    node _c_comb_7_T = and(c_comb_6, p_comb_6) @[rca.scala 33:34]
    node g_comb_6 = _g_comb_6_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_7_T_1 = or(_c_comb_7_T, g_comb_6) @[rca.scala 33:46]
    node _g_comb_7_T = bits(input_a_in, 7, 7) @[rca.scala 30:35]
    node _g_comb_7_T_1 = bits(input_b_in, 7, 7) @[rca.scala 30:51]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[rca.scala 30:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_7_T = bits(input_a_in, 7, 7) @[rca.scala 31:35]
    node _p_comb_7_T_1 = bits(input_b_in, 7, 7) @[rca.scala 31:51]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[rca.scala 31:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_7 = _p_comb_7_T_3 @[rca.scala 23:22 31:21]
    node c_comb_7 = _c_comb_7_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_7_T = xor(p_comb_7, c_comb_7) @[rca.scala 32:34]
    node _c_comb_8_T = and(c_comb_7, p_comb_7) @[rca.scala 33:34]
    node g_comb_7 = _g_comb_7_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_8_T_1 = or(_c_comb_8_T, g_comb_7) @[rca.scala 33:46]
    node _g_comb_8_T = bits(input_a_in, 8, 8) @[rca.scala 30:35]
    node _g_comb_8_T_1 = bits(input_b_in, 8, 8) @[rca.scala 30:51]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[rca.scala 30:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_8_T = bits(input_a_in, 8, 8) @[rca.scala 31:35]
    node _p_comb_8_T_1 = bits(input_b_in, 8, 8) @[rca.scala 31:51]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[rca.scala 31:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_8 = _p_comb_8_T_3 @[rca.scala 23:22 31:21]
    node c_comb_8 = _c_comb_8_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_8_T = xor(p_comb_8, c_comb_8) @[rca.scala 32:34]
    node _c_comb_9_T = and(c_comb_8, p_comb_8) @[rca.scala 33:34]
    node g_comb_8 = _g_comb_8_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_9_T_1 = or(_c_comb_9_T, g_comb_8) @[rca.scala 33:46]
    node _g_comb_9_T = bits(input_a_in, 9, 9) @[rca.scala 30:35]
    node _g_comb_9_T_1 = bits(input_b_in, 9, 9) @[rca.scala 30:51]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[rca.scala 30:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_9_T = bits(input_a_in, 9, 9) @[rca.scala 31:35]
    node _p_comb_9_T_1 = bits(input_b_in, 9, 9) @[rca.scala 31:51]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[rca.scala 31:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_9 = _p_comb_9_T_3 @[rca.scala 23:22 31:21]
    node c_comb_9 = _c_comb_9_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_9_T = xor(p_comb_9, c_comb_9) @[rca.scala 32:34]
    node _c_comb_10_T = and(c_comb_9, p_comb_9) @[rca.scala 33:34]
    node g_comb_9 = _g_comb_9_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_10_T_1 = or(_c_comb_10_T, g_comb_9) @[rca.scala 33:46]
    node _g_comb_10_T = bits(input_a_in, 10, 10) @[rca.scala 30:35]
    node _g_comb_10_T_1 = bits(input_b_in, 10, 10) @[rca.scala 30:51]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[rca.scala 30:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_10_T = bits(input_a_in, 10, 10) @[rca.scala 31:35]
    node _p_comb_10_T_1 = bits(input_b_in, 10, 10) @[rca.scala 31:51]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[rca.scala 31:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_10 = _p_comb_10_T_3 @[rca.scala 23:22 31:21]
    node c_comb_10 = _c_comb_10_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_10_T = xor(p_comb_10, c_comb_10) @[rca.scala 32:34]
    node _c_comb_11_T = and(c_comb_10, p_comb_10) @[rca.scala 33:34]
    node g_comb_10 = _g_comb_10_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_11_T_1 = or(_c_comb_11_T, g_comb_10) @[rca.scala 33:46]
    node _g_comb_11_T = bits(input_a_in, 11, 11) @[rca.scala 30:35]
    node _g_comb_11_T_1 = bits(input_b_in, 11, 11) @[rca.scala 30:51]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[rca.scala 30:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_11_T = bits(input_a_in, 11, 11) @[rca.scala 31:35]
    node _p_comb_11_T_1 = bits(input_b_in, 11, 11) @[rca.scala 31:51]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[rca.scala 31:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_11 = _p_comb_11_T_3 @[rca.scala 23:22 31:21]
    node c_comb_11 = _c_comb_11_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_11_T = xor(p_comb_11, c_comb_11) @[rca.scala 32:34]
    node _c_comb_12_T = and(c_comb_11, p_comb_11) @[rca.scala 33:34]
    node g_comb_11 = _g_comb_11_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_12_T_1 = or(_c_comb_12_T, g_comb_11) @[rca.scala 33:46]
    node _g_comb_12_T = bits(input_a_in, 12, 12) @[rca.scala 30:35]
    node _g_comb_12_T_1 = bits(input_b_in, 12, 12) @[rca.scala 30:51]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[rca.scala 30:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_12_T = bits(input_a_in, 12, 12) @[rca.scala 31:35]
    node _p_comb_12_T_1 = bits(input_b_in, 12, 12) @[rca.scala 31:51]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[rca.scala 31:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_12 = _p_comb_12_T_3 @[rca.scala 23:22 31:21]
    node c_comb_12 = _c_comb_12_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_12_T = xor(p_comb_12, c_comb_12) @[rca.scala 32:34]
    node _c_comb_13_T = and(c_comb_12, p_comb_12) @[rca.scala 33:34]
    node g_comb_12 = _g_comb_12_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_13_T_1 = or(_c_comb_13_T, g_comb_12) @[rca.scala 33:46]
    node _g_comb_13_T = bits(input_a_in, 13, 13) @[rca.scala 30:35]
    node _g_comb_13_T_1 = bits(input_b_in, 13, 13) @[rca.scala 30:51]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[rca.scala 30:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_13_T = bits(input_a_in, 13, 13) @[rca.scala 31:35]
    node _p_comb_13_T_1 = bits(input_b_in, 13, 13) @[rca.scala 31:51]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[rca.scala 31:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_13 = _p_comb_13_T_3 @[rca.scala 23:22 31:21]
    node c_comb_13 = _c_comb_13_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_13_T = xor(p_comb_13, c_comb_13) @[rca.scala 32:34]
    node _c_comb_14_T = and(c_comb_13, p_comb_13) @[rca.scala 33:34]
    node g_comb_13 = _g_comb_13_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_14_T_1 = or(_c_comb_14_T, g_comb_13) @[rca.scala 33:46]
    node _g_comb_14_T = bits(input_a_in, 14, 14) @[rca.scala 30:35]
    node _g_comb_14_T_1 = bits(input_b_in, 14, 14) @[rca.scala 30:51]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[rca.scala 30:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_14_T = bits(input_a_in, 14, 14) @[rca.scala 31:35]
    node _p_comb_14_T_1 = bits(input_b_in, 14, 14) @[rca.scala 31:51]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[rca.scala 31:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_14 = _p_comb_14_T_3 @[rca.scala 23:22 31:21]
    node c_comb_14 = _c_comb_14_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_14_T = xor(p_comb_14, c_comb_14) @[rca.scala 32:34]
    node _c_comb_15_T = and(c_comb_14, p_comb_14) @[rca.scala 33:34]
    node g_comb_14 = _g_comb_14_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_15_T_1 = or(_c_comb_15_T, g_comb_14) @[rca.scala 33:46]
    node _g_comb_15_T = bits(input_a_in, 15, 15) @[rca.scala 30:35]
    node _g_comb_15_T_1 = bits(input_b_in, 15, 15) @[rca.scala 30:51]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[rca.scala 30:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_15_T = bits(input_a_in, 15, 15) @[rca.scala 31:35]
    node _p_comb_15_T_1 = bits(input_b_in, 15, 15) @[rca.scala 31:51]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[rca.scala 31:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_15 = _p_comb_15_T_3 @[rca.scala 23:22 31:21]
    node c_comb_15 = _c_comb_15_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_15_T = xor(p_comb_15, c_comb_15) @[rca.scala 32:34]
    node _c_comb_16_T = and(c_comb_15, p_comb_15) @[rca.scala 33:34]
    node g_comb_15 = _g_comb_15_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_16_T_1 = or(_c_comb_16_T, g_comb_15) @[rca.scala 33:46]
    node s_comb_1 = _s_comb_1_T @[rca.scala 24:22 32:21]
    node s_comb_0 = _s_comb_0_T @[rca.scala 24:22 32:21]
    node output_S_lo_lo_lo = cat(s_comb_1, s_comb_0) @[rca.scala 36:24]
    node s_comb_3 = _s_comb_3_T @[rca.scala 24:22 32:21]
    node s_comb_2 = _s_comb_2_T @[rca.scala 24:22 32:21]
    node output_S_lo_lo_hi = cat(s_comb_3, s_comb_2) @[rca.scala 36:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[rca.scala 36:24]
    node s_comb_5 = _s_comb_5_T @[rca.scala 24:22 32:21]
    node s_comb_4 = _s_comb_4_T @[rca.scala 24:22 32:21]
    node output_S_lo_hi_lo = cat(s_comb_5, s_comb_4) @[rca.scala 36:24]
    node s_comb_7 = _s_comb_7_T @[rca.scala 24:22 32:21]
    node s_comb_6 = _s_comb_6_T @[rca.scala 24:22 32:21]
    node output_S_lo_hi_hi = cat(s_comb_7, s_comb_6) @[rca.scala 36:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[rca.scala 36:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[rca.scala 36:24]
    node s_comb_9 = _s_comb_9_T @[rca.scala 24:22 32:21]
    node s_comb_8 = _s_comb_8_T @[rca.scala 24:22 32:21]
    node output_S_hi_lo_lo = cat(s_comb_9, s_comb_8) @[rca.scala 36:24]
    node s_comb_11 = _s_comb_11_T @[rca.scala 24:22 32:21]
    node s_comb_10 = _s_comb_10_T @[rca.scala 24:22 32:21]
    node output_S_hi_lo_hi = cat(s_comb_11, s_comb_10) @[rca.scala 36:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[rca.scala 36:24]
    node s_comb_13 = _s_comb_13_T @[rca.scala 24:22 32:21]
    node s_comb_12 = _s_comb_12_T @[rca.scala 24:22 32:21]
    node output_S_hi_hi_lo = cat(s_comb_13, s_comb_12) @[rca.scala 36:24]
    node s_comb_15 = _s_comb_15_T @[rca.scala 24:22 32:21]
    node s_comb_14 = _s_comb_14_T @[rca.scala 24:22 32:21]
    node output_S_hi_hi_hi = cat(s_comb_15, s_comb_14) @[rca.scala 36:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[rca.scala 36:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[rca.scala 36:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[rca.scala 36:24]
    node c_comb_16 = _c_comb_16_T_1 @[rca.scala 25:22 33:21]
    output_S <= _output_S_T @[rca.scala 36:14]
    output_C <= pad(c_comb_16, 16) @[rca.scala 37:14]

  module Mul :
    input clock : Clock
    input reset : UInt<1>
    input input_multiplicand : UInt<8>
    input input_multiplier : UInt<8>
    output output_product : UInt<16>

    inst booth2_encoder of booth2Encoder @[multiplier.scala 21:34]
    inst pp_generator of ppGenerator @[multiplier.scala 22:34]
    inst pp_compressor4_2 of pp_compressor4_2 @[multiplier.scala 23:34]
    inst pp_compressor3_2 of pp_compressor3_2 @[multiplier.scala 24:34]
    inst rca of RCA @[multiplier.scala 25:34]
    output_product <= rca.output_S @[multiplier.scala 47:41]
    booth2_encoder.clock <= clock
    booth2_encoder.reset <= reset
    booth2_encoder.input_multiplier <= input_multiplier @[multiplier.scala 27:37]
    pp_generator.clock <= clock
    pp_generator.reset <= reset
    pp_generator.inputData_multiplicand <= input_multiplicand @[multiplier.scala 29:41]
    pp_generator.inputCtrl_X2 <= booth2_encoder.output_X2 @[multiplier.scala 30:41]
    pp_generator.inputCtrl_inv <= booth2_encoder.output_inv @[multiplier.scala 31:41]
    pp_generator.inputCtrl_Set0 <= booth2_encoder.output_set0 @[multiplier.scala 32:41]
    pp_compressor4_2.clock <= clock
    pp_compressor4_2.reset <= reset
    pp_compressor4_2.input_pp0_in <= pp_generator.outputData_pp0_out @[multiplier.scala 34:41]
    pp_compressor4_2.input_pp1_in <= pp_generator.outputData_pp1_out @[multiplier.scala 35:41]
    pp_compressor4_2.input_pp2_in <= pp_generator.outputData_pp2_out @[multiplier.scala 36:41]
    pp_compressor4_2.input_pp3_in <= pp_generator.outputData_pp3_out @[multiplier.scala 37:41]
    pp_compressor3_2.clock <= clock
    pp_compressor3_2.reset <= reset
    pp_compressor3_2.input_pp0_in <= pp_compressor4_2.output_S @[multiplier.scala 39:41]
    pp_compressor3_2.input_pp1_in <= pp_compressor4_2.output_C @[multiplier.scala 40:41]
    pp_compressor3_2.input_pp2_in <= pp_generator.outputData_sig_out @[multiplier.scala 41:41]
    rca.clock <= clock
    rca.reset <= reset
    rca.input_a_in <= pp_compressor3_2.output_S @[multiplier.scala 43:41]
    rca.input_b_in <= pp_compressor3_2.output_C @[multiplier.scala 44:41]
    rca.input_c_in <= UInt<1>("h0") @[multiplier.scala 45:41]

  module RCA_1 :
    input clock : Clock
    input reset : UInt<1>
    input input_a_in : UInt<32>
    input input_b_in : UInt<32>
    input input_c_in : UInt<1>
    output output_S : UInt<32>
    output output_C : UInt<32>

    node _c_comb_0_T = bits(input_c_in, 0, 0) @[rca.scala 27:29]
    node _g_comb_0_T = bits(input_a_in, 0, 0) @[rca.scala 30:35]
    node _g_comb_0_T_1 = bits(input_b_in, 0, 0) @[rca.scala 30:51]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[rca.scala 30:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_0_T = bits(input_a_in, 0, 0) @[rca.scala 31:35]
    node _p_comb_0_T_1 = bits(input_b_in, 0, 0) @[rca.scala 31:51]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[rca.scala 31:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_0 = _p_comb_0_T_3 @[rca.scala 23:22 31:21]
    node c_comb_0 = _c_comb_0_T @[rca.scala 25:22 27:15]
    node _s_comb_0_T = xor(p_comb_0, c_comb_0) @[rca.scala 32:34]
    node _c_comb_1_T = and(c_comb_0, p_comb_0) @[rca.scala 33:34]
    node g_comb_0 = _g_comb_0_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_1_T_1 = or(_c_comb_1_T, g_comb_0) @[rca.scala 33:46]
    node _g_comb_1_T = bits(input_a_in, 1, 1) @[rca.scala 30:35]
    node _g_comb_1_T_1 = bits(input_b_in, 1, 1) @[rca.scala 30:51]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[rca.scala 30:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_1_T = bits(input_a_in, 1, 1) @[rca.scala 31:35]
    node _p_comb_1_T_1 = bits(input_b_in, 1, 1) @[rca.scala 31:51]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[rca.scala 31:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_1 = _p_comb_1_T_3 @[rca.scala 23:22 31:21]
    node c_comb_1 = _c_comb_1_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_1_T = xor(p_comb_1, c_comb_1) @[rca.scala 32:34]
    node _c_comb_2_T = and(c_comb_1, p_comb_1) @[rca.scala 33:34]
    node g_comb_1 = _g_comb_1_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_2_T_1 = or(_c_comb_2_T, g_comb_1) @[rca.scala 33:46]
    node _g_comb_2_T = bits(input_a_in, 2, 2) @[rca.scala 30:35]
    node _g_comb_2_T_1 = bits(input_b_in, 2, 2) @[rca.scala 30:51]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[rca.scala 30:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_2_T = bits(input_a_in, 2, 2) @[rca.scala 31:35]
    node _p_comb_2_T_1 = bits(input_b_in, 2, 2) @[rca.scala 31:51]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[rca.scala 31:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_2 = _p_comb_2_T_3 @[rca.scala 23:22 31:21]
    node c_comb_2 = _c_comb_2_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_2_T = xor(p_comb_2, c_comb_2) @[rca.scala 32:34]
    node _c_comb_3_T = and(c_comb_2, p_comb_2) @[rca.scala 33:34]
    node g_comb_2 = _g_comb_2_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_3_T_1 = or(_c_comb_3_T, g_comb_2) @[rca.scala 33:46]
    node _g_comb_3_T = bits(input_a_in, 3, 3) @[rca.scala 30:35]
    node _g_comb_3_T_1 = bits(input_b_in, 3, 3) @[rca.scala 30:51]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[rca.scala 30:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_3_T = bits(input_a_in, 3, 3) @[rca.scala 31:35]
    node _p_comb_3_T_1 = bits(input_b_in, 3, 3) @[rca.scala 31:51]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[rca.scala 31:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_3 = _p_comb_3_T_3 @[rca.scala 23:22 31:21]
    node c_comb_3 = _c_comb_3_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_3_T = xor(p_comb_3, c_comb_3) @[rca.scala 32:34]
    node _c_comb_4_T = and(c_comb_3, p_comb_3) @[rca.scala 33:34]
    node g_comb_3 = _g_comb_3_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_4_T_1 = or(_c_comb_4_T, g_comb_3) @[rca.scala 33:46]
    node _g_comb_4_T = bits(input_a_in, 4, 4) @[rca.scala 30:35]
    node _g_comb_4_T_1 = bits(input_b_in, 4, 4) @[rca.scala 30:51]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[rca.scala 30:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_4_T = bits(input_a_in, 4, 4) @[rca.scala 31:35]
    node _p_comb_4_T_1 = bits(input_b_in, 4, 4) @[rca.scala 31:51]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[rca.scala 31:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_4 = _p_comb_4_T_3 @[rca.scala 23:22 31:21]
    node c_comb_4 = _c_comb_4_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_4_T = xor(p_comb_4, c_comb_4) @[rca.scala 32:34]
    node _c_comb_5_T = and(c_comb_4, p_comb_4) @[rca.scala 33:34]
    node g_comb_4 = _g_comb_4_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_5_T_1 = or(_c_comb_5_T, g_comb_4) @[rca.scala 33:46]
    node _g_comb_5_T = bits(input_a_in, 5, 5) @[rca.scala 30:35]
    node _g_comb_5_T_1 = bits(input_b_in, 5, 5) @[rca.scala 30:51]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[rca.scala 30:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_5_T = bits(input_a_in, 5, 5) @[rca.scala 31:35]
    node _p_comb_5_T_1 = bits(input_b_in, 5, 5) @[rca.scala 31:51]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[rca.scala 31:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_5 = _p_comb_5_T_3 @[rca.scala 23:22 31:21]
    node c_comb_5 = _c_comb_5_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_5_T = xor(p_comb_5, c_comb_5) @[rca.scala 32:34]
    node _c_comb_6_T = and(c_comb_5, p_comb_5) @[rca.scala 33:34]
    node g_comb_5 = _g_comb_5_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_6_T_1 = or(_c_comb_6_T, g_comb_5) @[rca.scala 33:46]
    node _g_comb_6_T = bits(input_a_in, 6, 6) @[rca.scala 30:35]
    node _g_comb_6_T_1 = bits(input_b_in, 6, 6) @[rca.scala 30:51]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[rca.scala 30:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_6_T = bits(input_a_in, 6, 6) @[rca.scala 31:35]
    node _p_comb_6_T_1 = bits(input_b_in, 6, 6) @[rca.scala 31:51]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[rca.scala 31:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_6 = _p_comb_6_T_3 @[rca.scala 23:22 31:21]
    node c_comb_6 = _c_comb_6_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_6_T = xor(p_comb_6, c_comb_6) @[rca.scala 32:34]
    node _c_comb_7_T = and(c_comb_6, p_comb_6) @[rca.scala 33:34]
    node g_comb_6 = _g_comb_6_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_7_T_1 = or(_c_comb_7_T, g_comb_6) @[rca.scala 33:46]
    node _g_comb_7_T = bits(input_a_in, 7, 7) @[rca.scala 30:35]
    node _g_comb_7_T_1 = bits(input_b_in, 7, 7) @[rca.scala 30:51]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[rca.scala 30:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_7_T = bits(input_a_in, 7, 7) @[rca.scala 31:35]
    node _p_comb_7_T_1 = bits(input_b_in, 7, 7) @[rca.scala 31:51]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[rca.scala 31:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_7 = _p_comb_7_T_3 @[rca.scala 23:22 31:21]
    node c_comb_7 = _c_comb_7_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_7_T = xor(p_comb_7, c_comb_7) @[rca.scala 32:34]
    node _c_comb_8_T = and(c_comb_7, p_comb_7) @[rca.scala 33:34]
    node g_comb_7 = _g_comb_7_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_8_T_1 = or(_c_comb_8_T, g_comb_7) @[rca.scala 33:46]
    node _g_comb_8_T = bits(input_a_in, 8, 8) @[rca.scala 30:35]
    node _g_comb_8_T_1 = bits(input_b_in, 8, 8) @[rca.scala 30:51]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[rca.scala 30:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_8_T = bits(input_a_in, 8, 8) @[rca.scala 31:35]
    node _p_comb_8_T_1 = bits(input_b_in, 8, 8) @[rca.scala 31:51]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[rca.scala 31:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_8 = _p_comb_8_T_3 @[rca.scala 23:22 31:21]
    node c_comb_8 = _c_comb_8_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_8_T = xor(p_comb_8, c_comb_8) @[rca.scala 32:34]
    node _c_comb_9_T = and(c_comb_8, p_comb_8) @[rca.scala 33:34]
    node g_comb_8 = _g_comb_8_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_9_T_1 = or(_c_comb_9_T, g_comb_8) @[rca.scala 33:46]
    node _g_comb_9_T = bits(input_a_in, 9, 9) @[rca.scala 30:35]
    node _g_comb_9_T_1 = bits(input_b_in, 9, 9) @[rca.scala 30:51]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[rca.scala 30:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_9_T = bits(input_a_in, 9, 9) @[rca.scala 31:35]
    node _p_comb_9_T_1 = bits(input_b_in, 9, 9) @[rca.scala 31:51]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[rca.scala 31:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_9 = _p_comb_9_T_3 @[rca.scala 23:22 31:21]
    node c_comb_9 = _c_comb_9_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_9_T = xor(p_comb_9, c_comb_9) @[rca.scala 32:34]
    node _c_comb_10_T = and(c_comb_9, p_comb_9) @[rca.scala 33:34]
    node g_comb_9 = _g_comb_9_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_10_T_1 = or(_c_comb_10_T, g_comb_9) @[rca.scala 33:46]
    node _g_comb_10_T = bits(input_a_in, 10, 10) @[rca.scala 30:35]
    node _g_comb_10_T_1 = bits(input_b_in, 10, 10) @[rca.scala 30:51]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[rca.scala 30:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_10_T = bits(input_a_in, 10, 10) @[rca.scala 31:35]
    node _p_comb_10_T_1 = bits(input_b_in, 10, 10) @[rca.scala 31:51]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[rca.scala 31:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_10 = _p_comb_10_T_3 @[rca.scala 23:22 31:21]
    node c_comb_10 = _c_comb_10_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_10_T = xor(p_comb_10, c_comb_10) @[rca.scala 32:34]
    node _c_comb_11_T = and(c_comb_10, p_comb_10) @[rca.scala 33:34]
    node g_comb_10 = _g_comb_10_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_11_T_1 = or(_c_comb_11_T, g_comb_10) @[rca.scala 33:46]
    node _g_comb_11_T = bits(input_a_in, 11, 11) @[rca.scala 30:35]
    node _g_comb_11_T_1 = bits(input_b_in, 11, 11) @[rca.scala 30:51]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[rca.scala 30:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_11_T = bits(input_a_in, 11, 11) @[rca.scala 31:35]
    node _p_comb_11_T_1 = bits(input_b_in, 11, 11) @[rca.scala 31:51]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[rca.scala 31:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_11 = _p_comb_11_T_3 @[rca.scala 23:22 31:21]
    node c_comb_11 = _c_comb_11_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_11_T = xor(p_comb_11, c_comb_11) @[rca.scala 32:34]
    node _c_comb_12_T = and(c_comb_11, p_comb_11) @[rca.scala 33:34]
    node g_comb_11 = _g_comb_11_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_12_T_1 = or(_c_comb_12_T, g_comb_11) @[rca.scala 33:46]
    node _g_comb_12_T = bits(input_a_in, 12, 12) @[rca.scala 30:35]
    node _g_comb_12_T_1 = bits(input_b_in, 12, 12) @[rca.scala 30:51]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[rca.scala 30:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_12_T = bits(input_a_in, 12, 12) @[rca.scala 31:35]
    node _p_comb_12_T_1 = bits(input_b_in, 12, 12) @[rca.scala 31:51]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[rca.scala 31:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_12 = _p_comb_12_T_3 @[rca.scala 23:22 31:21]
    node c_comb_12 = _c_comb_12_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_12_T = xor(p_comb_12, c_comb_12) @[rca.scala 32:34]
    node _c_comb_13_T = and(c_comb_12, p_comb_12) @[rca.scala 33:34]
    node g_comb_12 = _g_comb_12_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_13_T_1 = or(_c_comb_13_T, g_comb_12) @[rca.scala 33:46]
    node _g_comb_13_T = bits(input_a_in, 13, 13) @[rca.scala 30:35]
    node _g_comb_13_T_1 = bits(input_b_in, 13, 13) @[rca.scala 30:51]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[rca.scala 30:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_13_T = bits(input_a_in, 13, 13) @[rca.scala 31:35]
    node _p_comb_13_T_1 = bits(input_b_in, 13, 13) @[rca.scala 31:51]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[rca.scala 31:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_13 = _p_comb_13_T_3 @[rca.scala 23:22 31:21]
    node c_comb_13 = _c_comb_13_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_13_T = xor(p_comb_13, c_comb_13) @[rca.scala 32:34]
    node _c_comb_14_T = and(c_comb_13, p_comb_13) @[rca.scala 33:34]
    node g_comb_13 = _g_comb_13_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_14_T_1 = or(_c_comb_14_T, g_comb_13) @[rca.scala 33:46]
    node _g_comb_14_T = bits(input_a_in, 14, 14) @[rca.scala 30:35]
    node _g_comb_14_T_1 = bits(input_b_in, 14, 14) @[rca.scala 30:51]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[rca.scala 30:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_14_T = bits(input_a_in, 14, 14) @[rca.scala 31:35]
    node _p_comb_14_T_1 = bits(input_b_in, 14, 14) @[rca.scala 31:51]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[rca.scala 31:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_14 = _p_comb_14_T_3 @[rca.scala 23:22 31:21]
    node c_comb_14 = _c_comb_14_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_14_T = xor(p_comb_14, c_comb_14) @[rca.scala 32:34]
    node _c_comb_15_T = and(c_comb_14, p_comb_14) @[rca.scala 33:34]
    node g_comb_14 = _g_comb_14_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_15_T_1 = or(_c_comb_15_T, g_comb_14) @[rca.scala 33:46]
    node _g_comb_15_T = bits(input_a_in, 15, 15) @[rca.scala 30:35]
    node _g_comb_15_T_1 = bits(input_b_in, 15, 15) @[rca.scala 30:51]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[rca.scala 30:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_15_T = bits(input_a_in, 15, 15) @[rca.scala 31:35]
    node _p_comb_15_T_1 = bits(input_b_in, 15, 15) @[rca.scala 31:51]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[rca.scala 31:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_15 = _p_comb_15_T_3 @[rca.scala 23:22 31:21]
    node c_comb_15 = _c_comb_15_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_15_T = xor(p_comb_15, c_comb_15) @[rca.scala 32:34]
    node _c_comb_16_T = and(c_comb_15, p_comb_15) @[rca.scala 33:34]
    node g_comb_15 = _g_comb_15_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_16_T_1 = or(_c_comb_16_T, g_comb_15) @[rca.scala 33:46]
    node _g_comb_16_T = bits(input_a_in, 16, 16) @[rca.scala 30:35]
    node _g_comb_16_T_1 = bits(input_b_in, 16, 16) @[rca.scala 30:51]
    node _g_comb_16_T_2 = and(_g_comb_16_T, _g_comb_16_T_1) @[rca.scala 30:39]
    node _g_comb_16_T_3 = bits(_g_comb_16_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_16_T = bits(input_a_in, 16, 16) @[rca.scala 31:35]
    node _p_comb_16_T_1 = bits(input_b_in, 16, 16) @[rca.scala 31:51]
    node _p_comb_16_T_2 = xor(_p_comb_16_T, _p_comb_16_T_1) @[rca.scala 31:39]
    node _p_comb_16_T_3 = bits(_p_comb_16_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_16 = _p_comb_16_T_3 @[rca.scala 23:22 31:21]
    node c_comb_16 = _c_comb_16_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_16_T = xor(p_comb_16, c_comb_16) @[rca.scala 32:34]
    node _c_comb_17_T = and(c_comb_16, p_comb_16) @[rca.scala 33:34]
    node g_comb_16 = _g_comb_16_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_17_T_1 = or(_c_comb_17_T, g_comb_16) @[rca.scala 33:46]
    node _g_comb_17_T = bits(input_a_in, 17, 17) @[rca.scala 30:35]
    node _g_comb_17_T_1 = bits(input_b_in, 17, 17) @[rca.scala 30:51]
    node _g_comb_17_T_2 = and(_g_comb_17_T, _g_comb_17_T_1) @[rca.scala 30:39]
    node _g_comb_17_T_3 = bits(_g_comb_17_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_17_T = bits(input_a_in, 17, 17) @[rca.scala 31:35]
    node _p_comb_17_T_1 = bits(input_b_in, 17, 17) @[rca.scala 31:51]
    node _p_comb_17_T_2 = xor(_p_comb_17_T, _p_comb_17_T_1) @[rca.scala 31:39]
    node _p_comb_17_T_3 = bits(_p_comb_17_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_17 = _p_comb_17_T_3 @[rca.scala 23:22 31:21]
    node c_comb_17 = _c_comb_17_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_17_T = xor(p_comb_17, c_comb_17) @[rca.scala 32:34]
    node _c_comb_18_T = and(c_comb_17, p_comb_17) @[rca.scala 33:34]
    node g_comb_17 = _g_comb_17_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_18_T_1 = or(_c_comb_18_T, g_comb_17) @[rca.scala 33:46]
    node _g_comb_18_T = bits(input_a_in, 18, 18) @[rca.scala 30:35]
    node _g_comb_18_T_1 = bits(input_b_in, 18, 18) @[rca.scala 30:51]
    node _g_comb_18_T_2 = and(_g_comb_18_T, _g_comb_18_T_1) @[rca.scala 30:39]
    node _g_comb_18_T_3 = bits(_g_comb_18_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_18_T = bits(input_a_in, 18, 18) @[rca.scala 31:35]
    node _p_comb_18_T_1 = bits(input_b_in, 18, 18) @[rca.scala 31:51]
    node _p_comb_18_T_2 = xor(_p_comb_18_T, _p_comb_18_T_1) @[rca.scala 31:39]
    node _p_comb_18_T_3 = bits(_p_comb_18_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_18 = _p_comb_18_T_3 @[rca.scala 23:22 31:21]
    node c_comb_18 = _c_comb_18_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_18_T = xor(p_comb_18, c_comb_18) @[rca.scala 32:34]
    node _c_comb_19_T = and(c_comb_18, p_comb_18) @[rca.scala 33:34]
    node g_comb_18 = _g_comb_18_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_19_T_1 = or(_c_comb_19_T, g_comb_18) @[rca.scala 33:46]
    node _g_comb_19_T = bits(input_a_in, 19, 19) @[rca.scala 30:35]
    node _g_comb_19_T_1 = bits(input_b_in, 19, 19) @[rca.scala 30:51]
    node _g_comb_19_T_2 = and(_g_comb_19_T, _g_comb_19_T_1) @[rca.scala 30:39]
    node _g_comb_19_T_3 = bits(_g_comb_19_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_19_T = bits(input_a_in, 19, 19) @[rca.scala 31:35]
    node _p_comb_19_T_1 = bits(input_b_in, 19, 19) @[rca.scala 31:51]
    node _p_comb_19_T_2 = xor(_p_comb_19_T, _p_comb_19_T_1) @[rca.scala 31:39]
    node _p_comb_19_T_3 = bits(_p_comb_19_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_19 = _p_comb_19_T_3 @[rca.scala 23:22 31:21]
    node c_comb_19 = _c_comb_19_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_19_T = xor(p_comb_19, c_comb_19) @[rca.scala 32:34]
    node _c_comb_20_T = and(c_comb_19, p_comb_19) @[rca.scala 33:34]
    node g_comb_19 = _g_comb_19_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_20_T_1 = or(_c_comb_20_T, g_comb_19) @[rca.scala 33:46]
    node _g_comb_20_T = bits(input_a_in, 20, 20) @[rca.scala 30:35]
    node _g_comb_20_T_1 = bits(input_b_in, 20, 20) @[rca.scala 30:51]
    node _g_comb_20_T_2 = and(_g_comb_20_T, _g_comb_20_T_1) @[rca.scala 30:39]
    node _g_comb_20_T_3 = bits(_g_comb_20_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_20_T = bits(input_a_in, 20, 20) @[rca.scala 31:35]
    node _p_comb_20_T_1 = bits(input_b_in, 20, 20) @[rca.scala 31:51]
    node _p_comb_20_T_2 = xor(_p_comb_20_T, _p_comb_20_T_1) @[rca.scala 31:39]
    node _p_comb_20_T_3 = bits(_p_comb_20_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_20 = _p_comb_20_T_3 @[rca.scala 23:22 31:21]
    node c_comb_20 = _c_comb_20_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_20_T = xor(p_comb_20, c_comb_20) @[rca.scala 32:34]
    node _c_comb_21_T = and(c_comb_20, p_comb_20) @[rca.scala 33:34]
    node g_comb_20 = _g_comb_20_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_21_T_1 = or(_c_comb_21_T, g_comb_20) @[rca.scala 33:46]
    node _g_comb_21_T = bits(input_a_in, 21, 21) @[rca.scala 30:35]
    node _g_comb_21_T_1 = bits(input_b_in, 21, 21) @[rca.scala 30:51]
    node _g_comb_21_T_2 = and(_g_comb_21_T, _g_comb_21_T_1) @[rca.scala 30:39]
    node _g_comb_21_T_3 = bits(_g_comb_21_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_21_T = bits(input_a_in, 21, 21) @[rca.scala 31:35]
    node _p_comb_21_T_1 = bits(input_b_in, 21, 21) @[rca.scala 31:51]
    node _p_comb_21_T_2 = xor(_p_comb_21_T, _p_comb_21_T_1) @[rca.scala 31:39]
    node _p_comb_21_T_3 = bits(_p_comb_21_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_21 = _p_comb_21_T_3 @[rca.scala 23:22 31:21]
    node c_comb_21 = _c_comb_21_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_21_T = xor(p_comb_21, c_comb_21) @[rca.scala 32:34]
    node _c_comb_22_T = and(c_comb_21, p_comb_21) @[rca.scala 33:34]
    node g_comb_21 = _g_comb_21_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_22_T_1 = or(_c_comb_22_T, g_comb_21) @[rca.scala 33:46]
    node _g_comb_22_T = bits(input_a_in, 22, 22) @[rca.scala 30:35]
    node _g_comb_22_T_1 = bits(input_b_in, 22, 22) @[rca.scala 30:51]
    node _g_comb_22_T_2 = and(_g_comb_22_T, _g_comb_22_T_1) @[rca.scala 30:39]
    node _g_comb_22_T_3 = bits(_g_comb_22_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_22_T = bits(input_a_in, 22, 22) @[rca.scala 31:35]
    node _p_comb_22_T_1 = bits(input_b_in, 22, 22) @[rca.scala 31:51]
    node _p_comb_22_T_2 = xor(_p_comb_22_T, _p_comb_22_T_1) @[rca.scala 31:39]
    node _p_comb_22_T_3 = bits(_p_comb_22_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_22 = _p_comb_22_T_3 @[rca.scala 23:22 31:21]
    node c_comb_22 = _c_comb_22_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_22_T = xor(p_comb_22, c_comb_22) @[rca.scala 32:34]
    node _c_comb_23_T = and(c_comb_22, p_comb_22) @[rca.scala 33:34]
    node g_comb_22 = _g_comb_22_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_23_T_1 = or(_c_comb_23_T, g_comb_22) @[rca.scala 33:46]
    node _g_comb_23_T = bits(input_a_in, 23, 23) @[rca.scala 30:35]
    node _g_comb_23_T_1 = bits(input_b_in, 23, 23) @[rca.scala 30:51]
    node _g_comb_23_T_2 = and(_g_comb_23_T, _g_comb_23_T_1) @[rca.scala 30:39]
    node _g_comb_23_T_3 = bits(_g_comb_23_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_23_T = bits(input_a_in, 23, 23) @[rca.scala 31:35]
    node _p_comb_23_T_1 = bits(input_b_in, 23, 23) @[rca.scala 31:51]
    node _p_comb_23_T_2 = xor(_p_comb_23_T, _p_comb_23_T_1) @[rca.scala 31:39]
    node _p_comb_23_T_3 = bits(_p_comb_23_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_23 = _p_comb_23_T_3 @[rca.scala 23:22 31:21]
    node c_comb_23 = _c_comb_23_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_23_T = xor(p_comb_23, c_comb_23) @[rca.scala 32:34]
    node _c_comb_24_T = and(c_comb_23, p_comb_23) @[rca.scala 33:34]
    node g_comb_23 = _g_comb_23_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_24_T_1 = or(_c_comb_24_T, g_comb_23) @[rca.scala 33:46]
    node _g_comb_24_T = bits(input_a_in, 24, 24) @[rca.scala 30:35]
    node _g_comb_24_T_1 = bits(input_b_in, 24, 24) @[rca.scala 30:51]
    node _g_comb_24_T_2 = and(_g_comb_24_T, _g_comb_24_T_1) @[rca.scala 30:39]
    node _g_comb_24_T_3 = bits(_g_comb_24_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_24_T = bits(input_a_in, 24, 24) @[rca.scala 31:35]
    node _p_comb_24_T_1 = bits(input_b_in, 24, 24) @[rca.scala 31:51]
    node _p_comb_24_T_2 = xor(_p_comb_24_T, _p_comb_24_T_1) @[rca.scala 31:39]
    node _p_comb_24_T_3 = bits(_p_comb_24_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_24 = _p_comb_24_T_3 @[rca.scala 23:22 31:21]
    node c_comb_24 = _c_comb_24_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_24_T = xor(p_comb_24, c_comb_24) @[rca.scala 32:34]
    node _c_comb_25_T = and(c_comb_24, p_comb_24) @[rca.scala 33:34]
    node g_comb_24 = _g_comb_24_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_25_T_1 = or(_c_comb_25_T, g_comb_24) @[rca.scala 33:46]
    node _g_comb_25_T = bits(input_a_in, 25, 25) @[rca.scala 30:35]
    node _g_comb_25_T_1 = bits(input_b_in, 25, 25) @[rca.scala 30:51]
    node _g_comb_25_T_2 = and(_g_comb_25_T, _g_comb_25_T_1) @[rca.scala 30:39]
    node _g_comb_25_T_3 = bits(_g_comb_25_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_25_T = bits(input_a_in, 25, 25) @[rca.scala 31:35]
    node _p_comb_25_T_1 = bits(input_b_in, 25, 25) @[rca.scala 31:51]
    node _p_comb_25_T_2 = xor(_p_comb_25_T, _p_comb_25_T_1) @[rca.scala 31:39]
    node _p_comb_25_T_3 = bits(_p_comb_25_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_25 = _p_comb_25_T_3 @[rca.scala 23:22 31:21]
    node c_comb_25 = _c_comb_25_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_25_T = xor(p_comb_25, c_comb_25) @[rca.scala 32:34]
    node _c_comb_26_T = and(c_comb_25, p_comb_25) @[rca.scala 33:34]
    node g_comb_25 = _g_comb_25_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_26_T_1 = or(_c_comb_26_T, g_comb_25) @[rca.scala 33:46]
    node _g_comb_26_T = bits(input_a_in, 26, 26) @[rca.scala 30:35]
    node _g_comb_26_T_1 = bits(input_b_in, 26, 26) @[rca.scala 30:51]
    node _g_comb_26_T_2 = and(_g_comb_26_T, _g_comb_26_T_1) @[rca.scala 30:39]
    node _g_comb_26_T_3 = bits(_g_comb_26_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_26_T = bits(input_a_in, 26, 26) @[rca.scala 31:35]
    node _p_comb_26_T_1 = bits(input_b_in, 26, 26) @[rca.scala 31:51]
    node _p_comb_26_T_2 = xor(_p_comb_26_T, _p_comb_26_T_1) @[rca.scala 31:39]
    node _p_comb_26_T_3 = bits(_p_comb_26_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_26 = _p_comb_26_T_3 @[rca.scala 23:22 31:21]
    node c_comb_26 = _c_comb_26_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_26_T = xor(p_comb_26, c_comb_26) @[rca.scala 32:34]
    node _c_comb_27_T = and(c_comb_26, p_comb_26) @[rca.scala 33:34]
    node g_comb_26 = _g_comb_26_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_27_T_1 = or(_c_comb_27_T, g_comb_26) @[rca.scala 33:46]
    node _g_comb_27_T = bits(input_a_in, 27, 27) @[rca.scala 30:35]
    node _g_comb_27_T_1 = bits(input_b_in, 27, 27) @[rca.scala 30:51]
    node _g_comb_27_T_2 = and(_g_comb_27_T, _g_comb_27_T_1) @[rca.scala 30:39]
    node _g_comb_27_T_3 = bits(_g_comb_27_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_27_T = bits(input_a_in, 27, 27) @[rca.scala 31:35]
    node _p_comb_27_T_1 = bits(input_b_in, 27, 27) @[rca.scala 31:51]
    node _p_comb_27_T_2 = xor(_p_comb_27_T, _p_comb_27_T_1) @[rca.scala 31:39]
    node _p_comb_27_T_3 = bits(_p_comb_27_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_27 = _p_comb_27_T_3 @[rca.scala 23:22 31:21]
    node c_comb_27 = _c_comb_27_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_27_T = xor(p_comb_27, c_comb_27) @[rca.scala 32:34]
    node _c_comb_28_T = and(c_comb_27, p_comb_27) @[rca.scala 33:34]
    node g_comb_27 = _g_comb_27_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_28_T_1 = or(_c_comb_28_T, g_comb_27) @[rca.scala 33:46]
    node _g_comb_28_T = bits(input_a_in, 28, 28) @[rca.scala 30:35]
    node _g_comb_28_T_1 = bits(input_b_in, 28, 28) @[rca.scala 30:51]
    node _g_comb_28_T_2 = and(_g_comb_28_T, _g_comb_28_T_1) @[rca.scala 30:39]
    node _g_comb_28_T_3 = bits(_g_comb_28_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_28_T = bits(input_a_in, 28, 28) @[rca.scala 31:35]
    node _p_comb_28_T_1 = bits(input_b_in, 28, 28) @[rca.scala 31:51]
    node _p_comb_28_T_2 = xor(_p_comb_28_T, _p_comb_28_T_1) @[rca.scala 31:39]
    node _p_comb_28_T_3 = bits(_p_comb_28_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_28 = _p_comb_28_T_3 @[rca.scala 23:22 31:21]
    node c_comb_28 = _c_comb_28_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_28_T = xor(p_comb_28, c_comb_28) @[rca.scala 32:34]
    node _c_comb_29_T = and(c_comb_28, p_comb_28) @[rca.scala 33:34]
    node g_comb_28 = _g_comb_28_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_29_T_1 = or(_c_comb_29_T, g_comb_28) @[rca.scala 33:46]
    node _g_comb_29_T = bits(input_a_in, 29, 29) @[rca.scala 30:35]
    node _g_comb_29_T_1 = bits(input_b_in, 29, 29) @[rca.scala 30:51]
    node _g_comb_29_T_2 = and(_g_comb_29_T, _g_comb_29_T_1) @[rca.scala 30:39]
    node _g_comb_29_T_3 = bits(_g_comb_29_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_29_T = bits(input_a_in, 29, 29) @[rca.scala 31:35]
    node _p_comb_29_T_1 = bits(input_b_in, 29, 29) @[rca.scala 31:51]
    node _p_comb_29_T_2 = xor(_p_comb_29_T, _p_comb_29_T_1) @[rca.scala 31:39]
    node _p_comb_29_T_3 = bits(_p_comb_29_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_29 = _p_comb_29_T_3 @[rca.scala 23:22 31:21]
    node c_comb_29 = _c_comb_29_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_29_T = xor(p_comb_29, c_comb_29) @[rca.scala 32:34]
    node _c_comb_30_T = and(c_comb_29, p_comb_29) @[rca.scala 33:34]
    node g_comb_29 = _g_comb_29_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_30_T_1 = or(_c_comb_30_T, g_comb_29) @[rca.scala 33:46]
    node _g_comb_30_T = bits(input_a_in, 30, 30) @[rca.scala 30:35]
    node _g_comb_30_T_1 = bits(input_b_in, 30, 30) @[rca.scala 30:51]
    node _g_comb_30_T_2 = and(_g_comb_30_T, _g_comb_30_T_1) @[rca.scala 30:39]
    node _g_comb_30_T_3 = bits(_g_comb_30_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_30_T = bits(input_a_in, 30, 30) @[rca.scala 31:35]
    node _p_comb_30_T_1 = bits(input_b_in, 30, 30) @[rca.scala 31:51]
    node _p_comb_30_T_2 = xor(_p_comb_30_T, _p_comb_30_T_1) @[rca.scala 31:39]
    node _p_comb_30_T_3 = bits(_p_comb_30_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_30 = _p_comb_30_T_3 @[rca.scala 23:22 31:21]
    node c_comb_30 = _c_comb_30_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_30_T = xor(p_comb_30, c_comb_30) @[rca.scala 32:34]
    node _c_comb_31_T = and(c_comb_30, p_comb_30) @[rca.scala 33:34]
    node g_comb_30 = _g_comb_30_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_31_T_1 = or(_c_comb_31_T, g_comb_30) @[rca.scala 33:46]
    node _g_comb_31_T = bits(input_a_in, 31, 31) @[rca.scala 30:35]
    node _g_comb_31_T_1 = bits(input_b_in, 31, 31) @[rca.scala 30:51]
    node _g_comb_31_T_2 = and(_g_comb_31_T, _g_comb_31_T_1) @[rca.scala 30:39]
    node _g_comb_31_T_3 = bits(_g_comb_31_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_31_T = bits(input_a_in, 31, 31) @[rca.scala 31:35]
    node _p_comb_31_T_1 = bits(input_b_in, 31, 31) @[rca.scala 31:51]
    node _p_comb_31_T_2 = xor(_p_comb_31_T, _p_comb_31_T_1) @[rca.scala 31:39]
    node _p_comb_31_T_3 = bits(_p_comb_31_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_31 = _p_comb_31_T_3 @[rca.scala 23:22 31:21]
    node c_comb_31 = _c_comb_31_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_31_T = xor(p_comb_31, c_comb_31) @[rca.scala 32:34]
    node _c_comb_32_T = and(c_comb_31, p_comb_31) @[rca.scala 33:34]
    node g_comb_31 = _g_comb_31_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_32_T_1 = or(_c_comb_32_T, g_comb_31) @[rca.scala 33:46]
    node s_comb_1 = _s_comb_1_T @[rca.scala 24:22 32:21]
    node s_comb_0 = _s_comb_0_T @[rca.scala 24:22 32:21]
    node output_S_lo_lo_lo_lo = cat(s_comb_1, s_comb_0) @[rca.scala 36:24]
    node s_comb_3 = _s_comb_3_T @[rca.scala 24:22 32:21]
    node s_comb_2 = _s_comb_2_T @[rca.scala 24:22 32:21]
    node output_S_lo_lo_lo_hi = cat(s_comb_3, s_comb_2) @[rca.scala 36:24]
    node output_S_lo_lo_lo = cat(output_S_lo_lo_lo_hi, output_S_lo_lo_lo_lo) @[rca.scala 36:24]
    node s_comb_5 = _s_comb_5_T @[rca.scala 24:22 32:21]
    node s_comb_4 = _s_comb_4_T @[rca.scala 24:22 32:21]
    node output_S_lo_lo_hi_lo = cat(s_comb_5, s_comb_4) @[rca.scala 36:24]
    node s_comb_7 = _s_comb_7_T @[rca.scala 24:22 32:21]
    node s_comb_6 = _s_comb_6_T @[rca.scala 24:22 32:21]
    node output_S_lo_lo_hi_hi = cat(s_comb_7, s_comb_6) @[rca.scala 36:24]
    node output_S_lo_lo_hi = cat(output_S_lo_lo_hi_hi, output_S_lo_lo_hi_lo) @[rca.scala 36:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[rca.scala 36:24]
    node s_comb_9 = _s_comb_9_T @[rca.scala 24:22 32:21]
    node s_comb_8 = _s_comb_8_T @[rca.scala 24:22 32:21]
    node output_S_lo_hi_lo_lo = cat(s_comb_9, s_comb_8) @[rca.scala 36:24]
    node s_comb_11 = _s_comb_11_T @[rca.scala 24:22 32:21]
    node s_comb_10 = _s_comb_10_T @[rca.scala 24:22 32:21]
    node output_S_lo_hi_lo_hi = cat(s_comb_11, s_comb_10) @[rca.scala 36:24]
    node output_S_lo_hi_lo = cat(output_S_lo_hi_lo_hi, output_S_lo_hi_lo_lo) @[rca.scala 36:24]
    node s_comb_13 = _s_comb_13_T @[rca.scala 24:22 32:21]
    node s_comb_12 = _s_comb_12_T @[rca.scala 24:22 32:21]
    node output_S_lo_hi_hi_lo = cat(s_comb_13, s_comb_12) @[rca.scala 36:24]
    node s_comb_15 = _s_comb_15_T @[rca.scala 24:22 32:21]
    node s_comb_14 = _s_comb_14_T @[rca.scala 24:22 32:21]
    node output_S_lo_hi_hi_hi = cat(s_comb_15, s_comb_14) @[rca.scala 36:24]
    node output_S_lo_hi_hi = cat(output_S_lo_hi_hi_hi, output_S_lo_hi_hi_lo) @[rca.scala 36:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[rca.scala 36:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[rca.scala 36:24]
    node s_comb_17 = _s_comb_17_T @[rca.scala 24:22 32:21]
    node s_comb_16 = _s_comb_16_T @[rca.scala 24:22 32:21]
    node output_S_hi_lo_lo_lo = cat(s_comb_17, s_comb_16) @[rca.scala 36:24]
    node s_comb_19 = _s_comb_19_T @[rca.scala 24:22 32:21]
    node s_comb_18 = _s_comb_18_T @[rca.scala 24:22 32:21]
    node output_S_hi_lo_lo_hi = cat(s_comb_19, s_comb_18) @[rca.scala 36:24]
    node output_S_hi_lo_lo = cat(output_S_hi_lo_lo_hi, output_S_hi_lo_lo_lo) @[rca.scala 36:24]
    node s_comb_21 = _s_comb_21_T @[rca.scala 24:22 32:21]
    node s_comb_20 = _s_comb_20_T @[rca.scala 24:22 32:21]
    node output_S_hi_lo_hi_lo = cat(s_comb_21, s_comb_20) @[rca.scala 36:24]
    node s_comb_23 = _s_comb_23_T @[rca.scala 24:22 32:21]
    node s_comb_22 = _s_comb_22_T @[rca.scala 24:22 32:21]
    node output_S_hi_lo_hi_hi = cat(s_comb_23, s_comb_22) @[rca.scala 36:24]
    node output_S_hi_lo_hi = cat(output_S_hi_lo_hi_hi, output_S_hi_lo_hi_lo) @[rca.scala 36:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[rca.scala 36:24]
    node s_comb_25 = _s_comb_25_T @[rca.scala 24:22 32:21]
    node s_comb_24 = _s_comb_24_T @[rca.scala 24:22 32:21]
    node output_S_hi_hi_lo_lo = cat(s_comb_25, s_comb_24) @[rca.scala 36:24]
    node s_comb_27 = _s_comb_27_T @[rca.scala 24:22 32:21]
    node s_comb_26 = _s_comb_26_T @[rca.scala 24:22 32:21]
    node output_S_hi_hi_lo_hi = cat(s_comb_27, s_comb_26) @[rca.scala 36:24]
    node output_S_hi_hi_lo = cat(output_S_hi_hi_lo_hi, output_S_hi_hi_lo_lo) @[rca.scala 36:24]
    node s_comb_29 = _s_comb_29_T @[rca.scala 24:22 32:21]
    node s_comb_28 = _s_comb_28_T @[rca.scala 24:22 32:21]
    node output_S_hi_hi_hi_lo = cat(s_comb_29, s_comb_28) @[rca.scala 36:24]
    node s_comb_31 = _s_comb_31_T @[rca.scala 24:22 32:21]
    node s_comb_30 = _s_comb_30_T @[rca.scala 24:22 32:21]
    node output_S_hi_hi_hi_hi = cat(s_comb_31, s_comb_30) @[rca.scala 36:24]
    node output_S_hi_hi_hi = cat(output_S_hi_hi_hi_hi, output_S_hi_hi_hi_lo) @[rca.scala 36:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[rca.scala 36:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[rca.scala 36:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[rca.scala 36:24]
    node c_comb_32 = _c_comb_32_T_1 @[rca.scala 25:22 33:21]
    output_S <= _output_S_T @[rca.scala 36:14]
    output_C <= pad(c_comb_32, 32) @[rca.scala 37:14]

  module MACUnit :
    input clock : Clock
    input reset : UInt<1>
    input io_in_a : UInt<8>
    input io_in_b : UInt<8>
    input io_in_c : UInt<32>
    output io_out_c : UInt<32>

    inst mul of Mul @[Multiplier.scala 16:19]
    inst rca of RCA_1 @[Multiplier.scala 17:19]
    node _rca_input_a_in_T = bits(mul.output_product, 15, 15) @[Multiplier.scala 22:71]
    node _rca_input_a_in_T_1 = bits(_rca_input_a_in_T, 0, 0) @[Bitwise.scala 77:15]
    node _rca_input_a_in_T_2 = mux(_rca_input_a_in_T_1, UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
    node _rca_input_a_in_T_3 = cat(_rca_input_a_in_T_2, mul.output_product) @[Cat.scala 33:92]
    io_out_c <= rca.output_S @[Multiplier.scala 25:19]
    mul.clock <= clock
    mul.reset <= reset
    mul.input_multiplicand <= io_in_a @[Multiplier.scala 19:26]
    mul.input_multiplier <= io_in_b @[Multiplier.scala 20:26]
    rca.clock <= clock
    rca.reset <= reset
    rca.input_a_in <= _rca_input_a_in_T_3 @[Multiplier.scala 22:19]
    rca.input_b_in <= io_in_c @[Multiplier.scala 23:19]
    rca.input_c_in <= UInt<1>("h0") @[Multiplier.scala 24:19]
