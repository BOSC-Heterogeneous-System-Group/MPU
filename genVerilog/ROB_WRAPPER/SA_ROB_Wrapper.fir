circuit SA_ROB_Wrapper :
  module ldBuffer :
    input clock : Clock
    input reset : Reset
    output io : { flip deqptr : UInt<5>[6], ldin : { flip data : UInt<64>[2], flip robIdx : UInt<5>[2], flip fuOptype : UInt<3>[2], flip valid : UInt<1>[2]}, bufout : { data : UInt<64>[4], MatchVec : UInt<6>[4], valid : UInt<1>[4]}}

    wire MatchVec : UInt<1>[6][4] @[matu.scala 182:22]
    node matchVecUInt_lo_hi = cat(MatchVec[0][2], MatchVec[0][1]) @[matu.scala 183:60]
    node matchVecUInt_lo = cat(matchVecUInt_lo_hi, MatchVec[0][0]) @[matu.scala 183:60]
    node matchVecUInt_hi_hi = cat(MatchVec[0][5], MatchVec[0][4]) @[matu.scala 183:60]
    node matchVecUInt_hi = cat(matchVecUInt_hi_hi, MatchVec[0][3]) @[matu.scala 183:60]
    node _matchVecUInt_T = cat(matchVecUInt_hi, matchVecUInt_lo) @[matu.scala 183:60]
    node matchVecUInt_lo_hi_1 = cat(MatchVec[1][2], MatchVec[1][1]) @[matu.scala 183:60]
    node matchVecUInt_lo_1 = cat(matchVecUInt_lo_hi_1, MatchVec[1][0]) @[matu.scala 183:60]
    node matchVecUInt_hi_hi_1 = cat(MatchVec[1][5], MatchVec[1][4]) @[matu.scala 183:60]
    node matchVecUInt_hi_1 = cat(matchVecUInt_hi_hi_1, MatchVec[1][3]) @[matu.scala 183:60]
    node _matchVecUInt_T_1 = cat(matchVecUInt_hi_1, matchVecUInt_lo_1) @[matu.scala 183:60]
    node matchVecUInt_lo_hi_2 = cat(MatchVec[2][2], MatchVec[2][1]) @[matu.scala 183:60]
    node matchVecUInt_lo_2 = cat(matchVecUInt_lo_hi_2, MatchVec[2][0]) @[matu.scala 183:60]
    node matchVecUInt_hi_hi_2 = cat(MatchVec[2][5], MatchVec[2][4]) @[matu.scala 183:60]
    node matchVecUInt_hi_2 = cat(matchVecUInt_hi_hi_2, MatchVec[2][3]) @[matu.scala 183:60]
    node _matchVecUInt_T_2 = cat(matchVecUInt_hi_2, matchVecUInt_lo_2) @[matu.scala 183:60]
    node matchVecUInt_lo_hi_3 = cat(MatchVec[3][2], MatchVec[3][1]) @[matu.scala 183:60]
    node matchVecUInt_lo_3 = cat(matchVecUInt_lo_hi_3, MatchVec[3][0]) @[matu.scala 183:60]
    node matchVecUInt_hi_hi_3 = cat(MatchVec[3][5], MatchVec[3][4]) @[matu.scala 183:60]
    node matchVecUInt_hi_3 = cat(matchVecUInt_hi_hi_3, MatchVec[3][3]) @[matu.scala 183:60]
    node _matchVecUInt_T_3 = cat(matchVecUInt_hi_3, matchVecUInt_lo_3) @[matu.scala 183:60]
    wire _matchVecUInt_WIRE : UInt<6>[4] @[matu.scala 183:38]
    _matchVecUInt_WIRE[0] <= _matchVecUInt_T @[matu.scala 183:38]
    _matchVecUInt_WIRE[1] <= _matchVecUInt_T_1 @[matu.scala 183:38]
    _matchVecUInt_WIRE[2] <= _matchVecUInt_T_2 @[matu.scala 183:38]
    _matchVecUInt_WIRE[3] <= _matchVecUInt_T_3 @[matu.scala 183:38]
    wire matchVecUInt : UInt<6>[4]
    matchVecUInt <= _matchVecUInt_WIRE
    wire _validReg_WIRE : UInt<1>[4] @[matu.scala 184:33]
    _validReg_WIRE[0] <= UInt<1>("h0") @[matu.scala 184:33]
    _validReg_WIRE[1] <= UInt<1>("h0") @[matu.scala 184:33]
    _validReg_WIRE[2] <= UInt<1>("h0") @[matu.scala 184:33]
    _validReg_WIRE[3] <= UInt<1>("h0") @[matu.scala 184:33]
    reg validReg : UInt<1>[4], clock with :
      reset => (reset, _validReg_WIRE) @[matu.scala 184:25]
    wire _dataReg_WIRE : UInt<64>[4] @[matu.scala 185:32]
    _dataReg_WIRE[0] <= UInt<64>("h0") @[matu.scala 185:32]
    _dataReg_WIRE[1] <= UInt<64>("h0") @[matu.scala 185:32]
    _dataReg_WIRE[2] <= UInt<64>("h0") @[matu.scala 185:32]
    _dataReg_WIRE[3] <= UInt<64>("h0") @[matu.scala 185:32]
    reg dataReg : UInt<64>[4], clock with :
      reset => (reset, _dataReg_WIRE) @[matu.scala 185:24]
    reg deqptrReg : UInt<5>[6], clock with :
      reset => (UInt<1>("h0"), deqptrReg) @[matu.scala 186:22]
    reg robIdxReg : UInt<5>[4], clock with :
      reset => (UInt<1>("h0"), robIdxReg) @[matu.scala 187:22]
    node _validReg_0_T = eq(io.ldin.fuOptype[0], UInt<3>("h7")) @[matu.scala 190:39]
    node _validReg_0_T_1 = eq(io.ldin.valid[0], UInt<1>("h1")) @[matu.scala 190:69]
    node _validReg_0_T_2 = and(_validReg_0_T, _validReg_0_T_1) @[matu.scala 190:48]
    validReg[0] <= _validReg_0_T_2 @[matu.scala 190:15]
    node _validReg_1_T = eq(io.ldin.fuOptype[1], UInt<3>("h7")) @[matu.scala 191:39]
    node _validReg_1_T_1 = eq(io.ldin.valid[0], UInt<1>("h1")) @[matu.scala 191:69]
    node _validReg_1_T_2 = and(_validReg_1_T, _validReg_1_T_1) @[matu.scala 191:48]
    validReg[1] <= _validReg_1_T_2 @[matu.scala 191:15]
    node validReg_2_lo_hi = cat(MatchVec[0][2], MatchVec[0][1]) @[matu.scala 192:40]
    node validReg_2_lo = cat(validReg_2_lo_hi, MatchVec[0][0]) @[matu.scala 192:40]
    node validReg_2_hi_hi = cat(MatchVec[0][5], MatchVec[0][4]) @[matu.scala 192:40]
    node validReg_2_hi = cat(validReg_2_hi_hi, MatchVec[0][3]) @[matu.scala 192:40]
    node _validReg_2_T = cat(validReg_2_hi, validReg_2_lo) @[matu.scala 192:40]
    node _validReg_2_T_1 = orr(_validReg_2_T) @[matu.scala 192:46]
    node _validReg_2_T_2 = mux(_validReg_2_T_1, UInt<1>("h0"), validReg[0]) @[matu.scala 192:21]
    node validReg_2_lo_hi_1 = cat(MatchVec[2][2], MatchVec[2][1]) @[matu.scala 192:96]
    node validReg_2_lo_1 = cat(validReg_2_lo_hi_1, MatchVec[2][0]) @[matu.scala 192:96]
    node validReg_2_hi_hi_1 = cat(MatchVec[2][5], MatchVec[2][4]) @[matu.scala 192:96]
    node validReg_2_hi_1 = cat(validReg_2_hi_hi_1, MatchVec[2][3]) @[matu.scala 192:96]
    node _validReg_2_T_3 = cat(validReg_2_hi_1, validReg_2_lo_1) @[matu.scala 192:96]
    node _validReg_2_T_4 = orr(_validReg_2_T_3) @[matu.scala 192:102]
    node _validReg_2_T_5 = mux(_validReg_2_T_4, UInt<1>("h0"), validReg[2]) @[matu.scala 192:77]
    node _validReg_2_T_6 = or(_validReg_2_T_2, _validReg_2_T_5) @[matu.scala 192:72]
    validReg[2] <= _validReg_2_T_6 @[matu.scala 192:15]
    node validReg_3_lo_hi = cat(MatchVec[1][2], MatchVec[1][1]) @[matu.scala 193:40]
    node validReg_3_lo = cat(validReg_3_lo_hi, MatchVec[1][0]) @[matu.scala 193:40]
    node validReg_3_hi_hi = cat(MatchVec[1][5], MatchVec[1][4]) @[matu.scala 193:40]
    node validReg_3_hi = cat(validReg_3_hi_hi, MatchVec[1][3]) @[matu.scala 193:40]
    node _validReg_3_T = cat(validReg_3_hi, validReg_3_lo) @[matu.scala 193:40]
    node _validReg_3_T_1 = orr(_validReg_3_T) @[matu.scala 193:46]
    node _validReg_3_T_2 = mux(_validReg_3_T_1, UInt<1>("h0"), validReg[1]) @[matu.scala 193:21]
    node validReg_3_lo_hi_1 = cat(MatchVec[3][2], MatchVec[3][1]) @[matu.scala 193:96]
    node validReg_3_lo_1 = cat(validReg_3_lo_hi_1, MatchVec[3][0]) @[matu.scala 193:96]
    node validReg_3_hi_hi_1 = cat(MatchVec[3][5], MatchVec[3][4]) @[matu.scala 193:96]
    node validReg_3_hi_1 = cat(validReg_3_hi_hi_1, MatchVec[3][3]) @[matu.scala 193:96]
    node _validReg_3_T_3 = cat(validReg_3_hi_1, validReg_3_lo_1) @[matu.scala 193:96]
    node _validReg_3_T_4 = orr(_validReg_3_T_3) @[matu.scala 193:102]
    node _validReg_3_T_5 = mux(_validReg_3_T_4, UInt<1>("h0"), validReg[3]) @[matu.scala 193:77]
    node _validReg_3_T_6 = or(_validReg_3_T_2, _validReg_3_T_5) @[matu.scala 193:72]
    validReg[3] <= _validReg_3_T_6 @[matu.scala 193:15]
    node _dataReg_0_T = eq(io.ldin.fuOptype[0], UInt<3>("h7")) @[matu.scala 194:61]
    node _dataReg_0_T_1 = and(io.ldin.valid[0], _dataReg_0_T) @[matu.scala 194:38]
    node _dataReg_0_T_2 = mux(_dataReg_0_T_1, io.ldin.data[0], dataReg[0]) @[matu.scala 194:20]
    dataReg[0] <= _dataReg_0_T_2 @[matu.scala 194:14]
    node _dataReg_1_T = eq(io.ldin.fuOptype[1], UInt<3>("h7")) @[matu.scala 195:61]
    node _dataReg_1_T_1 = and(io.ldin.valid[1], _dataReg_1_T) @[matu.scala 195:38]
    node _dataReg_1_T_2 = mux(_dataReg_1_T_1, io.ldin.data[1], dataReg[1]) @[matu.scala 195:20]
    dataReg[1] <= _dataReg_1_T_2 @[matu.scala 195:14]
    dataReg[2] <= dataReg[0] @[matu.scala 196:14]
    dataReg[3] <= dataReg[1] @[matu.scala 197:14]
    node _robIdxReg_0_T = eq(io.ldin.fuOptype[0], UInt<3>("h7")) @[matu.scala 198:63]
    node _robIdxReg_0_T_1 = and(io.ldin.valid[0], _robIdxReg_0_T) @[matu.scala 198:40]
    node _robIdxReg_0_T_2 = mux(_robIdxReg_0_T_1, io.ldin.robIdx[0], robIdxReg[0]) @[matu.scala 198:22]
    robIdxReg[0] <= _robIdxReg_0_T_2 @[matu.scala 198:16]
    node _robIdxReg_1_T = eq(io.ldin.fuOptype[1], UInt<3>("h7")) @[matu.scala 199:63]
    node _robIdxReg_1_T_1 = and(io.ldin.valid[1], _robIdxReg_1_T) @[matu.scala 199:40]
    node _robIdxReg_1_T_2 = mux(_robIdxReg_1_T_1, io.ldin.robIdx[1], robIdxReg[1]) @[matu.scala 199:22]
    robIdxReg[1] <= _robIdxReg_1_T_2 @[matu.scala 199:16]
    robIdxReg[2] <= robIdxReg[0] @[matu.scala 200:16]
    robIdxReg[3] <= robIdxReg[1] @[matu.scala 201:16]
    deqptrReg[0] <= io.deqptr[0] @[matu.scala 202:13]
    deqptrReg[1] <= io.deqptr[1] @[matu.scala 202:13]
    deqptrReg[2] <= io.deqptr[2] @[matu.scala 202:13]
    deqptrReg[3] <= io.deqptr[3] @[matu.scala 202:13]
    deqptrReg[4] <= io.deqptr[4] @[matu.scala 202:13]
    deqptrReg[5] <= io.deqptr[5] @[matu.scala 202:13]
    node _MatchVec_0_0_T = eq(deqptrReg[0], robIdxReg[0]) @[matu.scala 205:52]
    node _MatchVec_0_0_T_1 = bits(_MatchVec_0_0_T, 0, 0) @[matu.scala 205:70]
    node _MatchVec_0_0_T_2 = and(validReg[0], _MatchVec_0_0_T_1) @[matu.scala 205:35]
    MatchVec[0][0] <= _MatchVec_0_0_T_2 @[matu.scala 205:20]
    node _MatchVec_1_0_T = eq(deqptrReg[0], robIdxReg[1]) @[matu.scala 206:52]
    node _MatchVec_1_0_T_1 = bits(_MatchVec_1_0_T, 0, 0) @[matu.scala 206:70]
    node _MatchVec_1_0_T_2 = and(validReg[1], _MatchVec_1_0_T_1) @[matu.scala 206:35]
    MatchVec[1][0] <= _MatchVec_1_0_T_2 @[matu.scala 206:20]
    node _MatchVec_2_0_T = eq(deqptrReg[0], robIdxReg[2]) @[matu.scala 207:52]
    node _MatchVec_2_0_T_1 = bits(_MatchVec_2_0_T, 0, 0) @[matu.scala 207:70]
    node _MatchVec_2_0_T_2 = and(validReg[2], _MatchVec_2_0_T_1) @[matu.scala 207:35]
    MatchVec[2][0] <= _MatchVec_2_0_T_2 @[matu.scala 207:20]
    node _MatchVec_3_0_T = eq(deqptrReg[0], robIdxReg[3]) @[matu.scala 208:52]
    node _MatchVec_3_0_T_1 = bits(_MatchVec_3_0_T, 0, 0) @[matu.scala 208:70]
    node _MatchVec_3_0_T_2 = and(validReg[3], _MatchVec_3_0_T_1) @[matu.scala 208:35]
    MatchVec[3][0] <= _MatchVec_3_0_T_2 @[matu.scala 208:20]
    node _MatchVec_0_1_T = eq(deqptrReg[1], robIdxReg[0]) @[matu.scala 205:52]
    node _MatchVec_0_1_T_1 = bits(_MatchVec_0_1_T, 0, 0) @[matu.scala 205:70]
    node _MatchVec_0_1_T_2 = and(validReg[0], _MatchVec_0_1_T_1) @[matu.scala 205:35]
    MatchVec[0][1] <= _MatchVec_0_1_T_2 @[matu.scala 205:20]
    node _MatchVec_1_1_T = eq(deqptrReg[1], robIdxReg[1]) @[matu.scala 206:52]
    node _MatchVec_1_1_T_1 = bits(_MatchVec_1_1_T, 0, 0) @[matu.scala 206:70]
    node _MatchVec_1_1_T_2 = and(validReg[1], _MatchVec_1_1_T_1) @[matu.scala 206:35]
    MatchVec[1][1] <= _MatchVec_1_1_T_2 @[matu.scala 206:20]
    node _MatchVec_2_1_T = eq(deqptrReg[1], robIdxReg[2]) @[matu.scala 207:52]
    node _MatchVec_2_1_T_1 = bits(_MatchVec_2_1_T, 0, 0) @[matu.scala 207:70]
    node _MatchVec_2_1_T_2 = and(validReg[2], _MatchVec_2_1_T_1) @[matu.scala 207:35]
    MatchVec[2][1] <= _MatchVec_2_1_T_2 @[matu.scala 207:20]
    node _MatchVec_3_1_T = eq(deqptrReg[1], robIdxReg[3]) @[matu.scala 208:52]
    node _MatchVec_3_1_T_1 = bits(_MatchVec_3_1_T, 0, 0) @[matu.scala 208:70]
    node _MatchVec_3_1_T_2 = and(validReg[3], _MatchVec_3_1_T_1) @[matu.scala 208:35]
    MatchVec[3][1] <= _MatchVec_3_1_T_2 @[matu.scala 208:20]
    node _MatchVec_0_2_T = eq(deqptrReg[2], robIdxReg[0]) @[matu.scala 205:52]
    node _MatchVec_0_2_T_1 = bits(_MatchVec_0_2_T, 0, 0) @[matu.scala 205:70]
    node _MatchVec_0_2_T_2 = and(validReg[0], _MatchVec_0_2_T_1) @[matu.scala 205:35]
    MatchVec[0][2] <= _MatchVec_0_2_T_2 @[matu.scala 205:20]
    node _MatchVec_1_2_T = eq(deqptrReg[2], robIdxReg[1]) @[matu.scala 206:52]
    node _MatchVec_1_2_T_1 = bits(_MatchVec_1_2_T, 0, 0) @[matu.scala 206:70]
    node _MatchVec_1_2_T_2 = and(validReg[1], _MatchVec_1_2_T_1) @[matu.scala 206:35]
    MatchVec[1][2] <= _MatchVec_1_2_T_2 @[matu.scala 206:20]
    node _MatchVec_2_2_T = eq(deqptrReg[2], robIdxReg[2]) @[matu.scala 207:52]
    node _MatchVec_2_2_T_1 = bits(_MatchVec_2_2_T, 0, 0) @[matu.scala 207:70]
    node _MatchVec_2_2_T_2 = and(validReg[2], _MatchVec_2_2_T_1) @[matu.scala 207:35]
    MatchVec[2][2] <= _MatchVec_2_2_T_2 @[matu.scala 207:20]
    node _MatchVec_3_2_T = eq(deqptrReg[2], robIdxReg[3]) @[matu.scala 208:52]
    node _MatchVec_3_2_T_1 = bits(_MatchVec_3_2_T, 0, 0) @[matu.scala 208:70]
    node _MatchVec_3_2_T_2 = and(validReg[3], _MatchVec_3_2_T_1) @[matu.scala 208:35]
    MatchVec[3][2] <= _MatchVec_3_2_T_2 @[matu.scala 208:20]
    node _MatchVec_0_3_T = eq(deqptrReg[3], robIdxReg[0]) @[matu.scala 205:52]
    node _MatchVec_0_3_T_1 = bits(_MatchVec_0_3_T, 0, 0) @[matu.scala 205:70]
    node _MatchVec_0_3_T_2 = and(validReg[0], _MatchVec_0_3_T_1) @[matu.scala 205:35]
    MatchVec[0][3] <= _MatchVec_0_3_T_2 @[matu.scala 205:20]
    node _MatchVec_1_3_T = eq(deqptrReg[3], robIdxReg[1]) @[matu.scala 206:52]
    node _MatchVec_1_3_T_1 = bits(_MatchVec_1_3_T, 0, 0) @[matu.scala 206:70]
    node _MatchVec_1_3_T_2 = and(validReg[1], _MatchVec_1_3_T_1) @[matu.scala 206:35]
    MatchVec[1][3] <= _MatchVec_1_3_T_2 @[matu.scala 206:20]
    node _MatchVec_2_3_T = eq(deqptrReg[3], robIdxReg[2]) @[matu.scala 207:52]
    node _MatchVec_2_3_T_1 = bits(_MatchVec_2_3_T, 0, 0) @[matu.scala 207:70]
    node _MatchVec_2_3_T_2 = and(validReg[2], _MatchVec_2_3_T_1) @[matu.scala 207:35]
    MatchVec[2][3] <= _MatchVec_2_3_T_2 @[matu.scala 207:20]
    node _MatchVec_3_3_T = eq(deqptrReg[3], robIdxReg[3]) @[matu.scala 208:52]
    node _MatchVec_3_3_T_1 = bits(_MatchVec_3_3_T, 0, 0) @[matu.scala 208:70]
    node _MatchVec_3_3_T_2 = and(validReg[3], _MatchVec_3_3_T_1) @[matu.scala 208:35]
    MatchVec[3][3] <= _MatchVec_3_3_T_2 @[matu.scala 208:20]
    node _MatchVec_0_4_T = eq(deqptrReg[4], robIdxReg[0]) @[matu.scala 205:52]
    node _MatchVec_0_4_T_1 = bits(_MatchVec_0_4_T, 0, 0) @[matu.scala 205:70]
    node _MatchVec_0_4_T_2 = and(validReg[0], _MatchVec_0_4_T_1) @[matu.scala 205:35]
    MatchVec[0][4] <= _MatchVec_0_4_T_2 @[matu.scala 205:20]
    node _MatchVec_1_4_T = eq(deqptrReg[4], robIdxReg[1]) @[matu.scala 206:52]
    node _MatchVec_1_4_T_1 = bits(_MatchVec_1_4_T, 0, 0) @[matu.scala 206:70]
    node _MatchVec_1_4_T_2 = and(validReg[1], _MatchVec_1_4_T_1) @[matu.scala 206:35]
    MatchVec[1][4] <= _MatchVec_1_4_T_2 @[matu.scala 206:20]
    node _MatchVec_2_4_T = eq(deqptrReg[4], robIdxReg[2]) @[matu.scala 207:52]
    node _MatchVec_2_4_T_1 = bits(_MatchVec_2_4_T, 0, 0) @[matu.scala 207:70]
    node _MatchVec_2_4_T_2 = and(validReg[2], _MatchVec_2_4_T_1) @[matu.scala 207:35]
    MatchVec[2][4] <= _MatchVec_2_4_T_2 @[matu.scala 207:20]
    node _MatchVec_3_4_T = eq(deqptrReg[4], robIdxReg[3]) @[matu.scala 208:52]
    node _MatchVec_3_4_T_1 = bits(_MatchVec_3_4_T, 0, 0) @[matu.scala 208:70]
    node _MatchVec_3_4_T_2 = and(validReg[3], _MatchVec_3_4_T_1) @[matu.scala 208:35]
    MatchVec[3][4] <= _MatchVec_3_4_T_2 @[matu.scala 208:20]
    node _MatchVec_0_5_T = eq(deqptrReg[5], robIdxReg[0]) @[matu.scala 205:52]
    node _MatchVec_0_5_T_1 = bits(_MatchVec_0_5_T, 0, 0) @[matu.scala 205:70]
    node _MatchVec_0_5_T_2 = and(validReg[0], _MatchVec_0_5_T_1) @[matu.scala 205:35]
    MatchVec[0][5] <= _MatchVec_0_5_T_2 @[matu.scala 205:20]
    node _MatchVec_1_5_T = eq(deqptrReg[5], robIdxReg[1]) @[matu.scala 206:52]
    node _MatchVec_1_5_T_1 = bits(_MatchVec_1_5_T, 0, 0) @[matu.scala 206:70]
    node _MatchVec_1_5_T_2 = and(validReg[1], _MatchVec_1_5_T_1) @[matu.scala 206:35]
    MatchVec[1][5] <= _MatchVec_1_5_T_2 @[matu.scala 206:20]
    node _MatchVec_2_5_T = eq(deqptrReg[5], robIdxReg[2]) @[matu.scala 207:52]
    node _MatchVec_2_5_T_1 = bits(_MatchVec_2_5_T, 0, 0) @[matu.scala 207:70]
    node _MatchVec_2_5_T_2 = and(validReg[2], _MatchVec_2_5_T_1) @[matu.scala 207:35]
    MatchVec[2][5] <= _MatchVec_2_5_T_2 @[matu.scala 207:20]
    node _MatchVec_3_5_T = eq(deqptrReg[5], robIdxReg[3]) @[matu.scala 208:52]
    node _MatchVec_3_5_T_1 = bits(_MatchVec_3_5_T, 0, 0) @[matu.scala 208:70]
    node _MatchVec_3_5_T_2 = and(validReg[3], _MatchVec_3_5_T_1) @[matu.scala 208:35]
    MatchVec[3][5] <= _MatchVec_3_5_T_2 @[matu.scala 208:20]
    io.bufout.data <= dataReg @[matu.scala 210:18]
    io.bufout.valid <= validReg @[matu.scala 211:19]
    io.bufout.MatchVec <= matchVecUInt @[matu.scala 212:22]

  module SA_ROB :
    input clock : Clock
    input reset : Reset
    output io : { flip MatchVec : UInt<6>[4], flip data : UInt<64>[4], out : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}}

    wire isEmpty : UInt<1>
    isEmpty <= UInt<1>("h0")
    wire deq : UInt<1>
    deq <= UInt<1>("h0")
    wire _mem_WIRE : UInt<64>[4] @[matu.scala 232:28]
    _mem_WIRE[0] <= UInt<64>("h0") @[matu.scala 232:28]
    _mem_WIRE[1] <= UInt<64>("h0") @[matu.scala 232:28]
    _mem_WIRE[2] <= UInt<64>("h0") @[matu.scala 232:28]
    _mem_WIRE[3] <= UInt<64>("h0") @[matu.scala 232:28]
    reg mem : UInt<64>[4], clock with :
      reset => (reset, _mem_WIRE) @[matu.scala 232:20]
    wire _matchVecReg_WIRE : UInt<6>[4] @[matu.scala 233:36]
    _matchVecReg_WIRE[0] <= UInt<6>("h0") @[matu.scala 233:36]
    _matchVecReg_WIRE[1] <= UInt<6>("h0") @[matu.scala 233:36]
    _matchVecReg_WIRE[2] <= UInt<6>("h0") @[matu.scala 233:36]
    _matchVecReg_WIRE[3] <= UInt<6>("h0") @[matu.scala 233:36]
    reg matchVecReg : UInt<6>[4], clock with :
      reset => (reset, _matchVecReg_WIRE) @[matu.scala 233:28]
    wire _matchVecMask_WIRE : UInt<6>[4] @[matu.scala 234:37]
    _matchVecMask_WIRE[0] <= UInt<6>("h3f") @[matu.scala 234:37]
    _matchVecMask_WIRE[1] <= UInt<6>("h3f") @[matu.scala 234:37]
    _matchVecMask_WIRE[2] <= UInt<6>("h3f") @[matu.scala 234:37]
    _matchVecMask_WIRE[3] <= UInt<6>("h3f") @[matu.scala 234:37]
    reg matchVecMask : UInt<6>[4], clock with :
      reset => (reset, _matchVecMask_WIRE) @[matu.scala 234:29]
    wire deqData : UInt<64>
    deqData <= UInt<64>("h0")
    wire minMask : UInt<6> @[matu.scala 236:21]
    wire minMask_0_1 : UInt<6> @[matu.scala 237:25]
    wire minMask_2_3 : UInt<6> @[matu.scala 238:25]
    wire minIndex : UInt<2>
    minIndex <= UInt<2>("h0")
    io.out.bits <= deqData @[matu.scala 241:15]
    node _io_out_valid_T = orr(matchVecReg[3]) @[matu.scala 242:38]
    node _io_out_valid_T_1 = orr(matchVecReg[2]) @[matu.scala 242:58]
    node _io_out_valid_T_2 = orr(matchVecReg[1]) @[matu.scala 242:78]
    node _io_out_valid_T_3 = orr(matchVecReg[0]) @[matu.scala 242:98]
    node io_out_valid_lo = cat(_io_out_valid_T_2, _io_out_valid_T_3) @[Cat.scala 33:92]
    node io_out_valid_hi = cat(_io_out_valid_T, _io_out_valid_T_1) @[Cat.scala 33:92]
    node _io_out_valid_T_4 = cat(io_out_valid_hi, io_out_valid_lo) @[Cat.scala 33:92]
    node _io_out_valid_T_5 = orr(_io_out_valid_T_4) @[matu.scala 242:103]
    io.out.valid <= _io_out_valid_T_5 @[matu.scala 242:16]
    node _T = eq(matchVecReg[0], UInt<1>("h0")) @[matu.scala 245:25]
    node _T_1 = eq(minIndex, UInt<1>("h0")) @[matu.scala 245:45]
    node _T_2 = or(_T, _T_1) @[matu.scala 245:33]
    when _T_2 : @[matu.scala 245:54]
      matchVecReg[0] <= io.MatchVec[0] @[matu.scala 246:22]
      mem[0] <= io.data[0] @[matu.scala 247:14]
    node _T_3 = eq(matchVecReg[1], UInt<1>("h0")) @[matu.scala 245:25]
    node _T_4 = eq(minIndex, UInt<1>("h1")) @[matu.scala 245:45]
    node _T_5 = or(_T_3, _T_4) @[matu.scala 245:33]
    when _T_5 : @[matu.scala 245:54]
      matchVecReg[1] <= io.MatchVec[1] @[matu.scala 246:22]
      mem[1] <= io.data[1] @[matu.scala 247:14]
    node _T_6 = eq(matchVecReg[2], UInt<1>("h0")) @[matu.scala 245:25]
    node _T_7 = eq(minIndex, UInt<2>("h2")) @[matu.scala 245:45]
    node _T_8 = or(_T_6, _T_7) @[matu.scala 245:33]
    when _T_8 : @[matu.scala 245:54]
      matchVecReg[2] <= io.MatchVec[2] @[matu.scala 246:22]
      mem[2] <= io.data[2] @[matu.scala 247:14]
    node _T_9 = eq(matchVecReg[3], UInt<1>("h0")) @[matu.scala 245:25]
    node _T_10 = eq(minIndex, UInt<2>("h3")) @[matu.scala 245:45]
    node _T_11 = or(_T_9, _T_10) @[matu.scala 245:33]
    when _T_11 : @[matu.scala 245:54]
      matchVecReg[3] <= io.MatchVec[3] @[matu.scala 246:22]
      mem[3] <= io.data[3] @[matu.scala 247:14]
    node _T_12 = eq(io.MatchVec[0], UInt<1>("h0")) @[matu.scala 252:25]
    node _T_13 = eq(matchVecReg[0], UInt<1>("h0")) @[matu.scala 252:51]
    node _T_14 = and(_T_12, _T_13) @[matu.scala 252:33]
    when _T_14 : @[matu.scala 252:60]
      node _matchVecMask_0_T = not(io.MatchVec[0]) @[matu.scala 253:26]
      matchVecMask[0] <= _matchVecMask_0_T @[matu.scala 253:23]
    else :
      node _T_15 = eq(matchVecReg[0], UInt<1>("h0")) @[matu.scala 254:31]
      when _T_15 : @[matu.scala 254:40]
        matchVecMask[0] <= io.MatchVec[0] @[matu.scala 255:23]
    node _T_16 = eq(io.MatchVec[1], UInt<1>("h0")) @[matu.scala 252:25]
    node _T_17 = eq(matchVecReg[1], UInt<1>("h0")) @[matu.scala 252:51]
    node _T_18 = and(_T_16, _T_17) @[matu.scala 252:33]
    when _T_18 : @[matu.scala 252:60]
      node _matchVecMask_1_T = not(io.MatchVec[1]) @[matu.scala 253:26]
      matchVecMask[1] <= _matchVecMask_1_T @[matu.scala 253:23]
    else :
      node _T_19 = eq(matchVecReg[1], UInt<1>("h0")) @[matu.scala 254:31]
      when _T_19 : @[matu.scala 254:40]
        matchVecMask[1] <= io.MatchVec[1] @[matu.scala 255:23]
    node _T_20 = eq(io.MatchVec[2], UInt<1>("h0")) @[matu.scala 252:25]
    node _T_21 = eq(matchVecReg[2], UInt<1>("h0")) @[matu.scala 252:51]
    node _T_22 = and(_T_20, _T_21) @[matu.scala 252:33]
    when _T_22 : @[matu.scala 252:60]
      node _matchVecMask_2_T = not(io.MatchVec[2]) @[matu.scala 253:26]
      matchVecMask[2] <= _matchVecMask_2_T @[matu.scala 253:23]
    else :
      node _T_23 = eq(matchVecReg[2], UInt<1>("h0")) @[matu.scala 254:31]
      when _T_23 : @[matu.scala 254:40]
        matchVecMask[2] <= io.MatchVec[2] @[matu.scala 255:23]
    node _T_24 = eq(io.MatchVec[3], UInt<1>("h0")) @[matu.scala 252:25]
    node _T_25 = eq(matchVecReg[3], UInt<1>("h0")) @[matu.scala 252:51]
    node _T_26 = and(_T_24, _T_25) @[matu.scala 252:33]
    when _T_26 : @[matu.scala 252:60]
      node _matchVecMask_3_T = not(io.MatchVec[3]) @[matu.scala 253:26]
      matchVecMask[3] <= _matchVecMask_3_T @[matu.scala 253:23]
    else :
      node _T_27 = eq(matchVecReg[3], UInt<1>("h0")) @[matu.scala 254:31]
      when _T_27 : @[matu.scala 254:40]
        matchVecMask[3] <= io.MatchVec[3] @[matu.scala 255:23]
    node _minMask_0_1_T = gt(matchVecMask[0], matchVecMask[1]) @[matu.scala 259:38]
    node _minMask_0_1_T_1 = mux(_minMask_0_1_T, matchVecMask[1], matchVecMask[0]) @[matu.scala 259:21]
    minMask_0_1 <= _minMask_0_1_T_1 @[matu.scala 259:15]
    node _minMask_2_3_T = gt(matchVecMask[2], matchVecMask[3]) @[matu.scala 260:38]
    node _minMask_2_3_T_1 = mux(_minMask_2_3_T, matchVecMask[3], matchVecMask[2]) @[matu.scala 260:21]
    minMask_2_3 <= _minMask_2_3_T_1 @[matu.scala 260:15]
    node _minMask_T = gt(minMask_0_1, minMask_2_3) @[matu.scala 261:30]
    node _minMask_T_1 = mux(_minMask_T, minMask_2_3, minMask_0_1) @[matu.scala 261:17]
    minMask <= _minMask_T_1 @[matu.scala 261:11]
    node _T_28 = eq(minMask, matchVecMask[0]) @[matu.scala 263:18]
    when _T_28 : @[matu.scala 263:38]
      minIndex <= UInt<1>("h0") @[matu.scala 264:15]
    node _T_29 = eq(minMask, matchVecMask[1]) @[matu.scala 263:18]
    when _T_29 : @[matu.scala 263:38]
      minIndex <= UInt<1>("h1") @[matu.scala 264:15]
    node _T_30 = eq(minMask, matchVecMask[2]) @[matu.scala 263:18]
    when _T_30 : @[matu.scala 263:38]
      minIndex <= UInt<2>("h2") @[matu.scala 264:15]
    node _T_31 = eq(minMask, matchVecMask[3]) @[matu.scala 263:18]
    when _T_31 : @[matu.scala 263:38]
      minIndex <= UInt<2>("h3") @[matu.scala 264:15]
    node _T_32 = gt(matchVecReg[minIndex], UInt<1>("h0")) @[matu.scala 268:31]
    when _T_32 : @[matu.scala 268:38]
      matchVecReg[minIndex] <= UInt<1>("h0") @[matu.scala 269:27]
    node _T_33 = lt(matchVecMask[minIndex], UInt<6>("h3f")) @[matu.scala 271:32]
    when _T_33 : @[matu.scala 271:40]
      matchVecMask[minIndex] <= UInt<6>("h3f") @[matu.scala 272:28]
    node _deq_T = orr(matchVecReg[3]) @[matu.scala 275:29]
    node _deq_T_1 = orr(matchVecReg[2]) @[matu.scala 275:49]
    node _deq_T_2 = orr(matchVecReg[1]) @[matu.scala 275:69]
    node _deq_T_3 = orr(matchVecReg[0]) @[matu.scala 275:89]
    node deq_lo = cat(_deq_T_2, _deq_T_3) @[Cat.scala 33:92]
    node deq_hi = cat(_deq_T, _deq_T_1) @[Cat.scala 33:92]
    node _deq_T_4 = cat(deq_hi, deq_lo) @[Cat.scala 33:92]
    node _deq_T_5 = orr(_deq_T_4) @[matu.scala 275:94]
    node _deq_T_6 = and(_deq_T_5, io.out.ready) @[matu.scala 275:98]
    deq <= _deq_T_6 @[matu.scala 275:7]
    when deq : @[matu.scala 277:13]
      deqData <= mem[minIndex] @[matu.scala 278:13]

  module SA_ROB_Wrapper :
    input clock : Clock
    input reset : UInt<1>
    output io : { ldin : { flip data : UInt<64>[2], flip robIdx : UInt<5>[2], flip fuOptype : UInt<3>[2], flip valid : UInt<1>[2]}, flip deqptr : UInt<5>[6], out : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}}

    inst ldBuff of ldBuffer @[matu.scala 142:22]
    ldBuff.clock <= clock
    ldBuff.reset <= reset
    inst rob of SA_ROB @[matu.scala 143:19]
    rob.clock <= clock
    rob.reset <= reset
    ldBuff.io.ldin.valid[0] <= io.ldin.valid[0] @[matu.scala 145:18]
    ldBuff.io.ldin.valid[1] <= io.ldin.valid[1] @[matu.scala 145:18]
    ldBuff.io.ldin.fuOptype[0] <= io.ldin.fuOptype[0] @[matu.scala 145:18]
    ldBuff.io.ldin.fuOptype[1] <= io.ldin.fuOptype[1] @[matu.scala 145:18]
    ldBuff.io.ldin.robIdx[0] <= io.ldin.robIdx[0] @[matu.scala 145:18]
    ldBuff.io.ldin.robIdx[1] <= io.ldin.robIdx[1] @[matu.scala 145:18]
    ldBuff.io.ldin.data[0] <= io.ldin.data[0] @[matu.scala 145:18]
    ldBuff.io.ldin.data[1] <= io.ldin.data[1] @[matu.scala 145:18]
    ldBuff.io.deqptr[0] <= io.deqptr[0] @[matu.scala 146:20]
    ldBuff.io.deqptr[1] <= io.deqptr[1] @[matu.scala 146:20]
    ldBuff.io.deqptr[2] <= io.deqptr[2] @[matu.scala 146:20]
    ldBuff.io.deqptr[3] <= io.deqptr[3] @[matu.scala 146:20]
    ldBuff.io.deqptr[4] <= io.deqptr[4] @[matu.scala 146:20]
    ldBuff.io.deqptr[5] <= io.deqptr[5] @[matu.scala 146:20]
    rob.io.MatchVec[0] <= ldBuff.io.bufout.MatchVec[0] @[matu.scala 148:19]
    rob.io.MatchVec[1] <= ldBuff.io.bufout.MatchVec[1] @[matu.scala 148:19]
    rob.io.MatchVec[2] <= ldBuff.io.bufout.MatchVec[2] @[matu.scala 148:19]
    rob.io.MatchVec[3] <= ldBuff.io.bufout.MatchVec[3] @[matu.scala 148:19]
    rob.io.data[0] <= ldBuff.io.bufout.data[0] @[matu.scala 149:15]
    rob.io.data[1] <= ldBuff.io.bufout.data[1] @[matu.scala 149:15]
    rob.io.data[2] <= ldBuff.io.bufout.data[2] @[matu.scala 149:15]
    rob.io.data[3] <= ldBuff.io.bufout.data[3] @[matu.scala 149:15]
    io.out.bits <= rob.io.out.bits @[matu.scala 152:15]
    io.out.valid <= rob.io.out.valid @[matu.scala 153:16]
    rob.io.out.ready <= io.out.ready @[matu.scala 154:20]

