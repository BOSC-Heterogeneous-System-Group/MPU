circuit Multiplier :
  module booth2Encoder :
    input clock : Clock
    input reset : Reset
    output input : { flip multiplier : SInt<4>}
    output output : { X2 : UInt<2>, inv : UInt<2>, set0 : UInt<2>}

    wire multiplier2 : UInt<5> @[booth2_encoder.scala 22:27]
    wire bits : UInt<3>[2] @[booth2_encoder.scala 23:27]
    wire X2Bools : UInt<1>[2] @[booth2_encoder.scala 25:30]
    X2Bools[0] <= UInt<1>("h0") @[booth2_encoder.scala 25:30]
    X2Bools[1] <= UInt<1>("h0") @[booth2_encoder.scala 25:30]
    wire invBools : UInt<1>[2] @[booth2_encoder.scala 26:30]
    invBools[0] <= UInt<1>("h0") @[booth2_encoder.scala 26:30]
    invBools[1] <= UInt<1>("h0") @[booth2_encoder.scala 26:30]
    wire set0Bools : UInt<1>[2] @[booth2_encoder.scala 27:30]
    set0Bools[0] <= UInt<1>("h0") @[booth2_encoder.scala 27:30]
    set0Bools[1] <= UInt<1>("h0") @[booth2_encoder.scala 27:30]
    node multiplier2_hi = asUInt(input.multiplier) @[Cat.scala 33:92]
    node _multiplier2_T = cat(multiplier2_hi, UInt<1>("h0")) @[Cat.scala 33:92]
    multiplier2 <= _multiplier2_T @[booth2_encoder.scala 29:17]
    node _bits_0_T = bits(multiplier2, 2, 0) @[booth2_encoder.scala 32:31]
    bits[0] <= _bits_0_T @[booth2_encoder.scala 32:17]
    node _bits_1_T = bits(multiplier2, 4, 2) @[booth2_encoder.scala 32:31]
    bits[1] <= _bits_1_T @[booth2_encoder.scala 32:17]
    node _X2Bools_0_T = bits(bits[0], 0, 0) @[booth2_encoder.scala 36:35]
    node _X2Bools_0_T_1 = bits(bits[0], 1, 1) @[booth2_encoder.scala 36:46]
    node _X2Bools_0_T_2 = xor(_X2Bools_0_T, _X2Bools_0_T_1) @[booth2_encoder.scala 36:38]
    node _X2Bools_0_T_3 = not(_X2Bools_0_T_2) @[booth2_encoder.scala 36:26]
    node _X2Bools_0_T_4 = bits(_X2Bools_0_T_3, 0, 0) @[booth2_encoder.scala 36:52]
    X2Bools[0] <= _X2Bools_0_T_4 @[booth2_encoder.scala 36:22]
    node _invBools_0_T = bits(bits[0], 2, 2) @[booth2_encoder.scala 37:32]
    node _invBools_0_T_1 = bits(_invBools_0_T, 0, 0) @[booth2_encoder.scala 37:36]
    invBools[0] <= _invBools_0_T_1 @[booth2_encoder.scala 37:22]
    node _set0Bools_0_T = andr(bits[0]) @[booth2_encoder.scala 38:33]
    node _set0Bools_0_T_1 = not(bits[0]) @[booth2_encoder.scala 38:48]
    node _set0Bools_0_T_2 = andr(_set0Bools_0_T_1) @[booth2_encoder.scala 38:58]
    node _set0Bools_0_T_3 = bits(_set0Bools_0_T_2, 0, 0) @[booth2_encoder.scala 38:63]
    node _set0Bools_0_T_4 = or(_set0Bools_0_T, _set0Bools_0_T_3) @[booth2_encoder.scala 38:45]
    set0Bools[0] <= _set0Bools_0_T_4 @[booth2_encoder.scala 38:22]
    node _X2Bools_1_T = bits(bits[1], 0, 0) @[booth2_encoder.scala 36:35]
    node _X2Bools_1_T_1 = bits(bits[1], 1, 1) @[booth2_encoder.scala 36:46]
    node _X2Bools_1_T_2 = xor(_X2Bools_1_T, _X2Bools_1_T_1) @[booth2_encoder.scala 36:38]
    node _X2Bools_1_T_3 = not(_X2Bools_1_T_2) @[booth2_encoder.scala 36:26]
    node _X2Bools_1_T_4 = bits(_X2Bools_1_T_3, 0, 0) @[booth2_encoder.scala 36:52]
    X2Bools[1] <= _X2Bools_1_T_4 @[booth2_encoder.scala 36:22]
    node _invBools_1_T = bits(bits[1], 2, 2) @[booth2_encoder.scala 37:32]
    node _invBools_1_T_1 = bits(_invBools_1_T, 0, 0) @[booth2_encoder.scala 37:36]
    invBools[1] <= _invBools_1_T_1 @[booth2_encoder.scala 37:22]
    node _set0Bools_1_T = andr(bits[1]) @[booth2_encoder.scala 38:33]
    node _set0Bools_1_T_1 = not(bits[1]) @[booth2_encoder.scala 38:48]
    node _set0Bools_1_T_2 = andr(_set0Bools_1_T_1) @[booth2_encoder.scala 38:58]
    node _set0Bools_1_T_3 = bits(_set0Bools_1_T_2, 0, 0) @[booth2_encoder.scala 38:63]
    node _set0Bools_1_T_4 = or(_set0Bools_1_T, _set0Bools_1_T_3) @[booth2_encoder.scala 38:45]
    set0Bools[1] <= _set0Bools_1_T_4 @[booth2_encoder.scala 38:22]
    node _output_X2_T = cat(X2Bools[1], X2Bools[0]) @[booth2_encoder.scala 42:28]
    output.X2 <= _output_X2_T @[booth2_encoder.scala 42:17]
    node _output_inv_T = cat(invBools[1], invBools[0]) @[booth2_encoder.scala 43:29]
    output.inv <= _output_inv_T @[booth2_encoder.scala 43:17]
    node _output_set0_T = cat(set0Bools[1], set0Bools[0]) @[booth2_encoder.scala 44:30]
    output.set0 <= _output_set0_T @[booth2_encoder.scala 44:17]

  module ppGenerator :
    input clock : Clock
    input reset : Reset
    output inputData : { flip multiplicand : SInt<4>}
    output inputCtrl : { flip X2 : UInt<2>, flip inv : UInt<2>, flip Set0 : UInt<2>}
    output outputData : { pp_out : SInt<8>[2], sig_out : SInt<8>}

    wire E : UInt<1>[2] @[pp_generator.scala 28:26]
    wire E_inv : UInt<1>[2] @[pp_generator.scala 29:26]
    wire pp_X2 : SInt<5>[2] @[pp_generator.scala 31:26]
    wire pp_set : SInt<5>[2] @[pp_generator.scala 32:26]
    wire pp_inv : SInt<5>[2] @[pp_generator.scala 33:26]
    wire pp_temp : SInt<8>[2] @[pp_generator.scala 34:26]
    wire _pp_WIRE : SInt<8>[2] @[pp_generator.scala 36:37]
    _pp_WIRE[0] <= asSInt(UInt<8>("h0")) @[pp_generator.scala 36:37]
    _pp_WIRE[1] <= asSInt(UInt<8>("h0")) @[pp_generator.scala 36:37]
    reg pp : SInt<8>[2], clock with :
      reset => (reset, _pp_WIRE) @[pp_generator.scala 36:29]
    reg sign_com : SInt<8>, clock with :
      reset => (reset, asSInt(UInt<8>("h0"))) @[pp_generator.scala 37:29]
    node _pp_X2_0_T = bits(inputCtrl.X2, 0, 0) @[pp_generator.scala 40:38]
    node _pp_X2_0_T_1 = bits(_pp_X2_0_T, 0, 0) @[pp_generator.scala 40:42]
    node pp_X2_0_lo = asUInt(asSInt(UInt<1>("h0"))) @[Cat.scala 33:92]
    node pp_X2_0_hi = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_0_T_2 = cat(pp_X2_0_hi, pp_X2_0_lo) @[Cat.scala 33:92]
    node _pp_X2_0_T_3 = bits(inputData.multiplicand, 3, 3) @[pp_generator.scala 41:51]
    node pp_X2_0_lo_1 = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_0_T_4 = cat(_pp_X2_0_T_3, pp_X2_0_lo_1) @[Cat.scala 33:92]
    node _pp_X2_0_T_5 = mux(_pp_X2_0_T_1, _pp_X2_0_T_2, _pp_X2_0_T_4) @[pp_generator.scala 40:25]
    node _pp_X2_0_T_6 = asSInt(_pp_X2_0_T_5) @[pp_generator.scala 41:90]
    pp_X2[0] <= _pp_X2_0_T_6 @[pp_generator.scala 40:19]
    node _pp_set_0_T = bits(inputCtrl.Set0, 0, 0) @[pp_generator.scala 42:40]
    node _pp_set_0_T_1 = bits(_pp_set_0_T, 0, 0) @[pp_generator.scala 42:44]
    node _pp_set_0_T_2 = mux(_pp_set_0_T_1, asSInt(UInt<5>("h0")), pp_X2[0]) @[pp_generator.scala 42:25]
    pp_set[0] <= _pp_set_0_T_2 @[pp_generator.scala 42:19]
    node _pp_inv_0_T = bits(inputCtrl.inv, 0, 0) @[pp_generator.scala 43:39]
    node _pp_inv_0_T_1 = bits(_pp_inv_0_T, 0, 0) @[pp_generator.scala 43:43]
    node _pp_inv_0_T_2 = not(pp_set[0]) @[pp_generator.scala 43:51]
    node _pp_inv_0_T_3 = asSInt(_pp_inv_0_T_2) @[pp_generator.scala 43:51]
    node _pp_inv_0_T_4 = mux(_pp_inv_0_T_1, _pp_inv_0_T_3, pp_set[0]) @[pp_generator.scala 43:25]
    pp_inv[0] <= _pp_inv_0_T_4 @[pp_generator.scala 43:19]
    node _E_inv_0_T = bits(inputCtrl.Set0, 0, 0) @[pp_generator.scala 44:40]
    node _E_inv_0_T_1 = bits(_E_inv_0_T, 0, 0) @[pp_generator.scala 44:44]
    node _E_inv_0_T_2 = bits(inputCtrl.inv, 0, 0) @[pp_generator.scala 44:65]
    node _E_inv_0_T_3 = bits(_E_inv_0_T_2, 0, 0) @[pp_generator.scala 44:69]
    node _E_inv_0_T_4 = bits(inputCtrl.inv, 0, 0) @[pp_generator.scala 44:91]
    node _E_inv_0_T_5 = bits(inputData.multiplicand, 3, 3) @[pp_generator.scala 44:117]
    node _E_inv_0_T_6 = xor(_E_inv_0_T_4, _E_inv_0_T_5) @[pp_generator.scala 44:94]
    node _E_inv_0_T_7 = bits(_E_inv_0_T_6, 0, 0) @[pp_generator.scala 44:131]
    node _E_inv_0_T_8 = mux(_E_inv_0_T_1, _E_inv_0_T_3, _E_inv_0_T_7) @[pp_generator.scala 44:25]
    E_inv[0] <= _E_inv_0_T_8 @[pp_generator.scala 44:19]
    node _E_0_T = not(E_inv[0]) @[pp_generator.scala 45:22]
    E[0] <= _E_0_T @[pp_generator.scala 45:19]
    node pp_temp_0_lo_lo = asUInt(pp_inv[0]) @[Cat.scala 33:92]
    node pp_temp_0_lo = cat(E_inv[0], pp_temp_0_lo_lo) @[Cat.scala 33:92]
    node pp_temp_0_hi = cat(E[0], E_inv[0]) @[Cat.scala 33:92]
    node _pp_temp_0_T = cat(pp_temp_0_hi, pp_temp_0_lo) @[Cat.scala 33:92]
    node _pp_temp_0_T_1 = asSInt(_pp_temp_0_T) @[pp_generator.scala 49:86]
    pp_temp[0] <= _pp_temp_0_T_1 @[pp_generator.scala 49:28]
    node _pp_X2_1_T = bits(inputCtrl.X2, 1, 1) @[pp_generator.scala 40:38]
    node _pp_X2_1_T_1 = bits(_pp_X2_1_T, 0, 0) @[pp_generator.scala 40:42]
    node pp_X2_1_lo = asUInt(asSInt(UInt<1>("h0"))) @[Cat.scala 33:92]
    node pp_X2_1_hi = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_1_T_2 = cat(pp_X2_1_hi, pp_X2_1_lo) @[Cat.scala 33:92]
    node _pp_X2_1_T_3 = bits(inputData.multiplicand, 3, 3) @[pp_generator.scala 41:51]
    node pp_X2_1_lo_1 = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_1_T_4 = cat(_pp_X2_1_T_3, pp_X2_1_lo_1) @[Cat.scala 33:92]
    node _pp_X2_1_T_5 = mux(_pp_X2_1_T_1, _pp_X2_1_T_2, _pp_X2_1_T_4) @[pp_generator.scala 40:25]
    node _pp_X2_1_T_6 = asSInt(_pp_X2_1_T_5) @[pp_generator.scala 41:90]
    pp_X2[1] <= _pp_X2_1_T_6 @[pp_generator.scala 40:19]
    node _pp_set_1_T = bits(inputCtrl.Set0, 1, 1) @[pp_generator.scala 42:40]
    node _pp_set_1_T_1 = bits(_pp_set_1_T, 0, 0) @[pp_generator.scala 42:44]
    node _pp_set_1_T_2 = mux(_pp_set_1_T_1, asSInt(UInt<5>("h0")), pp_X2[1]) @[pp_generator.scala 42:25]
    pp_set[1] <= _pp_set_1_T_2 @[pp_generator.scala 42:19]
    node _pp_inv_1_T = bits(inputCtrl.inv, 1, 1) @[pp_generator.scala 43:39]
    node _pp_inv_1_T_1 = bits(_pp_inv_1_T, 0, 0) @[pp_generator.scala 43:43]
    node _pp_inv_1_T_2 = not(pp_set[1]) @[pp_generator.scala 43:51]
    node _pp_inv_1_T_3 = asSInt(_pp_inv_1_T_2) @[pp_generator.scala 43:51]
    node _pp_inv_1_T_4 = mux(_pp_inv_1_T_1, _pp_inv_1_T_3, pp_set[1]) @[pp_generator.scala 43:25]
    pp_inv[1] <= _pp_inv_1_T_4 @[pp_generator.scala 43:19]
    node _E_inv_1_T = bits(inputCtrl.Set0, 1, 1) @[pp_generator.scala 44:40]
    node _E_inv_1_T_1 = bits(_E_inv_1_T, 0, 0) @[pp_generator.scala 44:44]
    node _E_inv_1_T_2 = bits(inputCtrl.inv, 1, 1) @[pp_generator.scala 44:65]
    node _E_inv_1_T_3 = bits(_E_inv_1_T_2, 0, 0) @[pp_generator.scala 44:69]
    node _E_inv_1_T_4 = bits(inputCtrl.inv, 1, 1) @[pp_generator.scala 44:91]
    node _E_inv_1_T_5 = bits(inputData.multiplicand, 3, 3) @[pp_generator.scala 44:117]
    node _E_inv_1_T_6 = xor(_E_inv_1_T_4, _E_inv_1_T_5) @[pp_generator.scala 44:94]
    node _E_inv_1_T_7 = bits(_E_inv_1_T_6, 0, 0) @[pp_generator.scala 44:131]
    node _E_inv_1_T_8 = mux(_E_inv_1_T_1, _E_inv_1_T_3, _E_inv_1_T_7) @[pp_generator.scala 44:25]
    E_inv[1] <= _E_inv_1_T_8 @[pp_generator.scala 44:19]
    node _E_1_T = not(E_inv[1]) @[pp_generator.scala 45:22]
    E[1] <= _E_1_T @[pp_generator.scala 45:19]
    node pp_temp_1_lo_lo = asUInt(pp_inv[1]) @[Cat.scala 33:92]
    node pp_temp_1_lo = cat(E[1], pp_temp_1_lo_lo) @[Cat.scala 33:92]
    node pp_temp_1_hi = cat(UInt<1>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
    node _pp_temp_1_T = cat(pp_temp_1_hi, pp_temp_1_lo) @[Cat.scala 33:92]
    node _pp_temp_1_T_1 = asSInt(_pp_temp_1_T) @[pp_generator.scala 55:94]
    pp_temp[1] <= _pp_temp_1_T_1 @[pp_generator.scala 55:24]
    pp[0] <= pp_temp[0] @[pp_generator.scala 61:19]
    node _pp_1_T = bits(pp_temp[1], 5, 0) @[pp_generator.scala 63:36]
    node _pp_1_T_1 = bits(inputCtrl.inv, 0, 0) @[pp_generator.scala 63:78]
    node pp_1_hi = cat(_pp_1_T, UInt<1>("h0")) @[Cat.scala 33:92]
    node _pp_1_T_2 = cat(pp_1_hi, _pp_1_T_1) @[Cat.scala 33:92]
    node _pp_1_T_3 = asSInt(_pp_1_T_2) @[pp_generator.scala 63:85]
    pp[1] <= _pp_1_T_3 @[pp_generator.scala 63:19]
    node _sign_com_T = bits(inputCtrl.inv, 1, 1) @[pp_generator.scala 68:54]
    node sign_com_hi = cat(UInt<1>("h0"), _sign_com_T) @[Cat.scala 33:92]
    node _sign_com_T_1 = cat(sign_com_hi, UInt<2>("h0")) @[Cat.scala 33:92]
    node _sign_com_T_2 = asSInt(_sign_com_T_1) @[pp_generator.scala 68:97]
    sign_com <= _sign_com_T_2 @[pp_generator.scala 68:14]
    outputData.pp_out <= pp @[pp_generator.scala 70:25]
    outputData.sig_out <= sign_com @[pp_generator.scala 71:25]

  module RCA :
    input clock : Clock
    input reset : Reset
    output input : { flip a_in : SInt<8>, flip b_in : SInt<8>, flip c_in : SInt<1>}
    output output : { S : SInt<8>, C : SInt<8>}

    wire g_comb : UInt<1>[8] @[rca.scala 22:22]
    wire p_comb : UInt<1>[8] @[rca.scala 23:22]
    wire s_comb : UInt<1>[8] @[rca.scala 24:22]
    wire c_comb : UInt<1>[9] @[rca.scala 25:22]
    node _c_comb_0_T = bits(input.c_in, 0, 0) @[rca.scala 27:29]
    c_comb[0] <= _c_comb_0_T @[rca.scala 27:15]
    node _g_comb_0_T = bits(input.a_in, 0, 0) @[rca.scala 30:35]
    node _g_comb_0_T_1 = bits(input.b_in, 0, 0) @[rca.scala 30:51]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[rca.scala 30:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[0] <= _g_comb_0_T_3 @[rca.scala 30:21]
    node _p_comb_0_T = bits(input.a_in, 0, 0) @[rca.scala 31:35]
    node _p_comb_0_T_1 = bits(input.b_in, 0, 0) @[rca.scala 31:51]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[rca.scala 31:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[0] <= _p_comb_0_T_3 @[rca.scala 31:21]
    node _s_comb_0_T = xor(p_comb[0], c_comb[0]) @[rca.scala 32:34]
    s_comb[0] <= _s_comb_0_T @[rca.scala 32:21]
    node _c_comb_1_T = and(c_comb[0], p_comb[0]) @[rca.scala 33:34]
    node _c_comb_1_T_1 = or(_c_comb_1_T, g_comb[0]) @[rca.scala 33:46]
    c_comb[1] <= _c_comb_1_T_1 @[rca.scala 33:21]
    node _g_comb_1_T = bits(input.a_in, 1, 1) @[rca.scala 30:35]
    node _g_comb_1_T_1 = bits(input.b_in, 1, 1) @[rca.scala 30:51]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[rca.scala 30:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[1] <= _g_comb_1_T_3 @[rca.scala 30:21]
    node _p_comb_1_T = bits(input.a_in, 1, 1) @[rca.scala 31:35]
    node _p_comb_1_T_1 = bits(input.b_in, 1, 1) @[rca.scala 31:51]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[rca.scala 31:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[1] <= _p_comb_1_T_3 @[rca.scala 31:21]
    node _s_comb_1_T = xor(p_comb[1], c_comb[1]) @[rca.scala 32:34]
    s_comb[1] <= _s_comb_1_T @[rca.scala 32:21]
    node _c_comb_2_T = and(c_comb[1], p_comb[1]) @[rca.scala 33:34]
    node _c_comb_2_T_1 = or(_c_comb_2_T, g_comb[1]) @[rca.scala 33:46]
    c_comb[2] <= _c_comb_2_T_1 @[rca.scala 33:21]
    node _g_comb_2_T = bits(input.a_in, 2, 2) @[rca.scala 30:35]
    node _g_comb_2_T_1 = bits(input.b_in, 2, 2) @[rca.scala 30:51]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[rca.scala 30:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[2] <= _g_comb_2_T_3 @[rca.scala 30:21]
    node _p_comb_2_T = bits(input.a_in, 2, 2) @[rca.scala 31:35]
    node _p_comb_2_T_1 = bits(input.b_in, 2, 2) @[rca.scala 31:51]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[rca.scala 31:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[2] <= _p_comb_2_T_3 @[rca.scala 31:21]
    node _s_comb_2_T = xor(p_comb[2], c_comb[2]) @[rca.scala 32:34]
    s_comb[2] <= _s_comb_2_T @[rca.scala 32:21]
    node _c_comb_3_T = and(c_comb[2], p_comb[2]) @[rca.scala 33:34]
    node _c_comb_3_T_1 = or(_c_comb_3_T, g_comb[2]) @[rca.scala 33:46]
    c_comb[3] <= _c_comb_3_T_1 @[rca.scala 33:21]
    node _g_comb_3_T = bits(input.a_in, 3, 3) @[rca.scala 30:35]
    node _g_comb_3_T_1 = bits(input.b_in, 3, 3) @[rca.scala 30:51]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[rca.scala 30:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[3] <= _g_comb_3_T_3 @[rca.scala 30:21]
    node _p_comb_3_T = bits(input.a_in, 3, 3) @[rca.scala 31:35]
    node _p_comb_3_T_1 = bits(input.b_in, 3, 3) @[rca.scala 31:51]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[rca.scala 31:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[3] <= _p_comb_3_T_3 @[rca.scala 31:21]
    node _s_comb_3_T = xor(p_comb[3], c_comb[3]) @[rca.scala 32:34]
    s_comb[3] <= _s_comb_3_T @[rca.scala 32:21]
    node _c_comb_4_T = and(c_comb[3], p_comb[3]) @[rca.scala 33:34]
    node _c_comb_4_T_1 = or(_c_comb_4_T, g_comb[3]) @[rca.scala 33:46]
    c_comb[4] <= _c_comb_4_T_1 @[rca.scala 33:21]
    node _g_comb_4_T = bits(input.a_in, 4, 4) @[rca.scala 30:35]
    node _g_comb_4_T_1 = bits(input.b_in, 4, 4) @[rca.scala 30:51]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[rca.scala 30:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[4] <= _g_comb_4_T_3 @[rca.scala 30:21]
    node _p_comb_4_T = bits(input.a_in, 4, 4) @[rca.scala 31:35]
    node _p_comb_4_T_1 = bits(input.b_in, 4, 4) @[rca.scala 31:51]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[rca.scala 31:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[4] <= _p_comb_4_T_3 @[rca.scala 31:21]
    node _s_comb_4_T = xor(p_comb[4], c_comb[4]) @[rca.scala 32:34]
    s_comb[4] <= _s_comb_4_T @[rca.scala 32:21]
    node _c_comb_5_T = and(c_comb[4], p_comb[4]) @[rca.scala 33:34]
    node _c_comb_5_T_1 = or(_c_comb_5_T, g_comb[4]) @[rca.scala 33:46]
    c_comb[5] <= _c_comb_5_T_1 @[rca.scala 33:21]
    node _g_comb_5_T = bits(input.a_in, 5, 5) @[rca.scala 30:35]
    node _g_comb_5_T_1 = bits(input.b_in, 5, 5) @[rca.scala 30:51]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[rca.scala 30:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[5] <= _g_comb_5_T_3 @[rca.scala 30:21]
    node _p_comb_5_T = bits(input.a_in, 5, 5) @[rca.scala 31:35]
    node _p_comb_5_T_1 = bits(input.b_in, 5, 5) @[rca.scala 31:51]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[rca.scala 31:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[5] <= _p_comb_5_T_3 @[rca.scala 31:21]
    node _s_comb_5_T = xor(p_comb[5], c_comb[5]) @[rca.scala 32:34]
    s_comb[5] <= _s_comb_5_T @[rca.scala 32:21]
    node _c_comb_6_T = and(c_comb[5], p_comb[5]) @[rca.scala 33:34]
    node _c_comb_6_T_1 = or(_c_comb_6_T, g_comb[5]) @[rca.scala 33:46]
    c_comb[6] <= _c_comb_6_T_1 @[rca.scala 33:21]
    node _g_comb_6_T = bits(input.a_in, 6, 6) @[rca.scala 30:35]
    node _g_comb_6_T_1 = bits(input.b_in, 6, 6) @[rca.scala 30:51]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[rca.scala 30:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[6] <= _g_comb_6_T_3 @[rca.scala 30:21]
    node _p_comb_6_T = bits(input.a_in, 6, 6) @[rca.scala 31:35]
    node _p_comb_6_T_1 = bits(input.b_in, 6, 6) @[rca.scala 31:51]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[rca.scala 31:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[6] <= _p_comb_6_T_3 @[rca.scala 31:21]
    node _s_comb_6_T = xor(p_comb[6], c_comb[6]) @[rca.scala 32:34]
    s_comb[6] <= _s_comb_6_T @[rca.scala 32:21]
    node _c_comb_7_T = and(c_comb[6], p_comb[6]) @[rca.scala 33:34]
    node _c_comb_7_T_1 = or(_c_comb_7_T, g_comb[6]) @[rca.scala 33:46]
    c_comb[7] <= _c_comb_7_T_1 @[rca.scala 33:21]
    node _g_comb_7_T = bits(input.a_in, 7, 7) @[rca.scala 30:35]
    node _g_comb_7_T_1 = bits(input.b_in, 7, 7) @[rca.scala 30:51]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[rca.scala 30:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[7] <= _g_comb_7_T_3 @[rca.scala 30:21]
    node _p_comb_7_T = bits(input.a_in, 7, 7) @[rca.scala 31:35]
    node _p_comb_7_T_1 = bits(input.b_in, 7, 7) @[rca.scala 31:51]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[rca.scala 31:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[7] <= _p_comb_7_T_3 @[rca.scala 31:21]
    node _s_comb_7_T = xor(p_comb[7], c_comb[7]) @[rca.scala 32:34]
    s_comb[7] <= _s_comb_7_T @[rca.scala 32:21]
    node _c_comb_8_T = and(c_comb[7], p_comb[7]) @[rca.scala 33:34]
    node _c_comb_8_T_1 = or(_c_comb_8_T, g_comb[7]) @[rca.scala 33:46]
    c_comb[8] <= _c_comb_8_T_1 @[rca.scala 33:21]
    node output_S_lo_lo = cat(s_comb[1], s_comb[0]) @[rca.scala 36:24]
    node output_S_lo_hi = cat(s_comb[3], s_comb[2]) @[rca.scala 36:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[rca.scala 36:24]
    node output_S_hi_lo = cat(s_comb[5], s_comb[4]) @[rca.scala 36:24]
    node output_S_hi_hi = cat(s_comb[7], s_comb[6]) @[rca.scala 36:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[rca.scala 36:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[rca.scala 36:24]
    node _output_S_T_1 = asSInt(_output_S_T) @[rca.scala 36:31]
    output.S <= _output_S_T_1 @[rca.scala 36:14]
    node _output_C_T = asSInt(c_comb[8]) @[rca.scala 37:40]
    output.C <= _output_C_T @[rca.scala 37:14]

  module pp_compressor3_2 :
    input clock : Clock
    input reset : Reset
    output input : { flip pp0_in : SInt<8>, flip pp1_in : SInt<8>, flip pp2_in : SInt<8>}
    output output : { S : SInt<8>, C : SInt<8>}

    wire g_comb : UInt<1>[8] @[pp_compressor3_2.scala 22:22]
    wire p_comb : UInt<1>[8] @[pp_compressor3_2.scala 23:22]
    wire s_comb : UInt<1>[8] @[pp_compressor3_2.scala 24:22]
    wire c_comb : UInt<1>[8] @[pp_compressor3_2.scala 25:22]
    node _g_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 28:35]
    node _g_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 28:53]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[0] <= _g_comb_0_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 29:35]
    node _p_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 29:53]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[0] <= _p_comb_0_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 30:46]
    node _s_comb_0_T_1 = bits(_s_comb_0_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_0_T_2 = xor(p_comb[0], _s_comb_0_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[0] <= _s_comb_0_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 31:34]
    node _c_comb_0_T_1 = bits(_c_comb_0_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_0_T_2 = and(_c_comb_0_T_1, p_comb[0]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_0_T_3 = or(_c_comb_0_T_2, g_comb[0]) @[pp_compressor3_2.scala 31:57]
    c_comb[0] <= _c_comb_0_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 28:35]
    node _g_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 28:53]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[1] <= _g_comb_1_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 29:35]
    node _p_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 29:53]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[1] <= _p_comb_1_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 30:46]
    node _s_comb_1_T_1 = bits(_s_comb_1_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_1_T_2 = xor(p_comb[1], _s_comb_1_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[1] <= _s_comb_1_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 31:34]
    node _c_comb_1_T_1 = bits(_c_comb_1_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_1_T_2 = and(_c_comb_1_T_1, p_comb[1]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_1_T_3 = or(_c_comb_1_T_2, g_comb[1]) @[pp_compressor3_2.scala 31:57]
    c_comb[1] <= _c_comb_1_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 28:35]
    node _g_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 28:53]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[2] <= _g_comb_2_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 29:35]
    node _p_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 29:53]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[2] <= _p_comb_2_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 30:46]
    node _s_comb_2_T_1 = bits(_s_comb_2_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_2_T_2 = xor(p_comb[2], _s_comb_2_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[2] <= _s_comb_2_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 31:34]
    node _c_comb_2_T_1 = bits(_c_comb_2_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_2_T_2 = and(_c_comb_2_T_1, p_comb[2]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_2_T_3 = or(_c_comb_2_T_2, g_comb[2]) @[pp_compressor3_2.scala 31:57]
    c_comb[2] <= _c_comb_2_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 28:35]
    node _g_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 28:53]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[3] <= _g_comb_3_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 29:35]
    node _p_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 29:53]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[3] <= _p_comb_3_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 30:46]
    node _s_comb_3_T_1 = bits(_s_comb_3_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_3_T_2 = xor(p_comb[3], _s_comb_3_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[3] <= _s_comb_3_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 31:34]
    node _c_comb_3_T_1 = bits(_c_comb_3_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_3_T_2 = and(_c_comb_3_T_1, p_comb[3]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_3_T_3 = or(_c_comb_3_T_2, g_comb[3]) @[pp_compressor3_2.scala 31:57]
    c_comb[3] <= _c_comb_3_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 28:35]
    node _g_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 28:53]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[4] <= _g_comb_4_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 29:35]
    node _p_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 29:53]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[4] <= _p_comb_4_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 30:46]
    node _s_comb_4_T_1 = bits(_s_comb_4_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_4_T_2 = xor(p_comb[4], _s_comb_4_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[4] <= _s_comb_4_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 31:34]
    node _c_comb_4_T_1 = bits(_c_comb_4_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_4_T_2 = and(_c_comb_4_T_1, p_comb[4]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_4_T_3 = or(_c_comb_4_T_2, g_comb[4]) @[pp_compressor3_2.scala 31:57]
    c_comb[4] <= _c_comb_4_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 28:35]
    node _g_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 28:53]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[5] <= _g_comb_5_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 29:35]
    node _p_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 29:53]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[5] <= _p_comb_5_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 30:46]
    node _s_comb_5_T_1 = bits(_s_comb_5_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_5_T_2 = xor(p_comb[5], _s_comb_5_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[5] <= _s_comb_5_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 31:34]
    node _c_comb_5_T_1 = bits(_c_comb_5_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_5_T_2 = and(_c_comb_5_T_1, p_comb[5]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_5_T_3 = or(_c_comb_5_T_2, g_comb[5]) @[pp_compressor3_2.scala 31:57]
    c_comb[5] <= _c_comb_5_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 28:35]
    node _g_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 28:53]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[6] <= _g_comb_6_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 29:35]
    node _p_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 29:53]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[6] <= _p_comb_6_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 30:46]
    node _s_comb_6_T_1 = bits(_s_comb_6_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_6_T_2 = xor(p_comb[6], _s_comb_6_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[6] <= _s_comb_6_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 31:34]
    node _c_comb_6_T_1 = bits(_c_comb_6_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_6_T_2 = and(_c_comb_6_T_1, p_comb[6]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_6_T_3 = or(_c_comb_6_T_2, g_comb[6]) @[pp_compressor3_2.scala 31:57]
    c_comb[6] <= _c_comb_6_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 28:35]
    node _g_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 28:53]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[7] <= _g_comb_7_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 29:35]
    node _p_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 29:53]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[7] <= _p_comb_7_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 30:46]
    node _s_comb_7_T_1 = bits(_s_comb_7_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_7_T_2 = xor(p_comb[7], _s_comb_7_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[7] <= _s_comb_7_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 31:34]
    node _c_comb_7_T_1 = bits(_c_comb_7_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_7_T_2 = and(_c_comb_7_T_1, p_comb[7]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_7_T_3 = or(_c_comb_7_T_2, g_comb[7]) @[pp_compressor3_2.scala 31:57]
    c_comb[7] <= _c_comb_7_T_3 @[pp_compressor3_2.scala 31:19]
    node output_S_lo_lo = cat(s_comb[1], s_comb[0]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi = cat(s_comb[3], s_comb[2]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo = cat(s_comb[5], s_comb[4]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi = cat(s_comb[7], s_comb[6]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T_1 = asSInt(_output_S_T) @[pp_compressor3_2.scala 34:31]
    output.S <= _output_S_T_1 @[pp_compressor3_2.scala 34:14]
    node output_C_lo_lo = cat(c_comb[1], c_comb[0]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi = cat(c_comb[3], c_comb[2]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo = cat(output_C_lo_hi, output_C_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo = cat(c_comb[5], c_comb[4]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi = cat(c_comb[7], c_comb[6]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi = cat(output_C_hi_hi, output_C_hi_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T = cat(output_C_hi, output_C_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T_1 = bits(_output_C_T, 6, 0) @[pp_compressor3_2.scala 35:36]
    node _output_C_T_2 = cat(_output_C_T_1, UInt<1>("h0")) @[Cat.scala 33:92]
    node _output_C_T_3 = asSInt(_output_C_T_2) @[pp_compressor3_2.scala 35:61]
    output.C <= _output_C_T_3 @[pp_compressor3_2.scala 35:14]

  module wallaceTree :
    input clock : Clock
    input reset : Reset
    output io : { flip data_i : SInt<8>[3], data_o : SInt<8>}

    inst rca of RCA @[wallace_tree.scala 13:19]
    rca.clock <= clock
    rca.reset <= reset
    wire _rca_in_WIRE : SInt<8>[2] @[wallace_tree.scala 52:32]
    _rca_in_WIRE[0] <= asSInt(UInt<8>("h0")) @[wallace_tree.scala 52:32]
    _rca_in_WIRE[1] <= asSInt(UInt<8>("h0")) @[wallace_tree.scala 52:32]
    wire rca_in : SInt<8>[2]
    rca_in <= _rca_in_WIRE
    wire _l1_csa_in_WIRE : SInt<8>[3] @[wallace_tree.scala 55:36]
    _l1_csa_in_WIRE[0] <= asSInt(UInt<8>("h0")) @[wallace_tree.scala 55:36]
    _l1_csa_in_WIRE[1] <= asSInt(UInt<8>("h0")) @[wallace_tree.scala 55:36]
    _l1_csa_in_WIRE[2] <= asSInt(UInt<8>("h0")) @[wallace_tree.scala 55:36]
    wire l1_csa_in : SInt<8>[3]
    l1_csa_in <= _l1_csa_in_WIRE
    wire _l1_csa_os_WIRE : SInt<8>[1] @[wallace_tree.scala 56:36]
    _l1_csa_os_WIRE[0] <= asSInt(UInt<8>("h0")) @[wallace_tree.scala 56:36]
    wire l1_csa_os : SInt<8>[1]
    l1_csa_os <= _l1_csa_os_WIRE
    wire _l1_csa_oc_WIRE : SInt<8>[1] @[wallace_tree.scala 57:36]
    _l1_csa_oc_WIRE[0] <= asSInt(UInt<8>("h0")) @[wallace_tree.scala 57:36]
    wire l1_csa_oc : SInt<8>[1]
    l1_csa_oc <= _l1_csa_oc_WIRE
    wire _l1_csa_out_WIRE : SInt<8>[2] @[wallace_tree.scala 58:36]
    _l1_csa_out_WIRE[0] <= asSInt(UInt<8>("h0")) @[wallace_tree.scala 58:36]
    _l1_csa_out_WIRE[1] <= asSInt(UInt<8>("h0")) @[wallace_tree.scala 58:36]
    wire l1_csa_out : SInt<8>[2]
    l1_csa_out <= _l1_csa_out_WIRE
    inst layer1CSA_0 of pp_compressor3_2 @[wallace_tree.scala 59:44]
    layer1CSA_0.clock <= clock
    layer1CSA_0.reset <= reset
    l1_csa_in[0] <= io.data_i[0] @[wallace_tree.scala 61:43]
    l1_csa_in[1] <= io.data_i[1] @[wallace_tree.scala 61:43]
    l1_csa_in[2] <= io.data_i[2] @[wallace_tree.scala 61:43]
    layer1CSA_0.input.pp0_in <= l1_csa_in[0] @[wallace_tree.scala 63:31]
    layer1CSA_0.input.pp1_in <= l1_csa_in[1] @[wallace_tree.scala 64:31]
    layer1CSA_0.input.pp2_in <= l1_csa_in[2] @[wallace_tree.scala 65:31]
    l1_csa_os[0] <= layer1CSA_0.output.S @[wallace_tree.scala 66:31]
    l1_csa_oc[0] <= layer1CSA_0.output.C @[wallace_tree.scala 67:31]
    l1_csa_out[0] <= l1_csa_os[0] @[wallace_tree.scala 68:33]
    l1_csa_out[1] <= l1_csa_oc[0] @[wallace_tree.scala 69:35]
    rca_in <= l1_csa_out @[wallace_tree.scala 77:12]
    rca.input.a_in <= rca_in[0] @[wallace_tree.scala 250:18]
    rca.input.b_in <= rca_in[1] @[wallace_tree.scala 251:18]
    rca.input.c_in <= asSInt(UInt<1>("h0")) @[wallace_tree.scala 252:18]
    io.data_o <= rca.output.S @[wallace_tree.scala 253:18]

  module Multiplier :
    input clock : Clock
    input reset : UInt<1>
    output input : { flip multiplicand : SInt<4>, flip multiplier : SInt<4>}
    output output : { product : SInt<8>}

    inst booth2_encoder of booth2Encoder @[multiplier.scala 21:34]
    booth2_encoder.clock <= clock
    booth2_encoder.reset <= reset
    inst pp_generator of ppGenerator @[multiplier.scala 22:34]
    pp_generator.clock <= clock
    pp_generator.reset <= reset
    inst wallace_tree of wallaceTree @[multiplier.scala 23:34]
    wallace_tree.clock <= clock
    wallace_tree.reset <= reset
    booth2_encoder.input.multiplier <= input.multiplier @[multiplier.scala 25:37]
    pp_generator.inputData.multiplicand <= input.multiplicand @[multiplier.scala 27:41]
    pp_generator.inputCtrl.X2 <= booth2_encoder.output.X2 @[multiplier.scala 28:41]
    pp_generator.inputCtrl.inv <= booth2_encoder.output.inv @[multiplier.scala 29:41]
    pp_generator.inputCtrl.Set0 <= booth2_encoder.output.set0 @[multiplier.scala 30:41]
    wallace_tree.io.data_i[0] <= pp_generator.outputData.pp_out[0] @[multiplier.scala 33:35]
    wallace_tree.io.data_i[1] <= pp_generator.outputData.pp_out[1] @[multiplier.scala 33:35]
    wallace_tree.io.data_i[2] <= pp_generator.outputData.sig_out @[multiplier.scala 35:40]
    output.product <= wallace_tree.io.data_o @[multiplier.scala 37:41]

