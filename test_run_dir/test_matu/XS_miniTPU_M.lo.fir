circuit XS_miniTPU_M :
  module booth2Encoder :
    input clock : Clock
    input reset : UInt<1>
    input input_multiplier : SInt<4>
    output output_X2 : UInt<2>
    output output_inv : UInt<2>
    output output_set0 : UInt<2>

    node multiplier2_hi = asUInt(input_multiplier) @[Cat.scala 33:92]
    node _multiplier2_T = cat(multiplier2_hi, UInt<1>("h0")) @[Cat.scala 33:92]
    node multiplier2 = _multiplier2_T @[booth2_encoder.scala 22:27 29:17]
    node _bits_0_T = bits(multiplier2, 2, 0) @[booth2_encoder.scala 32:31]
    node _bits_1_T = bits(multiplier2, 4, 2) @[booth2_encoder.scala 32:31]
    node bits_0 = _bits_0_T @[booth2_encoder.scala 23:27 32:17]
    node _X2Bools_0_T = bits(bits_0, 0, 0) @[booth2_encoder.scala 36:35]
    node _X2Bools_0_T_1 = bits(bits_0, 1, 1) @[booth2_encoder.scala 36:46]
    node _X2Bools_0_T_2 = xor(_X2Bools_0_T, _X2Bools_0_T_1) @[booth2_encoder.scala 36:38]
    node _X2Bools_0_T_3 = not(_X2Bools_0_T_2) @[booth2_encoder.scala 36:26]
    node _X2Bools_0_T_4 = bits(_X2Bools_0_T_3, 0, 0) @[booth2_encoder.scala 36:52]
    node _invBools_0_T = bits(bits_0, 2, 2) @[booth2_encoder.scala 37:32]
    node _invBools_0_T_1 = bits(_invBools_0_T, 0, 0) @[booth2_encoder.scala 37:36]
    node _set0Bools_0_T = andr(bits_0) @[booth2_encoder.scala 38:33]
    node _set0Bools_0_T_1 = not(bits_0) @[booth2_encoder.scala 38:48]
    node _set0Bools_0_T_2 = andr(_set0Bools_0_T_1) @[booth2_encoder.scala 38:58]
    node _set0Bools_0_T_3 = bits(_set0Bools_0_T_2, 0, 0) @[booth2_encoder.scala 38:63]
    node _set0Bools_0_T_4 = or(_set0Bools_0_T, _set0Bools_0_T_3) @[booth2_encoder.scala 38:45]
    node bits_1 = _bits_1_T @[booth2_encoder.scala 23:27 32:17]
    node _X2Bools_1_T = bits(bits_1, 0, 0) @[booth2_encoder.scala 36:35]
    node _X2Bools_1_T_1 = bits(bits_1, 1, 1) @[booth2_encoder.scala 36:46]
    node _X2Bools_1_T_2 = xor(_X2Bools_1_T, _X2Bools_1_T_1) @[booth2_encoder.scala 36:38]
    node _X2Bools_1_T_3 = not(_X2Bools_1_T_2) @[booth2_encoder.scala 36:26]
    node _X2Bools_1_T_4 = bits(_X2Bools_1_T_3, 0, 0) @[booth2_encoder.scala 36:52]
    node _invBools_1_T = bits(bits_1, 2, 2) @[booth2_encoder.scala 37:32]
    node _invBools_1_T_1 = bits(_invBools_1_T, 0, 0) @[booth2_encoder.scala 37:36]
    node _set0Bools_1_T = andr(bits_1) @[booth2_encoder.scala 38:33]
    node _set0Bools_1_T_1 = not(bits_1) @[booth2_encoder.scala 38:48]
    node _set0Bools_1_T_2 = andr(_set0Bools_1_T_1) @[booth2_encoder.scala 38:58]
    node _set0Bools_1_T_3 = bits(_set0Bools_1_T_2, 0, 0) @[booth2_encoder.scala 38:63]
    node _set0Bools_1_T_4 = or(_set0Bools_1_T, _set0Bools_1_T_3) @[booth2_encoder.scala 38:45]
    node X2Bools_1 = _X2Bools_1_T_4 @[booth2_encoder.scala 25:30 36:22]
    node X2Bools_0 = _X2Bools_0_T_4 @[booth2_encoder.scala 25:30 36:22]
    node _output_X2_T = cat(X2Bools_1, X2Bools_0) @[booth2_encoder.scala 42:28]
    node invBools_1 = _invBools_1_T_1 @[booth2_encoder.scala 26:30 37:22]
    node invBools_0 = _invBools_0_T_1 @[booth2_encoder.scala 26:30 37:22]
    node _output_inv_T = cat(invBools_1, invBools_0) @[booth2_encoder.scala 43:29]
    node set0Bools_1 = _set0Bools_1_T_4 @[booth2_encoder.scala 27:30 38:22]
    node set0Bools_0 = _set0Bools_0_T_4 @[booth2_encoder.scala 27:30 38:22]
    node _output_set0_T = cat(set0Bools_1, set0Bools_0) @[booth2_encoder.scala 44:30]
    output_X2 <= _output_X2_T @[booth2_encoder.scala 42:17]
    output_inv <= _output_inv_T @[booth2_encoder.scala 43:17]
    output_set0 <= _output_set0_T @[booth2_encoder.scala 44:17]

  module ppGenerator :
    input clock : Clock
    input reset : UInt<1>
    input inputData_multiplicand : SInt<4>
    input inputCtrl_X2 : UInt<2>
    input inputCtrl_inv : UInt<2>
    input inputCtrl_Set0 : UInt<2>
    output outputData_pp_out_0 : SInt<8>
    output outputData_pp_out_1 : SInt<8>
    output outputData_sig_out : SInt<8>

    reg pp_0 : SInt<8>, clock with :
      reset => (UInt<1>("h0"), pp_0) @[pp_generator.scala 36:29]
    reg pp_1 : SInt<8>, clock with :
      reset => (UInt<1>("h0"), pp_1) @[pp_generator.scala 36:29]
    reg sign_com : SInt<8>, clock with :
      reset => (UInt<1>("h0"), sign_com) @[pp_generator.scala 37:29]
    node _pp_X2_0_T = bits(inputCtrl_X2, 0, 0) @[pp_generator.scala 40:38]
    node _pp_X2_0_T_1 = bits(_pp_X2_0_T, 0, 0) @[pp_generator.scala 40:42]
    node pp_X2_0_lo = asUInt(asSInt(UInt<1>("h0"))) @[Cat.scala 33:92]
    node pp_X2_0_hi = asUInt(inputData_multiplicand) @[Cat.scala 33:92]
    node _pp_X2_0_T_2 = cat(pp_X2_0_hi, pp_X2_0_lo) @[Cat.scala 33:92]
    node _pp_X2_0_T_3 = bits(inputData_multiplicand, 3, 3) @[pp_generator.scala 41:51]
    node pp_X2_0_lo_1 = asUInt(inputData_multiplicand) @[Cat.scala 33:92]
    node _pp_X2_0_T_4 = cat(_pp_X2_0_T_3, pp_X2_0_lo_1) @[Cat.scala 33:92]
    node _pp_X2_0_T_5 = mux(_pp_X2_0_T_1, _pp_X2_0_T_2, _pp_X2_0_T_4) @[pp_generator.scala 40:25]
    node _pp_X2_0_T_6 = asSInt(_pp_X2_0_T_5) @[pp_generator.scala 41:90]
    node _pp_set_0_T = bits(inputCtrl_Set0, 0, 0) @[pp_generator.scala 42:40]
    node _pp_set_0_T_1 = bits(_pp_set_0_T, 0, 0) @[pp_generator.scala 42:44]
    node pp_X2_0 = _pp_X2_0_T_6 @[pp_generator.scala 31:26 40:19]
    node _pp_set_0_T_2 = mux(_pp_set_0_T_1, asSInt(UInt<5>("h0")), pp_X2_0) @[pp_generator.scala 42:25]
    node _pp_inv_0_T = bits(inputCtrl_inv, 0, 0) @[pp_generator.scala 43:39]
    node _pp_inv_0_T_1 = bits(_pp_inv_0_T, 0, 0) @[pp_generator.scala 43:43]
    node pp_set_0 = _pp_set_0_T_2 @[pp_generator.scala 32:26 42:19]
    node _pp_inv_0_T_2 = not(pp_set_0) @[pp_generator.scala 43:51]
    node _pp_inv_0_T_3 = asSInt(_pp_inv_0_T_2) @[pp_generator.scala 43:51]
    node _pp_inv_0_T_4 = mux(_pp_inv_0_T_1, _pp_inv_0_T_3, pp_set_0) @[pp_generator.scala 43:25]
    node _E_inv_0_T = bits(inputCtrl_Set0, 0, 0) @[pp_generator.scala 44:40]
    node _E_inv_0_T_1 = bits(_E_inv_0_T, 0, 0) @[pp_generator.scala 44:44]
    node _E_inv_0_T_2 = bits(inputCtrl_inv, 0, 0) @[pp_generator.scala 44:65]
    node _E_inv_0_T_3 = bits(_E_inv_0_T_2, 0, 0) @[pp_generator.scala 44:69]
    node _E_inv_0_T_4 = bits(inputCtrl_inv, 0, 0) @[pp_generator.scala 44:91]
    node _E_inv_0_T_5 = bits(inputData_multiplicand, 3, 3) @[pp_generator.scala 44:117]
    node _E_inv_0_T_6 = xor(_E_inv_0_T_4, _E_inv_0_T_5) @[pp_generator.scala 44:94]
    node _E_inv_0_T_7 = bits(_E_inv_0_T_6, 0, 0) @[pp_generator.scala 44:131]
    node _E_inv_0_T_8 = mux(_E_inv_0_T_1, _E_inv_0_T_3, _E_inv_0_T_7) @[pp_generator.scala 44:25]
    node E_inv_0 = _E_inv_0_T_8 @[pp_generator.scala 29:26 44:19]
    node _E_0_T = not(E_inv_0) @[pp_generator.scala 45:22]
    node pp_inv_0 = _pp_inv_0_T_4 @[pp_generator.scala 33:26 43:19]
    node pp_temp_0_lo_lo = asUInt(pp_inv_0) @[Cat.scala 33:92]
    node pp_temp_0_lo = cat(E_inv_0, pp_temp_0_lo_lo) @[Cat.scala 33:92]
    node E_0 = _E_0_T @[pp_generator.scala 28:26 45:19]
    node pp_temp_0_hi = cat(E_0, E_inv_0) @[Cat.scala 33:92]
    node _pp_temp_0_T = cat(pp_temp_0_hi, pp_temp_0_lo) @[Cat.scala 33:92]
    node _pp_temp_0_T_1 = asSInt(_pp_temp_0_T) @[pp_generator.scala 49:86]
    node _pp_X2_1_T = bits(inputCtrl_X2, 1, 1) @[pp_generator.scala 40:38]
    node _pp_X2_1_T_1 = bits(_pp_X2_1_T, 0, 0) @[pp_generator.scala 40:42]
    node pp_X2_1_lo = asUInt(asSInt(UInt<1>("h0"))) @[Cat.scala 33:92]
    node pp_X2_1_hi = asUInt(inputData_multiplicand) @[Cat.scala 33:92]
    node _pp_X2_1_T_2 = cat(pp_X2_1_hi, pp_X2_1_lo) @[Cat.scala 33:92]
    node _pp_X2_1_T_3 = bits(inputData_multiplicand, 3, 3) @[pp_generator.scala 41:51]
    node pp_X2_1_lo_1 = asUInt(inputData_multiplicand) @[Cat.scala 33:92]
    node _pp_X2_1_T_4 = cat(_pp_X2_1_T_3, pp_X2_1_lo_1) @[Cat.scala 33:92]
    node _pp_X2_1_T_5 = mux(_pp_X2_1_T_1, _pp_X2_1_T_2, _pp_X2_1_T_4) @[pp_generator.scala 40:25]
    node _pp_X2_1_T_6 = asSInt(_pp_X2_1_T_5) @[pp_generator.scala 41:90]
    node _pp_set_1_T = bits(inputCtrl_Set0, 1, 1) @[pp_generator.scala 42:40]
    node _pp_set_1_T_1 = bits(_pp_set_1_T, 0, 0) @[pp_generator.scala 42:44]
    node pp_X2_1 = _pp_X2_1_T_6 @[pp_generator.scala 31:26 40:19]
    node _pp_set_1_T_2 = mux(_pp_set_1_T_1, asSInt(UInt<5>("h0")), pp_X2_1) @[pp_generator.scala 42:25]
    node _pp_inv_1_T = bits(inputCtrl_inv, 1, 1) @[pp_generator.scala 43:39]
    node _pp_inv_1_T_1 = bits(_pp_inv_1_T, 0, 0) @[pp_generator.scala 43:43]
    node pp_set_1 = _pp_set_1_T_2 @[pp_generator.scala 32:26 42:19]
    node _pp_inv_1_T_2 = not(pp_set_1) @[pp_generator.scala 43:51]
    node _pp_inv_1_T_3 = asSInt(_pp_inv_1_T_2) @[pp_generator.scala 43:51]
    node _pp_inv_1_T_4 = mux(_pp_inv_1_T_1, _pp_inv_1_T_3, pp_set_1) @[pp_generator.scala 43:25]
    node _E_inv_1_T = bits(inputCtrl_Set0, 1, 1) @[pp_generator.scala 44:40]
    node _E_inv_1_T_1 = bits(_E_inv_1_T, 0, 0) @[pp_generator.scala 44:44]
    node _E_inv_1_T_2 = bits(inputCtrl_inv, 1, 1) @[pp_generator.scala 44:65]
    node _E_inv_1_T_3 = bits(_E_inv_1_T_2, 0, 0) @[pp_generator.scala 44:69]
    node _E_inv_1_T_4 = bits(inputCtrl_inv, 1, 1) @[pp_generator.scala 44:91]
    node _E_inv_1_T_5 = bits(inputData_multiplicand, 3, 3) @[pp_generator.scala 44:117]
    node _E_inv_1_T_6 = xor(_E_inv_1_T_4, _E_inv_1_T_5) @[pp_generator.scala 44:94]
    node _E_inv_1_T_7 = bits(_E_inv_1_T_6, 0, 0) @[pp_generator.scala 44:131]
    node _E_inv_1_T_8 = mux(_E_inv_1_T_1, _E_inv_1_T_3, _E_inv_1_T_7) @[pp_generator.scala 44:25]
    node E_inv_1 = _E_inv_1_T_8 @[pp_generator.scala 29:26 44:19]
    node _E_1_T = not(E_inv_1) @[pp_generator.scala 45:22]
    node pp_inv_1 = _pp_inv_1_T_4 @[pp_generator.scala 33:26 43:19]
    node pp_temp_1_lo_lo = asUInt(pp_inv_1) @[Cat.scala 33:92]
    node E_1 = _E_1_T @[pp_generator.scala 28:26 45:19]
    node pp_temp_1_lo = cat(E_1, pp_temp_1_lo_lo) @[Cat.scala 33:92]
    node pp_temp_1_hi = cat(UInt<1>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
    node _pp_temp_1_T = cat(pp_temp_1_hi, pp_temp_1_lo) @[Cat.scala 33:92]
    node _pp_temp_1_T_1 = asSInt(_pp_temp_1_T) @[pp_generator.scala 55:94]
    node pp_temp_1 = _pp_temp_1_T_1 @[pp_generator.scala 34:26 55:24]
    node _pp_1_T = bits(pp_temp_1, 5, 0) @[pp_generator.scala 63:36]
    node _pp_1_T_1 = bits(inputCtrl_inv, 0, 0) @[pp_generator.scala 63:78]
    node pp_1_hi = cat(_pp_1_T, UInt<1>("h0")) @[Cat.scala 33:92]
    node _pp_1_T_2 = cat(pp_1_hi, _pp_1_T_1) @[Cat.scala 33:92]
    node _pp_1_T_3 = asSInt(_pp_1_T_2) @[pp_generator.scala 63:85]
    node _sign_com_T = bits(inputCtrl_inv, 1, 1) @[pp_generator.scala 68:54]
    node sign_com_hi = cat(UInt<1>("h0"), _sign_com_T) @[Cat.scala 33:92]
    node _sign_com_T_1 = cat(sign_com_hi, UInt<2>("h0")) @[Cat.scala 33:92]
    node _sign_com_T_2 = asSInt(_sign_com_T_1) @[pp_generator.scala 68:97]
    node pp_temp_0 = _pp_temp_0_T_1 @[pp_generator.scala 34:26 49:28]
    node _pp_WIRE_0 = asSInt(UInt<8>("h0")) @[pp_generator.scala 36:{37,37}]
    node _pp_WIRE_1 = asSInt(UInt<8>("h0")) @[pp_generator.scala 36:{37,37}]
    outputData_pp_out_0 <= pp_0 @[pp_generator.scala 70:25]
    outputData_pp_out_1 <= pp_1 @[pp_generator.scala 70:25]
    outputData_sig_out <= sign_com @[pp_generator.scala 71:25]
    pp_0 <= mux(reset, _pp_WIRE_0, pp_temp_0) @[pp_generator.scala 36:{29,29} 61:19]
    pp_1 <= mux(reset, _pp_WIRE_1, _pp_1_T_3) @[pp_generator.scala 36:{29,29} 63:19]
    sign_com <= mux(reset, asSInt(UInt<8>("h0")), _sign_com_T_2) @[pp_generator.scala 37:{29,29} 68:14]

  module RCA :
    input clock : Clock
    input reset : UInt<1>
    input input_a_in : SInt<8>
    input input_b_in : SInt<8>
    input input_c_in : SInt<1>
    output output_S : SInt<8>
    output output_C : SInt<8>

    node _c_comb_0_T = bits(input_c_in, 0, 0) @[rca.scala 27:29]
    node _g_comb_0_T = bits(input_a_in, 0, 0) @[rca.scala 30:35]
    node _g_comb_0_T_1 = bits(input_b_in, 0, 0) @[rca.scala 30:51]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[rca.scala 30:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_0_T = bits(input_a_in, 0, 0) @[rca.scala 31:35]
    node _p_comb_0_T_1 = bits(input_b_in, 0, 0) @[rca.scala 31:51]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[rca.scala 31:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_0 = _p_comb_0_T_3 @[rca.scala 23:22 31:21]
    node c_comb_0 = _c_comb_0_T @[rca.scala 25:22 27:15]
    node _s_comb_0_T = xor(p_comb_0, c_comb_0) @[rca.scala 32:34]
    node _c_comb_1_T = and(c_comb_0, p_comb_0) @[rca.scala 33:34]
    node g_comb_0 = _g_comb_0_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_1_T_1 = or(_c_comb_1_T, g_comb_0) @[rca.scala 33:46]
    node _g_comb_1_T = bits(input_a_in, 1, 1) @[rca.scala 30:35]
    node _g_comb_1_T_1 = bits(input_b_in, 1, 1) @[rca.scala 30:51]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[rca.scala 30:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_1_T = bits(input_a_in, 1, 1) @[rca.scala 31:35]
    node _p_comb_1_T_1 = bits(input_b_in, 1, 1) @[rca.scala 31:51]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[rca.scala 31:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_1 = _p_comb_1_T_3 @[rca.scala 23:22 31:21]
    node c_comb_1 = _c_comb_1_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_1_T = xor(p_comb_1, c_comb_1) @[rca.scala 32:34]
    node _c_comb_2_T = and(c_comb_1, p_comb_1) @[rca.scala 33:34]
    node g_comb_1 = _g_comb_1_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_2_T_1 = or(_c_comb_2_T, g_comb_1) @[rca.scala 33:46]
    node _g_comb_2_T = bits(input_a_in, 2, 2) @[rca.scala 30:35]
    node _g_comb_2_T_1 = bits(input_b_in, 2, 2) @[rca.scala 30:51]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[rca.scala 30:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_2_T = bits(input_a_in, 2, 2) @[rca.scala 31:35]
    node _p_comb_2_T_1 = bits(input_b_in, 2, 2) @[rca.scala 31:51]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[rca.scala 31:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_2 = _p_comb_2_T_3 @[rca.scala 23:22 31:21]
    node c_comb_2 = _c_comb_2_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_2_T = xor(p_comb_2, c_comb_2) @[rca.scala 32:34]
    node _c_comb_3_T = and(c_comb_2, p_comb_2) @[rca.scala 33:34]
    node g_comb_2 = _g_comb_2_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_3_T_1 = or(_c_comb_3_T, g_comb_2) @[rca.scala 33:46]
    node _g_comb_3_T = bits(input_a_in, 3, 3) @[rca.scala 30:35]
    node _g_comb_3_T_1 = bits(input_b_in, 3, 3) @[rca.scala 30:51]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[rca.scala 30:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_3_T = bits(input_a_in, 3, 3) @[rca.scala 31:35]
    node _p_comb_3_T_1 = bits(input_b_in, 3, 3) @[rca.scala 31:51]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[rca.scala 31:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_3 = _p_comb_3_T_3 @[rca.scala 23:22 31:21]
    node c_comb_3 = _c_comb_3_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_3_T = xor(p_comb_3, c_comb_3) @[rca.scala 32:34]
    node _c_comb_4_T = and(c_comb_3, p_comb_3) @[rca.scala 33:34]
    node g_comb_3 = _g_comb_3_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_4_T_1 = or(_c_comb_4_T, g_comb_3) @[rca.scala 33:46]
    node _g_comb_4_T = bits(input_a_in, 4, 4) @[rca.scala 30:35]
    node _g_comb_4_T_1 = bits(input_b_in, 4, 4) @[rca.scala 30:51]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[rca.scala 30:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_4_T = bits(input_a_in, 4, 4) @[rca.scala 31:35]
    node _p_comb_4_T_1 = bits(input_b_in, 4, 4) @[rca.scala 31:51]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[rca.scala 31:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_4 = _p_comb_4_T_3 @[rca.scala 23:22 31:21]
    node c_comb_4 = _c_comb_4_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_4_T = xor(p_comb_4, c_comb_4) @[rca.scala 32:34]
    node _c_comb_5_T = and(c_comb_4, p_comb_4) @[rca.scala 33:34]
    node g_comb_4 = _g_comb_4_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_5_T_1 = or(_c_comb_5_T, g_comb_4) @[rca.scala 33:46]
    node _g_comb_5_T = bits(input_a_in, 5, 5) @[rca.scala 30:35]
    node _g_comb_5_T_1 = bits(input_b_in, 5, 5) @[rca.scala 30:51]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[rca.scala 30:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_5_T = bits(input_a_in, 5, 5) @[rca.scala 31:35]
    node _p_comb_5_T_1 = bits(input_b_in, 5, 5) @[rca.scala 31:51]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[rca.scala 31:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_5 = _p_comb_5_T_3 @[rca.scala 23:22 31:21]
    node c_comb_5 = _c_comb_5_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_5_T = xor(p_comb_5, c_comb_5) @[rca.scala 32:34]
    node _c_comb_6_T = and(c_comb_5, p_comb_5) @[rca.scala 33:34]
    node g_comb_5 = _g_comb_5_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_6_T_1 = or(_c_comb_6_T, g_comb_5) @[rca.scala 33:46]
    node _g_comb_6_T = bits(input_a_in, 6, 6) @[rca.scala 30:35]
    node _g_comb_6_T_1 = bits(input_b_in, 6, 6) @[rca.scala 30:51]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[rca.scala 30:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_6_T = bits(input_a_in, 6, 6) @[rca.scala 31:35]
    node _p_comb_6_T_1 = bits(input_b_in, 6, 6) @[rca.scala 31:51]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[rca.scala 31:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_6 = _p_comb_6_T_3 @[rca.scala 23:22 31:21]
    node c_comb_6 = _c_comb_6_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_6_T = xor(p_comb_6, c_comb_6) @[rca.scala 32:34]
    node _c_comb_7_T = and(c_comb_6, p_comb_6) @[rca.scala 33:34]
    node g_comb_6 = _g_comb_6_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_7_T_1 = or(_c_comb_7_T, g_comb_6) @[rca.scala 33:46]
    node _g_comb_7_T = bits(input_a_in, 7, 7) @[rca.scala 30:35]
    node _g_comb_7_T_1 = bits(input_b_in, 7, 7) @[rca.scala 30:51]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[rca.scala 30:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_7_T = bits(input_a_in, 7, 7) @[rca.scala 31:35]
    node _p_comb_7_T_1 = bits(input_b_in, 7, 7) @[rca.scala 31:51]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[rca.scala 31:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_7 = _p_comb_7_T_3 @[rca.scala 23:22 31:21]
    node c_comb_7 = _c_comb_7_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_7_T = xor(p_comb_7, c_comb_7) @[rca.scala 32:34]
    node _c_comb_8_T = and(c_comb_7, p_comb_7) @[rca.scala 33:34]
    node g_comb_7 = _g_comb_7_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_8_T_1 = or(_c_comb_8_T, g_comb_7) @[rca.scala 33:46]
    node s_comb_1 = _s_comb_1_T @[rca.scala 24:22 32:21]
    node s_comb_0 = _s_comb_0_T @[rca.scala 24:22 32:21]
    node output_S_lo_lo = cat(s_comb_1, s_comb_0) @[rca.scala 36:24]
    node s_comb_3 = _s_comb_3_T @[rca.scala 24:22 32:21]
    node s_comb_2 = _s_comb_2_T @[rca.scala 24:22 32:21]
    node output_S_lo_hi = cat(s_comb_3, s_comb_2) @[rca.scala 36:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[rca.scala 36:24]
    node s_comb_5 = _s_comb_5_T @[rca.scala 24:22 32:21]
    node s_comb_4 = _s_comb_4_T @[rca.scala 24:22 32:21]
    node output_S_hi_lo = cat(s_comb_5, s_comb_4) @[rca.scala 36:24]
    node s_comb_7 = _s_comb_7_T @[rca.scala 24:22 32:21]
    node s_comb_6 = _s_comb_6_T @[rca.scala 24:22 32:21]
    node output_S_hi_hi = cat(s_comb_7, s_comb_6) @[rca.scala 36:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[rca.scala 36:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[rca.scala 36:24]
    node _output_S_T_1 = asSInt(_output_S_T) @[rca.scala 36:31]
    node c_comb_8 = _c_comb_8_T_1 @[rca.scala 25:22 33:21]
    node _output_C_T = asSInt(c_comb_8) @[rca.scala 37:40]
    output_S <= _output_S_T_1 @[rca.scala 36:14]
    output_C <= pad(_output_C_T, 8) @[rca.scala 37:14]

  module pp_compressor3_2 :
    input clock : Clock
    input reset : UInt<1>
    input input_pp0_in : SInt<8>
    input input_pp1_in : SInt<8>
    input input_pp2_in : SInt<8>
    output output_S : SInt<8>
    output output_C : SInt<8>

    node _g_comb_0_T = bits(input_pp0_in, 0, 0) @[pp_compressor3_2.scala 28:35]
    node _g_comb_0_T_1 = bits(input_pp1_in, 0, 0) @[pp_compressor3_2.scala 28:53]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_0_T = bits(input_pp0_in, 0, 0) @[pp_compressor3_2.scala 29:35]
    node _p_comb_0_T_1 = bits(input_pp1_in, 0, 0) @[pp_compressor3_2.scala 29:53]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_0_T = bits(input_pp2_in, 0, 0) @[pp_compressor3_2.scala 30:46]
    node _s_comb_0_T_1 = bits(_s_comb_0_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_0 = _p_comb_0_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_0_T_2 = xor(p_comb_0, _s_comb_0_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_0_T = bits(input_pp2_in, 0, 0) @[pp_compressor3_2.scala 31:34]
    node _c_comb_0_T_1 = bits(_c_comb_0_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_0_T_2 = and(_c_comb_0_T_1, p_comb_0) @[pp_compressor3_2.scala 31:45]
    node g_comb_0 = _g_comb_0_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_0_T_3 = or(_c_comb_0_T_2, g_comb_0) @[pp_compressor3_2.scala 31:57]
    node _g_comb_1_T = bits(input_pp0_in, 1, 1) @[pp_compressor3_2.scala 28:35]
    node _g_comb_1_T_1 = bits(input_pp1_in, 1, 1) @[pp_compressor3_2.scala 28:53]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_1_T = bits(input_pp0_in, 1, 1) @[pp_compressor3_2.scala 29:35]
    node _p_comb_1_T_1 = bits(input_pp1_in, 1, 1) @[pp_compressor3_2.scala 29:53]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_1_T = bits(input_pp2_in, 1, 1) @[pp_compressor3_2.scala 30:46]
    node _s_comb_1_T_1 = bits(_s_comb_1_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_1 = _p_comb_1_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_1_T_2 = xor(p_comb_1, _s_comb_1_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_1_T = bits(input_pp2_in, 1, 1) @[pp_compressor3_2.scala 31:34]
    node _c_comb_1_T_1 = bits(_c_comb_1_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_1_T_2 = and(_c_comb_1_T_1, p_comb_1) @[pp_compressor3_2.scala 31:45]
    node g_comb_1 = _g_comb_1_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_1_T_3 = or(_c_comb_1_T_2, g_comb_1) @[pp_compressor3_2.scala 31:57]
    node _g_comb_2_T = bits(input_pp0_in, 2, 2) @[pp_compressor3_2.scala 28:35]
    node _g_comb_2_T_1 = bits(input_pp1_in, 2, 2) @[pp_compressor3_2.scala 28:53]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_2_T = bits(input_pp0_in, 2, 2) @[pp_compressor3_2.scala 29:35]
    node _p_comb_2_T_1 = bits(input_pp1_in, 2, 2) @[pp_compressor3_2.scala 29:53]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_2_T = bits(input_pp2_in, 2, 2) @[pp_compressor3_2.scala 30:46]
    node _s_comb_2_T_1 = bits(_s_comb_2_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_2 = _p_comb_2_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_2_T_2 = xor(p_comb_2, _s_comb_2_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_2_T = bits(input_pp2_in, 2, 2) @[pp_compressor3_2.scala 31:34]
    node _c_comb_2_T_1 = bits(_c_comb_2_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_2_T_2 = and(_c_comb_2_T_1, p_comb_2) @[pp_compressor3_2.scala 31:45]
    node g_comb_2 = _g_comb_2_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_2_T_3 = or(_c_comb_2_T_2, g_comb_2) @[pp_compressor3_2.scala 31:57]
    node _g_comb_3_T = bits(input_pp0_in, 3, 3) @[pp_compressor3_2.scala 28:35]
    node _g_comb_3_T_1 = bits(input_pp1_in, 3, 3) @[pp_compressor3_2.scala 28:53]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_3_T = bits(input_pp0_in, 3, 3) @[pp_compressor3_2.scala 29:35]
    node _p_comb_3_T_1 = bits(input_pp1_in, 3, 3) @[pp_compressor3_2.scala 29:53]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_3_T = bits(input_pp2_in, 3, 3) @[pp_compressor3_2.scala 30:46]
    node _s_comb_3_T_1 = bits(_s_comb_3_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_3 = _p_comb_3_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_3_T_2 = xor(p_comb_3, _s_comb_3_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_3_T = bits(input_pp2_in, 3, 3) @[pp_compressor3_2.scala 31:34]
    node _c_comb_3_T_1 = bits(_c_comb_3_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_3_T_2 = and(_c_comb_3_T_1, p_comb_3) @[pp_compressor3_2.scala 31:45]
    node g_comb_3 = _g_comb_3_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_3_T_3 = or(_c_comb_3_T_2, g_comb_3) @[pp_compressor3_2.scala 31:57]
    node _g_comb_4_T = bits(input_pp0_in, 4, 4) @[pp_compressor3_2.scala 28:35]
    node _g_comb_4_T_1 = bits(input_pp1_in, 4, 4) @[pp_compressor3_2.scala 28:53]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_4_T = bits(input_pp0_in, 4, 4) @[pp_compressor3_2.scala 29:35]
    node _p_comb_4_T_1 = bits(input_pp1_in, 4, 4) @[pp_compressor3_2.scala 29:53]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_4_T = bits(input_pp2_in, 4, 4) @[pp_compressor3_2.scala 30:46]
    node _s_comb_4_T_1 = bits(_s_comb_4_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_4 = _p_comb_4_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_4_T_2 = xor(p_comb_4, _s_comb_4_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_4_T = bits(input_pp2_in, 4, 4) @[pp_compressor3_2.scala 31:34]
    node _c_comb_4_T_1 = bits(_c_comb_4_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_4_T_2 = and(_c_comb_4_T_1, p_comb_4) @[pp_compressor3_2.scala 31:45]
    node g_comb_4 = _g_comb_4_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_4_T_3 = or(_c_comb_4_T_2, g_comb_4) @[pp_compressor3_2.scala 31:57]
    node _g_comb_5_T = bits(input_pp0_in, 5, 5) @[pp_compressor3_2.scala 28:35]
    node _g_comb_5_T_1 = bits(input_pp1_in, 5, 5) @[pp_compressor3_2.scala 28:53]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_5_T = bits(input_pp0_in, 5, 5) @[pp_compressor3_2.scala 29:35]
    node _p_comb_5_T_1 = bits(input_pp1_in, 5, 5) @[pp_compressor3_2.scala 29:53]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_5_T = bits(input_pp2_in, 5, 5) @[pp_compressor3_2.scala 30:46]
    node _s_comb_5_T_1 = bits(_s_comb_5_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_5 = _p_comb_5_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_5_T_2 = xor(p_comb_5, _s_comb_5_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_5_T = bits(input_pp2_in, 5, 5) @[pp_compressor3_2.scala 31:34]
    node _c_comb_5_T_1 = bits(_c_comb_5_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_5_T_2 = and(_c_comb_5_T_1, p_comb_5) @[pp_compressor3_2.scala 31:45]
    node g_comb_5 = _g_comb_5_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_5_T_3 = or(_c_comb_5_T_2, g_comb_5) @[pp_compressor3_2.scala 31:57]
    node _g_comb_6_T = bits(input_pp0_in, 6, 6) @[pp_compressor3_2.scala 28:35]
    node _g_comb_6_T_1 = bits(input_pp1_in, 6, 6) @[pp_compressor3_2.scala 28:53]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_6_T = bits(input_pp0_in, 6, 6) @[pp_compressor3_2.scala 29:35]
    node _p_comb_6_T_1 = bits(input_pp1_in, 6, 6) @[pp_compressor3_2.scala 29:53]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_6_T = bits(input_pp2_in, 6, 6) @[pp_compressor3_2.scala 30:46]
    node _s_comb_6_T_1 = bits(_s_comb_6_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_6 = _p_comb_6_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_6_T_2 = xor(p_comb_6, _s_comb_6_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_6_T = bits(input_pp2_in, 6, 6) @[pp_compressor3_2.scala 31:34]
    node _c_comb_6_T_1 = bits(_c_comb_6_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_6_T_2 = and(_c_comb_6_T_1, p_comb_6) @[pp_compressor3_2.scala 31:45]
    node g_comb_6 = _g_comb_6_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_6_T_3 = or(_c_comb_6_T_2, g_comb_6) @[pp_compressor3_2.scala 31:57]
    node _g_comb_7_T = bits(input_pp0_in, 7, 7) @[pp_compressor3_2.scala 28:35]
    node _g_comb_7_T_1 = bits(input_pp1_in, 7, 7) @[pp_compressor3_2.scala 28:53]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_7_T = bits(input_pp0_in, 7, 7) @[pp_compressor3_2.scala 29:35]
    node _p_comb_7_T_1 = bits(input_pp1_in, 7, 7) @[pp_compressor3_2.scala 29:53]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_7_T = bits(input_pp2_in, 7, 7) @[pp_compressor3_2.scala 30:46]
    node _s_comb_7_T_1 = bits(_s_comb_7_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_7 = _p_comb_7_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_7_T_2 = xor(p_comb_7, _s_comb_7_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_7_T = bits(input_pp2_in, 7, 7) @[pp_compressor3_2.scala 31:34]
    node _c_comb_7_T_1 = bits(_c_comb_7_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_7_T_2 = and(_c_comb_7_T_1, p_comb_7) @[pp_compressor3_2.scala 31:45]
    node g_comb_7 = _g_comb_7_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_7_T_3 = or(_c_comb_7_T_2, g_comb_7) @[pp_compressor3_2.scala 31:57]
    node s_comb_1 = _s_comb_1_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node s_comb_0 = _s_comb_0_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node output_S_lo_lo = cat(s_comb_1, s_comb_0) @[pp_compressor3_2.scala 34:24]
    node s_comb_3 = _s_comb_3_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node s_comb_2 = _s_comb_2_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node output_S_lo_hi = cat(s_comb_3, s_comb_2) @[pp_compressor3_2.scala 34:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[pp_compressor3_2.scala 34:24]
    node s_comb_5 = _s_comb_5_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node s_comb_4 = _s_comb_4_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node output_S_hi_lo = cat(s_comb_5, s_comb_4) @[pp_compressor3_2.scala 34:24]
    node s_comb_7 = _s_comb_7_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node s_comb_6 = _s_comb_6_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node output_S_hi_hi = cat(s_comb_7, s_comb_6) @[pp_compressor3_2.scala 34:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T_1 = asSInt(_output_S_T) @[pp_compressor3_2.scala 34:31]
    node c_comb_1 = _c_comb_1_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node c_comb_0 = _c_comb_0_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node output_C_lo_lo = cat(c_comb_1, c_comb_0) @[pp_compressor3_2.scala 35:29]
    node c_comb_3 = _c_comb_3_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node c_comb_2 = _c_comb_2_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node output_C_lo_hi = cat(c_comb_3, c_comb_2) @[pp_compressor3_2.scala 35:29]
    node output_C_lo = cat(output_C_lo_hi, output_C_lo_lo) @[pp_compressor3_2.scala 35:29]
    node c_comb_5 = _c_comb_5_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node c_comb_4 = _c_comb_4_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node output_C_hi_lo = cat(c_comb_5, c_comb_4) @[pp_compressor3_2.scala 35:29]
    node c_comb_7 = _c_comb_7_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node c_comb_6 = _c_comb_6_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node output_C_hi_hi = cat(c_comb_7, c_comb_6) @[pp_compressor3_2.scala 35:29]
    node output_C_hi = cat(output_C_hi_hi, output_C_hi_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T = cat(output_C_hi, output_C_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T_1 = bits(_output_C_T, 6, 0) @[pp_compressor3_2.scala 35:36]
    node _output_C_T_2 = cat(_output_C_T_1, UInt<1>("h0")) @[Cat.scala 33:92]
    node _output_C_T_3 = asSInt(_output_C_T_2) @[pp_compressor3_2.scala 35:61]
    output_S <= _output_S_T_1 @[pp_compressor3_2.scala 34:14]
    output_C <= _output_C_T_3 @[pp_compressor3_2.scala 35:14]

  module wallaceTree :
    input clock : Clock
    input reset : UInt<1>
    input io_data_i_0 : SInt<8>
    input io_data_i_1 : SInt<8>
    input io_data_i_2 : SInt<8>
    output io_data_o : SInt<8>

    inst rca of RCA @[wallace_tree.scala 13:19]
    inst layer1CSA_0 of pp_compressor3_2 @[wallace_tree.scala 59:44]
    node _rca_in_WIRE_0 = asSInt(UInt<8>("h0")) @[wallace_tree.scala 52:{32,32}]
    node _rca_in_WIRE_1 = asSInt(UInt<8>("h0")) @[wallace_tree.scala 52:{32,32}]
    node l1_csa_os_0 = layer1CSA_0.output_S
    node l1_csa_out_0 = l1_csa_os_0
    node rca_in_0 = l1_csa_out_0
    node l1_csa_oc_0 = layer1CSA_0.output_C
    node l1_csa_out_1 = l1_csa_oc_0
    node rca_in_1 = l1_csa_out_1
    node _l1_csa_in_WIRE_0 = asSInt(UInt<8>("h0")) @[wallace_tree.scala 55:{36,36}]
    node _l1_csa_in_WIRE_1 = asSInt(UInt<8>("h0")) @[wallace_tree.scala 55:{36,36}]
    node _l1_csa_in_WIRE_2 = asSInt(UInt<8>("h0")) @[wallace_tree.scala 55:{36,36}]
    node l1_csa_in_0 = io_data_i_0
    node l1_csa_in_1 = io_data_i_1
    node l1_csa_in_2 = io_data_i_2
    node _l1_csa_os_WIRE_0 = asSInt(UInt<8>("h0")) @[wallace_tree.scala 56:{36,36}]
    node _l1_csa_oc_WIRE_0 = asSInt(UInt<8>("h0")) @[wallace_tree.scala 57:{36,36}]
    node _l1_csa_out_WIRE_0 = asSInt(UInt<8>("h0")) @[wallace_tree.scala 58:{36,36}]
    node _l1_csa_out_WIRE_1 = asSInt(UInt<8>("h0")) @[wallace_tree.scala 58:{36,36}]
    io_data_o <= rca.output_S @[wallace_tree.scala 253:18]
    rca.clock <= clock
    rca.reset <= reset
    rca.input_a_in <= rca_in_0 @[wallace_tree.scala 250:18]
    rca.input_b_in <= rca_in_1 @[wallace_tree.scala 251:18]
    rca.input_c_in <= asSInt(UInt<1>("h0")) @[wallace_tree.scala 252:18]
    layer1CSA_0.clock <= clock
    layer1CSA_0.reset <= reset
    layer1CSA_0.input_pp0_in <= l1_csa_in_0 @[wallace_tree.scala 63:31]
    layer1CSA_0.input_pp1_in <= l1_csa_in_1 @[wallace_tree.scala 64:31]
    layer1CSA_0.input_pp2_in <= l1_csa_in_2 @[wallace_tree.scala 65:31]

  module Multiplier :
    input clock : Clock
    input reset : UInt<1>
    input input_multiplicand : SInt<4>
    input input_multiplier : SInt<4>
    output output_product : SInt<8>

    inst booth2_encoder of booth2Encoder @[multiplier.scala 21:34]
    inst pp_generator of ppGenerator @[multiplier.scala 22:34]
    inst wallace_tree of wallaceTree @[multiplier.scala 23:34]
    output_product <= wallace_tree.io_data_o @[multiplier.scala 37:41]
    booth2_encoder.clock <= clock
    booth2_encoder.reset <= reset
    booth2_encoder.input_multiplier <= input_multiplier @[multiplier.scala 25:37]
    pp_generator.clock <= clock
    pp_generator.reset <= reset
    pp_generator.inputData_multiplicand <= input_multiplicand @[multiplier.scala 27:41]
    pp_generator.inputCtrl_X2 <= booth2_encoder.output_X2 @[multiplier.scala 28:41]
    pp_generator.inputCtrl_inv <= booth2_encoder.output_inv @[multiplier.scala 29:41]
    pp_generator.inputCtrl_Set0 <= booth2_encoder.output_set0 @[multiplier.scala 30:41]
    wallace_tree.clock <= clock
    wallace_tree.reset <= reset
    wallace_tree.io_data_i_0 <= pp_generator.outputData_pp_out_0 @[multiplier.scala 33:35]
    wallace_tree.io_data_i_1 <= pp_generator.outputData_pp_out_1 @[multiplier.scala 33:35]
    wallace_tree.io_data_i_2 <= pp_generator.outputData_sig_out @[multiplier.scala 35:40]

  module RCA_1 :
    input clock : Clock
    input reset : UInt<1>
    input input_a_in : SInt<16>
    input input_b_in : SInt<16>
    input input_c_in : SInt<1>
    output output_S : SInt<16>
    output output_C : SInt<16>

    node _c_comb_0_T = bits(input_c_in, 0, 0) @[rca.scala 27:29]
    node _g_comb_0_T = bits(input_a_in, 0, 0) @[rca.scala 30:35]
    node _g_comb_0_T_1 = bits(input_b_in, 0, 0) @[rca.scala 30:51]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[rca.scala 30:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_0_T = bits(input_a_in, 0, 0) @[rca.scala 31:35]
    node _p_comb_0_T_1 = bits(input_b_in, 0, 0) @[rca.scala 31:51]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[rca.scala 31:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_0 = _p_comb_0_T_3 @[rca.scala 23:22 31:21]
    node c_comb_0 = _c_comb_0_T @[rca.scala 25:22 27:15]
    node _s_comb_0_T = xor(p_comb_0, c_comb_0) @[rca.scala 32:34]
    node _c_comb_1_T = and(c_comb_0, p_comb_0) @[rca.scala 33:34]
    node g_comb_0 = _g_comb_0_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_1_T_1 = or(_c_comb_1_T, g_comb_0) @[rca.scala 33:46]
    node _g_comb_1_T = bits(input_a_in, 1, 1) @[rca.scala 30:35]
    node _g_comb_1_T_1 = bits(input_b_in, 1, 1) @[rca.scala 30:51]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[rca.scala 30:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_1_T = bits(input_a_in, 1, 1) @[rca.scala 31:35]
    node _p_comb_1_T_1 = bits(input_b_in, 1, 1) @[rca.scala 31:51]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[rca.scala 31:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_1 = _p_comb_1_T_3 @[rca.scala 23:22 31:21]
    node c_comb_1 = _c_comb_1_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_1_T = xor(p_comb_1, c_comb_1) @[rca.scala 32:34]
    node _c_comb_2_T = and(c_comb_1, p_comb_1) @[rca.scala 33:34]
    node g_comb_1 = _g_comb_1_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_2_T_1 = or(_c_comb_2_T, g_comb_1) @[rca.scala 33:46]
    node _g_comb_2_T = bits(input_a_in, 2, 2) @[rca.scala 30:35]
    node _g_comb_2_T_1 = bits(input_b_in, 2, 2) @[rca.scala 30:51]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[rca.scala 30:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_2_T = bits(input_a_in, 2, 2) @[rca.scala 31:35]
    node _p_comb_2_T_1 = bits(input_b_in, 2, 2) @[rca.scala 31:51]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[rca.scala 31:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_2 = _p_comb_2_T_3 @[rca.scala 23:22 31:21]
    node c_comb_2 = _c_comb_2_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_2_T = xor(p_comb_2, c_comb_2) @[rca.scala 32:34]
    node _c_comb_3_T = and(c_comb_2, p_comb_2) @[rca.scala 33:34]
    node g_comb_2 = _g_comb_2_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_3_T_1 = or(_c_comb_3_T, g_comb_2) @[rca.scala 33:46]
    node _g_comb_3_T = bits(input_a_in, 3, 3) @[rca.scala 30:35]
    node _g_comb_3_T_1 = bits(input_b_in, 3, 3) @[rca.scala 30:51]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[rca.scala 30:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_3_T = bits(input_a_in, 3, 3) @[rca.scala 31:35]
    node _p_comb_3_T_1 = bits(input_b_in, 3, 3) @[rca.scala 31:51]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[rca.scala 31:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_3 = _p_comb_3_T_3 @[rca.scala 23:22 31:21]
    node c_comb_3 = _c_comb_3_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_3_T = xor(p_comb_3, c_comb_3) @[rca.scala 32:34]
    node _c_comb_4_T = and(c_comb_3, p_comb_3) @[rca.scala 33:34]
    node g_comb_3 = _g_comb_3_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_4_T_1 = or(_c_comb_4_T, g_comb_3) @[rca.scala 33:46]
    node _g_comb_4_T = bits(input_a_in, 4, 4) @[rca.scala 30:35]
    node _g_comb_4_T_1 = bits(input_b_in, 4, 4) @[rca.scala 30:51]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[rca.scala 30:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_4_T = bits(input_a_in, 4, 4) @[rca.scala 31:35]
    node _p_comb_4_T_1 = bits(input_b_in, 4, 4) @[rca.scala 31:51]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[rca.scala 31:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_4 = _p_comb_4_T_3 @[rca.scala 23:22 31:21]
    node c_comb_4 = _c_comb_4_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_4_T = xor(p_comb_4, c_comb_4) @[rca.scala 32:34]
    node _c_comb_5_T = and(c_comb_4, p_comb_4) @[rca.scala 33:34]
    node g_comb_4 = _g_comb_4_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_5_T_1 = or(_c_comb_5_T, g_comb_4) @[rca.scala 33:46]
    node _g_comb_5_T = bits(input_a_in, 5, 5) @[rca.scala 30:35]
    node _g_comb_5_T_1 = bits(input_b_in, 5, 5) @[rca.scala 30:51]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[rca.scala 30:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_5_T = bits(input_a_in, 5, 5) @[rca.scala 31:35]
    node _p_comb_5_T_1 = bits(input_b_in, 5, 5) @[rca.scala 31:51]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[rca.scala 31:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_5 = _p_comb_5_T_3 @[rca.scala 23:22 31:21]
    node c_comb_5 = _c_comb_5_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_5_T = xor(p_comb_5, c_comb_5) @[rca.scala 32:34]
    node _c_comb_6_T = and(c_comb_5, p_comb_5) @[rca.scala 33:34]
    node g_comb_5 = _g_comb_5_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_6_T_1 = or(_c_comb_6_T, g_comb_5) @[rca.scala 33:46]
    node _g_comb_6_T = bits(input_a_in, 6, 6) @[rca.scala 30:35]
    node _g_comb_6_T_1 = bits(input_b_in, 6, 6) @[rca.scala 30:51]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[rca.scala 30:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_6_T = bits(input_a_in, 6, 6) @[rca.scala 31:35]
    node _p_comb_6_T_1 = bits(input_b_in, 6, 6) @[rca.scala 31:51]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[rca.scala 31:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_6 = _p_comb_6_T_3 @[rca.scala 23:22 31:21]
    node c_comb_6 = _c_comb_6_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_6_T = xor(p_comb_6, c_comb_6) @[rca.scala 32:34]
    node _c_comb_7_T = and(c_comb_6, p_comb_6) @[rca.scala 33:34]
    node g_comb_6 = _g_comb_6_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_7_T_1 = or(_c_comb_7_T, g_comb_6) @[rca.scala 33:46]
    node _g_comb_7_T = bits(input_a_in, 7, 7) @[rca.scala 30:35]
    node _g_comb_7_T_1 = bits(input_b_in, 7, 7) @[rca.scala 30:51]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[rca.scala 30:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_7_T = bits(input_a_in, 7, 7) @[rca.scala 31:35]
    node _p_comb_7_T_1 = bits(input_b_in, 7, 7) @[rca.scala 31:51]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[rca.scala 31:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_7 = _p_comb_7_T_3 @[rca.scala 23:22 31:21]
    node c_comb_7 = _c_comb_7_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_7_T = xor(p_comb_7, c_comb_7) @[rca.scala 32:34]
    node _c_comb_8_T = and(c_comb_7, p_comb_7) @[rca.scala 33:34]
    node g_comb_7 = _g_comb_7_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_8_T_1 = or(_c_comb_8_T, g_comb_7) @[rca.scala 33:46]
    node _g_comb_8_T = bits(input_a_in, 8, 8) @[rca.scala 30:35]
    node _g_comb_8_T_1 = bits(input_b_in, 8, 8) @[rca.scala 30:51]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[rca.scala 30:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_8_T = bits(input_a_in, 8, 8) @[rca.scala 31:35]
    node _p_comb_8_T_1 = bits(input_b_in, 8, 8) @[rca.scala 31:51]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[rca.scala 31:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_8 = _p_comb_8_T_3 @[rca.scala 23:22 31:21]
    node c_comb_8 = _c_comb_8_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_8_T = xor(p_comb_8, c_comb_8) @[rca.scala 32:34]
    node _c_comb_9_T = and(c_comb_8, p_comb_8) @[rca.scala 33:34]
    node g_comb_8 = _g_comb_8_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_9_T_1 = or(_c_comb_9_T, g_comb_8) @[rca.scala 33:46]
    node _g_comb_9_T = bits(input_a_in, 9, 9) @[rca.scala 30:35]
    node _g_comb_9_T_1 = bits(input_b_in, 9, 9) @[rca.scala 30:51]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[rca.scala 30:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_9_T = bits(input_a_in, 9, 9) @[rca.scala 31:35]
    node _p_comb_9_T_1 = bits(input_b_in, 9, 9) @[rca.scala 31:51]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[rca.scala 31:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_9 = _p_comb_9_T_3 @[rca.scala 23:22 31:21]
    node c_comb_9 = _c_comb_9_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_9_T = xor(p_comb_9, c_comb_9) @[rca.scala 32:34]
    node _c_comb_10_T = and(c_comb_9, p_comb_9) @[rca.scala 33:34]
    node g_comb_9 = _g_comb_9_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_10_T_1 = or(_c_comb_10_T, g_comb_9) @[rca.scala 33:46]
    node _g_comb_10_T = bits(input_a_in, 10, 10) @[rca.scala 30:35]
    node _g_comb_10_T_1 = bits(input_b_in, 10, 10) @[rca.scala 30:51]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[rca.scala 30:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_10_T = bits(input_a_in, 10, 10) @[rca.scala 31:35]
    node _p_comb_10_T_1 = bits(input_b_in, 10, 10) @[rca.scala 31:51]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[rca.scala 31:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_10 = _p_comb_10_T_3 @[rca.scala 23:22 31:21]
    node c_comb_10 = _c_comb_10_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_10_T = xor(p_comb_10, c_comb_10) @[rca.scala 32:34]
    node _c_comb_11_T = and(c_comb_10, p_comb_10) @[rca.scala 33:34]
    node g_comb_10 = _g_comb_10_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_11_T_1 = or(_c_comb_11_T, g_comb_10) @[rca.scala 33:46]
    node _g_comb_11_T = bits(input_a_in, 11, 11) @[rca.scala 30:35]
    node _g_comb_11_T_1 = bits(input_b_in, 11, 11) @[rca.scala 30:51]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[rca.scala 30:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_11_T = bits(input_a_in, 11, 11) @[rca.scala 31:35]
    node _p_comb_11_T_1 = bits(input_b_in, 11, 11) @[rca.scala 31:51]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[rca.scala 31:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_11 = _p_comb_11_T_3 @[rca.scala 23:22 31:21]
    node c_comb_11 = _c_comb_11_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_11_T = xor(p_comb_11, c_comb_11) @[rca.scala 32:34]
    node _c_comb_12_T = and(c_comb_11, p_comb_11) @[rca.scala 33:34]
    node g_comb_11 = _g_comb_11_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_12_T_1 = or(_c_comb_12_T, g_comb_11) @[rca.scala 33:46]
    node _g_comb_12_T = bits(input_a_in, 12, 12) @[rca.scala 30:35]
    node _g_comb_12_T_1 = bits(input_b_in, 12, 12) @[rca.scala 30:51]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[rca.scala 30:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_12_T = bits(input_a_in, 12, 12) @[rca.scala 31:35]
    node _p_comb_12_T_1 = bits(input_b_in, 12, 12) @[rca.scala 31:51]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[rca.scala 31:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_12 = _p_comb_12_T_3 @[rca.scala 23:22 31:21]
    node c_comb_12 = _c_comb_12_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_12_T = xor(p_comb_12, c_comb_12) @[rca.scala 32:34]
    node _c_comb_13_T = and(c_comb_12, p_comb_12) @[rca.scala 33:34]
    node g_comb_12 = _g_comb_12_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_13_T_1 = or(_c_comb_13_T, g_comb_12) @[rca.scala 33:46]
    node _g_comb_13_T = bits(input_a_in, 13, 13) @[rca.scala 30:35]
    node _g_comb_13_T_1 = bits(input_b_in, 13, 13) @[rca.scala 30:51]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[rca.scala 30:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_13_T = bits(input_a_in, 13, 13) @[rca.scala 31:35]
    node _p_comb_13_T_1 = bits(input_b_in, 13, 13) @[rca.scala 31:51]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[rca.scala 31:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_13 = _p_comb_13_T_3 @[rca.scala 23:22 31:21]
    node c_comb_13 = _c_comb_13_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_13_T = xor(p_comb_13, c_comb_13) @[rca.scala 32:34]
    node _c_comb_14_T = and(c_comb_13, p_comb_13) @[rca.scala 33:34]
    node g_comb_13 = _g_comb_13_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_14_T_1 = or(_c_comb_14_T, g_comb_13) @[rca.scala 33:46]
    node _g_comb_14_T = bits(input_a_in, 14, 14) @[rca.scala 30:35]
    node _g_comb_14_T_1 = bits(input_b_in, 14, 14) @[rca.scala 30:51]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[rca.scala 30:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_14_T = bits(input_a_in, 14, 14) @[rca.scala 31:35]
    node _p_comb_14_T_1 = bits(input_b_in, 14, 14) @[rca.scala 31:51]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[rca.scala 31:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_14 = _p_comb_14_T_3 @[rca.scala 23:22 31:21]
    node c_comb_14 = _c_comb_14_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_14_T = xor(p_comb_14, c_comb_14) @[rca.scala 32:34]
    node _c_comb_15_T = and(c_comb_14, p_comb_14) @[rca.scala 33:34]
    node g_comb_14 = _g_comb_14_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_15_T_1 = or(_c_comb_15_T, g_comb_14) @[rca.scala 33:46]
    node _g_comb_15_T = bits(input_a_in, 15, 15) @[rca.scala 30:35]
    node _g_comb_15_T_1 = bits(input_b_in, 15, 15) @[rca.scala 30:51]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[rca.scala 30:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_15_T = bits(input_a_in, 15, 15) @[rca.scala 31:35]
    node _p_comb_15_T_1 = bits(input_b_in, 15, 15) @[rca.scala 31:51]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[rca.scala 31:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_15 = _p_comb_15_T_3 @[rca.scala 23:22 31:21]
    node c_comb_15 = _c_comb_15_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_15_T = xor(p_comb_15, c_comb_15) @[rca.scala 32:34]
    node _c_comb_16_T = and(c_comb_15, p_comb_15) @[rca.scala 33:34]
    node g_comb_15 = _g_comb_15_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_16_T_1 = or(_c_comb_16_T, g_comb_15) @[rca.scala 33:46]
    node s_comb_1 = _s_comb_1_T @[rca.scala 24:22 32:21]
    node s_comb_0 = _s_comb_0_T @[rca.scala 24:22 32:21]
    node output_S_lo_lo_lo = cat(s_comb_1, s_comb_0) @[rca.scala 36:24]
    node s_comb_3 = _s_comb_3_T @[rca.scala 24:22 32:21]
    node s_comb_2 = _s_comb_2_T @[rca.scala 24:22 32:21]
    node output_S_lo_lo_hi = cat(s_comb_3, s_comb_2) @[rca.scala 36:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[rca.scala 36:24]
    node s_comb_5 = _s_comb_5_T @[rca.scala 24:22 32:21]
    node s_comb_4 = _s_comb_4_T @[rca.scala 24:22 32:21]
    node output_S_lo_hi_lo = cat(s_comb_5, s_comb_4) @[rca.scala 36:24]
    node s_comb_7 = _s_comb_7_T @[rca.scala 24:22 32:21]
    node s_comb_6 = _s_comb_6_T @[rca.scala 24:22 32:21]
    node output_S_lo_hi_hi = cat(s_comb_7, s_comb_6) @[rca.scala 36:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[rca.scala 36:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[rca.scala 36:24]
    node s_comb_9 = _s_comb_9_T @[rca.scala 24:22 32:21]
    node s_comb_8 = _s_comb_8_T @[rca.scala 24:22 32:21]
    node output_S_hi_lo_lo = cat(s_comb_9, s_comb_8) @[rca.scala 36:24]
    node s_comb_11 = _s_comb_11_T @[rca.scala 24:22 32:21]
    node s_comb_10 = _s_comb_10_T @[rca.scala 24:22 32:21]
    node output_S_hi_lo_hi = cat(s_comb_11, s_comb_10) @[rca.scala 36:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[rca.scala 36:24]
    node s_comb_13 = _s_comb_13_T @[rca.scala 24:22 32:21]
    node s_comb_12 = _s_comb_12_T @[rca.scala 24:22 32:21]
    node output_S_hi_hi_lo = cat(s_comb_13, s_comb_12) @[rca.scala 36:24]
    node s_comb_15 = _s_comb_15_T @[rca.scala 24:22 32:21]
    node s_comb_14 = _s_comb_14_T @[rca.scala 24:22 32:21]
    node output_S_hi_hi_hi = cat(s_comb_15, s_comb_14) @[rca.scala 36:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[rca.scala 36:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[rca.scala 36:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[rca.scala 36:24]
    node _output_S_T_1 = asSInt(_output_S_T) @[rca.scala 36:31]
    node c_comb_16 = _c_comb_16_T_1 @[rca.scala 25:22 33:21]
    node _output_C_T = asSInt(c_comb_16) @[rca.scala 37:40]
    output_S <= _output_S_T_1 @[rca.scala 36:14]
    output_C <= pad(_output_C_T, 16) @[rca.scala 37:14]

  module MacUnit :
    input clock : Clock
    input reset : UInt<1>
    input io_in_a : SInt<4>
    input io_in_b : SInt<4>
    input io_in_c : SInt<16>
    output io_out_c : SInt<16>

    inst mul of Multiplier @[MacUnit.scala 15:19]
    inst rca of RCA_1 @[MacUnit.scala 16:19]
    node _rca_input_a_in_T = bits(mul.output_product, 7, 7) @[MacUnit.scala 21:71]
    node _rca_input_a_in_T_1 = bits(_rca_input_a_in_T, 0, 0) @[Bitwise.scala 77:15]
    node _rca_input_a_in_T_2 = mux(_rca_input_a_in_T_1, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
    node rca_input_a_in_lo = asUInt(mul.output_product) @[Cat.scala 33:92]
    node _rca_input_a_in_T_3 = cat(_rca_input_a_in_T_2, rca_input_a_in_lo) @[Cat.scala 33:92]
    node _rca_input_a_in_T_4 = asSInt(_rca_input_a_in_T_3) @[MacUnit.scala 21:108]
    io_out_c <= rca.output_S @[MacUnit.scala 24:19]
    mul.clock <= clock
    mul.reset <= reset
    mul.input_multiplicand <= io_in_a @[MacUnit.scala 18:26]
    mul.input_multiplier <= io_in_b @[MacUnit.scala 19:26]
    rca.clock <= clock
    rca.reset <= reset
    rca.input_a_in <= _rca_input_a_in_T_4 @[MacUnit.scala 21:19]
    rca.input_b_in <= io_in_c @[MacUnit.scala 22:19]
    rca.input_c_in <= asSInt(bits(asSInt(UInt<16>("h0")), 0, 0)) @[MacUnit.scala 23:19]

  module PE :
    input clock : Clock
    input reset : UInt<1>
    input io_in_control_ctrl_sa_send_data : UInt<1>
    input io_in_a : SInt<4>
    input io_in_b : SInt<4>
    input io_in_c : SInt<16>
    output io_out_control_ctrl_sa_send_data : UInt<1>
    output io_out_a : SInt<4>
    output io_out_b : SInt<4>
    output io_out_c : SInt<16>

    inst mac of MacUnit @[PE.scala 28:19]
    reg a_reg : SInt<4>, clock with :
      reset => (UInt<1>("h0"), a_reg) @[PE.scala 24:22]
    reg b_reg : SInt<4>, clock with :
      reset => (UInt<1>("h0"), b_reg) @[PE.scala 25:22]
    reg c_reg : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c_reg) @[PE.scala 26:22]
    node _c_reg_T = mux(io_in_control_ctrl_sa_send_data, io_in_c, mac.io_out_c) @[PE.scala 36:15]
    io_out_control_ctrl_sa_send_data <= io_in_control_ctrl_sa_send_data @[PE.scala 42:18]
    io_out_a <= a_reg @[PE.scala 38:12]
    io_out_b <= b_reg @[PE.scala 39:12]
    io_out_c <= c_reg @[PE.scala 40:12]
    a_reg <= mux(reset, asSInt(UInt<4>("h0")), io_in_a) @[PE.scala 24:{22,22} 33:9]
    b_reg <= mux(reset, asSInt(UInt<4>("h0")), io_in_b) @[PE.scala 25:{22,22} 34:9]
    c_reg <= mux(reset, asSInt(UInt<16>("h0")), _c_reg_T) @[PE.scala 26:{22,22} 36:9]
    mac.clock <= clock
    mac.reset <= reset
    mac.io_in_a <= io_in_a @[PE.scala 29:15]
    mac.io_in_b <= io_in_b @[PE.scala 30:15]
    mac.io_in_c <= c_reg @[PE.scala 31:15]

  module PE_2 :
    input clock : Clock
    input reset : UInt<1>
    input io_in_control_ctrl_sa_send_data : UInt<1>
    input io_in_a : SInt<4>
    input io_in_b : SInt<4>
    input io_in_c : SInt<16>
    output io_out_control_ctrl_sa_send_data : UInt<1>
    output io_out_a : SInt<4>
    output io_out_b : SInt<4>
    output io_out_c : SInt<16>

    inst mac of MacUnit @[PE.scala 28:19]
    reg a_reg : SInt<4>, clock with :
      reset => (UInt<1>("h0"), a_reg) @[PE.scala 24:22]
    reg b_reg : SInt<4>, clock with :
      reset => (UInt<1>("h0"), b_reg) @[PE.scala 25:22]
    reg c_reg : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c_reg) @[PE.scala 26:22]
    node _c_reg_T = mux(io_in_control_ctrl_sa_send_data, io_in_c, mac.io_out_c) @[PE.scala 36:15]
    io_out_control_ctrl_sa_send_data <= io_in_control_ctrl_sa_send_data @[PE.scala 42:18]
    io_out_a <= a_reg @[PE.scala 38:12]
    io_out_b <= b_reg @[PE.scala 39:12]
    io_out_c <= c_reg @[PE.scala 40:12]
    a_reg <= mux(reset, asSInt(UInt<4>("h0")), io_in_a) @[PE.scala 24:{22,22} 33:9]
    b_reg <= mux(reset, asSInt(UInt<4>("h0")), io_in_b) @[PE.scala 25:{22,22} 34:9]
    c_reg <= mux(reset, asSInt(UInt<16>("h0")), _c_reg_T) @[PE.scala 26:{22,22} 36:9]
    mac.clock <= clock
    mac.reset <= reset
    mac.io_in_a <= io_in_a @[PE.scala 29:15]
    mac.io_in_b <= io_in_b @[PE.scala 30:15]
    mac.io_in_c <= c_reg @[PE.scala 31:15]

  module SystolicArray :
    input clock : Clock
    input reset : UInt<1>
    input io_in_control_0_ctrl_sa_send_data : UInt<1>
    input io_in_control_1_ctrl_sa_send_data : UInt<1>
    input io_in_a_0 : SInt<4>
    input io_in_a_1 : SInt<4>
    input io_in_b_0 : SInt<4>
    input io_in_b_1 : SInt<4>
    input io_in_c_0 : SInt<16>
    input io_in_c_1 : SInt<16>
    output io_out_control_0_ctrl_sa_send_data : UInt<1>
    output io_out_control_1_ctrl_sa_send_data : UInt<1>
    output io_out_a_0 : SInt<4>
    output io_out_a_1 : SInt<4>
    output io_out_b_0 : SInt<4>
    output io_out_b_1 : SInt<4>
    output io_out_c_0 : SInt<16>
    output io_out_c_1 : SInt<16>

    inst sa_0_0 of PE @[SystolicArray.scala 22:45]
    inst sa_0_1 of PE @[SystolicArray.scala 22:45]
    inst sa_1_0 of PE_2 @[SystolicArray.scala 22:45]
    inst sa_1_1 of PE_2 @[SystolicArray.scala 22:45]
    io_out_control_0_ctrl_sa_send_data <= sa_1_0.io_out_control_ctrl_sa_send_data @[SystolicArray.scala 61:23]
    io_out_control_1_ctrl_sa_send_data <= sa_1_1.io_out_control_ctrl_sa_send_data @[SystolicArray.scala 61:23]
    io_out_a_0 <= sa_0_1.io_out_a @[SystolicArray.scala 65:17]
    io_out_a_1 <= sa_1_1.io_out_a @[SystolicArray.scala 65:17]
    io_out_b_0 <= sa_1_0.io_out_b @[SystolicArray.scala 59:17]
    io_out_b_1 <= sa_1_1.io_out_b @[SystolicArray.scala 59:17]
    io_out_c_0 <= sa_1_0.io_out_c @[SystolicArray.scala 60:17]
    io_out_c_1 <= sa_1_1.io_out_c @[SystolicArray.scala 60:17]
    sa_0_0.clock <= clock
    sa_0_0.reset <= reset
    sa_0_0.io_in_control_ctrl_sa_send_data <= io_in_control_0_ctrl_sa_send_data @[SystolicArray.scala 53:26]
    sa_0_0.io_in_a <= io_in_a_0 @[SystolicArray.scala 28:20]
    sa_0_0.io_in_b <= io_in_b_0 @[SystolicArray.scala 36:20]
    sa_0_0.io_in_c <= io_in_c_0 @[SystolicArray.scala 44:20]
    sa_0_1.clock <= clock
    sa_0_1.reset <= reset
    sa_0_1.io_in_control_ctrl_sa_send_data <= io_in_control_1_ctrl_sa_send_data @[SystolicArray.scala 53:26]
    sa_0_1.io_in_a <= sa_0_0.io_out_a @[SystolicArray.scala 28:20]
    sa_0_1.io_in_b <= io_in_b_1 @[SystolicArray.scala 36:20]
    sa_0_1.io_in_c <= io_in_c_1 @[SystolicArray.scala 44:20]
    sa_1_0.clock <= clock
    sa_1_0.reset <= reset
    sa_1_0.io_in_control_ctrl_sa_send_data <= sa_0_0.io_out_control_ctrl_sa_send_data @[SystolicArray.scala 53:26]
    sa_1_0.io_in_a <= io_in_a_1 @[SystolicArray.scala 28:20]
    sa_1_0.io_in_b <= sa_0_0.io_out_b @[SystolicArray.scala 36:20]
    sa_1_0.io_in_c <= sa_0_0.io_out_c @[SystolicArray.scala 44:20]
    sa_1_1.clock <= clock
    sa_1_1.reset <= reset
    sa_1_1.io_in_control_ctrl_sa_send_data <= sa_0_1.io_out_control_ctrl_sa_send_data @[SystolicArray.scala 53:26]
    sa_1_1.io_in_a <= sa_1_0.io_out_a @[SystolicArray.scala 28:20]
    sa_1_1.io_in_b <= sa_0_1.io_out_b @[SystolicArray.scala 36:20]
    sa_1_1.io_in_c <= sa_0_1.io_out_c @[SystolicArray.scala 44:20]

  module GlobalCounter :
    input clock : Clock
    input reset : UInt<1>
    input io_start : UInt<1>
    output io_tick : UInt<1>

    reg count : UInt<3>, clock with :
      reset => (UInt<1>("h0"), count) @[Controller.scala 13:22]
    node tick = eq(count, UInt<3>("h4")) @[Controller.scala 14:20]
    reg enable : UInt<1>, clock with :
      reset => (UInt<1>("h0"), enable) @[Controller.scala 16:23]
    node _GEN_0 = mux(tick, UInt<1>("h0"), enable) @[Controller.scala 19:20 20:12 16:23]
    node _GEN_1 = mux(io_start, UInt<1>("h1"), _GEN_0) @[Controller.scala 17:18 18:12]
    node _T = neq(count, UInt<3>("h4")) @[Controller.scala 24:16]
    node _count_T = add(count, UInt<1>("h1")) @[Controller.scala 25:22]
    node _count_T_1 = tail(_count_T, 1) @[Controller.scala 25:22]
    node _GEN_2 = mux(_T, _count_T_1, UInt<1>("h0")) @[Controller.scala 24:37 25:13 27:13]
    node _GEN_3 = mux(enable, _GEN_2, count) @[Controller.scala 23:16 13:22]
    io_tick <= tick @[Controller.scala 31:11]
    count <= mux(reset, UInt<3>("h0"), _GEN_3) @[Controller.scala 13:{22,22}]
    enable <= mux(reset, UInt<1>("h0"), _GEN_1) @[Controller.scala 16:{23,23}]

  module GlobalCounter_1 :
    input clock : Clock
    input reset : UInt<1>
    input io_start : UInt<1>
    output io_tick : UInt<1>

    reg count : UInt<1>, clock with :
      reset => (UInt<1>("h0"), count) @[Controller.scala 13:22]
    node tick = eq(count, UInt<1>("h1")) @[Controller.scala 14:20]
    reg enable : UInt<1>, clock with :
      reset => (UInt<1>("h0"), enable) @[Controller.scala 16:23]
    node _GEN_0 = mux(tick, UInt<1>("h0"), enable) @[Controller.scala 19:20 20:12 16:23]
    node _GEN_1 = mux(io_start, UInt<1>("h1"), _GEN_0) @[Controller.scala 17:18 18:12]
    node _T = neq(count, UInt<1>("h1")) @[Controller.scala 24:16]
    node _count_T = add(count, UInt<1>("h1")) @[Controller.scala 25:22]
    node _count_T_1 = tail(_count_T, 1) @[Controller.scala 25:22]
    node _GEN_2 = mux(_T, _count_T_1, UInt<1>("h0")) @[Controller.scala 24:37 25:13 27:13]
    node _GEN_3 = mux(enable, _GEN_2, count) @[Controller.scala 23:16 13:22]
    io_tick <= tick @[Controller.scala 31:11]
    count <= mux(reset, UInt<1>("h0"), _GEN_3) @[Controller.scala 13:{22,22}]
    enable <= mux(reset, UInt<1>("h0"), _GEN_1) @[Controller.scala 16:{23,23}]

  module Controller :
    input clock : Clock
    input reset : UInt<1>
    input io_ibh_data_in_done : UInt<1>
    input io_ibv_data_in_done : UInt<1>
    input io_ob_empty : UInt<1>
    output io_ctrl_ib_data_out : UInt<1>
    output io_ctrl_ob_data_in : UInt<1>
    output io_ctrl_sa_send_data : UInt<1>

    inst cal_gc of GlobalCounter @[Controller.scala 60:28]
    inst out_gc of GlobalCounter_1 @[Controller.scala 67:28]
    reg delay_ctrl_ib_data_out : UInt<1>, clock with :
      reset => (UInt<1>("h0"), delay_ctrl_ib_data_out) @[Controller.scala 47:39]
    node _ctrl_ib_data_out_edge_T = eq(delay_ctrl_ib_data_out, UInt<1>("h0")) @[Controller.scala 50:28]
    reg state : UInt<2>, clock with :
      reset => (UInt<1>("h0"), state) @[Controller.scala 82:22]
    node _T = eq(state, UInt<2>("h0")) @[Controller.scala 84:14]
    node _T_1 = and(io_ibh_data_in_done, io_ibv_data_in_done) @[Controller.scala 85:30]
    reg isStall : UInt<1>, clock with :
      reset => (UInt<1>("h0"), isStall) @[Controller.scala 57:24]
    node _T_2 = eq(isStall, UInt<1>("h0")) @[Controller.scala 85:56]
    node _T_3 = and(_T_1, _T_2) @[Controller.scala 85:53]
    node _GEN_4 = mux(_T_3, UInt<1>("h1"), UInt<1>("h0")) @[Controller.scala 85:66 88:24]
    node _GEN_27 = mux(_T, _GEN_4, UInt<1>("h0")) @[Controller.scala 84:24]
    node ctrl_ib_data_out = _GEN_27
    node _ctrl_ib_data_out_edge_T_1 = and(_ctrl_ib_data_out_edge_T, ctrl_ib_data_out) @[Controller.scala 50:52]
    reg cal_done : UInt<1>, clock with :
      reset => (UInt<1>("h0"), cal_done) @[Controller.scala 53:25]
    reg out_done : UInt<1>, clock with :
      reset => (UInt<1>("h0"), out_done) @[Controller.scala 54:25]
    node _GEN_0 = mux(cal_gc.io_tick, UInt<1>("h1"), cal_done) @[Controller.scala 62:24 63:14 53:25]
    node _out_gc_io_start_T = and(cal_gc.io_tick, io_ob_empty) @[Controller.scala 68:37]
    node _out_gc_io_start_T_1 = and(isStall, io_ob_empty) @[Controller.scala 68:61]
    node _out_gc_io_start_T_2 = or(_out_gc_io_start_T, _out_gc_io_start_T_1) @[Controller.scala 68:51]
    node _GEN_1 = mux(out_gc.io_tick, UInt<1>("h1"), out_done) @[Controller.scala 69:24 70:14 54:25]
    node _io_ctrl_ob_data_in_T = eq(out_done, UInt<1>("h0")) @[Controller.scala 73:36]
    node _io_ctrl_ob_data_in_T_1 = and(cal_done, _io_ctrl_ob_data_in_T) @[Controller.scala 73:34]
    node _io_ctrl_ob_data_in_T_2 = eq(isStall, UInt<1>("h0")) @[Controller.scala 73:48]
    node _io_ctrl_ob_data_in_T_3 = and(_io_ctrl_ob_data_in_T_1, _io_ctrl_ob_data_in_T_2) @[Controller.scala 73:46]
    node _io_ctrl_sa_send_data_T = eq(out_done, UInt<1>("h0")) @[Controller.scala 74:38]
    node _io_ctrl_sa_send_data_T_1 = and(cal_done, _io_ctrl_sa_send_data_T) @[Controller.scala 74:36]
    node _io_ctrl_sa_send_data_T_2 = eq(isStall, UInt<1>("h0")) @[Controller.scala 74:50]
    node _io_ctrl_sa_send_data_T_3 = and(_io_ctrl_sa_send_data_T_1, _io_ctrl_sa_send_data_T_2) @[Controller.scala 74:48]
    node _GEN_2 = mux(_T_3, UInt<2>("h1"), state) @[Controller.scala 85:66 86:13 82:22]
    node _GEN_3 = mux(_T_3, UInt<1>("h0"), isStall) @[Controller.scala 85:66 87:15 57:24]
    node _T_4 = eq(state, UInt<2>("h1")) @[Controller.scala 91:20]
    node _T_5 = and(cal_done, io_ob_empty) @[Controller.scala 92:19]
    node _T_6 = eq(io_ob_empty, UInt<1>("h0")) @[Controller.scala 94:34]
    node _T_7 = and(cal_gc.io_tick, _T_6) @[Controller.scala 94:31]
    node _GEN_5 = mux(_T_7, UInt<2>("h2"), state) @[Controller.scala 94:48 95:13 82:22]
    node _GEN_6 = mux(_T_7, UInt<1>("h1"), isStall) @[Controller.scala 94:48 96:15 57:24]
    node _GEN_7 = mux(_T_5, UInt<2>("h3"), _GEN_5) @[Controller.scala 92:35 93:13]
    node _GEN_8 = mux(_T_5, isStall, _GEN_6) @[Controller.scala 57:24 92:35]
    node _T_8 = eq(state, UInt<2>("h2")) @[Controller.scala 98:20]
    node _GEN_9 = mux(io_ob_empty, UInt<2>("h3"), state) @[Controller.scala 100:13 82:22 99:23]
    node _GEN_10 = mux(io_ob_empty, UInt<1>("h0"), isStall) @[Controller.scala 101:15 99:23 57:24]
    node _T_9 = eq(state, UInt<2>("h3")) @[Controller.scala 103:20]
    node _GEN_11 = mux(out_done, UInt<2>("h0"), state) @[Controller.scala 104:20 105:13 82:22]
    node _GEN_12 = mux(out_done, UInt<1>("h0"), _GEN_0) @[Controller.scala 104:20 106:16]
    node _GEN_13 = mux(out_done, UInt<1>("h0"), _GEN_1) @[Controller.scala 104:20 107:16]
    node _GEN_14 = mux(_T_9, _GEN_11, state) @[Controller.scala 103:32 82:22]
    node _GEN_15 = mux(_T_9, _GEN_12, _GEN_0) @[Controller.scala 103:32]
    node _GEN_16 = mux(_T_9, _GEN_13, _GEN_1) @[Controller.scala 103:32]
    node _GEN_17 = mux(_T_8, _GEN_9, _GEN_14) @[Controller.scala 98:31]
    node _GEN_18 = mux(_T_8, _GEN_10, isStall) @[Controller.scala 57:24 98:31]
    node _GEN_19 = mux(_T_8, _GEN_0, _GEN_15) @[Controller.scala 98:31]
    node _GEN_20 = mux(_T_8, _GEN_1, _GEN_16) @[Controller.scala 98:31]
    node _GEN_21 = mux(_T_4, _GEN_7, _GEN_17) @[Controller.scala 91:33]
    node _GEN_22 = mux(_T_4, _GEN_8, _GEN_18) @[Controller.scala 91:33]
    node _GEN_23 = mux(_T_4, _GEN_0, _GEN_19) @[Controller.scala 91:33]
    node _GEN_24 = mux(_T_4, _GEN_1, _GEN_20) @[Controller.scala 91:33]
    node _GEN_25 = mux(_T, _GEN_2, _GEN_21) @[Controller.scala 84:24]
    node _GEN_26 = mux(_T, _GEN_3, _GEN_22) @[Controller.scala 84:24]
    node _GEN_28 = mux(_T, _GEN_0, _GEN_23) @[Controller.scala 84:24]
    node _GEN_29 = mux(_T, _GEN_1, _GEN_24) @[Controller.scala 84:24]
    node ctrl_ib_data_out_edge = _ctrl_ib_data_out_edge_T_1
    node cal_gc_start = _GEN_27
    io_ctrl_ib_data_out <= ctrl_ib_data_out_edge @[Controller.scala 51:23]
    io_ctrl_ob_data_in <= _io_ctrl_ob_data_in_T_3 @[Controller.scala 73:22]
    io_ctrl_sa_send_data <= _io_ctrl_sa_send_data_T_3 @[Controller.scala 74:24]
    delay_ctrl_ib_data_out <= mux(reset, UInt<1>("h0"), ctrl_ib_data_out) @[Controller.scala 47:{39,39} 49:26]
    cal_done <= mux(reset, UInt<1>("h0"), _GEN_28) @[Controller.scala 53:{25,25}]
    out_done <= mux(reset, UInt<1>("h0"), _GEN_29) @[Controller.scala 54:{25,25}]
    isStall <= mux(reset, UInt<1>("h0"), _GEN_26) @[Controller.scala 57:{24,24}]
    cal_gc.clock <= clock
    cal_gc.reset <= reset
    cal_gc.io_start <= cal_gc_start @[Controller.scala 61:19]
    out_gc.clock <= clock
    out_gc.reset <= reset
    out_gc.io_start <= _out_gc_io_start_T_2 @[Controller.scala 68:19]
    state <= mux(reset, UInt<2>("h0"), _GEN_25) @[Controller.scala 82:{22,22}]

  module SyncFIFO :
    input clock : Clock
    input reset : UInt<1>
    input io_enq : UInt<1>
    input io_deq : UInt<1>
    input io_enqData : SInt<4>
    output io_deqData : SInt<4>
    output io_full : UInt<1>
    output io_empty : UInt<1>

    reg mem_0 : SInt<4>, clock with :
      reset => (UInt<1>("h0"), mem_0) @[SyncFIFO.scala 17:20]
    reg mem_1 : SInt<4>, clock with :
      reset => (UInt<1>("h0"), mem_1) @[SyncFIFO.scala 17:20]
    reg readPtr : UInt<2>, clock with :
      reset => (UInt<1>("h0"), readPtr) @[SyncFIFO.scala 20:24]
    reg writePtr : UInt<2>, clock with :
      reset => (UInt<1>("h0"), writePtr) @[SyncFIFO.scala 21:25]
    node _isEmpty_T = eq(readPtr, writePtr) @[SyncFIFO.scala 27:22]
    node _isFull_T = bits(writePtr, 1, 1) @[SyncFIFO.scala 28:38]
    node _isFull_T_1 = not(_isFull_T) @[SyncFIFO.scala 28:29]
    node _isFull_T_2 = bits(writePtr, 0, 0) @[SyncFIFO.scala 28:60]
    node _isFull_T_3 = cat(_isFull_T_1, _isFull_T_2) @[Cat.scala 33:92]
    node _isFull_T_4 = eq(readPtr, _isFull_T_3) @[SyncFIFO.scala 28:21]
    node isFull = _isFull_T_4
    node _T = eq(isFull, UInt<1>("h0")) @[SyncFIFO.scala 30:18]
    node _T_1 = and(io_enq, _T) @[SyncFIFO.scala 30:15]
    node _T_2 = bits(writePtr, 0, 0)
    node _mem_T_2 = io_enqData @[SyncFIFO.scala 31:{19,19}]
    node _GEN_0 = mux(eq(UInt<1>("h0"), _T_2), _mem_T_2, mem_0) @[SyncFIFO.scala 31:{19,19} 17:20]
    node _GEN_1 = mux(eq(UInt<1>("h1"), _T_2), _mem_T_2, mem_1) @[SyncFIFO.scala 31:{19,19} 17:20]
    node _writePtr_T = add(writePtr, UInt<1>("h1")) @[SyncFIFO.scala 32:26]
    node _writePtr_T_1 = tail(_writePtr_T, 1) @[SyncFIFO.scala 32:26]
    node _GEN_2 = mux(_T_1, _GEN_0, mem_0) @[SyncFIFO.scala 17:20 30:27]
    node _GEN_3 = mux(_T_1, _GEN_1, mem_1) @[SyncFIFO.scala 17:20 30:27]
    node _GEN_4 = mux(_T_1, _writePtr_T_1, writePtr) @[SyncFIFO.scala 30:27 32:14 21:25]
    node isEmpty = _isEmpty_T
    node _T_3 = eq(isEmpty, UInt<1>("h0")) @[SyncFIFO.scala 35:18]
    node _T_4 = and(io_deq, _T_3) @[SyncFIFO.scala 35:15]
    node _readPtr_T = add(readPtr, UInt<1>("h1")) @[SyncFIFO.scala 36:24]
    node _readPtr_T_1 = tail(_readPtr_T, 1) @[SyncFIFO.scala 36:24]
    node _deqData_T = bits(readPtr, 0, 0)
    node _GEN_5 = validif(eq(UInt<1>("h0"), _deqData_T), mem_0) @[SyncFIFO.scala 37:{13,13}]
    node _GEN_6 = mux(eq(UInt<1>("h1"), _deqData_T), mem_1, _GEN_5) @[SyncFIFO.scala 37:{13,13}]
    node _GEN_7 = mux(_T_4, _readPtr_T_1, readPtr) @[SyncFIFO.scala 35:28 36:13 20:24]
    node _mem_deqData_T = _GEN_6 @[SyncFIFO.scala 37:13]
    node _GEN_8 = mux(_T_4, _mem_deqData_T, asSInt(UInt<4>("h0"))) @[SyncFIFO.scala 35:28 37:13]
    node _mem_WIRE_0 = asSInt(UInt<4>("h0")) @[SyncFIFO.scala 17:{28,28}]
    node _mem_WIRE_1 = asSInt(UInt<4>("h0")) @[SyncFIFO.scala 17:{28,28}]
    node deqData = _GEN_8
    io_deqData <= deqData @[SyncFIFO.scala 40:14]
    io_full <= isFull @[SyncFIFO.scala 41:11]
    io_empty <= isEmpty @[SyncFIFO.scala 42:12]
    mem_0 <= mux(reset, _mem_WIRE_0, _GEN_2) @[SyncFIFO.scala 17:{20,20}]
    mem_1 <= mux(reset, _mem_WIRE_1, _GEN_3) @[SyncFIFO.scala 17:{20,20}]
    readPtr <= mux(reset, UInt<2>("h0"), _GEN_7) @[SyncFIFO.scala 20:{24,24}]
    writePtr <= mux(reset, UInt<2>("h0"), _GEN_4) @[SyncFIFO.scala 21:{25,25}]

  module InputBuffer :
    input clock : Clock
    input reset : UInt<1>
    input io_ctrl_ib_data_out : UInt<1>
    output io_data_in_ready : UInt<1>
    input io_data_in_valid : UInt<1>
    input io_data_in_bits_0 : SInt<4>
    input io_data_in_bits_1 : SInt<4>
    output io_data_out_0 : SInt<4>
    output io_data_out_1 : SInt<4>
    output io_ib_data_in_done : UInt<1>

    inst data_queue_0 of SyncFIFO @[InputBuffer.scala 16:46]
    inst data_queue_1 of SyncFIFO @[InputBuffer.scala 16:46]
    reg delay_count_0 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), delay_count_0) @[InputBuffer.scala 19:24]
    reg delay_count_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), delay_count_1) @[InputBuffer.scala 19:24]
    node _allFull_T = and(data_queue_0.io_full, data_queue_1.io_full) @[InputBuffer.scala 26:49]
    node _allEmpty_T = and(data_queue_0.io_empty, data_queue_1.io_empty) @[InputBuffer.scala 27:51]
    reg state : UInt<1>, clock with :
      reset => (UInt<1>("h0"), state) @[InputBuffer.scala 30:22]
    node _data_queue_0_io_enq_T = and(io_data_in_ready, io_data_in_valid) @[Decoupled.scala 52:35]
    node _data_queue_0_io_deq_T = eq(state, UInt<1>("h1")) @[InputBuffer.scala 34:35]
    node _data_queue_0_io_deq_T_1 = eq(delay_count_0, UInt<1>("h0")) @[InputBuffer.scala 34:66]
    node _data_queue_0_io_deq_T_2 = and(_data_queue_0_io_deq_T, _data_queue_0_io_deq_T_1) @[InputBuffer.scala 34:48]
    node _data_queue_0_io_deq_T_3 = eq(data_queue_0.io_empty, UInt<1>("h0")) @[InputBuffer.scala 34:77]
    node _data_queue_0_io_deq_T_4 = and(_data_queue_0_io_deq_T_2, _data_queue_0_io_deq_T_3) @[InputBuffer.scala 34:74]
    node _data_queue_1_io_enq_T = and(io_data_in_ready, io_data_in_valid) @[Decoupled.scala 52:35]
    node _data_queue_1_io_deq_T = eq(state, UInt<1>("h1")) @[InputBuffer.scala 34:35]
    node _data_queue_1_io_deq_T_1 = eq(delay_count_1, UInt<1>("h0")) @[InputBuffer.scala 34:66]
    node _data_queue_1_io_deq_T_2 = and(_data_queue_1_io_deq_T, _data_queue_1_io_deq_T_1) @[InputBuffer.scala 34:48]
    node _data_queue_1_io_deq_T_3 = eq(data_queue_1.io_empty, UInt<1>("h0")) @[InputBuffer.scala 34:77]
    node _data_queue_1_io_deq_T_4 = and(_data_queue_1_io_deq_T_2, _data_queue_1_io_deq_T_3) @[InputBuffer.scala 34:74]
    node _io_data_in_ready_T = eq(state, UInt<1>("h0")) @[InputBuffer.scala 38:29]
    node _T = eq(state, UInt<1>("h0")) @[InputBuffer.scala 40:14]
    node _state_T = mux(io_ctrl_ib_data_out, UInt<1>("h1"), UInt<1>("h0")) @[InputBuffer.scala 43:19]
    node allFull = _allFull_T
    node _GEN_0 = mux(allFull, UInt<1>("h1"), UInt<1>("h0")) @[InputBuffer.scala 41:19 42:23]
    node _GEN_1 = mux(allFull, _state_T, state) @[InputBuffer.scala 41:19 43:13 30:22]
    node _T_1 = eq(state, UInt<1>("h1")) @[InputBuffer.scala 48:20]
    node allEmpty = _allEmpty_T
    node _GEN_2 = mux(allEmpty, UInt<1>("h0"), state) @[InputBuffer.scala 49:20 50:13 30:22]
    node _delay_count_0_T = neq(delay_count_0, UInt<1>("h0")) @[InputBuffer.scala 53:44]
    node _delay_count_0_T_1 = sub(delay_count_0, UInt<1>("h1")) @[InputBuffer.scala 53:68]
    node _delay_count_0_T_2 = tail(_delay_count_0_T_1, 1) @[InputBuffer.scala 53:68]
    node _delay_count_0_T_3 = mux(_delay_count_0_T, _delay_count_0_T_2, UInt<1>("h0")) @[InputBuffer.scala 53:28]
    node _delay_count_1_T = neq(delay_count_1, UInt<1>("h0")) @[InputBuffer.scala 53:44]
    node _delay_count_1_T_1 = sub(delay_count_1, UInt<1>("h1")) @[InputBuffer.scala 53:68]
    node _delay_count_1_T_2 = tail(_delay_count_1_T_1, 1) @[InputBuffer.scala 53:68]
    node _delay_count_1_T_3 = mux(_delay_count_1_T, _delay_count_1_T_2, UInt<1>("h0")) @[InputBuffer.scala 53:28]
    node _GEN_3 = mux(_T_1, _GEN_2, state) @[InputBuffer.scala 30:22 48:34]
    node _GEN_4 = mux(_T_1, _delay_count_0_T_3, delay_count_0) @[InputBuffer.scala 48:34 53:22 19:24]
    node _GEN_5 = mux(_T_1, _delay_count_1_T_3, delay_count_1) @[InputBuffer.scala 48:34 53:22 19:24]
    node _GEN_6 = mux(_T, _GEN_0, UInt<1>("h0")) @[InputBuffer.scala 40:27]
    node _GEN_7 = mux(_T, _GEN_1, _GEN_3) @[InputBuffer.scala 40:27]
    node _GEN_8 = mux(_T, UInt<1>("h0"), _GEN_4) @[InputBuffer.scala 40:27 46:22]
    node _GEN_9 = mux(_T, UInt<1>("h1"), _GEN_5) @[InputBuffer.scala 40:27 46:22]
    node ib_data_in_done = _GEN_6
    io_data_in_ready <= _io_data_in_ready_T @[InputBuffer.scala 38:20]
    io_data_out_0 <= data_queue_0.io_deqData @[InputBuffer.scala 36:20]
    io_data_out_1 <= data_queue_1.io_deqData @[InputBuffer.scala 36:20]
    io_ib_data_in_done <= ib_data_in_done @[InputBuffer.scala 22:22]
    data_queue_0.clock <= clock
    data_queue_0.reset <= reset
    data_queue_0.io_enq <= _data_queue_0_io_enq_T @[InputBuffer.scala 33:26]
    data_queue_0.io_deq <= _data_queue_0_io_deq_T_4 @[InputBuffer.scala 34:26]
    data_queue_0.io_enqData <= io_data_in_bits_0 @[InputBuffer.scala 35:30]
    data_queue_1.clock <= clock
    data_queue_1.reset <= reset
    data_queue_1.io_enq <= _data_queue_1_io_enq_T @[InputBuffer.scala 33:26]
    data_queue_1.io_deq <= _data_queue_1_io_deq_T_4 @[InputBuffer.scala 34:26]
    data_queue_1.io_enqData <= io_data_in_bits_1 @[InputBuffer.scala 35:30]
    delay_count_0 <= _GEN_8
    delay_count_1 <= _GEN_9
    state <= mux(reset, UInt<1>("h0"), _GEN_7) @[InputBuffer.scala 30:{22,22}]

  module SyncFIFO_4 :
    input clock : Clock
    input reset : UInt<1>
    input io_enq : UInt<1>
    input io_deq : UInt<1>
    input io_enqData : SInt<16>
    output io_deqData : SInt<16>
    output io_full : UInt<1>
    output io_empty : UInt<1>

    reg mem_0 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), mem_0) @[SyncFIFO.scala 17:20]
    reg mem_1 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), mem_1) @[SyncFIFO.scala 17:20]
    reg readPtr : UInt<2>, clock with :
      reset => (UInt<1>("h0"), readPtr) @[SyncFIFO.scala 20:24]
    reg writePtr : UInt<2>, clock with :
      reset => (UInt<1>("h0"), writePtr) @[SyncFIFO.scala 21:25]
    node _isEmpty_T = eq(readPtr, writePtr) @[SyncFIFO.scala 27:22]
    node _isFull_T = bits(writePtr, 1, 1) @[SyncFIFO.scala 28:38]
    node _isFull_T_1 = not(_isFull_T) @[SyncFIFO.scala 28:29]
    node _isFull_T_2 = bits(writePtr, 0, 0) @[SyncFIFO.scala 28:60]
    node _isFull_T_3 = cat(_isFull_T_1, _isFull_T_2) @[Cat.scala 33:92]
    node _isFull_T_4 = eq(readPtr, _isFull_T_3) @[SyncFIFO.scala 28:21]
    node isFull = _isFull_T_4
    node _T = eq(isFull, UInt<1>("h0")) @[SyncFIFO.scala 30:18]
    node _T_1 = and(io_enq, _T) @[SyncFIFO.scala 30:15]
    node _T_2 = bits(writePtr, 0, 0)
    node _mem_T_2 = io_enqData @[SyncFIFO.scala 31:{19,19}]
    node _GEN_0 = mux(eq(UInt<1>("h0"), _T_2), _mem_T_2, mem_0) @[SyncFIFO.scala 31:{19,19} 17:20]
    node _GEN_1 = mux(eq(UInt<1>("h1"), _T_2), _mem_T_2, mem_1) @[SyncFIFO.scala 31:{19,19} 17:20]
    node _writePtr_T = add(writePtr, UInt<1>("h1")) @[SyncFIFO.scala 32:26]
    node _writePtr_T_1 = tail(_writePtr_T, 1) @[SyncFIFO.scala 32:26]
    node _GEN_2 = mux(_T_1, _GEN_0, mem_0) @[SyncFIFO.scala 17:20 30:27]
    node _GEN_3 = mux(_T_1, _GEN_1, mem_1) @[SyncFIFO.scala 17:20 30:27]
    node _GEN_4 = mux(_T_1, _writePtr_T_1, writePtr) @[SyncFIFO.scala 30:27 32:14 21:25]
    node isEmpty = _isEmpty_T
    node _T_3 = eq(isEmpty, UInt<1>("h0")) @[SyncFIFO.scala 35:18]
    node _T_4 = and(io_deq, _T_3) @[SyncFIFO.scala 35:15]
    node _readPtr_T = add(readPtr, UInt<1>("h1")) @[SyncFIFO.scala 36:24]
    node _readPtr_T_1 = tail(_readPtr_T, 1) @[SyncFIFO.scala 36:24]
    node _deqData_T = bits(readPtr, 0, 0)
    node _GEN_5 = validif(eq(UInt<1>("h0"), _deqData_T), mem_0) @[SyncFIFO.scala 37:{13,13}]
    node _GEN_6 = mux(eq(UInt<1>("h1"), _deqData_T), mem_1, _GEN_5) @[SyncFIFO.scala 37:{13,13}]
    node _GEN_7 = mux(_T_4, _readPtr_T_1, readPtr) @[SyncFIFO.scala 35:28 36:13 20:24]
    node _mem_deqData_T = _GEN_6 @[SyncFIFO.scala 37:13]
    node _GEN_8 = mux(_T_4, _mem_deqData_T, asSInt(UInt<16>("h0"))) @[SyncFIFO.scala 35:28 37:13]
    node _mem_WIRE_0 = asSInt(UInt<16>("h0")) @[SyncFIFO.scala 17:{28,28}]
    node _mem_WIRE_1 = asSInt(UInt<16>("h0")) @[SyncFIFO.scala 17:{28,28}]
    node deqData = _GEN_8
    io_deqData <= deqData @[SyncFIFO.scala 40:14]
    io_full <= isFull @[SyncFIFO.scala 41:11]
    io_empty <= isEmpty @[SyncFIFO.scala 42:12]
    mem_0 <= mux(reset, _mem_WIRE_0, _GEN_2) @[SyncFIFO.scala 17:{20,20}]
    mem_1 <= mux(reset, _mem_WIRE_1, _GEN_3) @[SyncFIFO.scala 17:{20,20}]
    readPtr <= mux(reset, UInt<2>("h0"), _GEN_7) @[SyncFIFO.scala 20:{24,24}]
    writePtr <= mux(reset, UInt<2>("h0"), _GEN_4) @[SyncFIFO.scala 21:{25,25}]

  module OutputBuffer :
    input clock : Clock
    input reset : UInt<1>
    input io_ctrl_ob_data_in : UInt<1>
    input io_data_in_0 : SInt<16>
    input io_data_in_1 : SInt<16>
    input io_data_out_ready : UInt<1>
    output io_data_out_valid : UInt<1>
    output io_data_out_bits_0 : SInt<16>
    output io_data_out_bits_1 : SInt<16>
    output io_ob_empty : UInt<1>

    inst data_queue_0 of SyncFIFO_4 @[OutputBuffer.scala 16:46]
    inst data_queue_1 of SyncFIFO_4 @[OutputBuffer.scala 16:46]
    node _allEmpty_T = and(data_queue_0.io_empty, data_queue_1.io_empty) @[OutputBuffer.scala 19:51]
    node allEmpty = _allEmpty_T
    node _data_queue_0_io_deq_T = eq(allEmpty, UInt<1>("h0")) @[OutputBuffer.scala 24:31]
    node _data_queue_1_io_deq_T = eq(allEmpty, UInt<1>("h0")) @[OutputBuffer.scala 24:31]
    node _io_data_out_valid_T = eq(allEmpty, UInt<1>("h0")) @[OutputBuffer.scala 33:24]
    io_data_out_valid <= _io_data_out_valid_T @[OutputBuffer.scala 33:21]
    io_data_out_bits_0 <= data_queue_0.io_deqData @[OutputBuffer.scala 30:25]
    io_data_out_bits_1 <= data_queue_1.io_deqData @[OutputBuffer.scala 30:25]
    io_ob_empty <= allEmpty @[OutputBuffer.scala 34:15]
    data_queue_0.clock <= clock
    data_queue_0.reset <= reset
    data_queue_0.io_enq <= io_ctrl_ob_data_in @[OutputBuffer.scala 22:26]
    data_queue_0.io_deq <= _data_queue_0_io_deq_T @[OutputBuffer.scala 24:28]
    data_queue_0.io_enqData <= io_data_in_0 @[OutputBuffer.scala 29:30]
    data_queue_1.clock <= clock
    data_queue_1.reset <= reset
    data_queue_1.io_enq <= io_ctrl_ob_data_in @[OutputBuffer.scala 22:26]
    data_queue_1.io_deq <= _data_queue_1_io_deq_T @[OutputBuffer.scala 24:28]
    data_queue_1.io_enqData <= io_data_in_1 @[OutputBuffer.scala 29:30]

  module top_M :
    input clock : Clock
    input reset : UInt<1>
    output io_tpuIO_in_in_a_ready : UInt<1>
    input io_tpuIO_in_in_a_valid : UInt<1>
    input io_tpuIO_in_in_a_bits_0 : SInt<4>
    input io_tpuIO_in_in_a_bits_1 : SInt<4>
    output io_tpuIO_in_in_b_ready : UInt<1>
    input io_tpuIO_in_in_b_valid : UInt<1>
    input io_tpuIO_in_in_b_bits_0 : SInt<4>
    input io_tpuIO_in_in_b_bits_1 : SInt<4>
    input io_tpuIO_in_in_c_0 : SInt<16>
    input io_tpuIO_in_in_c_1 : SInt<16>
    input io_tpuIO_out_ready : UInt<1>
    output io_tpuIO_out_valid : UInt<1>
    output io_tpuIO_out_bits_out_c_0 : SInt<16>
    output io_tpuIO_out_bits_out_c_1 : SInt<16>

    inst sa of SystolicArray @[matu.scala 348:18]
    inst controller of Controller @[matu.scala 349:26]
    inst inBuffer_h of InputBuffer @[matu.scala 350:28]
    inst inBuffer_v of InputBuffer @[matu.scala 351:27]
    inst outBuffer of OutputBuffer @[matu.scala 352:26]
    io_tpuIO_in_in_a_ready <= inBuffer_h.io_data_in_ready @[matu.scala 361:26]
    io_tpuIO_in_in_b_ready <= inBuffer_v.io_data_in_ready @[matu.scala 362:26]
    io_tpuIO_out_valid <= outBuffer.io_data_out_valid @[matu.scala 364:22]
    io_tpuIO_out_bits_out_c_0 <= outBuffer.io_data_out_bits_0 @[matu.scala 365:27]
    io_tpuIO_out_bits_out_c_1 <= outBuffer.io_data_out_bits_1 @[matu.scala 365:27]
    sa.clock <= clock
    sa.reset <= reset
    sa.io_in_control_0_ctrl_sa_send_data <= controller.io_ctrl_sa_send_data @[matu.scala 373:48]
    sa.io_in_control_1_ctrl_sa_send_data <= controller.io_ctrl_sa_send_data @[matu.scala 373:48]
    sa.io_in_a_0 <= inBuffer_h.io_data_out_0 @[matu.scala 369:14]
    sa.io_in_a_1 <= inBuffer_h.io_data_out_1 @[matu.scala 369:14]
    sa.io_in_b_0 <= inBuffer_v.io_data_out_0 @[matu.scala 370:14]
    sa.io_in_b_1 <= inBuffer_v.io_data_out_1 @[matu.scala 370:14]
    sa.io_in_c_0 <= io_tpuIO_in_in_c_0 @[matu.scala 371:14]
    sa.io_in_c_1 <= io_tpuIO_in_in_c_1 @[matu.scala 371:14]
    controller.clock <= clock
    controller.reset <= reset
    controller.io_ibh_data_in_done <= inBuffer_h.io_ib_data_in_done @[matu.scala 375:34]
    controller.io_ibv_data_in_done <= inBuffer_v.io_ib_data_in_done @[matu.scala 376:34]
    controller.io_ob_empty <= outBuffer.io_ob_empty @[matu.scala 377:26]
    inBuffer_h.clock <= clock
    inBuffer_h.reset <= reset
    inBuffer_h.io_ctrl_ib_data_out <= controller.io_ctrl_ib_data_out @[matu.scala 356:34]
    inBuffer_h.io_data_in_valid <= io_tpuIO_in_in_a_valid @[matu.scala 354:31]
    inBuffer_h.io_data_in_bits_0 <= io_tpuIO_in_in_a_bits_0 @[matu.scala 355:30]
    inBuffer_h.io_data_in_bits_1 <= io_tpuIO_in_in_a_bits_1 @[matu.scala 355:30]
    inBuffer_v.clock <= clock
    inBuffer_v.reset <= reset
    inBuffer_v.io_ctrl_ib_data_out <= controller.io_ctrl_ib_data_out @[matu.scala 360:34]
    inBuffer_v.io_data_in_valid <= io_tpuIO_in_in_b_valid @[matu.scala 358:31]
    inBuffer_v.io_data_in_bits_0 <= io_tpuIO_in_in_b_bits_0 @[matu.scala 359:30]
    inBuffer_v.io_data_in_bits_1 <= io_tpuIO_in_in_b_bits_1 @[matu.scala 359:30]
    outBuffer.clock <= clock
    outBuffer.reset <= reset
    outBuffer.io_ctrl_ob_data_in <= controller.io_ctrl_ob_data_in @[matu.scala 367:32]
    outBuffer.io_data_in_0 <= sa.io_out_c_0 @[matu.scala 372:24]
    outBuffer.io_data_in_1 <= sa.io_out_c_1 @[matu.scala 372:24]
    outBuffer.io_data_out_ready <= io_tpuIO_out_ready @[matu.scala 366:31]

  module OutputBridge_M :
    input clock : Clock
    input reset : UInt<1>
    input io_in_valid : UInt<1>
    output io_out_ready : UInt<1>
    input io_out_c_0 : SInt<16>
    input io_out_c_1 : SInt<16>
    input io_in_ready : UInt<1>
    output io_out_valid : UInt<1>
    output io_result : SInt<64>

    reg out_ptr : UInt<1>, clock with :
      reset => (UInt<1>("h0"), out_ptr) @[matu.scala 102:29]
    reg out_valid_r : UInt<1>, clock with :
      reset => (UInt<1>("h0"), out_valid_r) @[matu.scala 103:29]
    reg result_0_0 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), result_0_0) @[matu.scala 104:44]
    reg result_0_1 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), result_0_1) @[matu.scala 104:44]
    reg result_1_0 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), result_1_0) @[matu.scala 104:44]
    reg result_1_1 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), result_1_1) @[matu.scala 104:44]
    node _T = eq(out_ptr, UInt<1>("h0")) @[matu.scala 108:17]
    node _T_1 = and(_T, io_in_valid) @[matu.scala 108:29]
    node _T_2 = eq(out_ptr, UInt<1>("h1")) @[matu.scala 113:23]
    node _T_3 = and(_T_2, io_in_valid) @[matu.scala 113:34]
    node _GEN_0 = mux(io_in_ready, UInt<1>("h0"), out_ptr) @[matu.scala 117:28 118:21 102:29]
    node _GEN_1 = mux(io_in_ready, io_in_valid, out_valid_r) @[matu.scala 117:28 119:21 103:29]
    node _GEN_2 = mux(io_in_ready, io_out_c_0, result_0_0) @[matu.scala 117:28 104:44 120:94]
    node _GEN_3 = mux(io_in_ready, io_out_c_1, result_0_1) @[matu.scala 117:28 104:44 120:94]
    node _GEN_4 = mux(io_in_ready, io_out_c_0, result_1_0) @[matu.scala 117:28 104:44 120:94]
    node _GEN_5 = mux(io_in_ready, io_out_c_1, result_1_1) @[matu.scala 117:28 104:44 120:94]
    node _GEN_6 = mux(_T_3, UInt<1>("h0"), _GEN_0) @[matu.scala 113:49 114:21]
    node _GEN_7 = mux(_T_3, io_in_valid, _GEN_1) @[matu.scala 113:49 115:21]
    node _GEN_8 = mux(_T_3, io_out_c_0, _GEN_2) @[matu.scala 113:49 116:91]
    node _GEN_9 = mux(_T_3, io_out_c_1, _GEN_3) @[matu.scala 113:49 116:91]
    node _GEN_10 = mux(_T_3, result_1_0, _GEN_4) @[matu.scala 104:44 113:49]
    node _GEN_11 = mux(_T_3, result_1_1, _GEN_5) @[matu.scala 104:44 113:49]
    node _GEN_12 = mux(_T_1, UInt<1>("h1"), _GEN_6) @[matu.scala 108:45 109:21]
    node _GEN_13 = mux(_T_1, UInt<1>("h0"), _GEN_7) @[matu.scala 108:45 110:21]
    node _GEN_14 = mux(_T_1, io_out_c_0, _GEN_10) @[matu.scala 108:45 111:91]
    node _GEN_15 = mux(_T_1, io_out_c_1, _GEN_11) @[matu.scala 108:45 111:91]
    node _GEN_16 = mux(_T_1, result_0_0, _GEN_8) @[matu.scala 104:44 108:45]
    node _GEN_17 = mux(_T_1, result_0_1, _GEN_9) @[matu.scala 104:44 108:45]
    node io_result_lo_lo = asUInt(result_0_0) @[Cat.scala 33:92]
    node io_result_lo_hi = asUInt(result_0_1) @[Cat.scala 33:92]
    node io_result_lo = cat(io_result_lo_hi, io_result_lo_lo) @[Cat.scala 33:92]
    node io_result_hi_lo = asUInt(result_1_0) @[Cat.scala 33:92]
    node io_result_hi_hi = asUInt(result_1_1) @[Cat.scala 33:92]
    node io_result_hi = cat(io_result_hi_hi, io_result_hi_lo) @[Cat.scala 33:92]
    node _io_result_T = cat(io_result_hi, io_result_lo) @[Cat.scala 33:92]
    node _io_result_T_1 = asSInt(_io_result_T) @[matu.scala 125:74]
    io_out_ready <= io_in_ready @[matu.scala 124:16]
    io_out_valid <= out_valid_r @[matu.scala 123:16]
    io_result <= _io_result_T_1 @[matu.scala 125:16]
    out_ptr <= mux(reset, UInt<1>("h0"), _GEN_12) @[matu.scala 102:{29,29}]
    out_valid_r <= mux(reset, UInt<1>("h0"), _GEN_13) @[matu.scala 103:{29,29}]
    result_0_0 <= mux(reset, asSInt(UInt<16>("h0")), _GEN_16) @[matu.scala 104:{44,44}]
    result_0_1 <= mux(reset, asSInt(UInt<16>("h0")), _GEN_17) @[matu.scala 104:{44,44}]
    result_1_0 <= mux(reset, asSInt(UInt<16>("h0")), _GEN_14) @[matu.scala 104:{44,44}]
    result_1_1 <= mux(reset, asSInt(UInt<16>("h0")), _GEN_15) @[matu.scala 104:{44,44}]

  module InputBridge_M :
    input clock : Clock
    input reset : UInt<1>
    input io_in_valid : UInt<1>
    output io_out_ready : UInt<1>
    input io_ldIn : SInt<64>
    input io_in_ready : UInt<1>
    output io_out_valid_h : UInt<1>
    output io_out_valid_v : UInt<1>
    output io_in_a_0 : SInt<4>
    output io_in_a_1 : SInt<4>
    output io_in_b_0 : SInt<4>
    output io_in_b_1 : SInt<4>

    reg cnt : UInt<2>, clock with :
      reset => (UInt<1>("h0"), cnt) @[matu.scala 276:24]
    reg in_ptr : UInt<1>, clock with :
      reset => (UInt<1>("h0"), in_ptr) @[matu.scala 277:24]
    node _T = eq(in_ptr, UInt<1>("h0")) @[matu.scala 278:16]
    node _T_1 = lt(cnt, UInt<1>("h1")) @[matu.scala 278:35]
    node _T_2 = and(_T, _T_1) @[matu.scala 278:28]
    node _T_3 = and(_T_2, io_in_ready) @[matu.scala 278:41]
    node _T_4 = and(_T_3, io_in_valid) @[matu.scala 278:56]
    node _cnt_T = add(cnt, UInt<1>("h1")) @[matu.scala 279:16]
    node _cnt_T_1 = tail(_cnt_T, 1) @[matu.scala 279:16]
    node _io_in_a_0_T = bits(io_ldIn, 3, 0) @[matu.scala 280:26]
    node _io_in_a_0_T_1 = asSInt(_io_in_a_0_T) @[matu.scala 280:33]
    node _io_in_a_1_T = bits(io_ldIn, 7, 4) @[matu.scala 281:26]
    node _io_in_a_1_T_1 = asSInt(_io_in_a_1_T) @[matu.scala 281:33]
    node _T_5 = eq(in_ptr, UInt<1>("h0")) @[matu.scala 286:23]
    node _T_6 = eq(cnt, UInt<1>("h1")) @[matu.scala 286:42]
    node _T_7 = and(_T_5, _T_6) @[matu.scala 286:35]
    node _T_8 = and(_T_7, io_in_ready) @[matu.scala 286:50]
    node _T_9 = and(_T_8, io_in_valid) @[matu.scala 286:65]
    node _io_in_a_0_T_2 = bits(io_ldIn, 3, 0) @[matu.scala 291:26]
    node _io_in_a_0_T_3 = asSInt(_io_in_a_0_T_2) @[matu.scala 291:33]
    node _io_in_a_1_T_2 = bits(io_ldIn, 7, 4) @[matu.scala 292:26]
    node _io_in_a_1_T_3 = asSInt(_io_in_a_1_T_2) @[matu.scala 292:33]
    node _T_10 = eq(in_ptr, UInt<1>("h1")) @[matu.scala 295:23]
    node _T_11 = lt(cnt, UInt<1>("h1")) @[matu.scala 295:41]
    node _T_12 = and(_T_10, _T_11) @[matu.scala 295:34]
    node _T_13 = and(_T_12, io_in_ready) @[matu.scala 295:47]
    node _T_14 = and(_T_13, io_in_valid) @[matu.scala 295:62]
    node _cnt_T_2 = add(cnt, UInt<1>("h1")) @[matu.scala 296:16]
    node _cnt_T_3 = tail(_cnt_T_2, 1) @[matu.scala 296:16]
    node _io_in_b_0_T = bits(io_ldIn, 3, 0) @[matu.scala 301:26]
    node _io_in_b_0_T_1 = asSInt(_io_in_b_0_T) @[matu.scala 301:33]
    node _io_in_b_1_T = bits(io_ldIn, 7, 4) @[matu.scala 302:26]
    node _io_in_b_1_T_1 = asSInt(_io_in_b_1_T) @[matu.scala 302:33]
    node _T_15 = eq(in_ptr, UInt<1>("h1")) @[matu.scala 303:23]
    node _T_16 = eq(cnt, UInt<1>("h1")) @[matu.scala 303:41]
    node _T_17 = and(_T_15, _T_16) @[matu.scala 303:34]
    node _T_18 = and(_T_17, io_in_ready) @[matu.scala 303:49]
    node _T_19 = and(_T_18, io_in_valid) @[matu.scala 303:64]
    node _io_in_b_0_T_2 = bits(io_ldIn, 3, 0) @[matu.scala 310:26]
    node _io_in_b_0_T_3 = asSInt(_io_in_b_0_T_2) @[matu.scala 310:33]
    node _io_in_b_1_T_2 = bits(io_ldIn, 7, 4) @[matu.scala 311:26]
    node _io_in_b_1_T_3 = asSInt(_io_in_b_1_T_2) @[matu.scala 311:33]
    node _GEN_0 = mux(_T_19, UInt<1>("h0"), in_ptr) @[matu.scala 303:81 304:16 277:24]
    node _GEN_1 = mux(_T_19, UInt<1>("h0"), cnt) @[matu.scala 303:81 305:16 276:24]
    node _GEN_2 = mux(_T_19, asSInt(UInt<1>("h0")), asSInt(UInt<1>("h0"))) @[matu.scala 303:81 306:16 315:16]
    node _GEN_3 = mux(_T_19, UInt<1>("h0"), io_in_valid) @[matu.scala 303:81 308:20 313:20]
    node _GEN_4 = mux(_T_19, io_in_valid, io_in_valid) @[matu.scala 303:81 309:20 314:20]
    node _GEN_5 = mux(_T_19, _io_in_b_0_T_3, asSInt(UInt<1>("h0"))) @[matu.scala 303:81 310:16 317:16]
    node _GEN_6 = mux(_T_19, _io_in_b_1_T_3, asSInt(UInt<1>("h0"))) @[matu.scala 303:81 311:16 318:16]
    node _GEN_7 = mux(_T_14, _cnt_T_3, _GEN_1) @[matu.scala 295:79 296:9]
    node _GEN_8 = mux(_T_14, asSInt(UInt<1>("h0")), _GEN_2) @[matu.scala 295:79 297:16]
    node _GEN_9 = mux(_T_14, UInt<1>("h0"), _GEN_3) @[matu.scala 295:79 299:20]
    node _GEN_10 = mux(_T_14, io_in_valid, _GEN_4) @[matu.scala 295:79 300:20]
    node _GEN_11 = mux(_T_14, _io_in_b_0_T_1, _GEN_5) @[matu.scala 295:79 301:16]
    node _GEN_12 = mux(_T_14, _io_in_b_1_T_1, _GEN_6) @[matu.scala 295:79 302:16]
    node _GEN_13 = mux(_T_14, in_ptr, _GEN_0) @[matu.scala 277:24 295:79]
    node _GEN_14 = mux(_T_9, UInt<1>("h1"), _GEN_13) @[matu.scala 286:82 287:16]
    node _GEN_15 = mux(_T_9, UInt<1>("h0"), _GEN_7) @[matu.scala 286:82 288:16]
    node _GEN_16 = mux(_T_9, io_in_valid, _GEN_9) @[matu.scala 286:82 289:20]
    node _GEN_17 = mux(_T_9, UInt<1>("h0"), _GEN_10) @[matu.scala 286:82 290:20]
    node _GEN_18 = mux(_T_9, _io_in_a_0_T_3, _GEN_8) @[matu.scala 286:82 291:16]
    node _GEN_19 = mux(_T_9, _io_in_a_1_T_3, _GEN_8) @[matu.scala 286:82 292:16]
    node _GEN_20 = mux(_T_9, asSInt(UInt<1>("h0")), _GEN_11) @[matu.scala 286:82 293:16]
    node _GEN_21 = mux(_T_9, asSInt(UInt<1>("h0")), _GEN_12) @[matu.scala 286:82 294:16]
    node _GEN_22 = mux(_T_4, _cnt_T_1, _GEN_15) @[matu.scala 278:73 279:9]
    node _GEN_23 = mux(_T_4, _io_in_a_0_T_1, _GEN_18) @[matu.scala 278:73 280:16]
    node _GEN_24 = mux(_T_4, _io_in_a_1_T_1, _GEN_19) @[matu.scala 278:73 281:16]
    node _GEN_25 = mux(_T_4, io_in_valid, _GEN_16) @[matu.scala 278:73 282:20]
    node _GEN_26 = mux(_T_4, UInt<1>("h0"), _GEN_17) @[matu.scala 278:73 283:20]
    node _GEN_27 = mux(_T_4, asSInt(UInt<1>("h0")), _GEN_20) @[matu.scala 278:73 284:16]
    node _GEN_28 = mux(_T_4, asSInt(UInt<1>("h0")), _GEN_21) @[matu.scala 278:73 285:16]
    node _GEN_29 = mux(_T_4, in_ptr, _GEN_14) @[matu.scala 277:24 278:73]
    io_out_ready <= io_in_ready @[matu.scala 320:16]
    io_out_valid_h <= _GEN_25
    io_out_valid_v <= _GEN_26
    io_in_a_0 <= _GEN_23
    io_in_a_1 <= _GEN_24
    io_in_b_0 <= _GEN_27
    io_in_b_1 <= _GEN_28
    cnt <= mux(reset, UInt<2>("h0"), _GEN_22) @[matu.scala 276:{24,24}]
    in_ptr <= mux(reset, UInt<1>("h0"), _GEN_29) @[matu.scala 277:{24,24}]

  module SA_ROB :
    input clock : Clock
    input reset : UInt<1>
    input io_deqptr_0 : UInt<5>
    input io_deqptr_1 : UInt<5>
    input io_deqptr_2 : UInt<5>
    input io_deqptr_3 : UInt<5>
    input io_deqptr_4 : UInt<5>
    input io_deqptr_5 : UInt<5>
    input io_ldin_data_0 : UInt<64>
    input io_ldin_data_1 : UInt<64>
    input io_ldin_robIdx_0 : UInt<5>
    input io_ldin_robIdx_1 : UInt<5>
    input io_ldin_fuOptype_0 : UInt<3>
    input io_ldin_fuOptype_1 : UInt<3>
    input io_ldin_valid_0 : UInt<1>
    input io_ldin_valid_1 : UInt<1>
    input io_out_ready : UInt<1>
    output io_out_valid : UInt<1>
    output io_out_bits : UInt<64>

    reg data_queue_0_0 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), data_queue_0_0) @[matu.scala 145:27]
    reg data_queue_0_1 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), data_queue_0_1) @[matu.scala 145:27]
    reg data_queue_0_2 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), data_queue_0_2) @[matu.scala 145:27]
    reg data_queue_0_3 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), data_queue_0_3) @[matu.scala 145:27]
    reg data_queue_1_0 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), data_queue_1_0) @[matu.scala 145:27]
    reg data_queue_1_1 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), data_queue_1_1) @[matu.scala 145:27]
    reg data_queue_1_2 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), data_queue_1_2) @[matu.scala 145:27]
    reg data_queue_1_3 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), data_queue_1_3) @[matu.scala 145:27]
    reg data_writePtr_0 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), data_writePtr_0) @[matu.scala 146:30]
    reg data_writePtr_1 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), data_writePtr_1) @[matu.scala 146:30]
    reg robIdx_queue_0_0 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), robIdx_queue_0_0) @[matu.scala 148:41]
    reg robIdx_queue_0_1 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), robIdx_queue_0_1) @[matu.scala 148:41]
    reg robIdx_queue_0_2 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), robIdx_queue_0_2) @[matu.scala 148:41]
    reg robIdx_queue_0_3 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), robIdx_queue_0_3) @[matu.scala 148:41]
    reg robIdx_queue_1_0 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), robIdx_queue_1_0) @[matu.scala 148:41]
    reg robIdx_queue_1_1 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), robIdx_queue_1_1) @[matu.scala 148:41]
    reg robIdx_queue_1_2 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), robIdx_queue_1_2) @[matu.scala 148:41]
    reg robIdx_queue_1_3 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), robIdx_queue_1_3) @[matu.scala 148:41]
    reg robIdx_writePtr_0 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), robIdx_writePtr_0) @[matu.scala 149:32]
    reg robIdx_writePtr_1 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), robIdx_writePtr_1) @[matu.scala 149:32]
    reg valid_queue_0_0 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), valid_queue_0_0) @[matu.scala 151:40]
    reg valid_queue_0_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), valid_queue_0_1) @[matu.scala 151:40]
    reg valid_queue_0_2 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), valid_queue_0_2) @[matu.scala 151:40]
    reg valid_queue_0_3 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), valid_queue_0_3) @[matu.scala 151:40]
    reg valid_queue_1_0 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), valid_queue_1_0) @[matu.scala 151:40]
    reg valid_queue_1_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), valid_queue_1_1) @[matu.scala 151:40]
    reg valid_queue_1_2 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), valid_queue_1_2) @[matu.scala 151:40]
    reg valid_queue_1_3 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), valid_queue_1_3) @[matu.scala 151:40]
    reg valid_writePtr_0 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), valid_writePtr_0) @[matu.scala 152:31]
    reg valid_writePtr_1 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), valid_writePtr_1) @[matu.scala 152:31]
    reg deqptrReg_0 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), deqptrReg_0) @[matu.scala 154:26]
    reg deqptrReg_1 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), deqptrReg_1) @[matu.scala 154:26]
    reg deqptrReg_2 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), deqptrReg_2) @[matu.scala 154:26]
    reg deqptrReg_3 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), deqptrReg_3) @[matu.scala 154:26]
    reg deqptrReg_4 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), deqptrReg_4) @[matu.scala 154:26]
    reg deqptrReg_5 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), deqptrReg_5) @[matu.scala 154:26]
    reg MatchVec_lastCycle_0_0 : UInt<6>, clock with :
      reset => (UInt<1>("h0"), MatchVec_lastCycle_0_0) @[matu.scala 157:35]
    reg MatchVec_lastCycle_0_1 : UInt<6>, clock with :
      reset => (UInt<1>("h0"), MatchVec_lastCycle_0_1) @[matu.scala 157:35]
    reg MatchVec_lastCycle_0_2 : UInt<6>, clock with :
      reset => (UInt<1>("h0"), MatchVec_lastCycle_0_2) @[matu.scala 157:35]
    reg MatchVec_lastCycle_0_3 : UInt<6>, clock with :
      reset => (UInt<1>("h0"), MatchVec_lastCycle_0_3) @[matu.scala 157:35]
    reg MatchVec_lastCycle_1_0 : UInt<6>, clock with :
      reset => (UInt<1>("h0"), MatchVec_lastCycle_1_0) @[matu.scala 157:35]
    reg MatchVec_lastCycle_1_1 : UInt<6>, clock with :
      reset => (UInt<1>("h0"), MatchVec_lastCycle_1_1) @[matu.scala 157:35]
    reg MatchVec_lastCycle_1_2 : UInt<6>, clock with :
      reset => (UInt<1>("h0"), MatchVec_lastCycle_1_2) @[matu.scala 157:35]
    reg MatchVec_lastCycle_1_3 : UInt<6>, clock with :
      reset => (UInt<1>("h0"), MatchVec_lastCycle_1_3) @[matu.scala 157:35]
    reg MatchVecUInt_0_0 : UInt<12>, clock with :
      reset => (UInt<1>("h0"), MatchVecUInt_0_0) @[matu.scala 158:29]
    reg MatchVecUInt_0_1 : UInt<12>, clock with :
      reset => (UInt<1>("h0"), MatchVecUInt_0_1) @[matu.scala 158:29]
    reg MatchVecUInt_0_2 : UInt<12>, clock with :
      reset => (UInt<1>("h0"), MatchVecUInt_0_2) @[matu.scala 158:29]
    reg MatchVecUInt_0_3 : UInt<12>, clock with :
      reset => (UInt<1>("h0"), MatchVecUInt_0_3) @[matu.scala 158:29]
    reg MatchVecUInt_1_0 : UInt<12>, clock with :
      reset => (UInt<1>("h0"), MatchVecUInt_1_0) @[matu.scala 158:29]
    reg MatchVecUInt_1_1 : UInt<12>, clock with :
      reset => (UInt<1>("h0"), MatchVecUInt_1_1) @[matu.scala 158:29]
    reg MatchVecUInt_1_2 : UInt<12>, clock with :
      reset => (UInt<1>("h0"), MatchVecUInt_1_2) @[matu.scala 158:29]
    reg MatchVecUInt_1_3 : UInt<12>, clock with :
      reset => (UInt<1>("h0"), MatchVecUInt_1_3) @[matu.scala 158:29]
    node _T = eq(io_ldin_fuOptype_0, UInt<3>("h7")) @[matu.scala 168:31]
    node _T_1 = eq(io_ldin_valid_0, UInt<1>("h1")) @[matu.scala 168:61]
    node _T_2 = and(_T, _T_1) @[matu.scala 168:40]
    node _data_writePtr_0_T = add(data_writePtr_0, UInt<1>("h1")) @[matu.scala 169:44]
    node _data_writePtr_0_T_1 = tail(_data_writePtr_0_T, 1) @[matu.scala 169:44]
    node _data_queue_0_data_writePtr_0 = io_ldin_data_0 @[matu.scala 170:{38,38}]
    node _GEN_0 = mux(eq(UInt<1>("h0"), data_writePtr_0), _data_queue_0_data_writePtr_0, data_queue_0_0) @[matu.scala 145:27 170:{38,38}]
    node _GEN_1 = mux(eq(UInt<1>("h1"), data_writePtr_0), _data_queue_0_data_writePtr_0, data_queue_0_1) @[matu.scala 145:27 170:{38,38}]
    node _GEN_2 = mux(eq(UInt<2>("h2"), data_writePtr_0), _data_queue_0_data_writePtr_0, data_queue_0_2) @[matu.scala 145:27 170:{38,38}]
    node _GEN_3 = mux(eq(UInt<2>("h3"), data_writePtr_0), _data_queue_0_data_writePtr_0, data_queue_0_3) @[matu.scala 145:27 170:{38,38}]
    node _robIdx_writePtr_0_T = add(robIdx_writePtr_0, UInt<1>("h1")) @[matu.scala 172:48]
    node _robIdx_writePtr_0_T_1 = tail(_robIdx_writePtr_0_T, 1) @[matu.scala 172:48]
    node _robIdx_queue_0_robIdx_writePtr_0 = io_ldin_robIdx_0 @[matu.scala 173:{43,43}]
    node _GEN_4 = mux(eq(UInt<1>("h0"), robIdx_writePtr_0), _robIdx_queue_0_robIdx_writePtr_0, robIdx_queue_0_0) @[matu.scala 148:41 173:{43,43}]
    node _GEN_5 = mux(eq(UInt<1>("h1"), robIdx_writePtr_0), _robIdx_queue_0_robIdx_writePtr_0, robIdx_queue_0_1) @[matu.scala 148:41 173:{43,43}]
    node _GEN_6 = mux(eq(UInt<2>("h2"), robIdx_writePtr_0), _robIdx_queue_0_robIdx_writePtr_0, robIdx_queue_0_2) @[matu.scala 148:41 173:{43,43}]
    node _GEN_7 = mux(eq(UInt<2>("h3"), robIdx_writePtr_0), _robIdx_queue_0_robIdx_writePtr_0, robIdx_queue_0_3) @[matu.scala 148:41 173:{43,43}]
    node _valid_writePtr_0_T = add(valid_writePtr_0, UInt<1>("h1")) @[matu.scala 175:46]
    node _valid_writePtr_0_T_1 = tail(_valid_writePtr_0_T, 1) @[matu.scala 175:46]
    node _valid_queue_0_valid_writePtr_0 = io_ldin_valid_0 @[matu.scala 176:{41,41}]
    node _GEN_8 = mux(eq(UInt<1>("h0"), valid_writePtr_0), _valid_queue_0_valid_writePtr_0, valid_queue_0_0) @[matu.scala 151:40 176:{41,41}]
    node _GEN_9 = mux(eq(UInt<1>("h1"), valid_writePtr_0), _valid_queue_0_valid_writePtr_0, valid_queue_0_1) @[matu.scala 151:40 176:{41,41}]
    node _GEN_10 = mux(eq(UInt<2>("h2"), valid_writePtr_0), _valid_queue_0_valid_writePtr_0, valid_queue_0_2) @[matu.scala 151:40 176:{41,41}]
    node _GEN_11 = mux(eq(UInt<2>("h3"), valid_writePtr_0), _valid_queue_0_valid_writePtr_0, valid_queue_0_3) @[matu.scala 151:40 176:{41,41}]
    node _GEN_12 = mux(_T_2, _data_writePtr_0_T_1, data_writePtr_0) @[matu.scala 168:73 169:24 146:30]
    node _GEN_13 = mux(_T_2, _GEN_0, data_queue_0_0) @[matu.scala 145:27 168:73]
    node _GEN_14 = mux(_T_2, _GEN_1, data_queue_0_1) @[matu.scala 145:27 168:73]
    node _GEN_15 = mux(_T_2, _GEN_2, data_queue_0_2) @[matu.scala 145:27 168:73]
    node _GEN_16 = mux(_T_2, _GEN_3, data_queue_0_3) @[matu.scala 145:27 168:73]
    node _GEN_17 = mux(_T_2, _robIdx_writePtr_0_T_1, robIdx_writePtr_0) @[matu.scala 168:73 172:26 149:32]
    node _GEN_18 = mux(_T_2, _GEN_4, robIdx_queue_0_0) @[matu.scala 148:41 168:73]
    node _GEN_19 = mux(_T_2, _GEN_5, robIdx_queue_0_1) @[matu.scala 148:41 168:73]
    node _GEN_20 = mux(_T_2, _GEN_6, robIdx_queue_0_2) @[matu.scala 148:41 168:73]
    node _GEN_21 = mux(_T_2, _GEN_7, robIdx_queue_0_3) @[matu.scala 148:41 168:73]
    node _GEN_22 = mux(_T_2, _valid_writePtr_0_T_1, valid_writePtr_0) @[matu.scala 168:73 175:25 152:31]
    node _GEN_23 = mux(_T_2, _GEN_8, valid_queue_0_0) @[matu.scala 151:40 168:73]
    node _GEN_24 = mux(_T_2, _GEN_9, valid_queue_0_1) @[matu.scala 151:40 168:73]
    node _GEN_25 = mux(_T_2, _GEN_10, valid_queue_0_2) @[matu.scala 151:40 168:73]
    node _GEN_26 = mux(_T_2, _GEN_11, valid_queue_0_3) @[matu.scala 151:40 168:73]
    node _T_3 = eq(io_ldin_fuOptype_1, UInt<3>("h7")) @[matu.scala 168:31]
    node _T_4 = eq(io_ldin_valid_1, UInt<1>("h1")) @[matu.scala 168:61]
    node _T_5 = and(_T_3, _T_4) @[matu.scala 168:40]
    node _data_writePtr_1_T = add(data_writePtr_1, UInt<1>("h1")) @[matu.scala 169:44]
    node _data_writePtr_1_T_1 = tail(_data_writePtr_1_T, 1) @[matu.scala 169:44]
    node _data_queue_1_data_writePtr_1 = io_ldin_data_1 @[matu.scala 170:{38,38}]
    node _GEN_27 = mux(eq(UInt<1>("h0"), data_writePtr_1), _data_queue_1_data_writePtr_1, data_queue_1_0) @[matu.scala 145:27 170:{38,38}]
    node _GEN_28 = mux(eq(UInt<1>("h1"), data_writePtr_1), _data_queue_1_data_writePtr_1, data_queue_1_1) @[matu.scala 145:27 170:{38,38}]
    node _GEN_29 = mux(eq(UInt<2>("h2"), data_writePtr_1), _data_queue_1_data_writePtr_1, data_queue_1_2) @[matu.scala 145:27 170:{38,38}]
    node _GEN_30 = mux(eq(UInt<2>("h3"), data_writePtr_1), _data_queue_1_data_writePtr_1, data_queue_1_3) @[matu.scala 145:27 170:{38,38}]
    node _robIdx_writePtr_1_T = add(robIdx_writePtr_1, UInt<1>("h1")) @[matu.scala 172:48]
    node _robIdx_writePtr_1_T_1 = tail(_robIdx_writePtr_1_T, 1) @[matu.scala 172:48]
    node _robIdx_queue_1_robIdx_writePtr_1 = io_ldin_robIdx_1 @[matu.scala 173:{43,43}]
    node _GEN_31 = mux(eq(UInt<1>("h0"), robIdx_writePtr_1), _robIdx_queue_1_robIdx_writePtr_1, robIdx_queue_1_0) @[matu.scala 148:41 173:{43,43}]
    node _GEN_32 = mux(eq(UInt<1>("h1"), robIdx_writePtr_1), _robIdx_queue_1_robIdx_writePtr_1, robIdx_queue_1_1) @[matu.scala 148:41 173:{43,43}]
    node _GEN_33 = mux(eq(UInt<2>("h2"), robIdx_writePtr_1), _robIdx_queue_1_robIdx_writePtr_1, robIdx_queue_1_2) @[matu.scala 148:41 173:{43,43}]
    node _GEN_34 = mux(eq(UInt<2>("h3"), robIdx_writePtr_1), _robIdx_queue_1_robIdx_writePtr_1, robIdx_queue_1_3) @[matu.scala 148:41 173:{43,43}]
    node _valid_writePtr_1_T = add(valid_writePtr_1, UInt<1>("h1")) @[matu.scala 175:46]
    node _valid_writePtr_1_T_1 = tail(_valid_writePtr_1_T, 1) @[matu.scala 175:46]
    node _valid_queue_1_valid_writePtr_1 = io_ldin_valid_1 @[matu.scala 176:{41,41}]
    node _GEN_35 = mux(eq(UInt<1>("h0"), valid_writePtr_1), _valid_queue_1_valid_writePtr_1, valid_queue_1_0) @[matu.scala 151:40 176:{41,41}]
    node _GEN_36 = mux(eq(UInt<1>("h1"), valid_writePtr_1), _valid_queue_1_valid_writePtr_1, valid_queue_1_1) @[matu.scala 151:40 176:{41,41}]
    node _GEN_37 = mux(eq(UInt<2>("h2"), valid_writePtr_1), _valid_queue_1_valid_writePtr_1, valid_queue_1_2) @[matu.scala 151:40 176:{41,41}]
    node _GEN_38 = mux(eq(UInt<2>("h3"), valid_writePtr_1), _valid_queue_1_valid_writePtr_1, valid_queue_1_3) @[matu.scala 151:40 176:{41,41}]
    node _GEN_39 = mux(_T_5, _data_writePtr_1_T_1, data_writePtr_1) @[matu.scala 168:73 169:24 146:30]
    node _GEN_40 = mux(_T_5, _GEN_27, data_queue_1_0) @[matu.scala 145:27 168:73]
    node _GEN_41 = mux(_T_5, _GEN_28, data_queue_1_1) @[matu.scala 145:27 168:73]
    node _GEN_42 = mux(_T_5, _GEN_29, data_queue_1_2) @[matu.scala 145:27 168:73]
    node _GEN_43 = mux(_T_5, _GEN_30, data_queue_1_3) @[matu.scala 145:27 168:73]
    node _GEN_44 = mux(_T_5, _robIdx_writePtr_1_T_1, robIdx_writePtr_1) @[matu.scala 168:73 172:26 149:32]
    node _GEN_45 = mux(_T_5, _GEN_31, robIdx_queue_1_0) @[matu.scala 148:41 168:73]
    node _GEN_46 = mux(_T_5, _GEN_32, robIdx_queue_1_1) @[matu.scala 148:41 168:73]
    node _GEN_47 = mux(_T_5, _GEN_33, robIdx_queue_1_2) @[matu.scala 148:41 168:73]
    node _GEN_48 = mux(_T_5, _GEN_34, robIdx_queue_1_3) @[matu.scala 148:41 168:73]
    node _GEN_49 = mux(_T_5, _valid_writePtr_1_T_1, valid_writePtr_1) @[matu.scala 168:73 175:25 152:31]
    node _GEN_50 = mux(_T_5, _GEN_35, valid_queue_1_0) @[matu.scala 151:40 168:73]
    node _GEN_51 = mux(_T_5, _GEN_36, valid_queue_1_1) @[matu.scala 151:40 168:73]
    node _GEN_52 = mux(_T_5, _GEN_37, valid_queue_1_2) @[matu.scala 151:40 168:73]
    node _GEN_53 = mux(_T_5, _GEN_38, valid_queue_1_3) @[matu.scala 151:40 168:73]
    node _T_6 = eq(robIdx_queue_0_0, deqptrReg_0) @[matu.scala 183:56]
    node _T_7 = and(valid_queue_0_0, _T_6) @[matu.scala 183:33]
    node _MatchVec_WIRE__0 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_4_0_0 = _MatchVec_WIRE__0 @[matu.scala 156:{46,46}]
    node _GEN_54 = mux(_T_7, UInt<1>("h1"), _MatchVec_WIRE_4_0_0) @[matu.scala 183:75 184:29]
    node _T_8 = eq(robIdx_queue_0_0, deqptrReg_1) @[matu.scala 183:56]
    node _T_9 = and(valid_queue_0_0, _T_8) @[matu.scala 183:33]
    node _MatchVec_WIRE__1 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_4_0_1 = _MatchVec_WIRE__1 @[matu.scala 156:{46,46}]
    node _GEN_55 = mux(_T_9, UInt<1>("h1"), _MatchVec_WIRE_4_0_1) @[matu.scala 183:75 184:29]
    node _T_10 = eq(robIdx_queue_0_0, deqptrReg_2) @[matu.scala 183:56]
    node _T_11 = and(valid_queue_0_0, _T_10) @[matu.scala 183:33]
    node _MatchVec_WIRE__2 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_4_0_2 = _MatchVec_WIRE__2 @[matu.scala 156:{46,46}]
    node _GEN_56 = mux(_T_11, UInt<1>("h1"), _MatchVec_WIRE_4_0_2) @[matu.scala 183:75 184:29]
    node _T_12 = eq(robIdx_queue_0_0, deqptrReg_3) @[matu.scala 183:56]
    node _T_13 = and(valid_queue_0_0, _T_12) @[matu.scala 183:33]
    node _MatchVec_WIRE__3 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_4_0_3 = _MatchVec_WIRE__3 @[matu.scala 156:{46,46}]
    node _GEN_57 = mux(_T_13, UInt<1>("h1"), _MatchVec_WIRE_4_0_3) @[matu.scala 183:75 184:29]
    node _T_14 = eq(robIdx_queue_0_0, deqptrReg_4) @[matu.scala 183:56]
    node _T_15 = and(valid_queue_0_0, _T_14) @[matu.scala 183:33]
    node _MatchVec_WIRE__4 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_4_0_4 = _MatchVec_WIRE__4 @[matu.scala 156:{46,46}]
    node _GEN_58 = mux(_T_15, UInt<1>("h1"), _MatchVec_WIRE_4_0_4) @[matu.scala 183:75 184:29]
    node _T_16 = eq(robIdx_queue_0_0, deqptrReg_5) @[matu.scala 183:56]
    node _T_17 = and(valid_queue_0_0, _T_16) @[matu.scala 183:33]
    node _MatchVec_WIRE__5 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_4_0_5 = _MatchVec_WIRE__5 @[matu.scala 156:{46,46}]
    node _GEN_59 = mux(_T_17, UInt<1>("h1"), _MatchVec_WIRE_4_0_5) @[matu.scala 183:75 184:29]
    node _T_18 = eq(robIdx_queue_0_1, deqptrReg_0) @[matu.scala 183:56]
    node _T_19 = and(valid_queue_0_1, _T_18) @[matu.scala 183:33]
    node _MatchVec_WIRE_1_0 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_4_1_0 = _MatchVec_WIRE_1_0 @[matu.scala 156:{46,46}]
    node _GEN_60 = mux(_T_19, UInt<1>("h1"), _MatchVec_WIRE_4_1_0) @[matu.scala 183:75 184:29]
    node _T_20 = eq(robIdx_queue_0_1, deqptrReg_1) @[matu.scala 183:56]
    node _T_21 = and(valid_queue_0_1, _T_20) @[matu.scala 183:33]
    node _MatchVec_WIRE_1_1 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_4_1_1 = _MatchVec_WIRE_1_1 @[matu.scala 156:{46,46}]
    node _GEN_61 = mux(_T_21, UInt<1>("h1"), _MatchVec_WIRE_4_1_1) @[matu.scala 183:75 184:29]
    node _T_22 = eq(robIdx_queue_0_1, deqptrReg_2) @[matu.scala 183:56]
    node _T_23 = and(valid_queue_0_1, _T_22) @[matu.scala 183:33]
    node _MatchVec_WIRE_1_2 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_4_1_2 = _MatchVec_WIRE_1_2 @[matu.scala 156:{46,46}]
    node _GEN_62 = mux(_T_23, UInt<1>("h1"), _MatchVec_WIRE_4_1_2) @[matu.scala 183:75 184:29]
    node _T_24 = eq(robIdx_queue_0_1, deqptrReg_3) @[matu.scala 183:56]
    node _T_25 = and(valid_queue_0_1, _T_24) @[matu.scala 183:33]
    node _MatchVec_WIRE_1_3 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_4_1_3 = _MatchVec_WIRE_1_3 @[matu.scala 156:{46,46}]
    node _GEN_63 = mux(_T_25, UInt<1>("h1"), _MatchVec_WIRE_4_1_3) @[matu.scala 183:75 184:29]
    node _T_26 = eq(robIdx_queue_0_1, deqptrReg_4) @[matu.scala 183:56]
    node _T_27 = and(valid_queue_0_1, _T_26) @[matu.scala 183:33]
    node _MatchVec_WIRE_1_4 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_4_1_4 = _MatchVec_WIRE_1_4 @[matu.scala 156:{46,46}]
    node _GEN_64 = mux(_T_27, UInt<1>("h1"), _MatchVec_WIRE_4_1_4) @[matu.scala 183:75 184:29]
    node _T_28 = eq(robIdx_queue_0_1, deqptrReg_5) @[matu.scala 183:56]
    node _T_29 = and(valid_queue_0_1, _T_28) @[matu.scala 183:33]
    node _MatchVec_WIRE_1_5 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_4_1_5 = _MatchVec_WIRE_1_5 @[matu.scala 156:{46,46}]
    node _GEN_65 = mux(_T_29, UInt<1>("h1"), _MatchVec_WIRE_4_1_5) @[matu.scala 183:75 184:29]
    node _T_30 = eq(robIdx_queue_0_2, deqptrReg_0) @[matu.scala 183:56]
    node _T_31 = and(valid_queue_0_2, _T_30) @[matu.scala 183:33]
    node _MatchVec_WIRE_2_0 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_4_2_0 = _MatchVec_WIRE_2_0 @[matu.scala 156:{46,46}]
    node _GEN_66 = mux(_T_31, UInt<1>("h1"), _MatchVec_WIRE_4_2_0) @[matu.scala 183:75 184:29]
    node _T_32 = eq(robIdx_queue_0_2, deqptrReg_1) @[matu.scala 183:56]
    node _T_33 = and(valid_queue_0_2, _T_32) @[matu.scala 183:33]
    node _MatchVec_WIRE_2_1 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_4_2_1 = _MatchVec_WIRE_2_1 @[matu.scala 156:{46,46}]
    node _GEN_67 = mux(_T_33, UInt<1>("h1"), _MatchVec_WIRE_4_2_1) @[matu.scala 183:75 184:29]
    node _T_34 = eq(robIdx_queue_0_2, deqptrReg_2) @[matu.scala 183:56]
    node _T_35 = and(valid_queue_0_2, _T_34) @[matu.scala 183:33]
    node _MatchVec_WIRE_2_2 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_4_2_2 = _MatchVec_WIRE_2_2 @[matu.scala 156:{46,46}]
    node _GEN_68 = mux(_T_35, UInt<1>("h1"), _MatchVec_WIRE_4_2_2) @[matu.scala 183:75 184:29]
    node _T_36 = eq(robIdx_queue_0_2, deqptrReg_3) @[matu.scala 183:56]
    node _T_37 = and(valid_queue_0_2, _T_36) @[matu.scala 183:33]
    node _MatchVec_WIRE_2_3 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_4_2_3 = _MatchVec_WIRE_2_3 @[matu.scala 156:{46,46}]
    node _GEN_69 = mux(_T_37, UInt<1>("h1"), _MatchVec_WIRE_4_2_3) @[matu.scala 183:75 184:29]
    node _T_38 = eq(robIdx_queue_0_2, deqptrReg_4) @[matu.scala 183:56]
    node _T_39 = and(valid_queue_0_2, _T_38) @[matu.scala 183:33]
    node _MatchVec_WIRE_2_4 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_4_2_4 = _MatchVec_WIRE_2_4 @[matu.scala 156:{46,46}]
    node _GEN_70 = mux(_T_39, UInt<1>("h1"), _MatchVec_WIRE_4_2_4) @[matu.scala 183:75 184:29]
    node _T_40 = eq(robIdx_queue_0_2, deqptrReg_5) @[matu.scala 183:56]
    node _T_41 = and(valid_queue_0_2, _T_40) @[matu.scala 183:33]
    node _MatchVec_WIRE_2_5 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_4_2_5 = _MatchVec_WIRE_2_5 @[matu.scala 156:{46,46}]
    node _GEN_71 = mux(_T_41, UInt<1>("h1"), _MatchVec_WIRE_4_2_5) @[matu.scala 183:75 184:29]
    node _T_42 = eq(robIdx_queue_0_3, deqptrReg_0) @[matu.scala 183:56]
    node _T_43 = and(valid_queue_0_3, _T_42) @[matu.scala 183:33]
    node _MatchVec_WIRE_3_0 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_4_3_0 = _MatchVec_WIRE_3_0 @[matu.scala 156:{46,46}]
    node _GEN_72 = mux(_T_43, UInt<1>("h1"), _MatchVec_WIRE_4_3_0) @[matu.scala 183:75 184:29]
    node _T_44 = eq(robIdx_queue_0_3, deqptrReg_1) @[matu.scala 183:56]
    node _T_45 = and(valid_queue_0_3, _T_44) @[matu.scala 183:33]
    node _MatchVec_WIRE_3_1 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_4_3_1 = _MatchVec_WIRE_3_1 @[matu.scala 156:{46,46}]
    node _GEN_73 = mux(_T_45, UInt<1>("h1"), _MatchVec_WIRE_4_3_1) @[matu.scala 183:75 184:29]
    node _T_46 = eq(robIdx_queue_0_3, deqptrReg_2) @[matu.scala 183:56]
    node _T_47 = and(valid_queue_0_3, _T_46) @[matu.scala 183:33]
    node _MatchVec_WIRE_3_2 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_4_3_2 = _MatchVec_WIRE_3_2 @[matu.scala 156:{46,46}]
    node _GEN_74 = mux(_T_47, UInt<1>("h1"), _MatchVec_WIRE_4_3_2) @[matu.scala 183:75 184:29]
    node _T_48 = eq(robIdx_queue_0_3, deqptrReg_3) @[matu.scala 183:56]
    node _T_49 = and(valid_queue_0_3, _T_48) @[matu.scala 183:33]
    node _MatchVec_WIRE_3_3 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_4_3_3 = _MatchVec_WIRE_3_3 @[matu.scala 156:{46,46}]
    node _GEN_75 = mux(_T_49, UInt<1>("h1"), _MatchVec_WIRE_4_3_3) @[matu.scala 183:75 184:29]
    node _T_50 = eq(robIdx_queue_0_3, deqptrReg_4) @[matu.scala 183:56]
    node _T_51 = and(valid_queue_0_3, _T_50) @[matu.scala 183:33]
    node _MatchVec_WIRE_3_4 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_4_3_4 = _MatchVec_WIRE_3_4 @[matu.scala 156:{46,46}]
    node _GEN_76 = mux(_T_51, UInt<1>("h1"), _MatchVec_WIRE_4_3_4) @[matu.scala 183:75 184:29]
    node _T_52 = eq(robIdx_queue_0_3, deqptrReg_5) @[matu.scala 183:56]
    node _T_53 = and(valid_queue_0_3, _T_52) @[matu.scala 183:33]
    node _MatchVec_WIRE_3_5 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_4_3_5 = _MatchVec_WIRE_3_5 @[matu.scala 156:{46,46}]
    node _GEN_77 = mux(_T_53, UInt<1>("h1"), _MatchVec_WIRE_4_3_5) @[matu.scala 183:75 184:29]
    node _T_54 = eq(robIdx_queue_1_0, deqptrReg_0) @[matu.scala 183:56]
    node _T_55 = and(valid_queue_1_0, _T_54) @[matu.scala 183:33]
    node _MatchVec_WIRE_5_0 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_9_0_0 = _MatchVec_WIRE_5_0 @[matu.scala 156:{46,46}]
    node _GEN_78 = mux(_T_55, UInt<1>("h1"), _MatchVec_WIRE_9_0_0) @[matu.scala 183:75 184:29]
    node _T_56 = eq(robIdx_queue_1_0, deqptrReg_1) @[matu.scala 183:56]
    node _T_57 = and(valid_queue_1_0, _T_56) @[matu.scala 183:33]
    node _MatchVec_WIRE_5_1 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_9_0_1 = _MatchVec_WIRE_5_1 @[matu.scala 156:{46,46}]
    node _GEN_79 = mux(_T_57, UInt<1>("h1"), _MatchVec_WIRE_9_0_1) @[matu.scala 183:75 184:29]
    node _T_58 = eq(robIdx_queue_1_0, deqptrReg_2) @[matu.scala 183:56]
    node _T_59 = and(valid_queue_1_0, _T_58) @[matu.scala 183:33]
    node _MatchVec_WIRE_5_2 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_9_0_2 = _MatchVec_WIRE_5_2 @[matu.scala 156:{46,46}]
    node _GEN_80 = mux(_T_59, UInt<1>("h1"), _MatchVec_WIRE_9_0_2) @[matu.scala 183:75 184:29]
    node _T_60 = eq(robIdx_queue_1_0, deqptrReg_3) @[matu.scala 183:56]
    node _T_61 = and(valid_queue_1_0, _T_60) @[matu.scala 183:33]
    node _MatchVec_WIRE_5_3 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_9_0_3 = _MatchVec_WIRE_5_3 @[matu.scala 156:{46,46}]
    node _GEN_81 = mux(_T_61, UInt<1>("h1"), _MatchVec_WIRE_9_0_3) @[matu.scala 183:75 184:29]
    node _T_62 = eq(robIdx_queue_1_0, deqptrReg_4) @[matu.scala 183:56]
    node _T_63 = and(valid_queue_1_0, _T_62) @[matu.scala 183:33]
    node _MatchVec_WIRE_5_4 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_9_0_4 = _MatchVec_WIRE_5_4 @[matu.scala 156:{46,46}]
    node _GEN_82 = mux(_T_63, UInt<1>("h1"), _MatchVec_WIRE_9_0_4) @[matu.scala 183:75 184:29]
    node _T_64 = eq(robIdx_queue_1_0, deqptrReg_5) @[matu.scala 183:56]
    node _T_65 = and(valid_queue_1_0, _T_64) @[matu.scala 183:33]
    node _MatchVec_WIRE_5_5 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_9_0_5 = _MatchVec_WIRE_5_5 @[matu.scala 156:{46,46}]
    node _GEN_83 = mux(_T_65, UInt<1>("h1"), _MatchVec_WIRE_9_0_5) @[matu.scala 183:75 184:29]
    node _T_66 = eq(robIdx_queue_1_1, deqptrReg_0) @[matu.scala 183:56]
    node _T_67 = and(valid_queue_1_1, _T_66) @[matu.scala 183:33]
    node _MatchVec_WIRE_6_0 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_9_1_0 = _MatchVec_WIRE_6_0 @[matu.scala 156:{46,46}]
    node _GEN_84 = mux(_T_67, UInt<1>("h1"), _MatchVec_WIRE_9_1_0) @[matu.scala 183:75 184:29]
    node _T_68 = eq(robIdx_queue_1_1, deqptrReg_1) @[matu.scala 183:56]
    node _T_69 = and(valid_queue_1_1, _T_68) @[matu.scala 183:33]
    node _MatchVec_WIRE_6_1 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_9_1_1 = _MatchVec_WIRE_6_1 @[matu.scala 156:{46,46}]
    node _GEN_85 = mux(_T_69, UInt<1>("h1"), _MatchVec_WIRE_9_1_1) @[matu.scala 183:75 184:29]
    node _T_70 = eq(robIdx_queue_1_1, deqptrReg_2) @[matu.scala 183:56]
    node _T_71 = and(valid_queue_1_1, _T_70) @[matu.scala 183:33]
    node _MatchVec_WIRE_6_2 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_9_1_2 = _MatchVec_WIRE_6_2 @[matu.scala 156:{46,46}]
    node _GEN_86 = mux(_T_71, UInt<1>("h1"), _MatchVec_WIRE_9_1_2) @[matu.scala 183:75 184:29]
    node _T_72 = eq(robIdx_queue_1_1, deqptrReg_3) @[matu.scala 183:56]
    node _T_73 = and(valid_queue_1_1, _T_72) @[matu.scala 183:33]
    node _MatchVec_WIRE_6_3 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_9_1_3 = _MatchVec_WIRE_6_3 @[matu.scala 156:{46,46}]
    node _GEN_87 = mux(_T_73, UInt<1>("h1"), _MatchVec_WIRE_9_1_3) @[matu.scala 183:75 184:29]
    node _T_74 = eq(robIdx_queue_1_1, deqptrReg_4) @[matu.scala 183:56]
    node _T_75 = and(valid_queue_1_1, _T_74) @[matu.scala 183:33]
    node _MatchVec_WIRE_6_4 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_9_1_4 = _MatchVec_WIRE_6_4 @[matu.scala 156:{46,46}]
    node _GEN_88 = mux(_T_75, UInt<1>("h1"), _MatchVec_WIRE_9_1_4) @[matu.scala 183:75 184:29]
    node _T_76 = eq(robIdx_queue_1_1, deqptrReg_5) @[matu.scala 183:56]
    node _T_77 = and(valid_queue_1_1, _T_76) @[matu.scala 183:33]
    node _MatchVec_WIRE_6_5 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_9_1_5 = _MatchVec_WIRE_6_5 @[matu.scala 156:{46,46}]
    node _GEN_89 = mux(_T_77, UInt<1>("h1"), _MatchVec_WIRE_9_1_5) @[matu.scala 183:75 184:29]
    node _T_78 = eq(robIdx_queue_1_2, deqptrReg_0) @[matu.scala 183:56]
    node _T_79 = and(valid_queue_1_2, _T_78) @[matu.scala 183:33]
    node _MatchVec_WIRE_7_0 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_9_2_0 = _MatchVec_WIRE_7_0 @[matu.scala 156:{46,46}]
    node _GEN_90 = mux(_T_79, UInt<1>("h1"), _MatchVec_WIRE_9_2_0) @[matu.scala 183:75 184:29]
    node _T_80 = eq(robIdx_queue_1_2, deqptrReg_1) @[matu.scala 183:56]
    node _T_81 = and(valid_queue_1_2, _T_80) @[matu.scala 183:33]
    node _MatchVec_WIRE_7_1 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_9_2_1 = _MatchVec_WIRE_7_1 @[matu.scala 156:{46,46}]
    node _GEN_91 = mux(_T_81, UInt<1>("h1"), _MatchVec_WIRE_9_2_1) @[matu.scala 183:75 184:29]
    node _T_82 = eq(robIdx_queue_1_2, deqptrReg_2) @[matu.scala 183:56]
    node _T_83 = and(valid_queue_1_2, _T_82) @[matu.scala 183:33]
    node _MatchVec_WIRE_7_2 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_9_2_2 = _MatchVec_WIRE_7_2 @[matu.scala 156:{46,46}]
    node _GEN_92 = mux(_T_83, UInt<1>("h1"), _MatchVec_WIRE_9_2_2) @[matu.scala 183:75 184:29]
    node _T_84 = eq(robIdx_queue_1_2, deqptrReg_3) @[matu.scala 183:56]
    node _T_85 = and(valid_queue_1_2, _T_84) @[matu.scala 183:33]
    node _MatchVec_WIRE_7_3 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_9_2_3 = _MatchVec_WIRE_7_3 @[matu.scala 156:{46,46}]
    node _GEN_93 = mux(_T_85, UInt<1>("h1"), _MatchVec_WIRE_9_2_3) @[matu.scala 183:75 184:29]
    node _T_86 = eq(robIdx_queue_1_2, deqptrReg_4) @[matu.scala 183:56]
    node _T_87 = and(valid_queue_1_2, _T_86) @[matu.scala 183:33]
    node _MatchVec_WIRE_7_4 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_9_2_4 = _MatchVec_WIRE_7_4 @[matu.scala 156:{46,46}]
    node _GEN_94 = mux(_T_87, UInt<1>("h1"), _MatchVec_WIRE_9_2_4) @[matu.scala 183:75 184:29]
    node _T_88 = eq(robIdx_queue_1_2, deqptrReg_5) @[matu.scala 183:56]
    node _T_89 = and(valid_queue_1_2, _T_88) @[matu.scala 183:33]
    node _MatchVec_WIRE_7_5 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_9_2_5 = _MatchVec_WIRE_7_5 @[matu.scala 156:{46,46}]
    node _GEN_95 = mux(_T_89, UInt<1>("h1"), _MatchVec_WIRE_9_2_5) @[matu.scala 183:75 184:29]
    node _T_90 = eq(robIdx_queue_1_3, deqptrReg_0) @[matu.scala 183:56]
    node _T_91 = and(valid_queue_1_3, _T_90) @[matu.scala 183:33]
    node _MatchVec_WIRE_8_0 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_9_3_0 = _MatchVec_WIRE_8_0 @[matu.scala 156:{46,46}]
    node _GEN_96 = mux(_T_91, UInt<1>("h1"), _MatchVec_WIRE_9_3_0) @[matu.scala 183:75 184:29]
    node _T_92 = eq(robIdx_queue_1_3, deqptrReg_1) @[matu.scala 183:56]
    node _T_93 = and(valid_queue_1_3, _T_92) @[matu.scala 183:33]
    node _MatchVec_WIRE_8_1 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_9_3_1 = _MatchVec_WIRE_8_1 @[matu.scala 156:{46,46}]
    node _GEN_97 = mux(_T_93, UInt<1>("h1"), _MatchVec_WIRE_9_3_1) @[matu.scala 183:75 184:29]
    node _T_94 = eq(robIdx_queue_1_3, deqptrReg_2) @[matu.scala 183:56]
    node _T_95 = and(valid_queue_1_3, _T_94) @[matu.scala 183:33]
    node _MatchVec_WIRE_8_2 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_9_3_2 = _MatchVec_WIRE_8_2 @[matu.scala 156:{46,46}]
    node _GEN_98 = mux(_T_95, UInt<1>("h1"), _MatchVec_WIRE_9_3_2) @[matu.scala 183:75 184:29]
    node _T_96 = eq(robIdx_queue_1_3, deqptrReg_3) @[matu.scala 183:56]
    node _T_97 = and(valid_queue_1_3, _T_96) @[matu.scala 183:33]
    node _MatchVec_WIRE_8_3 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_9_3_3 = _MatchVec_WIRE_8_3 @[matu.scala 156:{46,46}]
    node _GEN_99 = mux(_T_97, UInt<1>("h1"), _MatchVec_WIRE_9_3_3) @[matu.scala 183:75 184:29]
    node _T_98 = eq(robIdx_queue_1_3, deqptrReg_4) @[matu.scala 183:56]
    node _T_99 = and(valid_queue_1_3, _T_98) @[matu.scala 183:33]
    node _MatchVec_WIRE_8_4 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_9_3_4 = _MatchVec_WIRE_8_4 @[matu.scala 156:{46,46}]
    node _GEN_100 = mux(_T_99, UInt<1>("h1"), _MatchVec_WIRE_9_3_4) @[matu.scala 183:75 184:29]
    node _T_100 = eq(robIdx_queue_1_3, deqptrReg_5) @[matu.scala 183:56]
    node _T_101 = and(valid_queue_1_3, _T_100) @[matu.scala 183:33]
    node _MatchVec_WIRE_8_5 = UInt<1>("h0") @[matu.scala 156:{66,66}]
    node _MatchVec_WIRE_9_3_5 = _MatchVec_WIRE_8_5 @[matu.scala 156:{46,46}]
    node _GEN_101 = mux(_T_101, UInt<1>("h1"), _MatchVec_WIRE_9_3_5) @[matu.scala 183:75 184:29]
    reg maxMatch : UInt<12>, clock with :
      reset => (UInt<1>("h0"), maxMatch) @[matu.scala 200:25]
    node _T_150 = eq(MatchVecUInt_0_0, UInt<1>("h0")) @[matu.scala 240:31]
    node _MatchVecMask_0_0_T = not(MatchVecUInt_0_0) @[matu.scala 241:31]
    node _GEN_118 = mux(_T_150, _MatchVecMask_0_0_T, MatchVecUInt_0_0) @[matu.scala 240:40 241:28 243:28]
    node MatchVecMask_0_0 = _GEN_118
    node _T_151 = eq(MatchVecUInt_0_1, UInt<1>("h0")) @[matu.scala 240:31]
    node _MatchVecMask_0_1_T = not(MatchVecUInt_0_1) @[matu.scala 241:31]
    node _GEN_119 = mux(_T_151, _MatchVecMask_0_1_T, MatchVecUInt_0_1) @[matu.scala 240:40 241:28 243:28]
    node MatchVecMask_0_1 = _GEN_119
    node _minMask_0_0_1_T = gt(MatchVecMask_0_0, MatchVecMask_0_1) @[matu.scala 208:43]
    node _minMask_0_0_1_T_1 = mux(_minMask_0_0_1_T, MatchVecMask_0_1, MatchVecMask_0_0) @[matu.scala 208:23]
    node _T_152 = eq(MatchVecUInt_0_2, UInt<1>("h0")) @[matu.scala 240:31]
    node _MatchVecMask_0_2_T = not(MatchVecUInt_0_2) @[matu.scala 241:31]
    node _GEN_120 = mux(_T_152, _MatchVecMask_0_2_T, MatchVecUInt_0_2) @[matu.scala 240:40 241:28 243:28]
    node MatchVecMask_0_2 = _GEN_120
    node _T_153 = eq(MatchVecUInt_0_3, UInt<1>("h0")) @[matu.scala 240:31]
    node _MatchVecMask_0_3_T = not(MatchVecUInt_0_3) @[matu.scala 241:31]
    node _GEN_121 = mux(_T_153, _MatchVecMask_0_3_T, MatchVecUInt_0_3) @[matu.scala 240:40 241:28 243:28]
    node MatchVecMask_0_3 = _GEN_121
    node _minMask_0_2_3_T = gt(MatchVecMask_0_2, MatchVecMask_0_3) @[matu.scala 209:43]
    node _minMask_0_2_3_T_1 = mux(_minMask_0_2_3_T, MatchVecMask_0_3, MatchVecMask_0_2) @[matu.scala 209:23]
    node minMask_0_0_1 = _minMask_0_0_1_T_1 @[matu.scala 193:27 208:17]
    node minMask_0_2_3 = _minMask_0_2_3_T_1 @[matu.scala 194:27 209:17]
    node _minMask_0_T = gt(minMask_0_0_1, minMask_0_2_3) @[matu.scala 210:34]
    node _minMask_0_T_1 = mux(_minMask_0_T, minMask_0_2_3, minMask_0_0_1) @[matu.scala 210:19]
    node _T_154 = eq(MatchVecUInt_1_0, UInt<1>("h0")) @[matu.scala 240:31]
    node _MatchVecMask_1_0_T = not(MatchVecUInt_1_0) @[matu.scala 241:31]
    node _GEN_122 = mux(_T_154, _MatchVecMask_1_0_T, MatchVecUInt_1_0) @[matu.scala 240:40 241:28 243:28]
    node MatchVecMask_1_0 = _GEN_122
    node _T_155 = eq(MatchVecUInt_1_1, UInt<1>("h0")) @[matu.scala 240:31]
    node _MatchVecMask_1_1_T = not(MatchVecUInt_1_1) @[matu.scala 241:31]
    node _GEN_123 = mux(_T_155, _MatchVecMask_1_1_T, MatchVecUInt_1_1) @[matu.scala 240:40 241:28 243:28]
    node MatchVecMask_1_1 = _GEN_123
    node _minMask_1_0_1_T = gt(MatchVecMask_1_0, MatchVecMask_1_1) @[matu.scala 212:43]
    node _minMask_1_0_1_T_1 = mux(_minMask_1_0_1_T, MatchVecMask_1_1, MatchVecMask_1_0) @[matu.scala 212:23]
    node _T_156 = eq(MatchVecUInt_1_2, UInt<1>("h0")) @[matu.scala 240:31]
    node _MatchVecMask_1_2_T = not(MatchVecUInt_1_2) @[matu.scala 241:31]
    node _GEN_124 = mux(_T_156, _MatchVecMask_1_2_T, MatchVecUInt_1_2) @[matu.scala 240:40 241:28 243:28]
    node MatchVecMask_1_2 = _GEN_124
    node _T_157 = eq(MatchVecUInt_1_3, UInt<1>("h0")) @[matu.scala 240:31]
    node _MatchVecMask_1_3_T = not(MatchVecUInt_1_3) @[matu.scala 241:31]
    node _GEN_125 = mux(_T_157, _MatchVecMask_1_3_T, MatchVecUInt_1_3) @[matu.scala 240:40 241:28 243:28]
    node MatchVecMask_1_3 = _GEN_125
    node _minMask_1_2_3_T = gt(MatchVecMask_1_2, MatchVecMask_1_3) @[matu.scala 213:43]
    node _minMask_1_2_3_T_1 = mux(_minMask_1_2_3_T, MatchVecMask_1_3, MatchVecMask_1_2) @[matu.scala 213:23]
    node minMask_1_0_1 = _minMask_1_0_1_T_1 @[matu.scala 195:27 212:17]
    node minMask_1_2_3 = _minMask_1_2_3_T_1 @[matu.scala 196:27 213:17]
    node _minMask_1_T = gt(minMask_1_0_1, minMask_1_2_3) @[matu.scala 214:34]
    node _minMask_1_T_1 = mux(_minMask_1_T, minMask_1_2_3, minMask_1_0_1) @[matu.scala 214:19]
    node minMask_0 = _minMask_0_T_1 @[matu.scala 191:23 210:13]
    node minMask_1 = _minMask_1_T_1 @[matu.scala 192:23 214:13]
    node _minMask_T = gt(minMask_0, minMask_1) @[matu.scala 216:28]
    node _minMask_T_1 = mux(_minMask_T, minMask_1, minMask_0) @[matu.scala 216:17]
    node _maxMatch_0_0_1_T = lt(MatchVecUInt_0_0, MatchVecUInt_0_1) @[matu.scala 218:44]
    node _maxMatch_0_0_1_T_1 = mux(_maxMatch_0_0_1_T, MatchVecUInt_0_1, MatchVecUInt_0_0) @[matu.scala 218:24]
    node _maxMatch_0_2_3_T = lt(MatchVecUInt_0_2, MatchVecUInt_0_3) @[matu.scala 219:44]
    node _maxMatch_0_2_3_T_1 = mux(_maxMatch_0_2_3_T, MatchVecUInt_0_3, MatchVecUInt_0_2) @[matu.scala 219:24]
    node maxMatch_0_0_1 = _maxMatch_0_0_1_T_1 @[matu.scala 203:28 218:18]
    node maxMatch_0_2_3 = _maxMatch_0_2_3_T_1 @[matu.scala 204:28 219:18]
    node _maxMatch_0_T = lt(maxMatch_0_0_1, maxMatch_0_2_3) @[matu.scala 220:36]
    node _maxMatch_0_T_1 = mux(_maxMatch_0_T, maxMatch_0_2_3, maxMatch_0_0_1) @[matu.scala 220:20]
    node _maxMatch_1_0_1_T = lt(MatchVecUInt_1_0, MatchVecUInt_1_1) @[matu.scala 222:44]
    node _maxMatch_1_0_1_T_1 = mux(_maxMatch_1_0_1_T, MatchVecUInt_1_1, MatchVecUInt_1_0) @[matu.scala 222:24]
    node _maxMatch_1_2_3_T = lt(MatchVecUInt_1_2, MatchVecUInt_1_3) @[matu.scala 223:44]
    node _maxMatch_1_2_3_T_1 = mux(_maxMatch_1_2_3_T, MatchVecUInt_1_3, MatchVecUInt_1_2) @[matu.scala 223:24]
    node maxMatch_1_0_1 = _maxMatch_1_0_1_T_1 @[matu.scala 205:28 222:18]
    node maxMatch_1_2_3 = _maxMatch_1_2_3_T_1 @[matu.scala 206:28 223:18]
    node _maxMatch_1_T = lt(maxMatch_1_0_1, maxMatch_1_2_3) @[matu.scala 224:36]
    node _maxMatch_1_T_1 = mux(_maxMatch_1_T, maxMatch_1_2_3, maxMatch_1_0_1) @[matu.scala 224:20]
    node maxMatch_0 = _maxMatch_0_T_1 @[matu.scala 201:24 220:14]
    node maxMatch_1 = _maxMatch_1_T_1 @[matu.scala 202:24 224:14]
    node _maxMatch_T = lt(maxMatch_0, maxMatch_1) @[matu.scala 226:30]
    node _maxMatch_T_1 = mux(_maxMatch_T, maxMatch_1, maxMatch_0) @[matu.scala 226:18]
    node MatchVec_0_0_2 = _GEN_56
    node MatchVec_0_0_1 = _GEN_55
    node lo_hi = cat(MatchVec_0_0_2, MatchVec_0_0_1) @[matu.scala 230:27]
    node MatchVec_0_0_0 = _GEN_54
    node lo = cat(lo_hi, MatchVec_0_0_0) @[matu.scala 230:27]
    node MatchVec_0_0_5 = _GEN_59
    node MatchVec_0_0_4 = _GEN_58
    node hi_hi = cat(MatchVec_0_0_5, MatchVec_0_0_4) @[matu.scala 230:27]
    node MatchVec_0_0_3 = _GEN_57
    node hi = cat(hi_hi, MatchVec_0_0_3) @[matu.scala 230:27]
    node _T_102 = cat(hi, lo) @[matu.scala 230:27]
    node _T_103 = gt(_T_102, UInt<1>("h0")) @[matu.scala 230:34]
    node _T_104 = eq(MatchVec_lastCycle_0_0, UInt<1>("h0")) @[matu.scala 230:68]
    node _T_105 = and(_T_103, _T_104) @[matu.scala 230:40]
    node MatchVecUInt_0_0_lo_hi = cat(MatchVec_0_0_2, MatchVec_0_0_1) @[matu.scala 231:46]
    node MatchVecUInt_0_0_lo = cat(MatchVecUInt_0_0_lo_hi, MatchVec_0_0_0) @[matu.scala 231:46]
    node MatchVecUInt_0_0_hi_hi = cat(MatchVec_0_0_5, MatchVec_0_0_4) @[matu.scala 231:46]
    node MatchVecUInt_0_0_hi = cat(MatchVecUInt_0_0_hi_hi, MatchVec_0_0_3) @[matu.scala 231:46]
    node _MatchVecUInt_0_0_T = cat(MatchVecUInt_0_0_hi, MatchVecUInt_0_0_lo) @[matu.scala 231:46]
    node _MatchVecUInt_0_0_T_1 = add(_MatchVecUInt_0_0_T, maxMatch) @[matu.scala 231:53]
    node _MatchVecUInt_0_0_T_2 = tail(_MatchVecUInt_0_0_T_1, 1) @[matu.scala 231:53]
    node lo_hi_1 = cat(MatchVec_0_0_2, MatchVec_0_0_1) @[matu.scala 232:33]
    node lo_1 = cat(lo_hi_1, MatchVec_0_0_0) @[matu.scala 232:33]
    node hi_hi_1 = cat(MatchVec_0_0_5, MatchVec_0_0_4) @[matu.scala 232:33]
    node hi_1 = cat(hi_hi_1, MatchVec_0_0_3) @[matu.scala 232:33]
    node _T_106 = cat(hi_1, lo_1) @[matu.scala 232:33]
    node _T_107 = gt(_T_106, UInt<1>("h0")) @[matu.scala 232:40]
    node MatchVecUInt_0_0_lo_hi_1 = cat(MatchVec_0_0_2, MatchVec_0_0_1) @[matu.scala 233:46]
    node MatchVecUInt_0_0_lo_1 = cat(MatchVecUInt_0_0_lo_hi_1, MatchVec_0_0_0) @[matu.scala 233:46]
    node MatchVecUInt_0_0_hi_hi_1 = cat(MatchVec_0_0_5, MatchVec_0_0_4) @[matu.scala 233:46]
    node MatchVecUInt_0_0_hi_1 = cat(MatchVecUInt_0_0_hi_hi_1, MatchVec_0_0_3) @[matu.scala 233:46]
    node _MatchVecUInt_0_0_T_3 = cat(MatchVecUInt_0_0_hi_1, MatchVecUInt_0_0_lo_1) @[matu.scala 233:46]
    node _GEN_102 = mux(_T_107, _MatchVecUInt_0_0_T_3, MatchVecUInt_0_0) @[matu.scala 232:47 233:28 158:29]
    node _GEN_103 = mux(_T_105, _MatchVecUInt_0_0_T_2, _GEN_102) @[matu.scala 230:77 231:28]
    node MatchVec_0_1_2 = _GEN_62
    node MatchVec_0_1_1 = _GEN_61
    node lo_hi_2 = cat(MatchVec_0_1_2, MatchVec_0_1_1) @[matu.scala 230:27]
    node MatchVec_0_1_0 = _GEN_60
    node lo_2 = cat(lo_hi_2, MatchVec_0_1_0) @[matu.scala 230:27]
    node MatchVec_0_1_5 = _GEN_65
    node MatchVec_0_1_4 = _GEN_64
    node hi_hi_2 = cat(MatchVec_0_1_5, MatchVec_0_1_4) @[matu.scala 230:27]
    node MatchVec_0_1_3 = _GEN_63
    node hi_2 = cat(hi_hi_2, MatchVec_0_1_3) @[matu.scala 230:27]
    node _T_108 = cat(hi_2, lo_2) @[matu.scala 230:27]
    node _T_109 = gt(_T_108, UInt<1>("h0")) @[matu.scala 230:34]
    node _T_110 = eq(MatchVec_lastCycle_0_1, UInt<1>("h0")) @[matu.scala 230:68]
    node _T_111 = and(_T_109, _T_110) @[matu.scala 230:40]
    node MatchVecUInt_0_1_lo_hi = cat(MatchVec_0_1_2, MatchVec_0_1_1) @[matu.scala 231:46]
    node MatchVecUInt_0_1_lo = cat(MatchVecUInt_0_1_lo_hi, MatchVec_0_1_0) @[matu.scala 231:46]
    node MatchVecUInt_0_1_hi_hi = cat(MatchVec_0_1_5, MatchVec_0_1_4) @[matu.scala 231:46]
    node MatchVecUInt_0_1_hi = cat(MatchVecUInt_0_1_hi_hi, MatchVec_0_1_3) @[matu.scala 231:46]
    node _MatchVecUInt_0_1_T = cat(MatchVecUInt_0_1_hi, MatchVecUInt_0_1_lo) @[matu.scala 231:46]
    node _MatchVecUInt_0_1_T_1 = add(_MatchVecUInt_0_1_T, maxMatch) @[matu.scala 231:53]
    node _MatchVecUInt_0_1_T_2 = tail(_MatchVecUInt_0_1_T_1, 1) @[matu.scala 231:53]
    node lo_hi_3 = cat(MatchVec_0_1_2, MatchVec_0_1_1) @[matu.scala 232:33]
    node lo_3 = cat(lo_hi_3, MatchVec_0_1_0) @[matu.scala 232:33]
    node hi_hi_3 = cat(MatchVec_0_1_5, MatchVec_0_1_4) @[matu.scala 232:33]
    node hi_3 = cat(hi_hi_3, MatchVec_0_1_3) @[matu.scala 232:33]
    node _T_112 = cat(hi_3, lo_3) @[matu.scala 232:33]
    node _T_113 = gt(_T_112, UInt<1>("h0")) @[matu.scala 232:40]
    node MatchVecUInt_0_1_lo_hi_1 = cat(MatchVec_0_1_2, MatchVec_0_1_1) @[matu.scala 233:46]
    node MatchVecUInt_0_1_lo_1 = cat(MatchVecUInt_0_1_lo_hi_1, MatchVec_0_1_0) @[matu.scala 233:46]
    node MatchVecUInt_0_1_hi_hi_1 = cat(MatchVec_0_1_5, MatchVec_0_1_4) @[matu.scala 233:46]
    node MatchVecUInt_0_1_hi_1 = cat(MatchVecUInt_0_1_hi_hi_1, MatchVec_0_1_3) @[matu.scala 233:46]
    node _MatchVecUInt_0_1_T_3 = cat(MatchVecUInt_0_1_hi_1, MatchVecUInt_0_1_lo_1) @[matu.scala 233:46]
    node _GEN_104 = mux(_T_113, _MatchVecUInt_0_1_T_3, MatchVecUInt_0_1) @[matu.scala 232:47 233:28 158:29]
    node _GEN_105 = mux(_T_111, _MatchVecUInt_0_1_T_2, _GEN_104) @[matu.scala 230:77 231:28]
    node MatchVec_0_2_2 = _GEN_68
    node MatchVec_0_2_1 = _GEN_67
    node lo_hi_4 = cat(MatchVec_0_2_2, MatchVec_0_2_1) @[matu.scala 230:27]
    node MatchVec_0_2_0 = _GEN_66
    node lo_4 = cat(lo_hi_4, MatchVec_0_2_0) @[matu.scala 230:27]
    node MatchVec_0_2_5 = _GEN_71
    node MatchVec_0_2_4 = _GEN_70
    node hi_hi_4 = cat(MatchVec_0_2_5, MatchVec_0_2_4) @[matu.scala 230:27]
    node MatchVec_0_2_3 = _GEN_69
    node hi_4 = cat(hi_hi_4, MatchVec_0_2_3) @[matu.scala 230:27]
    node _T_114 = cat(hi_4, lo_4) @[matu.scala 230:27]
    node _T_115 = gt(_T_114, UInt<1>("h0")) @[matu.scala 230:34]
    node _T_116 = eq(MatchVec_lastCycle_0_2, UInt<1>("h0")) @[matu.scala 230:68]
    node _T_117 = and(_T_115, _T_116) @[matu.scala 230:40]
    node MatchVecUInt_0_2_lo_hi = cat(MatchVec_0_2_2, MatchVec_0_2_1) @[matu.scala 231:46]
    node MatchVecUInt_0_2_lo = cat(MatchVecUInt_0_2_lo_hi, MatchVec_0_2_0) @[matu.scala 231:46]
    node MatchVecUInt_0_2_hi_hi = cat(MatchVec_0_2_5, MatchVec_0_2_4) @[matu.scala 231:46]
    node MatchVecUInt_0_2_hi = cat(MatchVecUInt_0_2_hi_hi, MatchVec_0_2_3) @[matu.scala 231:46]
    node _MatchVecUInt_0_2_T = cat(MatchVecUInt_0_2_hi, MatchVecUInt_0_2_lo) @[matu.scala 231:46]
    node _MatchVecUInt_0_2_T_1 = add(_MatchVecUInt_0_2_T, maxMatch) @[matu.scala 231:53]
    node _MatchVecUInt_0_2_T_2 = tail(_MatchVecUInt_0_2_T_1, 1) @[matu.scala 231:53]
    node lo_hi_5 = cat(MatchVec_0_2_2, MatchVec_0_2_1) @[matu.scala 232:33]
    node lo_5 = cat(lo_hi_5, MatchVec_0_2_0) @[matu.scala 232:33]
    node hi_hi_5 = cat(MatchVec_0_2_5, MatchVec_0_2_4) @[matu.scala 232:33]
    node hi_5 = cat(hi_hi_5, MatchVec_0_2_3) @[matu.scala 232:33]
    node _T_118 = cat(hi_5, lo_5) @[matu.scala 232:33]
    node _T_119 = gt(_T_118, UInt<1>("h0")) @[matu.scala 232:40]
    node MatchVecUInt_0_2_lo_hi_1 = cat(MatchVec_0_2_2, MatchVec_0_2_1) @[matu.scala 233:46]
    node MatchVecUInt_0_2_lo_1 = cat(MatchVecUInt_0_2_lo_hi_1, MatchVec_0_2_0) @[matu.scala 233:46]
    node MatchVecUInt_0_2_hi_hi_1 = cat(MatchVec_0_2_5, MatchVec_0_2_4) @[matu.scala 233:46]
    node MatchVecUInt_0_2_hi_1 = cat(MatchVecUInt_0_2_hi_hi_1, MatchVec_0_2_3) @[matu.scala 233:46]
    node _MatchVecUInt_0_2_T_3 = cat(MatchVecUInt_0_2_hi_1, MatchVecUInt_0_2_lo_1) @[matu.scala 233:46]
    node _GEN_106 = mux(_T_119, _MatchVecUInt_0_2_T_3, MatchVecUInt_0_2) @[matu.scala 232:47 233:28 158:29]
    node _GEN_107 = mux(_T_117, _MatchVecUInt_0_2_T_2, _GEN_106) @[matu.scala 230:77 231:28]
    node MatchVec_0_3_2 = _GEN_74
    node MatchVec_0_3_1 = _GEN_73
    node lo_hi_6 = cat(MatchVec_0_3_2, MatchVec_0_3_1) @[matu.scala 230:27]
    node MatchVec_0_3_0 = _GEN_72
    node lo_6 = cat(lo_hi_6, MatchVec_0_3_0) @[matu.scala 230:27]
    node MatchVec_0_3_5 = _GEN_77
    node MatchVec_0_3_4 = _GEN_76
    node hi_hi_6 = cat(MatchVec_0_3_5, MatchVec_0_3_4) @[matu.scala 230:27]
    node MatchVec_0_3_3 = _GEN_75
    node hi_6 = cat(hi_hi_6, MatchVec_0_3_3) @[matu.scala 230:27]
    node _T_120 = cat(hi_6, lo_6) @[matu.scala 230:27]
    node _T_121 = gt(_T_120, UInt<1>("h0")) @[matu.scala 230:34]
    node _T_122 = eq(MatchVec_lastCycle_0_3, UInt<1>("h0")) @[matu.scala 230:68]
    node _T_123 = and(_T_121, _T_122) @[matu.scala 230:40]
    node MatchVecUInt_0_3_lo_hi = cat(MatchVec_0_3_2, MatchVec_0_3_1) @[matu.scala 231:46]
    node MatchVecUInt_0_3_lo = cat(MatchVecUInt_0_3_lo_hi, MatchVec_0_3_0) @[matu.scala 231:46]
    node MatchVecUInt_0_3_hi_hi = cat(MatchVec_0_3_5, MatchVec_0_3_4) @[matu.scala 231:46]
    node MatchVecUInt_0_3_hi = cat(MatchVecUInt_0_3_hi_hi, MatchVec_0_3_3) @[matu.scala 231:46]
    node _MatchVecUInt_0_3_T = cat(MatchVecUInt_0_3_hi, MatchVecUInt_0_3_lo) @[matu.scala 231:46]
    node _MatchVecUInt_0_3_T_1 = add(_MatchVecUInt_0_3_T, maxMatch) @[matu.scala 231:53]
    node _MatchVecUInt_0_3_T_2 = tail(_MatchVecUInt_0_3_T_1, 1) @[matu.scala 231:53]
    node lo_hi_7 = cat(MatchVec_0_3_2, MatchVec_0_3_1) @[matu.scala 232:33]
    node lo_7 = cat(lo_hi_7, MatchVec_0_3_0) @[matu.scala 232:33]
    node hi_hi_7 = cat(MatchVec_0_3_5, MatchVec_0_3_4) @[matu.scala 232:33]
    node hi_7 = cat(hi_hi_7, MatchVec_0_3_3) @[matu.scala 232:33]
    node _T_124 = cat(hi_7, lo_7) @[matu.scala 232:33]
    node _T_125 = gt(_T_124, UInt<1>("h0")) @[matu.scala 232:40]
    node MatchVecUInt_0_3_lo_hi_1 = cat(MatchVec_0_3_2, MatchVec_0_3_1) @[matu.scala 233:46]
    node MatchVecUInt_0_3_lo_1 = cat(MatchVecUInt_0_3_lo_hi_1, MatchVec_0_3_0) @[matu.scala 233:46]
    node MatchVecUInt_0_3_hi_hi_1 = cat(MatchVec_0_3_5, MatchVec_0_3_4) @[matu.scala 233:46]
    node MatchVecUInt_0_3_hi_1 = cat(MatchVecUInt_0_3_hi_hi_1, MatchVec_0_3_3) @[matu.scala 233:46]
    node _MatchVecUInt_0_3_T_3 = cat(MatchVecUInt_0_3_hi_1, MatchVecUInt_0_3_lo_1) @[matu.scala 233:46]
    node _GEN_108 = mux(_T_125, _MatchVecUInt_0_3_T_3, MatchVecUInt_0_3) @[matu.scala 232:47 233:28 158:29]
    node _GEN_109 = mux(_T_123, _MatchVecUInt_0_3_T_2, _GEN_108) @[matu.scala 230:77 231:28]
    node MatchVec_1_0_2 = _GEN_80
    node MatchVec_1_0_1 = _GEN_79
    node lo_hi_8 = cat(MatchVec_1_0_2, MatchVec_1_0_1) @[matu.scala 230:27]
    node MatchVec_1_0_0 = _GEN_78
    node lo_8 = cat(lo_hi_8, MatchVec_1_0_0) @[matu.scala 230:27]
    node MatchVec_1_0_5 = _GEN_83
    node MatchVec_1_0_4 = _GEN_82
    node hi_hi_8 = cat(MatchVec_1_0_5, MatchVec_1_0_4) @[matu.scala 230:27]
    node MatchVec_1_0_3 = _GEN_81
    node hi_8 = cat(hi_hi_8, MatchVec_1_0_3) @[matu.scala 230:27]
    node _T_126 = cat(hi_8, lo_8) @[matu.scala 230:27]
    node _T_127 = gt(_T_126, UInt<1>("h0")) @[matu.scala 230:34]
    node _T_128 = eq(MatchVec_lastCycle_1_0, UInt<1>("h0")) @[matu.scala 230:68]
    node _T_129 = and(_T_127, _T_128) @[matu.scala 230:40]
    node MatchVecUInt_1_0_lo_hi = cat(MatchVec_1_0_2, MatchVec_1_0_1) @[matu.scala 231:46]
    node MatchVecUInt_1_0_lo = cat(MatchVecUInt_1_0_lo_hi, MatchVec_1_0_0) @[matu.scala 231:46]
    node MatchVecUInt_1_0_hi_hi = cat(MatchVec_1_0_5, MatchVec_1_0_4) @[matu.scala 231:46]
    node MatchVecUInt_1_0_hi = cat(MatchVecUInt_1_0_hi_hi, MatchVec_1_0_3) @[matu.scala 231:46]
    node _MatchVecUInt_1_0_T = cat(MatchVecUInt_1_0_hi, MatchVecUInt_1_0_lo) @[matu.scala 231:46]
    node _MatchVecUInt_1_0_T_1 = add(_MatchVecUInt_1_0_T, maxMatch) @[matu.scala 231:53]
    node _MatchVecUInt_1_0_T_2 = tail(_MatchVecUInt_1_0_T_1, 1) @[matu.scala 231:53]
    node lo_hi_9 = cat(MatchVec_1_0_2, MatchVec_1_0_1) @[matu.scala 232:33]
    node lo_9 = cat(lo_hi_9, MatchVec_1_0_0) @[matu.scala 232:33]
    node hi_hi_9 = cat(MatchVec_1_0_5, MatchVec_1_0_4) @[matu.scala 232:33]
    node hi_9 = cat(hi_hi_9, MatchVec_1_0_3) @[matu.scala 232:33]
    node _T_130 = cat(hi_9, lo_9) @[matu.scala 232:33]
    node _T_131 = gt(_T_130, UInt<1>("h0")) @[matu.scala 232:40]
    node MatchVecUInt_1_0_lo_hi_1 = cat(MatchVec_1_0_2, MatchVec_1_0_1) @[matu.scala 233:46]
    node MatchVecUInt_1_0_lo_1 = cat(MatchVecUInt_1_0_lo_hi_1, MatchVec_1_0_0) @[matu.scala 233:46]
    node MatchVecUInt_1_0_hi_hi_1 = cat(MatchVec_1_0_5, MatchVec_1_0_4) @[matu.scala 233:46]
    node MatchVecUInt_1_0_hi_1 = cat(MatchVecUInt_1_0_hi_hi_1, MatchVec_1_0_3) @[matu.scala 233:46]
    node _MatchVecUInt_1_0_T_3 = cat(MatchVecUInt_1_0_hi_1, MatchVecUInt_1_0_lo_1) @[matu.scala 233:46]
    node _GEN_110 = mux(_T_131, _MatchVecUInt_1_0_T_3, MatchVecUInt_1_0) @[matu.scala 232:47 233:28 158:29]
    node _GEN_111 = mux(_T_129, _MatchVecUInt_1_0_T_2, _GEN_110) @[matu.scala 230:77 231:28]
    node MatchVec_1_1_2 = _GEN_86
    node MatchVec_1_1_1 = _GEN_85
    node lo_hi_10 = cat(MatchVec_1_1_2, MatchVec_1_1_1) @[matu.scala 230:27]
    node MatchVec_1_1_0 = _GEN_84
    node lo_10 = cat(lo_hi_10, MatchVec_1_1_0) @[matu.scala 230:27]
    node MatchVec_1_1_5 = _GEN_89
    node MatchVec_1_1_4 = _GEN_88
    node hi_hi_10 = cat(MatchVec_1_1_5, MatchVec_1_1_4) @[matu.scala 230:27]
    node MatchVec_1_1_3 = _GEN_87
    node hi_10 = cat(hi_hi_10, MatchVec_1_1_3) @[matu.scala 230:27]
    node _T_132 = cat(hi_10, lo_10) @[matu.scala 230:27]
    node _T_133 = gt(_T_132, UInt<1>("h0")) @[matu.scala 230:34]
    node _T_134 = eq(MatchVec_lastCycle_1_1, UInt<1>("h0")) @[matu.scala 230:68]
    node _T_135 = and(_T_133, _T_134) @[matu.scala 230:40]
    node MatchVecUInt_1_1_lo_hi = cat(MatchVec_1_1_2, MatchVec_1_1_1) @[matu.scala 231:46]
    node MatchVecUInt_1_1_lo = cat(MatchVecUInt_1_1_lo_hi, MatchVec_1_1_0) @[matu.scala 231:46]
    node MatchVecUInt_1_1_hi_hi = cat(MatchVec_1_1_5, MatchVec_1_1_4) @[matu.scala 231:46]
    node MatchVecUInt_1_1_hi = cat(MatchVecUInt_1_1_hi_hi, MatchVec_1_1_3) @[matu.scala 231:46]
    node _MatchVecUInt_1_1_T = cat(MatchVecUInt_1_1_hi, MatchVecUInt_1_1_lo) @[matu.scala 231:46]
    node _MatchVecUInt_1_1_T_1 = add(_MatchVecUInt_1_1_T, maxMatch) @[matu.scala 231:53]
    node _MatchVecUInt_1_1_T_2 = tail(_MatchVecUInt_1_1_T_1, 1) @[matu.scala 231:53]
    node lo_hi_11 = cat(MatchVec_1_1_2, MatchVec_1_1_1) @[matu.scala 232:33]
    node lo_11 = cat(lo_hi_11, MatchVec_1_1_0) @[matu.scala 232:33]
    node hi_hi_11 = cat(MatchVec_1_1_5, MatchVec_1_1_4) @[matu.scala 232:33]
    node hi_11 = cat(hi_hi_11, MatchVec_1_1_3) @[matu.scala 232:33]
    node _T_136 = cat(hi_11, lo_11) @[matu.scala 232:33]
    node _T_137 = gt(_T_136, UInt<1>("h0")) @[matu.scala 232:40]
    node MatchVecUInt_1_1_lo_hi_1 = cat(MatchVec_1_1_2, MatchVec_1_1_1) @[matu.scala 233:46]
    node MatchVecUInt_1_1_lo_1 = cat(MatchVecUInt_1_1_lo_hi_1, MatchVec_1_1_0) @[matu.scala 233:46]
    node MatchVecUInt_1_1_hi_hi_1 = cat(MatchVec_1_1_5, MatchVec_1_1_4) @[matu.scala 233:46]
    node MatchVecUInt_1_1_hi_1 = cat(MatchVecUInt_1_1_hi_hi_1, MatchVec_1_1_3) @[matu.scala 233:46]
    node _MatchVecUInt_1_1_T_3 = cat(MatchVecUInt_1_1_hi_1, MatchVecUInt_1_1_lo_1) @[matu.scala 233:46]
    node _GEN_112 = mux(_T_137, _MatchVecUInt_1_1_T_3, MatchVecUInt_1_1) @[matu.scala 232:47 233:28 158:29]
    node _GEN_113 = mux(_T_135, _MatchVecUInt_1_1_T_2, _GEN_112) @[matu.scala 230:77 231:28]
    node MatchVec_1_2_2 = _GEN_92
    node MatchVec_1_2_1 = _GEN_91
    node lo_hi_12 = cat(MatchVec_1_2_2, MatchVec_1_2_1) @[matu.scala 230:27]
    node MatchVec_1_2_0 = _GEN_90
    node lo_12 = cat(lo_hi_12, MatchVec_1_2_0) @[matu.scala 230:27]
    node MatchVec_1_2_5 = _GEN_95
    node MatchVec_1_2_4 = _GEN_94
    node hi_hi_12 = cat(MatchVec_1_2_5, MatchVec_1_2_4) @[matu.scala 230:27]
    node MatchVec_1_2_3 = _GEN_93
    node hi_12 = cat(hi_hi_12, MatchVec_1_2_3) @[matu.scala 230:27]
    node _T_138 = cat(hi_12, lo_12) @[matu.scala 230:27]
    node _T_139 = gt(_T_138, UInt<1>("h0")) @[matu.scala 230:34]
    node _T_140 = eq(MatchVec_lastCycle_1_2, UInt<1>("h0")) @[matu.scala 230:68]
    node _T_141 = and(_T_139, _T_140) @[matu.scala 230:40]
    node MatchVecUInt_1_2_lo_hi = cat(MatchVec_1_2_2, MatchVec_1_2_1) @[matu.scala 231:46]
    node MatchVecUInt_1_2_lo = cat(MatchVecUInt_1_2_lo_hi, MatchVec_1_2_0) @[matu.scala 231:46]
    node MatchVecUInt_1_2_hi_hi = cat(MatchVec_1_2_5, MatchVec_1_2_4) @[matu.scala 231:46]
    node MatchVecUInt_1_2_hi = cat(MatchVecUInt_1_2_hi_hi, MatchVec_1_2_3) @[matu.scala 231:46]
    node _MatchVecUInt_1_2_T = cat(MatchVecUInt_1_2_hi, MatchVecUInt_1_2_lo) @[matu.scala 231:46]
    node _MatchVecUInt_1_2_T_1 = add(_MatchVecUInt_1_2_T, maxMatch) @[matu.scala 231:53]
    node _MatchVecUInt_1_2_T_2 = tail(_MatchVecUInt_1_2_T_1, 1) @[matu.scala 231:53]
    node lo_hi_13 = cat(MatchVec_1_2_2, MatchVec_1_2_1) @[matu.scala 232:33]
    node lo_13 = cat(lo_hi_13, MatchVec_1_2_0) @[matu.scala 232:33]
    node hi_hi_13 = cat(MatchVec_1_2_5, MatchVec_1_2_4) @[matu.scala 232:33]
    node hi_13 = cat(hi_hi_13, MatchVec_1_2_3) @[matu.scala 232:33]
    node _T_142 = cat(hi_13, lo_13) @[matu.scala 232:33]
    node _T_143 = gt(_T_142, UInt<1>("h0")) @[matu.scala 232:40]
    node MatchVecUInt_1_2_lo_hi_1 = cat(MatchVec_1_2_2, MatchVec_1_2_1) @[matu.scala 233:46]
    node MatchVecUInt_1_2_lo_1 = cat(MatchVecUInt_1_2_lo_hi_1, MatchVec_1_2_0) @[matu.scala 233:46]
    node MatchVecUInt_1_2_hi_hi_1 = cat(MatchVec_1_2_5, MatchVec_1_2_4) @[matu.scala 233:46]
    node MatchVecUInt_1_2_hi_1 = cat(MatchVecUInt_1_2_hi_hi_1, MatchVec_1_2_3) @[matu.scala 233:46]
    node _MatchVecUInt_1_2_T_3 = cat(MatchVecUInt_1_2_hi_1, MatchVecUInt_1_2_lo_1) @[matu.scala 233:46]
    node _GEN_114 = mux(_T_143, _MatchVecUInt_1_2_T_3, MatchVecUInt_1_2) @[matu.scala 232:47 233:28 158:29]
    node _GEN_115 = mux(_T_141, _MatchVecUInt_1_2_T_2, _GEN_114) @[matu.scala 230:77 231:28]
    node MatchVec_1_3_2 = _GEN_98
    node MatchVec_1_3_1 = _GEN_97
    node lo_hi_14 = cat(MatchVec_1_3_2, MatchVec_1_3_1) @[matu.scala 230:27]
    node MatchVec_1_3_0 = _GEN_96
    node lo_14 = cat(lo_hi_14, MatchVec_1_3_0) @[matu.scala 230:27]
    node MatchVec_1_3_5 = _GEN_101
    node MatchVec_1_3_4 = _GEN_100
    node hi_hi_14 = cat(MatchVec_1_3_5, MatchVec_1_3_4) @[matu.scala 230:27]
    node MatchVec_1_3_3 = _GEN_99
    node hi_14 = cat(hi_hi_14, MatchVec_1_3_3) @[matu.scala 230:27]
    node _T_144 = cat(hi_14, lo_14) @[matu.scala 230:27]
    node _T_145 = gt(_T_144, UInt<1>("h0")) @[matu.scala 230:34]
    node _T_146 = eq(MatchVec_lastCycle_1_3, UInt<1>("h0")) @[matu.scala 230:68]
    node _T_147 = and(_T_145, _T_146) @[matu.scala 230:40]
    node MatchVecUInt_1_3_lo_hi = cat(MatchVec_1_3_2, MatchVec_1_3_1) @[matu.scala 231:46]
    node MatchVecUInt_1_3_lo = cat(MatchVecUInt_1_3_lo_hi, MatchVec_1_3_0) @[matu.scala 231:46]
    node MatchVecUInt_1_3_hi_hi = cat(MatchVec_1_3_5, MatchVec_1_3_4) @[matu.scala 231:46]
    node MatchVecUInt_1_3_hi = cat(MatchVecUInt_1_3_hi_hi, MatchVec_1_3_3) @[matu.scala 231:46]
    node _MatchVecUInt_1_3_T = cat(MatchVecUInt_1_3_hi, MatchVecUInt_1_3_lo) @[matu.scala 231:46]
    node _MatchVecUInt_1_3_T_1 = add(_MatchVecUInt_1_3_T, maxMatch) @[matu.scala 231:53]
    node _MatchVecUInt_1_3_T_2 = tail(_MatchVecUInt_1_3_T_1, 1) @[matu.scala 231:53]
    node lo_hi_15 = cat(MatchVec_1_3_2, MatchVec_1_3_1) @[matu.scala 232:33]
    node lo_15 = cat(lo_hi_15, MatchVec_1_3_0) @[matu.scala 232:33]
    node hi_hi_15 = cat(MatchVec_1_3_5, MatchVec_1_3_4) @[matu.scala 232:33]
    node hi_15 = cat(hi_hi_15, MatchVec_1_3_3) @[matu.scala 232:33]
    node _T_148 = cat(hi_15, lo_15) @[matu.scala 232:33]
    node _T_149 = gt(_T_148, UInt<1>("h0")) @[matu.scala 232:40]
    node MatchVecUInt_1_3_lo_hi_1 = cat(MatchVec_1_3_2, MatchVec_1_3_1) @[matu.scala 233:46]
    node MatchVecUInt_1_3_lo_1 = cat(MatchVecUInt_1_3_lo_hi_1, MatchVec_1_3_0) @[matu.scala 233:46]
    node MatchVecUInt_1_3_hi_hi_1 = cat(MatchVec_1_3_5, MatchVec_1_3_4) @[matu.scala 233:46]
    node MatchVecUInt_1_3_hi_1 = cat(MatchVecUInt_1_3_hi_hi_1, MatchVec_1_3_3) @[matu.scala 233:46]
    node _MatchVecUInt_1_3_T_3 = cat(MatchVecUInt_1_3_hi_1, MatchVecUInt_1_3_lo_1) @[matu.scala 233:46]
    node _GEN_116 = mux(_T_149, _MatchVecUInt_1_3_T_3, MatchVecUInt_1_3) @[matu.scala 232:47 233:28 158:29]
    node _GEN_117 = mux(_T_147, _MatchVecUInt_1_3_T_2, _GEN_116) @[matu.scala 230:77 231:28]
    node minMask = _minMask_T_1 @[matu.scala 190:21 216:11]
    node _T_158 = eq(minMask, MatchVecMask_0_0) @[matu.scala 250:20]
    node _T_159 = lt(MatchVecMask_0_0, UInt<12>("hfff")) @[matu.scala 250:66]
    node _T_160 = and(_T_158, _T_159) @[matu.scala 250:43]
    node _T_179 = eq(minMask, MatchVecMask_1_3) @[matu.scala 250:20]
    node _T_180 = lt(MatchVecMask_1_3, UInt<12>("hfff")) @[matu.scala 250:66]
    node _T_181 = and(_T_179, _T_180) @[matu.scala 250:43]
    node _T_176 = eq(minMask, MatchVecMask_1_2) @[matu.scala 250:20]
    node _T_177 = lt(MatchVecMask_1_2, UInt<12>("hfff")) @[matu.scala 250:66]
    node _T_178 = and(_T_176, _T_177) @[matu.scala 250:43]
    node _T_173 = eq(minMask, MatchVecMask_1_1) @[matu.scala 250:20]
    node _T_174 = lt(MatchVecMask_1_1, UInt<12>("hfff")) @[matu.scala 250:66]
    node _T_175 = and(_T_173, _T_174) @[matu.scala 250:43]
    node _T_170 = eq(minMask, MatchVecMask_1_0) @[matu.scala 250:20]
    node _T_171 = lt(MatchVecMask_1_0, UInt<12>("hfff")) @[matu.scala 250:66]
    node _T_172 = and(_T_170, _T_171) @[matu.scala 250:43]
    node _T_167 = eq(minMask, MatchVecMask_0_3) @[matu.scala 250:20]
    node _T_168 = lt(MatchVecMask_0_3, UInt<12>("hfff")) @[matu.scala 250:66]
    node _T_169 = and(_T_167, _T_168) @[matu.scala 250:43]
    node _T_164 = eq(minMask, MatchVecMask_0_2) @[matu.scala 250:20]
    node _T_165 = lt(MatchVecMask_0_2, UInt<12>("hfff")) @[matu.scala 250:66]
    node _T_166 = and(_T_164, _T_165) @[matu.scala 250:43]
    node _T_161 = eq(minMask, MatchVecMask_0_1) @[matu.scala 250:20]
    node _T_162 = lt(MatchVecMask_0_1, UInt<12>("hfff")) @[matu.scala 250:66]
    node _T_163 = and(_T_161, _T_162) @[matu.scala 250:43]
    node _GEN_134 = mux(_T_160, UInt<1>("h0"), UInt<1>("h0")) @[matu.scala 250:77 251:20]
    node _GEN_139 = mux(_T_163, UInt<1>("h0"), _GEN_134) @[matu.scala 250:77 251:20]
    node _GEN_144 = mux(_T_166, UInt<1>("h0"), _GEN_139) @[matu.scala 250:77 251:20]
    node _GEN_149 = mux(_T_169, UInt<1>("h0"), _GEN_144) @[matu.scala 250:77 251:20]
    node _GEN_154 = mux(_T_172, UInt<1>("h1"), _GEN_149) @[matu.scala 250:77 251:20]
    node _GEN_159 = mux(_T_175, UInt<1>("h1"), _GEN_154) @[matu.scala 250:77 251:20]
    node _GEN_164 = mux(_T_178, UInt<1>("h1"), _GEN_159) @[matu.scala 250:77 251:20]
    node _GEN_169 = mux(_T_181, UInt<1>("h1"), _GEN_164) @[matu.scala 250:77 251:20]
    node minIndex_i = _GEN_169
    node _GEN_135 = mux(_T_160, UInt<1>("h0"), UInt<2>("h0")) @[matu.scala 250:77 252:20]
    node _GEN_140 = mux(_T_163, UInt<1>("h1"), _GEN_135) @[matu.scala 250:77 252:20]
    node _GEN_145 = mux(_T_166, UInt<2>("h2"), _GEN_140) @[matu.scala 250:77 252:20]
    node _GEN_150 = mux(_T_169, UInt<2>("h3"), _GEN_145) @[matu.scala 250:77 252:20]
    node _GEN_155 = mux(_T_172, UInt<1>("h0"), _GEN_150) @[matu.scala 250:77 252:20]
    node _GEN_160 = mux(_T_175, UInt<1>("h1"), _GEN_155) @[matu.scala 250:77 252:20]
    node _GEN_165 = mux(_T_178, UInt<2>("h2"), _GEN_160) @[matu.scala 250:77 252:20]
    node _GEN_170 = mux(_T_181, UInt<2>("h3"), _GEN_165) @[matu.scala 250:77 252:20]
    node minIndex_j = _GEN_170
    node _GEN_126 = validif(and(eq(UInt<1>("h0"), minIndex_i), eq(UInt<1>("h0"), minIndex_j)), data_queue_0_0) @[matu.scala 255:{17,17}]
    node _GEN_127 = mux(and(eq(UInt<1>("h0"), minIndex_i), eq(UInt<1>("h1"), minIndex_j)), data_queue_0_1, _GEN_126) @[matu.scala 255:{17,17}]
    node _GEN_128 = mux(and(eq(UInt<1>("h0"), minIndex_i), eq(UInt<2>("h2"), minIndex_j)), data_queue_0_2, _GEN_127) @[matu.scala 255:{17,17}]
    node _GEN_129 = mux(and(eq(UInt<1>("h0"), minIndex_i), eq(UInt<2>("h3"), minIndex_j)), data_queue_0_3, _GEN_128) @[matu.scala 255:{17,17}]
    node _GEN_130 = mux(and(eq(UInt<1>("h1"), minIndex_i), eq(UInt<1>("h0"), minIndex_j)), data_queue_1_0, _GEN_129) @[matu.scala 255:{17,17}]
    node _GEN_131 = mux(and(eq(UInt<1>("h1"), minIndex_i), eq(UInt<1>("h1"), minIndex_j)), data_queue_1_1, _GEN_130) @[matu.scala 255:{17,17}]
    node _GEN_132 = mux(and(eq(UInt<1>("h1"), minIndex_i), eq(UInt<2>("h2"), minIndex_j)), data_queue_1_2, _GEN_131) @[matu.scala 255:{17,17}]
    node _GEN_133 = mux(and(eq(UInt<1>("h1"), minIndex_i), eq(UInt<2>("h3"), minIndex_j)), data_queue_1_3, _GEN_132) @[matu.scala 255:{17,17}]
    node _GEN_136 = mux(_T_160, UInt<1>("h0"), _GEN_23) @[matu.scala 250:77 253:27]
    node _GEN_137 = mux(_T_160, UInt<1>("h0"), _GEN_103) @[matu.scala 250:77 254:28]
    node _data_queue_minIndex_i_minIndex_j = _GEN_133 @[matu.scala 255:17]
    node _GEN_138 = mux(_T_160, _data_queue_minIndex_i_minIndex_j, UInt<64>("h0")) @[matu.scala 250:77 255:17]
    node _GEN_141 = mux(_T_163, UInt<1>("h0"), _GEN_24) @[matu.scala 250:77 253:27]
    node _GEN_142 = mux(_T_163, UInt<1>("h0"), _GEN_105) @[matu.scala 250:77 254:28]
    node _data_queue_minIndex_i_minIndex_j_0 = _GEN_133 @[matu.scala 255:17]
    node _GEN_143 = mux(_T_163, _data_queue_minIndex_i_minIndex_j_0, _GEN_138) @[matu.scala 250:77 255:17]
    node _GEN_146 = mux(_T_166, UInt<1>("h0"), _GEN_25) @[matu.scala 250:77 253:27]
    node _GEN_147 = mux(_T_166, UInt<1>("h0"), _GEN_107) @[matu.scala 250:77 254:28]
    node _data_queue_minIndex_i_minIndex_j_1 = _GEN_133 @[matu.scala 255:17]
    node _GEN_148 = mux(_T_166, _data_queue_minIndex_i_minIndex_j_1, _GEN_143) @[matu.scala 250:77 255:17]
    node _GEN_151 = mux(_T_169, UInt<1>("h0"), _GEN_26) @[matu.scala 250:77 253:27]
    node _GEN_152 = mux(_T_169, UInt<1>("h0"), _GEN_109) @[matu.scala 250:77 254:28]
    node _data_queue_minIndex_i_minIndex_j_2 = _GEN_133 @[matu.scala 255:17]
    node _GEN_153 = mux(_T_169, _data_queue_minIndex_i_minIndex_j_2, _GEN_148) @[matu.scala 250:77 255:17]
    node _GEN_156 = mux(_T_172, UInt<1>("h0"), _GEN_50) @[matu.scala 250:77 253:27]
    node _GEN_157 = mux(_T_172, UInt<1>("h0"), _GEN_111) @[matu.scala 250:77 254:28]
    node _data_queue_minIndex_i_minIndex_j_3 = _GEN_133 @[matu.scala 255:17]
    node _GEN_158 = mux(_T_172, _data_queue_minIndex_i_minIndex_j_3, _GEN_153) @[matu.scala 250:77 255:17]
    node _GEN_161 = mux(_T_175, UInt<1>("h0"), _GEN_51) @[matu.scala 250:77 253:27]
    node _GEN_162 = mux(_T_175, UInt<1>("h0"), _GEN_113) @[matu.scala 250:77 254:28]
    node _data_queue_minIndex_i_minIndex_j_4 = _GEN_133 @[matu.scala 255:17]
    node _GEN_163 = mux(_T_175, _data_queue_minIndex_i_minIndex_j_4, _GEN_158) @[matu.scala 250:77 255:17]
    node _GEN_166 = mux(_T_178, UInt<1>("h0"), _GEN_52) @[matu.scala 250:77 253:27]
    node _GEN_167 = mux(_T_178, UInt<1>("h0"), _GEN_115) @[matu.scala 250:77 254:28]
    node _data_queue_minIndex_i_minIndex_j_5 = _GEN_133 @[matu.scala 255:17]
    node _GEN_168 = mux(_T_178, _data_queue_minIndex_i_minIndex_j_5, _GEN_163) @[matu.scala 250:77 255:17]
    node _GEN_171 = mux(_T_181, UInt<1>("h0"), _GEN_53) @[matu.scala 250:77 253:27]
    node _GEN_172 = mux(_T_181, UInt<1>("h0"), _GEN_117) @[matu.scala 250:77 254:28]
    node _data_queue_minIndex_i_minIndex_j_6 = _GEN_133 @[matu.scala 255:17]
    node _GEN_173 = mux(_T_181, _data_queue_minIndex_i_minIndex_j_6, _GEN_168) @[matu.scala 250:77 255:17]
    node _io_out_valid_T = lt(minMask, UInt<12>("hfff")) @[matu.scala 260:27]
    node _data_queue_WIRE__0 = UInt<64>("h0") @[matu.scala 145:{55,55}]
    node _data_queue_WIRE__1 = UInt<64>("h0") @[matu.scala 145:{55,55}]
    node _data_queue_WIRE__2 = UInt<64>("h0") @[matu.scala 145:{55,55}]
    node _data_queue_WIRE__3 = UInt<64>("h0") @[matu.scala 145:{55,55}]
    node _data_queue_WIRE_1_0 = UInt<64>("h0") @[matu.scala 145:{55,55}]
    node _data_queue_WIRE_1_1 = UInt<64>("h0") @[matu.scala 145:{55,55}]
    node _data_queue_WIRE_1_2 = UInt<64>("h0") @[matu.scala 145:{55,55}]
    node _data_queue_WIRE_1_3 = UInt<64>("h0") @[matu.scala 145:{55,55}]
    node _data_queue_WIRE_2_0_0 = _data_queue_WIRE__0 @[matu.scala 145:{35,35}]
    node _data_queue_WIRE_2_0_1 = _data_queue_WIRE__1 @[matu.scala 145:{35,35}]
    node _data_queue_WIRE_2_0_2 = _data_queue_WIRE__2 @[matu.scala 145:{35,35}]
    node _data_queue_WIRE_2_0_3 = _data_queue_WIRE__3 @[matu.scala 145:{35,35}]
    node _data_queue_WIRE_2_1_0 = _data_queue_WIRE_1_0 @[matu.scala 145:{35,35}]
    node _data_queue_WIRE_2_1_1 = _data_queue_WIRE_1_1 @[matu.scala 145:{35,35}]
    node _data_queue_WIRE_2_1_2 = _data_queue_WIRE_1_2 @[matu.scala 145:{35,35}]
    node _data_queue_WIRE_2_1_3 = _data_queue_WIRE_1_3 @[matu.scala 145:{35,35}]
    node _data_writePtr_WIRE_0 = UInt<2>("h0") @[matu.scala 146:{38,38}]
    node _data_writePtr_WIRE_1 = UInt<2>("h0") @[matu.scala 146:{38,38}]
    node _robIdx_queue_WIRE__0 = UInt<5>("h0") @[matu.scala 148:{49,49}]
    node _robIdx_queue_WIRE__1 = UInt<5>("h0") @[matu.scala 148:{49,49}]
    node _robIdx_queue_WIRE__2 = UInt<5>("h0") @[matu.scala 148:{49,49}]
    node _robIdx_queue_WIRE__3 = UInt<5>("h0") @[matu.scala 148:{49,49}]
    node _robIdx_queue_WIRE_1_0 = UInt<5>("h0") @[matu.scala 148:{49,49}]
    node _robIdx_queue_WIRE_1_1 = UInt<5>("h0") @[matu.scala 148:{49,49}]
    node _robIdx_queue_WIRE_1_2 = UInt<5>("h0") @[matu.scala 148:{49,49}]
    node _robIdx_queue_WIRE_1_3 = UInt<5>("h0") @[matu.scala 148:{49,49}]
    node _robIdx_writePtr_WIRE_0 = UInt<2>("h0") @[matu.scala 149:{40,40}]
    node _robIdx_writePtr_WIRE_1 = UInt<2>("h0") @[matu.scala 149:{40,40}]
    node _valid_queue_WIRE__0 = UInt<1>("h0") @[matu.scala 151:{48,48}]
    node _valid_queue_WIRE__1 = UInt<1>("h0") @[matu.scala 151:{48,48}]
    node _valid_queue_WIRE__2 = UInt<1>("h0") @[matu.scala 151:{48,48}]
    node _valid_queue_WIRE__3 = UInt<1>("h0") @[matu.scala 151:{48,48}]
    node _valid_queue_WIRE_1_0 = UInt<1>("h0") @[matu.scala 151:{48,48}]
    node _valid_queue_WIRE_1_1 = UInt<1>("h0") @[matu.scala 151:{48,48}]
    node _valid_queue_WIRE_1_2 = UInt<1>("h0") @[matu.scala 151:{48,48}]
    node _valid_queue_WIRE_1_3 = UInt<1>("h0") @[matu.scala 151:{48,48}]
    node _valid_writePtr_WIRE_0 = UInt<2>("h0") @[matu.scala 152:{39,39}]
    node _valid_writePtr_WIRE_1 = UInt<2>("h0") @[matu.scala 152:{39,39}]
    node _deqptrReg_WIRE_0 = UInt<5>("h0") @[matu.scala 154:{34,34}]
    node _deqptrReg_WIRE_1 = UInt<5>("h0") @[matu.scala 154:{34,34}]
    node _deqptrReg_WIRE_2 = UInt<5>("h0") @[matu.scala 154:{34,34}]
    node _deqptrReg_WIRE_3 = UInt<5>("h0") @[matu.scala 154:{34,34}]
    node _deqptrReg_WIRE_4 = UInt<5>("h0") @[matu.scala 154:{34,34}]
    node _deqptrReg_WIRE_5 = UInt<5>("h0") @[matu.scala 154:{34,34}]
    node _MatchVec_lastCycle_WIRE__0 = UInt<6>("h0") @[matu.scala 157:{63,63}]
    node _MatchVec_lastCycle_WIRE__1 = UInt<6>("h0") @[matu.scala 157:{63,63}]
    node _MatchVec_lastCycle_WIRE__2 = UInt<6>("h0") @[matu.scala 157:{63,63}]
    node _MatchVec_lastCycle_WIRE__3 = UInt<6>("h0") @[matu.scala 157:{63,63}]
    node _MatchVec_lastCycle_WIRE_1_0 = UInt<6>("h0") @[matu.scala 157:{63,63}]
    node _MatchVec_lastCycle_WIRE_1_1 = UInt<6>("h0") @[matu.scala 157:{63,63}]
    node _MatchVec_lastCycle_WIRE_1_2 = UInt<6>("h0") @[matu.scala 157:{63,63}]
    node _MatchVec_lastCycle_WIRE_1_3 = UInt<6>("h0") @[matu.scala 157:{63,63}]
    node _MatchVec_lastCycle_WIRE_2_0_0 = _MatchVec_lastCycle_WIRE__0 @[matu.scala 157:{43,43}]
    node _MatchVec_lastCycle_WIRE_2_0_1 = _MatchVec_lastCycle_WIRE__1 @[matu.scala 157:{43,43}]
    node _MatchVec_lastCycle_WIRE_2_0_2 = _MatchVec_lastCycle_WIRE__2 @[matu.scala 157:{43,43}]
    node _MatchVec_lastCycle_WIRE_2_0_3 = _MatchVec_lastCycle_WIRE__3 @[matu.scala 157:{43,43}]
    node _MatchVec_lastCycle_WIRE_2_1_0 = _MatchVec_lastCycle_WIRE_1_0 @[matu.scala 157:{43,43}]
    node _MatchVec_lastCycle_WIRE_2_1_1 = _MatchVec_lastCycle_WIRE_1_1 @[matu.scala 157:{43,43}]
    node _MatchVec_lastCycle_WIRE_2_1_2 = _MatchVec_lastCycle_WIRE_1_2 @[matu.scala 157:{43,43}]
    node _MatchVec_lastCycle_WIRE_2_1_3 = _MatchVec_lastCycle_WIRE_1_3 @[matu.scala 157:{43,43}]
    node _MatchVecUInt_WIRE__0 = UInt<12>("h0") @[matu.scala 158:{57,57}]
    node _MatchVecUInt_WIRE__1 = UInt<12>("h0") @[matu.scala 158:{57,57}]
    node _MatchVecUInt_WIRE__2 = UInt<12>("h0") @[matu.scala 158:{57,57}]
    node _MatchVecUInt_WIRE__3 = UInt<12>("h0") @[matu.scala 158:{57,57}]
    node _MatchVecUInt_WIRE_1_0 = UInt<12>("h0") @[matu.scala 158:{57,57}]
    node _MatchVecUInt_WIRE_1_1 = UInt<12>("h0") @[matu.scala 158:{57,57}]
    node _MatchVecUInt_WIRE_1_2 = UInt<12>("h0") @[matu.scala 158:{57,57}]
    node _MatchVecUInt_WIRE_1_3 = UInt<12>("h0") @[matu.scala 158:{57,57}]
    node _MatchVecUInt_WIRE_2_0_0 = _MatchVecUInt_WIRE__0 @[matu.scala 158:{37,37}]
    node _MatchVecUInt_WIRE_2_0_1 = _MatchVecUInt_WIRE__1 @[matu.scala 158:{37,37}]
    node _MatchVecUInt_WIRE_2_0_2 = _MatchVecUInt_WIRE__2 @[matu.scala 158:{37,37}]
    node _MatchVecUInt_WIRE_2_0_3 = _MatchVecUInt_WIRE__3 @[matu.scala 158:{37,37}]
    node _MatchVecUInt_WIRE_2_1_0 = _MatchVecUInt_WIRE_1_0 @[matu.scala 158:{37,37}]
    node _MatchVecUInt_WIRE_2_1_1 = _MatchVecUInt_WIRE_1_1 @[matu.scala 158:{37,37}]
    node _MatchVecUInt_WIRE_2_1_2 = _MatchVecUInt_WIRE_1_2 @[matu.scala 158:{37,37}]
    node _MatchVecUInt_WIRE_2_1_3 = _MatchVecUInt_WIRE_1_3 @[matu.scala 158:{37,37}]
    node _MatchVecMask_WIRE__0 = UInt<12>("hfff") @[matu.scala 159:{58,58}]
    node _MatchVecMask_WIRE__1 = UInt<12>("hfff") @[matu.scala 159:{58,58}]
    node _MatchVecMask_WIRE__2 = UInt<12>("hfff") @[matu.scala 159:{58,58}]
    node _MatchVecMask_WIRE__3 = UInt<12>("hfff") @[matu.scala 159:{58,58}]
    node _MatchVecMask_WIRE_1_0 = UInt<12>("hfff") @[matu.scala 159:{58,58}]
    node _MatchVecMask_WIRE_1_1 = UInt<12>("hfff") @[matu.scala 159:{58,58}]
    node _MatchVecMask_WIRE_1_2 = UInt<12>("hfff") @[matu.scala 159:{58,58}]
    node _MatchVecMask_WIRE_1_3 = UInt<12>("hfff") @[matu.scala 159:{58,58}]
    node _MatchVecMask_WIRE_2_0_0 = _MatchVecMask_WIRE__0 @[matu.scala 159:{38,38}]
    node _MatchVecMask_WIRE_2_0_1 = _MatchVecMask_WIRE__1 @[matu.scala 159:{38,38}]
    node _MatchVecMask_WIRE_2_0_2 = _MatchVecMask_WIRE__2 @[matu.scala 159:{38,38}]
    node _MatchVecMask_WIRE_2_0_3 = _MatchVecMask_WIRE__3 @[matu.scala 159:{38,38}]
    node _MatchVecMask_WIRE_2_1_0 = _MatchVecMask_WIRE_1_0 @[matu.scala 159:{38,38}]
    node _MatchVecMask_WIRE_2_1_1 = _MatchVecMask_WIRE_1_1 @[matu.scala 159:{38,38}]
    node _MatchVecMask_WIRE_2_1_2 = _MatchVecMask_WIRE_1_2 @[matu.scala 159:{38,38}]
    node _MatchVecMask_WIRE_2_1_3 = _MatchVecMask_WIRE_1_3 @[matu.scala 159:{38,38}]
    node deqData = _GEN_173
    io_out_valid <= _io_out_valid_T @[matu.scala 260:16]
    io_out_bits <= deqData @[matu.scala 259:15]
    data_queue_0_0 <= mux(reset, _data_queue_WIRE_2_0_0, _GEN_13) @[matu.scala 145:{27,27}]
    data_queue_0_1 <= mux(reset, _data_queue_WIRE_2_0_1, _GEN_14) @[matu.scala 145:{27,27}]
    data_queue_0_2 <= mux(reset, _data_queue_WIRE_2_0_2, _GEN_15) @[matu.scala 145:{27,27}]
    data_queue_0_3 <= mux(reset, _data_queue_WIRE_2_0_3, _GEN_16) @[matu.scala 145:{27,27}]
    data_queue_1_0 <= mux(reset, _data_queue_WIRE_2_1_0, _GEN_40) @[matu.scala 145:{27,27}]
    data_queue_1_1 <= mux(reset, _data_queue_WIRE_2_1_1, _GEN_41) @[matu.scala 145:{27,27}]
    data_queue_1_2 <= mux(reset, _data_queue_WIRE_2_1_2, _GEN_42) @[matu.scala 145:{27,27}]
    data_queue_1_3 <= mux(reset, _data_queue_WIRE_2_1_3, _GEN_43) @[matu.scala 145:{27,27}]
    data_writePtr_0 <= mux(reset, _data_writePtr_WIRE_0, _GEN_12) @[matu.scala 146:{30,30}]
    data_writePtr_1 <= mux(reset, _data_writePtr_WIRE_1, _GEN_39) @[matu.scala 146:{30,30}]
    robIdx_queue_0_0 <= mux(reset, _robIdx_queue_WIRE__0, _GEN_18) @[matu.scala 148:{41,41}]
    robIdx_queue_0_1 <= mux(reset, _robIdx_queue_WIRE__1, _GEN_19) @[matu.scala 148:{41,41}]
    robIdx_queue_0_2 <= mux(reset, _robIdx_queue_WIRE__2, _GEN_20) @[matu.scala 148:{41,41}]
    robIdx_queue_0_3 <= mux(reset, _robIdx_queue_WIRE__3, _GEN_21) @[matu.scala 148:{41,41}]
    robIdx_queue_1_0 <= mux(reset, _robIdx_queue_WIRE_1_0, _GEN_45) @[matu.scala 148:{41,41}]
    robIdx_queue_1_1 <= mux(reset, _robIdx_queue_WIRE_1_1, _GEN_46) @[matu.scala 148:{41,41}]
    robIdx_queue_1_2 <= mux(reset, _robIdx_queue_WIRE_1_2, _GEN_47) @[matu.scala 148:{41,41}]
    robIdx_queue_1_3 <= mux(reset, _robIdx_queue_WIRE_1_3, _GEN_48) @[matu.scala 148:{41,41}]
    robIdx_writePtr_0 <= mux(reset, _robIdx_writePtr_WIRE_0, _GEN_17) @[matu.scala 149:{32,32}]
    robIdx_writePtr_1 <= mux(reset, _robIdx_writePtr_WIRE_1, _GEN_44) @[matu.scala 149:{32,32}]
    valid_queue_0_0 <= mux(reset, _valid_queue_WIRE__0, _GEN_136) @[matu.scala 151:{40,40}]
    valid_queue_0_1 <= mux(reset, _valid_queue_WIRE__1, _GEN_141) @[matu.scala 151:{40,40}]
    valid_queue_0_2 <= mux(reset, _valid_queue_WIRE__2, _GEN_146) @[matu.scala 151:{40,40}]
    valid_queue_0_3 <= mux(reset, _valid_queue_WIRE__3, _GEN_151) @[matu.scala 151:{40,40}]
    valid_queue_1_0 <= mux(reset, _valid_queue_WIRE_1_0, _GEN_156) @[matu.scala 151:{40,40}]
    valid_queue_1_1 <= mux(reset, _valid_queue_WIRE_1_1, _GEN_161) @[matu.scala 151:{40,40}]
    valid_queue_1_2 <= mux(reset, _valid_queue_WIRE_1_2, _GEN_166) @[matu.scala 151:{40,40}]
    valid_queue_1_3 <= mux(reset, _valid_queue_WIRE_1_3, _GEN_171) @[matu.scala 151:{40,40}]
    valid_writePtr_0 <= mux(reset, _valid_writePtr_WIRE_0, _GEN_22) @[matu.scala 152:{31,31}]
    valid_writePtr_1 <= mux(reset, _valid_writePtr_WIRE_1, _GEN_49) @[matu.scala 152:{31,31}]
    deqptrReg_0 <= mux(reset, _deqptrReg_WIRE_0, io_deqptr_0) @[matu.scala 154:{26,26} 163:13]
    deqptrReg_1 <= mux(reset, _deqptrReg_WIRE_1, io_deqptr_1) @[matu.scala 154:{26,26} 163:13]
    deqptrReg_2 <= mux(reset, _deqptrReg_WIRE_2, io_deqptr_2) @[matu.scala 154:{26,26} 163:13]
    deqptrReg_3 <= mux(reset, _deqptrReg_WIRE_3, io_deqptr_3) @[matu.scala 154:{26,26} 163:13]
    deqptrReg_4 <= mux(reset, _deqptrReg_WIRE_4, io_deqptr_4) @[matu.scala 154:{26,26} 163:13]
    deqptrReg_5 <= mux(reset, _deqptrReg_WIRE_5, io_deqptr_5) @[matu.scala 154:{26,26} 163:13]
    MatchVec_lastCycle_0_0 <= bits(mux(reset, _MatchVec_lastCycle_WIRE_2_0_0, MatchVecUInt_0_0), 5, 0) @[matu.scala 157:{35,35} 164:22]
    MatchVec_lastCycle_0_1 <= bits(mux(reset, _MatchVec_lastCycle_WIRE_2_0_1, MatchVecUInt_0_1), 5, 0) @[matu.scala 157:{35,35} 164:22]
    MatchVec_lastCycle_0_2 <= bits(mux(reset, _MatchVec_lastCycle_WIRE_2_0_2, MatchVecUInt_0_2), 5, 0) @[matu.scala 157:{35,35} 164:22]
    MatchVec_lastCycle_0_3 <= bits(mux(reset, _MatchVec_lastCycle_WIRE_2_0_3, MatchVecUInt_0_3), 5, 0) @[matu.scala 157:{35,35} 164:22]
    MatchVec_lastCycle_1_0 <= bits(mux(reset, _MatchVec_lastCycle_WIRE_2_1_0, MatchVecUInt_1_0), 5, 0) @[matu.scala 157:{35,35} 164:22]
    MatchVec_lastCycle_1_1 <= bits(mux(reset, _MatchVec_lastCycle_WIRE_2_1_1, MatchVecUInt_1_1), 5, 0) @[matu.scala 157:{35,35} 164:22]
    MatchVec_lastCycle_1_2 <= bits(mux(reset, _MatchVec_lastCycle_WIRE_2_1_2, MatchVecUInt_1_2), 5, 0) @[matu.scala 157:{35,35} 164:22]
    MatchVec_lastCycle_1_3 <= bits(mux(reset, _MatchVec_lastCycle_WIRE_2_1_3, MatchVecUInt_1_3), 5, 0) @[matu.scala 157:{35,35} 164:22]
    MatchVecUInt_0_0 <= mux(reset, _MatchVecUInt_WIRE_2_0_0, _GEN_137) @[matu.scala 158:{29,29}]
    MatchVecUInt_0_1 <= mux(reset, _MatchVecUInt_WIRE_2_0_1, _GEN_142) @[matu.scala 158:{29,29}]
    MatchVecUInt_0_2 <= mux(reset, _MatchVecUInt_WIRE_2_0_2, _GEN_147) @[matu.scala 158:{29,29}]
    MatchVecUInt_0_3 <= mux(reset, _MatchVecUInt_WIRE_2_0_3, _GEN_152) @[matu.scala 158:{29,29}]
    MatchVecUInt_1_0 <= mux(reset, _MatchVecUInt_WIRE_2_1_0, _GEN_157) @[matu.scala 158:{29,29}]
    MatchVecUInt_1_1 <= mux(reset, _MatchVecUInt_WIRE_2_1_1, _GEN_162) @[matu.scala 158:{29,29}]
    MatchVecUInt_1_2 <= mux(reset, _MatchVecUInt_WIRE_2_1_2, _GEN_167) @[matu.scala 158:{29,29}]
    MatchVecUInt_1_3 <= mux(reset, _MatchVecUInt_WIRE_2_1_3, _GEN_172) @[matu.scala 158:{29,29}]
    maxMatch <= mux(reset, UInt<12>("h0"), _maxMatch_T_1) @[matu.scala 200:{25,25} 226:12]

  module XS_miniTPU_M :
    input clock : Clock
    input reset : UInt<1>
    input io_xsIO_in_0_valid : UInt<1>
    input io_xsIO_in_0_bits_ldIn : UInt<64>
    input io_xsIO_in_0_bits_uop : UInt<3>
    input io_xsIO_in_0_bits_robIdx : UInt<5>
    input io_xsIO_in_1_valid : UInt<1>
    input io_xsIO_in_1_bits_ldIn : UInt<64>
    input io_xsIO_in_1_bits_uop : UInt<3>
    input io_xsIO_in_1_bits_robIdx : UInt<5>
    input io_xsIO_deqptr_0 : UInt<5>
    input io_xsIO_deqptr_1 : UInt<5>
    input io_xsIO_deqptr_2 : UInt<5>
    input io_xsIO_deqptr_3 : UInt<5>
    input io_xsIO_deqptr_4 : UInt<5>
    input io_xsIO_deqptr_5 : UInt<5>
    input io_xsIO_out_ready : UInt<1>
    output io_xsIO_out_valid : UInt<1>
    output io_xsIO_out_bits_data : UInt<64>

    inst mini_tpu of top_M @[matu.scala 57:25]
    inst outBridge of OutputBridge_M @[matu.scala 58:25]
    inst inBridge_m of InputBridge_M @[matu.scala 59:27]
    inst rob of SA_ROB @[matu.scala 60:19]
    reg uopReg_0 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), uopReg_0) @[matu.scala 34:19]
    reg uopReg_1 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), uopReg_1) @[matu.scala 34:19]
    reg validReg_0 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), validReg_0) @[matu.scala 42:25]
    reg validReg_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), validReg_1) @[matu.scala 42:25]
    reg ldInReg_0 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), ldInReg_0) @[matu.scala 43:24]
    reg ldInReg_1 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), ldInReg_1) @[matu.scala 43:24]
    reg deqptrReg_0 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), deqptrReg_0) @[matu.scala 44:26]
    reg deqptrReg_1 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), deqptrReg_1) @[matu.scala 44:26]
    reg deqptrReg_2 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), deqptrReg_2) @[matu.scala 44:26]
    reg deqptrReg_3 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), deqptrReg_3) @[matu.scala 44:26]
    reg deqptrReg_4 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), deqptrReg_4) @[matu.scala 44:26]
    reg deqptrReg_5 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), deqptrReg_5) @[matu.scala 44:26]
    reg robIdxReg_0 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), robIdxReg_0) @[matu.scala 45:26]
    reg robIdxReg_1 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), robIdxReg_1) @[matu.scala 45:26]
    node _inBridge_m_io_ldIn_T = asSInt(rob.io_out_bits) @[matu.scala 73:41]
    node _inBridge_m_io_in_ready_T = or(mini_tpu.io_tpuIO_in_in_a_ready, mini_tpu.io_tpuIO_in_in_b_ready) @[matu.scala 75:61]
    node _io_xsIO_out_bits_data_T = asUInt(outBridge.io_result) @[matu.scala 88:48]
    node newReq_0 = io_xsIO_in_0_valid @[matu.scala 33:20 36:13]
    node newReq_1 = io_xsIO_in_1_valid @[matu.scala 33:20 37:13]
    node _validReg_WIRE_0 = UInt<1>("h0") @[matu.scala 42:{33,33}]
    node _validReg_WIRE_1 = UInt<1>("h0") @[matu.scala 42:{33,33}]
    node _ldInReg_WIRE_0 = UInt<64>("h0") @[matu.scala 43:{32,32}]
    node _ldInReg_WIRE_1 = UInt<64>("h0") @[matu.scala 43:{32,32}]
    node _deqptrReg_WIRE_0 = UInt<5>("h0") @[matu.scala 44:{34,34}]
    node _deqptrReg_WIRE_1 = UInt<5>("h0") @[matu.scala 44:{34,34}]
    node _deqptrReg_WIRE_2 = UInt<5>("h0") @[matu.scala 44:{34,34}]
    node _deqptrReg_WIRE_3 = UInt<5>("h0") @[matu.scala 44:{34,34}]
    node _deqptrReg_WIRE_4 = UInt<5>("h0") @[matu.scala 44:{34,34}]
    node _deqptrReg_WIRE_5 = UInt<5>("h0") @[matu.scala 44:{34,34}]
    node _robIdxReg_WIRE_0 = UInt<5>("h0") @[matu.scala 45:{34,34}]
    node _robIdxReg_WIRE_1 = UInt<5>("h0") @[matu.scala 45:{34,34}]
    io_xsIO_out_valid <= outBridge.io_out_valid @[matu.scala 87:21]
    io_xsIO_out_bits_data <= _io_xsIO_out_bits_data_T @[matu.scala 88:25]
    uopReg_0 <= io_xsIO_in_0_bits_uop @[matu.scala 39:13]
    uopReg_1 <= io_xsIO_in_1_bits_uop @[matu.scala 40:13]
    validReg_0 <= mux(reset, _validReg_WIRE_0, io_xsIO_in_0_valid) @[matu.scala 42:{25,25} 47:15]
    validReg_1 <= mux(reset, _validReg_WIRE_1, io_xsIO_in_1_valid) @[matu.scala 42:{25,25} 50:15]
    ldInReg_0 <= mux(reset, _ldInReg_WIRE_0, io_xsIO_in_0_bits_ldIn) @[matu.scala 43:{24,24} 48:15]
    ldInReg_1 <= mux(reset, _ldInReg_WIRE_1, io_xsIO_in_1_bits_ldIn) @[matu.scala 43:{24,24} 51:14]
    deqptrReg_0 <= mux(reset, _deqptrReg_WIRE_0, io_xsIO_deqptr_0) @[matu.scala 44:{26,26} 55:13]
    deqptrReg_1 <= mux(reset, _deqptrReg_WIRE_1, io_xsIO_deqptr_1) @[matu.scala 44:{26,26} 55:13]
    deqptrReg_2 <= mux(reset, _deqptrReg_WIRE_2, io_xsIO_deqptr_2) @[matu.scala 44:{26,26} 55:13]
    deqptrReg_3 <= mux(reset, _deqptrReg_WIRE_3, io_xsIO_deqptr_3) @[matu.scala 44:{26,26} 55:13]
    deqptrReg_4 <= mux(reset, _deqptrReg_WIRE_4, io_xsIO_deqptr_4) @[matu.scala 44:{26,26} 55:13]
    deqptrReg_5 <= mux(reset, _deqptrReg_WIRE_5, io_xsIO_deqptr_5) @[matu.scala 44:{26,26} 55:13]
    robIdxReg_0 <= mux(reset, _robIdxReg_WIRE_0, io_xsIO_in_0_bits_robIdx) @[matu.scala 45:{26,26} 53:16]
    robIdxReg_1 <= mux(reset, _robIdxReg_WIRE_1, io_xsIO_in_1_bits_robIdx) @[matu.scala 45:{26,26} 54:16]
    mini_tpu.clock <= clock
    mini_tpu.reset <= reset
    mini_tpu.io_tpuIO_in_in_a_valid <= inBridge_m.io_out_valid_h @[matu.scala 76:35]
    mini_tpu.io_tpuIO_in_in_a_bits_0 <= inBridge_m.io_in_a_0 @[matu.scala 78:34]
    mini_tpu.io_tpuIO_in_in_a_bits_1 <= inBridge_m.io_in_a_1 @[matu.scala 78:34]
    mini_tpu.io_tpuIO_in_in_b_valid <= inBridge_m.io_out_valid_v @[matu.scala 77:35]
    mini_tpu.io_tpuIO_in_in_b_bits_0 <= inBridge_m.io_in_b_0 @[matu.scala 79:34]
    mini_tpu.io_tpuIO_in_in_b_bits_1 <= inBridge_m.io_in_b_1 @[matu.scala 79:34]
    mini_tpu.io_tpuIO_in_in_c_0 <= asSInt(UInt<16>("h0")) @[matu.scala 80:29]
    mini_tpu.io_tpuIO_in_in_c_1 <= asSInt(UInt<16>("h0")) @[matu.scala 80:29]
    mini_tpu.io_tpuIO_out_ready <= outBridge.io_out_ready @[matu.scala 83:31]
    outBridge.clock <= clock
    outBridge.reset <= reset
    outBridge.io_in_valid <= mini_tpu.io_tpuIO_out_valid @[matu.scala 82:25]
    outBridge.io_out_c_0 <= mini_tpu.io_tpuIO_out_bits_out_c_0 @[matu.scala 84:22]
    outBridge.io_out_c_1 <= mini_tpu.io_tpuIO_out_bits_out_c_1 @[matu.scala 84:22]
    outBridge.io_in_ready <= io_xsIO_out_ready @[matu.scala 86:25]
    inBridge_m.clock <= clock
    inBridge_m.reset <= reset
    inBridge_m.io_in_valid <= rob.io_out_valid @[matu.scala 71:26]
    inBridge_m.io_ldIn <= _inBridge_m_io_ldIn_T @[matu.scala 73:22]
    inBridge_m.io_in_ready <= _inBridge_m_io_in_ready_T @[matu.scala 75:26]
    rob.clock <= clock
    rob.reset <= reset
    rob.io_deqptr_0 <= deqptrReg_0 @[matu.scala 69:17]
    rob.io_deqptr_1 <= deqptrReg_1 @[matu.scala 69:17]
    rob.io_deqptr_2 <= deqptrReg_2 @[matu.scala 69:17]
    rob.io_deqptr_3 <= deqptrReg_3 @[matu.scala 69:17]
    rob.io_deqptr_4 <= deqptrReg_4 @[matu.scala 69:17]
    rob.io_deqptr_5 <= deqptrReg_5 @[matu.scala 69:17]
    rob.io_ldin_data_0 <= ldInReg_0 @[matu.scala 63:20]
    rob.io_ldin_data_1 <= ldInReg_1 @[matu.scala 63:20]
    rob.io_ldin_robIdx_0 <= robIdxReg_0 @[matu.scala 64:25]
    rob.io_ldin_robIdx_1 <= robIdxReg_1 @[matu.scala 65:25]
    rob.io_ldin_fuOptype_0 <= uopReg_0 @[matu.scala 66:27]
    rob.io_ldin_fuOptype_1 <= uopReg_1 @[matu.scala 67:27]
    rob.io_ldin_valid_0 <= validReg_0 @[matu.scala 62:21]
    rob.io_ldin_valid_1 <= validReg_1 @[matu.scala 62:21]
    rob.io_out_ready <= inBridge_m.io_out_ready @[matu.scala 72:20]
