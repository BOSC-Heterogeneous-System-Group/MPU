circuit wallaceTree :
  module RCA :
    input clock : Clock
    input reset : Reset
    output input : { flip a_in : SInt<16>, flip b_in : SInt<16>, flip c_in : SInt<1>}
    output output : { S : SInt<16>, C : SInt<16>}

    wire g_comb : UInt<1>[16] @[rca.scala 22:22]
    wire p_comb : UInt<1>[16] @[rca.scala 23:22]
    wire s_comb : UInt<1>[16] @[rca.scala 24:22]
    wire c_comb : UInt<1>[17] @[rca.scala 25:22]
    node _c_comb_0_T = bits(input.c_in, 0, 0) @[rca.scala 27:29]
    c_comb[0] <= _c_comb_0_T @[rca.scala 27:15]
    node _g_comb_0_T = bits(input.a_in, 0, 0) @[rca.scala 30:35]
    node _g_comb_0_T_1 = bits(input.b_in, 0, 0) @[rca.scala 30:51]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[rca.scala 30:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[0] <= _g_comb_0_T_3 @[rca.scala 30:21]
    node _p_comb_0_T = bits(input.a_in, 0, 0) @[rca.scala 31:35]
    node _p_comb_0_T_1 = bits(input.b_in, 0, 0) @[rca.scala 31:51]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[rca.scala 31:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[0] <= _p_comb_0_T_3 @[rca.scala 31:21]
    node _s_comb_0_T = xor(p_comb[0], c_comb[0]) @[rca.scala 32:34]
    s_comb[0] <= _s_comb_0_T @[rca.scala 32:21]
    node _c_comb_1_T = and(c_comb[0], p_comb[0]) @[rca.scala 33:34]
    node _c_comb_1_T_1 = or(_c_comb_1_T, g_comb[0]) @[rca.scala 33:46]
    c_comb[1] <= _c_comb_1_T_1 @[rca.scala 33:21]
    node _g_comb_1_T = bits(input.a_in, 1, 1) @[rca.scala 30:35]
    node _g_comb_1_T_1 = bits(input.b_in, 1, 1) @[rca.scala 30:51]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[rca.scala 30:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[1] <= _g_comb_1_T_3 @[rca.scala 30:21]
    node _p_comb_1_T = bits(input.a_in, 1, 1) @[rca.scala 31:35]
    node _p_comb_1_T_1 = bits(input.b_in, 1, 1) @[rca.scala 31:51]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[rca.scala 31:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[1] <= _p_comb_1_T_3 @[rca.scala 31:21]
    node _s_comb_1_T = xor(p_comb[1], c_comb[1]) @[rca.scala 32:34]
    s_comb[1] <= _s_comb_1_T @[rca.scala 32:21]
    node _c_comb_2_T = and(c_comb[1], p_comb[1]) @[rca.scala 33:34]
    node _c_comb_2_T_1 = or(_c_comb_2_T, g_comb[1]) @[rca.scala 33:46]
    c_comb[2] <= _c_comb_2_T_1 @[rca.scala 33:21]
    node _g_comb_2_T = bits(input.a_in, 2, 2) @[rca.scala 30:35]
    node _g_comb_2_T_1 = bits(input.b_in, 2, 2) @[rca.scala 30:51]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[rca.scala 30:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[2] <= _g_comb_2_T_3 @[rca.scala 30:21]
    node _p_comb_2_T = bits(input.a_in, 2, 2) @[rca.scala 31:35]
    node _p_comb_2_T_1 = bits(input.b_in, 2, 2) @[rca.scala 31:51]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[rca.scala 31:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[2] <= _p_comb_2_T_3 @[rca.scala 31:21]
    node _s_comb_2_T = xor(p_comb[2], c_comb[2]) @[rca.scala 32:34]
    s_comb[2] <= _s_comb_2_T @[rca.scala 32:21]
    node _c_comb_3_T = and(c_comb[2], p_comb[2]) @[rca.scala 33:34]
    node _c_comb_3_T_1 = or(_c_comb_3_T, g_comb[2]) @[rca.scala 33:46]
    c_comb[3] <= _c_comb_3_T_1 @[rca.scala 33:21]
    node _g_comb_3_T = bits(input.a_in, 3, 3) @[rca.scala 30:35]
    node _g_comb_3_T_1 = bits(input.b_in, 3, 3) @[rca.scala 30:51]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[rca.scala 30:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[3] <= _g_comb_3_T_3 @[rca.scala 30:21]
    node _p_comb_3_T = bits(input.a_in, 3, 3) @[rca.scala 31:35]
    node _p_comb_3_T_1 = bits(input.b_in, 3, 3) @[rca.scala 31:51]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[rca.scala 31:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[3] <= _p_comb_3_T_3 @[rca.scala 31:21]
    node _s_comb_3_T = xor(p_comb[3], c_comb[3]) @[rca.scala 32:34]
    s_comb[3] <= _s_comb_3_T @[rca.scala 32:21]
    node _c_comb_4_T = and(c_comb[3], p_comb[3]) @[rca.scala 33:34]
    node _c_comb_4_T_1 = or(_c_comb_4_T, g_comb[3]) @[rca.scala 33:46]
    c_comb[4] <= _c_comb_4_T_1 @[rca.scala 33:21]
    node _g_comb_4_T = bits(input.a_in, 4, 4) @[rca.scala 30:35]
    node _g_comb_4_T_1 = bits(input.b_in, 4, 4) @[rca.scala 30:51]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[rca.scala 30:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[4] <= _g_comb_4_T_3 @[rca.scala 30:21]
    node _p_comb_4_T = bits(input.a_in, 4, 4) @[rca.scala 31:35]
    node _p_comb_4_T_1 = bits(input.b_in, 4, 4) @[rca.scala 31:51]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[rca.scala 31:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[4] <= _p_comb_4_T_3 @[rca.scala 31:21]
    node _s_comb_4_T = xor(p_comb[4], c_comb[4]) @[rca.scala 32:34]
    s_comb[4] <= _s_comb_4_T @[rca.scala 32:21]
    node _c_comb_5_T = and(c_comb[4], p_comb[4]) @[rca.scala 33:34]
    node _c_comb_5_T_1 = or(_c_comb_5_T, g_comb[4]) @[rca.scala 33:46]
    c_comb[5] <= _c_comb_5_T_1 @[rca.scala 33:21]
    node _g_comb_5_T = bits(input.a_in, 5, 5) @[rca.scala 30:35]
    node _g_comb_5_T_1 = bits(input.b_in, 5, 5) @[rca.scala 30:51]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[rca.scala 30:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[5] <= _g_comb_5_T_3 @[rca.scala 30:21]
    node _p_comb_5_T = bits(input.a_in, 5, 5) @[rca.scala 31:35]
    node _p_comb_5_T_1 = bits(input.b_in, 5, 5) @[rca.scala 31:51]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[rca.scala 31:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[5] <= _p_comb_5_T_3 @[rca.scala 31:21]
    node _s_comb_5_T = xor(p_comb[5], c_comb[5]) @[rca.scala 32:34]
    s_comb[5] <= _s_comb_5_T @[rca.scala 32:21]
    node _c_comb_6_T = and(c_comb[5], p_comb[5]) @[rca.scala 33:34]
    node _c_comb_6_T_1 = or(_c_comb_6_T, g_comb[5]) @[rca.scala 33:46]
    c_comb[6] <= _c_comb_6_T_1 @[rca.scala 33:21]
    node _g_comb_6_T = bits(input.a_in, 6, 6) @[rca.scala 30:35]
    node _g_comb_6_T_1 = bits(input.b_in, 6, 6) @[rca.scala 30:51]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[rca.scala 30:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[6] <= _g_comb_6_T_3 @[rca.scala 30:21]
    node _p_comb_6_T = bits(input.a_in, 6, 6) @[rca.scala 31:35]
    node _p_comb_6_T_1 = bits(input.b_in, 6, 6) @[rca.scala 31:51]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[rca.scala 31:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[6] <= _p_comb_6_T_3 @[rca.scala 31:21]
    node _s_comb_6_T = xor(p_comb[6], c_comb[6]) @[rca.scala 32:34]
    s_comb[6] <= _s_comb_6_T @[rca.scala 32:21]
    node _c_comb_7_T = and(c_comb[6], p_comb[6]) @[rca.scala 33:34]
    node _c_comb_7_T_1 = or(_c_comb_7_T, g_comb[6]) @[rca.scala 33:46]
    c_comb[7] <= _c_comb_7_T_1 @[rca.scala 33:21]
    node _g_comb_7_T = bits(input.a_in, 7, 7) @[rca.scala 30:35]
    node _g_comb_7_T_1 = bits(input.b_in, 7, 7) @[rca.scala 30:51]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[rca.scala 30:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[7] <= _g_comb_7_T_3 @[rca.scala 30:21]
    node _p_comb_7_T = bits(input.a_in, 7, 7) @[rca.scala 31:35]
    node _p_comb_7_T_1 = bits(input.b_in, 7, 7) @[rca.scala 31:51]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[rca.scala 31:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[7] <= _p_comb_7_T_3 @[rca.scala 31:21]
    node _s_comb_7_T = xor(p_comb[7], c_comb[7]) @[rca.scala 32:34]
    s_comb[7] <= _s_comb_7_T @[rca.scala 32:21]
    node _c_comb_8_T = and(c_comb[7], p_comb[7]) @[rca.scala 33:34]
    node _c_comb_8_T_1 = or(_c_comb_8_T, g_comb[7]) @[rca.scala 33:46]
    c_comb[8] <= _c_comb_8_T_1 @[rca.scala 33:21]
    node _g_comb_8_T = bits(input.a_in, 8, 8) @[rca.scala 30:35]
    node _g_comb_8_T_1 = bits(input.b_in, 8, 8) @[rca.scala 30:51]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[rca.scala 30:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[8] <= _g_comb_8_T_3 @[rca.scala 30:21]
    node _p_comb_8_T = bits(input.a_in, 8, 8) @[rca.scala 31:35]
    node _p_comb_8_T_1 = bits(input.b_in, 8, 8) @[rca.scala 31:51]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[rca.scala 31:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[8] <= _p_comb_8_T_3 @[rca.scala 31:21]
    node _s_comb_8_T = xor(p_comb[8], c_comb[8]) @[rca.scala 32:34]
    s_comb[8] <= _s_comb_8_T @[rca.scala 32:21]
    node _c_comb_9_T = and(c_comb[8], p_comb[8]) @[rca.scala 33:34]
    node _c_comb_9_T_1 = or(_c_comb_9_T, g_comb[8]) @[rca.scala 33:46]
    c_comb[9] <= _c_comb_9_T_1 @[rca.scala 33:21]
    node _g_comb_9_T = bits(input.a_in, 9, 9) @[rca.scala 30:35]
    node _g_comb_9_T_1 = bits(input.b_in, 9, 9) @[rca.scala 30:51]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[rca.scala 30:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[9] <= _g_comb_9_T_3 @[rca.scala 30:21]
    node _p_comb_9_T = bits(input.a_in, 9, 9) @[rca.scala 31:35]
    node _p_comb_9_T_1 = bits(input.b_in, 9, 9) @[rca.scala 31:51]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[rca.scala 31:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[9] <= _p_comb_9_T_3 @[rca.scala 31:21]
    node _s_comb_9_T = xor(p_comb[9], c_comb[9]) @[rca.scala 32:34]
    s_comb[9] <= _s_comb_9_T @[rca.scala 32:21]
    node _c_comb_10_T = and(c_comb[9], p_comb[9]) @[rca.scala 33:34]
    node _c_comb_10_T_1 = or(_c_comb_10_T, g_comb[9]) @[rca.scala 33:46]
    c_comb[10] <= _c_comb_10_T_1 @[rca.scala 33:21]
    node _g_comb_10_T = bits(input.a_in, 10, 10) @[rca.scala 30:35]
    node _g_comb_10_T_1 = bits(input.b_in, 10, 10) @[rca.scala 30:51]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[rca.scala 30:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[10] <= _g_comb_10_T_3 @[rca.scala 30:21]
    node _p_comb_10_T = bits(input.a_in, 10, 10) @[rca.scala 31:35]
    node _p_comb_10_T_1 = bits(input.b_in, 10, 10) @[rca.scala 31:51]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[rca.scala 31:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[10] <= _p_comb_10_T_3 @[rca.scala 31:21]
    node _s_comb_10_T = xor(p_comb[10], c_comb[10]) @[rca.scala 32:34]
    s_comb[10] <= _s_comb_10_T @[rca.scala 32:21]
    node _c_comb_11_T = and(c_comb[10], p_comb[10]) @[rca.scala 33:34]
    node _c_comb_11_T_1 = or(_c_comb_11_T, g_comb[10]) @[rca.scala 33:46]
    c_comb[11] <= _c_comb_11_T_1 @[rca.scala 33:21]
    node _g_comb_11_T = bits(input.a_in, 11, 11) @[rca.scala 30:35]
    node _g_comb_11_T_1 = bits(input.b_in, 11, 11) @[rca.scala 30:51]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[rca.scala 30:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[11] <= _g_comb_11_T_3 @[rca.scala 30:21]
    node _p_comb_11_T = bits(input.a_in, 11, 11) @[rca.scala 31:35]
    node _p_comb_11_T_1 = bits(input.b_in, 11, 11) @[rca.scala 31:51]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[rca.scala 31:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[11] <= _p_comb_11_T_3 @[rca.scala 31:21]
    node _s_comb_11_T = xor(p_comb[11], c_comb[11]) @[rca.scala 32:34]
    s_comb[11] <= _s_comb_11_T @[rca.scala 32:21]
    node _c_comb_12_T = and(c_comb[11], p_comb[11]) @[rca.scala 33:34]
    node _c_comb_12_T_1 = or(_c_comb_12_T, g_comb[11]) @[rca.scala 33:46]
    c_comb[12] <= _c_comb_12_T_1 @[rca.scala 33:21]
    node _g_comb_12_T = bits(input.a_in, 12, 12) @[rca.scala 30:35]
    node _g_comb_12_T_1 = bits(input.b_in, 12, 12) @[rca.scala 30:51]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[rca.scala 30:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[12] <= _g_comb_12_T_3 @[rca.scala 30:21]
    node _p_comb_12_T = bits(input.a_in, 12, 12) @[rca.scala 31:35]
    node _p_comb_12_T_1 = bits(input.b_in, 12, 12) @[rca.scala 31:51]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[rca.scala 31:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[12] <= _p_comb_12_T_3 @[rca.scala 31:21]
    node _s_comb_12_T = xor(p_comb[12], c_comb[12]) @[rca.scala 32:34]
    s_comb[12] <= _s_comb_12_T @[rca.scala 32:21]
    node _c_comb_13_T = and(c_comb[12], p_comb[12]) @[rca.scala 33:34]
    node _c_comb_13_T_1 = or(_c_comb_13_T, g_comb[12]) @[rca.scala 33:46]
    c_comb[13] <= _c_comb_13_T_1 @[rca.scala 33:21]
    node _g_comb_13_T = bits(input.a_in, 13, 13) @[rca.scala 30:35]
    node _g_comb_13_T_1 = bits(input.b_in, 13, 13) @[rca.scala 30:51]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[rca.scala 30:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[13] <= _g_comb_13_T_3 @[rca.scala 30:21]
    node _p_comb_13_T = bits(input.a_in, 13, 13) @[rca.scala 31:35]
    node _p_comb_13_T_1 = bits(input.b_in, 13, 13) @[rca.scala 31:51]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[rca.scala 31:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[13] <= _p_comb_13_T_3 @[rca.scala 31:21]
    node _s_comb_13_T = xor(p_comb[13], c_comb[13]) @[rca.scala 32:34]
    s_comb[13] <= _s_comb_13_T @[rca.scala 32:21]
    node _c_comb_14_T = and(c_comb[13], p_comb[13]) @[rca.scala 33:34]
    node _c_comb_14_T_1 = or(_c_comb_14_T, g_comb[13]) @[rca.scala 33:46]
    c_comb[14] <= _c_comb_14_T_1 @[rca.scala 33:21]
    node _g_comb_14_T = bits(input.a_in, 14, 14) @[rca.scala 30:35]
    node _g_comb_14_T_1 = bits(input.b_in, 14, 14) @[rca.scala 30:51]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[rca.scala 30:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[14] <= _g_comb_14_T_3 @[rca.scala 30:21]
    node _p_comb_14_T = bits(input.a_in, 14, 14) @[rca.scala 31:35]
    node _p_comb_14_T_1 = bits(input.b_in, 14, 14) @[rca.scala 31:51]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[rca.scala 31:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[14] <= _p_comb_14_T_3 @[rca.scala 31:21]
    node _s_comb_14_T = xor(p_comb[14], c_comb[14]) @[rca.scala 32:34]
    s_comb[14] <= _s_comb_14_T @[rca.scala 32:21]
    node _c_comb_15_T = and(c_comb[14], p_comb[14]) @[rca.scala 33:34]
    node _c_comb_15_T_1 = or(_c_comb_15_T, g_comb[14]) @[rca.scala 33:46]
    c_comb[15] <= _c_comb_15_T_1 @[rca.scala 33:21]
    node _g_comb_15_T = bits(input.a_in, 15, 15) @[rca.scala 30:35]
    node _g_comb_15_T_1 = bits(input.b_in, 15, 15) @[rca.scala 30:51]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[rca.scala 30:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[15] <= _g_comb_15_T_3 @[rca.scala 30:21]
    node _p_comb_15_T = bits(input.a_in, 15, 15) @[rca.scala 31:35]
    node _p_comb_15_T_1 = bits(input.b_in, 15, 15) @[rca.scala 31:51]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[rca.scala 31:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[15] <= _p_comb_15_T_3 @[rca.scala 31:21]
    node _s_comb_15_T = xor(p_comb[15], c_comb[15]) @[rca.scala 32:34]
    s_comb[15] <= _s_comb_15_T @[rca.scala 32:21]
    node _c_comb_16_T = and(c_comb[15], p_comb[15]) @[rca.scala 33:34]
    node _c_comb_16_T_1 = or(_c_comb_16_T, g_comb[15]) @[rca.scala 33:46]
    c_comb[16] <= _c_comb_16_T_1 @[rca.scala 33:21]
    node output_S_lo_lo_lo = cat(s_comb[1], s_comb[0]) @[rca.scala 36:24]
    node output_S_lo_lo_hi = cat(s_comb[3], s_comb[2]) @[rca.scala 36:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[rca.scala 36:24]
    node output_S_lo_hi_lo = cat(s_comb[5], s_comb[4]) @[rca.scala 36:24]
    node output_S_lo_hi_hi = cat(s_comb[7], s_comb[6]) @[rca.scala 36:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[rca.scala 36:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[rca.scala 36:24]
    node output_S_hi_lo_lo = cat(s_comb[9], s_comb[8]) @[rca.scala 36:24]
    node output_S_hi_lo_hi = cat(s_comb[11], s_comb[10]) @[rca.scala 36:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[rca.scala 36:24]
    node output_S_hi_hi_lo = cat(s_comb[13], s_comb[12]) @[rca.scala 36:24]
    node output_S_hi_hi_hi = cat(s_comb[15], s_comb[14]) @[rca.scala 36:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[rca.scala 36:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[rca.scala 36:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[rca.scala 36:24]
    node _output_S_T_1 = asSInt(_output_S_T) @[rca.scala 36:31]
    output.S <= _output_S_T_1 @[rca.scala 36:14]
    node _output_C_T = asSInt(c_comb[16]) @[rca.scala 37:40]
    output.C <= _output_C_T @[rca.scala 37:14]

  module pp_compressor3_2 :
    input clock : Clock
    input reset : Reset
    output input : { flip pp0_in : SInt<16>, flip pp1_in : SInt<16>, flip pp2_in : SInt<16>}
    output output : { S : SInt<16>, C : SInt<16>}

    wire g_comb : UInt<1>[16] @[pp_compressor3_2.scala 22:22]
    wire p_comb : UInt<1>[16] @[pp_compressor3_2.scala 23:22]
    wire s_comb : UInt<1>[16] @[pp_compressor3_2.scala 24:22]
    wire c_comb : UInt<1>[16] @[pp_compressor3_2.scala 25:22]
    node _g_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 28:35]
    node _g_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 28:53]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[0] <= _g_comb_0_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 29:35]
    node _p_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 29:53]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[0] <= _p_comb_0_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 30:46]
    node _s_comb_0_T_1 = bits(_s_comb_0_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_0_T_2 = xor(p_comb[0], _s_comb_0_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[0] <= _s_comb_0_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 31:34]
    node _c_comb_0_T_1 = bits(_c_comb_0_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_0_T_2 = and(_c_comb_0_T_1, p_comb[0]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_0_T_3 = or(_c_comb_0_T_2, g_comb[0]) @[pp_compressor3_2.scala 31:57]
    c_comb[0] <= _c_comb_0_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 28:35]
    node _g_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 28:53]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[1] <= _g_comb_1_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 29:35]
    node _p_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 29:53]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[1] <= _p_comb_1_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 30:46]
    node _s_comb_1_T_1 = bits(_s_comb_1_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_1_T_2 = xor(p_comb[1], _s_comb_1_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[1] <= _s_comb_1_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 31:34]
    node _c_comb_1_T_1 = bits(_c_comb_1_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_1_T_2 = and(_c_comb_1_T_1, p_comb[1]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_1_T_3 = or(_c_comb_1_T_2, g_comb[1]) @[pp_compressor3_2.scala 31:57]
    c_comb[1] <= _c_comb_1_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 28:35]
    node _g_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 28:53]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[2] <= _g_comb_2_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 29:35]
    node _p_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 29:53]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[2] <= _p_comb_2_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 30:46]
    node _s_comb_2_T_1 = bits(_s_comb_2_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_2_T_2 = xor(p_comb[2], _s_comb_2_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[2] <= _s_comb_2_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 31:34]
    node _c_comb_2_T_1 = bits(_c_comb_2_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_2_T_2 = and(_c_comb_2_T_1, p_comb[2]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_2_T_3 = or(_c_comb_2_T_2, g_comb[2]) @[pp_compressor3_2.scala 31:57]
    c_comb[2] <= _c_comb_2_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 28:35]
    node _g_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 28:53]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[3] <= _g_comb_3_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 29:35]
    node _p_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 29:53]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[3] <= _p_comb_3_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 30:46]
    node _s_comb_3_T_1 = bits(_s_comb_3_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_3_T_2 = xor(p_comb[3], _s_comb_3_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[3] <= _s_comb_3_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 31:34]
    node _c_comb_3_T_1 = bits(_c_comb_3_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_3_T_2 = and(_c_comb_3_T_1, p_comb[3]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_3_T_3 = or(_c_comb_3_T_2, g_comb[3]) @[pp_compressor3_2.scala 31:57]
    c_comb[3] <= _c_comb_3_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 28:35]
    node _g_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 28:53]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[4] <= _g_comb_4_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 29:35]
    node _p_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 29:53]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[4] <= _p_comb_4_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 30:46]
    node _s_comb_4_T_1 = bits(_s_comb_4_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_4_T_2 = xor(p_comb[4], _s_comb_4_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[4] <= _s_comb_4_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 31:34]
    node _c_comb_4_T_1 = bits(_c_comb_4_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_4_T_2 = and(_c_comb_4_T_1, p_comb[4]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_4_T_3 = or(_c_comb_4_T_2, g_comb[4]) @[pp_compressor3_2.scala 31:57]
    c_comb[4] <= _c_comb_4_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 28:35]
    node _g_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 28:53]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[5] <= _g_comb_5_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 29:35]
    node _p_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 29:53]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[5] <= _p_comb_5_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 30:46]
    node _s_comb_5_T_1 = bits(_s_comb_5_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_5_T_2 = xor(p_comb[5], _s_comb_5_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[5] <= _s_comb_5_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 31:34]
    node _c_comb_5_T_1 = bits(_c_comb_5_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_5_T_2 = and(_c_comb_5_T_1, p_comb[5]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_5_T_3 = or(_c_comb_5_T_2, g_comb[5]) @[pp_compressor3_2.scala 31:57]
    c_comb[5] <= _c_comb_5_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 28:35]
    node _g_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 28:53]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[6] <= _g_comb_6_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 29:35]
    node _p_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 29:53]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[6] <= _p_comb_6_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 30:46]
    node _s_comb_6_T_1 = bits(_s_comb_6_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_6_T_2 = xor(p_comb[6], _s_comb_6_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[6] <= _s_comb_6_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 31:34]
    node _c_comb_6_T_1 = bits(_c_comb_6_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_6_T_2 = and(_c_comb_6_T_1, p_comb[6]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_6_T_3 = or(_c_comb_6_T_2, g_comb[6]) @[pp_compressor3_2.scala 31:57]
    c_comb[6] <= _c_comb_6_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 28:35]
    node _g_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 28:53]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[7] <= _g_comb_7_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 29:35]
    node _p_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 29:53]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[7] <= _p_comb_7_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 30:46]
    node _s_comb_7_T_1 = bits(_s_comb_7_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_7_T_2 = xor(p_comb[7], _s_comb_7_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[7] <= _s_comb_7_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 31:34]
    node _c_comb_7_T_1 = bits(_c_comb_7_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_7_T_2 = and(_c_comb_7_T_1, p_comb[7]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_7_T_3 = or(_c_comb_7_T_2, g_comb[7]) @[pp_compressor3_2.scala 31:57]
    c_comb[7] <= _c_comb_7_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 28:35]
    node _g_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 28:53]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[8] <= _g_comb_8_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 29:35]
    node _p_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 29:53]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[8] <= _p_comb_8_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 30:46]
    node _s_comb_8_T_1 = bits(_s_comb_8_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_8_T_2 = xor(p_comb[8], _s_comb_8_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[8] <= _s_comb_8_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 31:34]
    node _c_comb_8_T_1 = bits(_c_comb_8_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_8_T_2 = and(_c_comb_8_T_1, p_comb[8]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_8_T_3 = or(_c_comb_8_T_2, g_comb[8]) @[pp_compressor3_2.scala 31:57]
    c_comb[8] <= _c_comb_8_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 28:35]
    node _g_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 28:53]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[9] <= _g_comb_9_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 29:35]
    node _p_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 29:53]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[9] <= _p_comb_9_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 30:46]
    node _s_comb_9_T_1 = bits(_s_comb_9_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_9_T_2 = xor(p_comb[9], _s_comb_9_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[9] <= _s_comb_9_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 31:34]
    node _c_comb_9_T_1 = bits(_c_comb_9_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_9_T_2 = and(_c_comb_9_T_1, p_comb[9]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_9_T_3 = or(_c_comb_9_T_2, g_comb[9]) @[pp_compressor3_2.scala 31:57]
    c_comb[9] <= _c_comb_9_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 28:35]
    node _g_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 28:53]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[10] <= _g_comb_10_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 29:35]
    node _p_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 29:53]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[10] <= _p_comb_10_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 30:46]
    node _s_comb_10_T_1 = bits(_s_comb_10_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_10_T_2 = xor(p_comb[10], _s_comb_10_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[10] <= _s_comb_10_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 31:34]
    node _c_comb_10_T_1 = bits(_c_comb_10_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_10_T_2 = and(_c_comb_10_T_1, p_comb[10]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_10_T_3 = or(_c_comb_10_T_2, g_comb[10]) @[pp_compressor3_2.scala 31:57]
    c_comb[10] <= _c_comb_10_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 28:35]
    node _g_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 28:53]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[11] <= _g_comb_11_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 29:35]
    node _p_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 29:53]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[11] <= _p_comb_11_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 30:46]
    node _s_comb_11_T_1 = bits(_s_comb_11_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_11_T_2 = xor(p_comb[11], _s_comb_11_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[11] <= _s_comb_11_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 31:34]
    node _c_comb_11_T_1 = bits(_c_comb_11_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_11_T_2 = and(_c_comb_11_T_1, p_comb[11]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_11_T_3 = or(_c_comb_11_T_2, g_comb[11]) @[pp_compressor3_2.scala 31:57]
    c_comb[11] <= _c_comb_11_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 28:35]
    node _g_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 28:53]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[12] <= _g_comb_12_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 29:35]
    node _p_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 29:53]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[12] <= _p_comb_12_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 30:46]
    node _s_comb_12_T_1 = bits(_s_comb_12_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_12_T_2 = xor(p_comb[12], _s_comb_12_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[12] <= _s_comb_12_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 31:34]
    node _c_comb_12_T_1 = bits(_c_comb_12_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_12_T_2 = and(_c_comb_12_T_1, p_comb[12]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_12_T_3 = or(_c_comb_12_T_2, g_comb[12]) @[pp_compressor3_2.scala 31:57]
    c_comb[12] <= _c_comb_12_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 28:35]
    node _g_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 28:53]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[13] <= _g_comb_13_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 29:35]
    node _p_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 29:53]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[13] <= _p_comb_13_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 30:46]
    node _s_comb_13_T_1 = bits(_s_comb_13_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_13_T_2 = xor(p_comb[13], _s_comb_13_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[13] <= _s_comb_13_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 31:34]
    node _c_comb_13_T_1 = bits(_c_comb_13_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_13_T_2 = and(_c_comb_13_T_1, p_comb[13]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_13_T_3 = or(_c_comb_13_T_2, g_comb[13]) @[pp_compressor3_2.scala 31:57]
    c_comb[13] <= _c_comb_13_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 28:35]
    node _g_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 28:53]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[14] <= _g_comb_14_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 29:35]
    node _p_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 29:53]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[14] <= _p_comb_14_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 30:46]
    node _s_comb_14_T_1 = bits(_s_comb_14_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_14_T_2 = xor(p_comb[14], _s_comb_14_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[14] <= _s_comb_14_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 31:34]
    node _c_comb_14_T_1 = bits(_c_comb_14_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_14_T_2 = and(_c_comb_14_T_1, p_comb[14]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_14_T_3 = or(_c_comb_14_T_2, g_comb[14]) @[pp_compressor3_2.scala 31:57]
    c_comb[14] <= _c_comb_14_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 28:35]
    node _g_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 28:53]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[15] <= _g_comb_15_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 29:35]
    node _p_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 29:53]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[15] <= _p_comb_15_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 30:46]
    node _s_comb_15_T_1 = bits(_s_comb_15_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_15_T_2 = xor(p_comb[15], _s_comb_15_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[15] <= _s_comb_15_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 31:34]
    node _c_comb_15_T_1 = bits(_c_comb_15_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_15_T_2 = and(_c_comb_15_T_1, p_comb[15]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_15_T_3 = or(_c_comb_15_T_2, g_comb[15]) @[pp_compressor3_2.scala 31:57]
    c_comb[15] <= _c_comb_15_T_3 @[pp_compressor3_2.scala 31:19]
    node output_S_lo_lo_lo = cat(s_comb[1], s_comb[0]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo_hi = cat(s_comb[3], s_comb[2]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_lo = cat(s_comb[5], s_comb[4]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_hi = cat(s_comb[7], s_comb[6]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_lo = cat(s_comb[9], s_comb[8]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_hi = cat(s_comb[11], s_comb[10]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_lo = cat(s_comb[13], s_comb[12]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_hi = cat(s_comb[15], s_comb[14]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T_1 = asSInt(_output_S_T) @[pp_compressor3_2.scala 34:31]
    output.S <= _output_S_T_1 @[pp_compressor3_2.scala 34:14]
    node output_C_lo_lo_lo = cat(c_comb[1], c_comb[0]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo_hi = cat(c_comb[3], c_comb[2]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo = cat(output_C_lo_lo_hi, output_C_lo_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_lo = cat(c_comb[5], c_comb[4]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_hi = cat(c_comb[7], c_comb[6]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi = cat(output_C_lo_hi_hi, output_C_lo_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo = cat(output_C_lo_hi, output_C_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_lo = cat(c_comb[9], c_comb[8]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_hi = cat(c_comb[11], c_comb[10]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo = cat(output_C_hi_lo_hi, output_C_hi_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_lo = cat(c_comb[13], c_comb[12]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_hi = cat(c_comb[15], c_comb[14]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi = cat(output_C_hi_hi_hi, output_C_hi_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi = cat(output_C_hi_hi, output_C_hi_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T = cat(output_C_hi, output_C_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T_1 = bits(_output_C_T, 14, 0) @[pp_compressor3_2.scala 35:36]
    node _output_C_T_2 = cat(_output_C_T_1, UInt<1>("h0")) @[Cat.scala 33:92]
    node _output_C_T_3 = asSInt(_output_C_T_2) @[pp_compressor3_2.scala 35:61]
    output.C <= _output_C_T_3 @[pp_compressor3_2.scala 35:14]

  module pp_compressor3_2_1 :
    input clock : Clock
    input reset : Reset
    output input : { flip pp0_in : SInt<16>, flip pp1_in : SInt<16>, flip pp2_in : SInt<16>}
    output output : { S : SInt<16>, C : SInt<16>}

    wire g_comb : UInt<1>[16] @[pp_compressor3_2.scala 22:22]
    wire p_comb : UInt<1>[16] @[pp_compressor3_2.scala 23:22]
    wire s_comb : UInt<1>[16] @[pp_compressor3_2.scala 24:22]
    wire c_comb : UInt<1>[16] @[pp_compressor3_2.scala 25:22]
    node _g_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 28:35]
    node _g_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 28:53]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[0] <= _g_comb_0_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 29:35]
    node _p_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 29:53]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[0] <= _p_comb_0_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 30:46]
    node _s_comb_0_T_1 = bits(_s_comb_0_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_0_T_2 = xor(p_comb[0], _s_comb_0_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[0] <= _s_comb_0_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 31:34]
    node _c_comb_0_T_1 = bits(_c_comb_0_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_0_T_2 = and(_c_comb_0_T_1, p_comb[0]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_0_T_3 = or(_c_comb_0_T_2, g_comb[0]) @[pp_compressor3_2.scala 31:57]
    c_comb[0] <= _c_comb_0_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 28:35]
    node _g_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 28:53]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[1] <= _g_comb_1_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 29:35]
    node _p_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 29:53]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[1] <= _p_comb_1_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 30:46]
    node _s_comb_1_T_1 = bits(_s_comb_1_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_1_T_2 = xor(p_comb[1], _s_comb_1_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[1] <= _s_comb_1_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 31:34]
    node _c_comb_1_T_1 = bits(_c_comb_1_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_1_T_2 = and(_c_comb_1_T_1, p_comb[1]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_1_T_3 = or(_c_comb_1_T_2, g_comb[1]) @[pp_compressor3_2.scala 31:57]
    c_comb[1] <= _c_comb_1_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 28:35]
    node _g_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 28:53]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[2] <= _g_comb_2_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 29:35]
    node _p_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 29:53]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[2] <= _p_comb_2_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 30:46]
    node _s_comb_2_T_1 = bits(_s_comb_2_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_2_T_2 = xor(p_comb[2], _s_comb_2_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[2] <= _s_comb_2_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 31:34]
    node _c_comb_2_T_1 = bits(_c_comb_2_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_2_T_2 = and(_c_comb_2_T_1, p_comb[2]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_2_T_3 = or(_c_comb_2_T_2, g_comb[2]) @[pp_compressor3_2.scala 31:57]
    c_comb[2] <= _c_comb_2_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 28:35]
    node _g_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 28:53]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[3] <= _g_comb_3_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 29:35]
    node _p_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 29:53]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[3] <= _p_comb_3_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 30:46]
    node _s_comb_3_T_1 = bits(_s_comb_3_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_3_T_2 = xor(p_comb[3], _s_comb_3_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[3] <= _s_comb_3_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 31:34]
    node _c_comb_3_T_1 = bits(_c_comb_3_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_3_T_2 = and(_c_comb_3_T_1, p_comb[3]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_3_T_3 = or(_c_comb_3_T_2, g_comb[3]) @[pp_compressor3_2.scala 31:57]
    c_comb[3] <= _c_comb_3_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 28:35]
    node _g_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 28:53]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[4] <= _g_comb_4_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 29:35]
    node _p_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 29:53]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[4] <= _p_comb_4_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 30:46]
    node _s_comb_4_T_1 = bits(_s_comb_4_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_4_T_2 = xor(p_comb[4], _s_comb_4_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[4] <= _s_comb_4_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 31:34]
    node _c_comb_4_T_1 = bits(_c_comb_4_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_4_T_2 = and(_c_comb_4_T_1, p_comb[4]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_4_T_3 = or(_c_comb_4_T_2, g_comb[4]) @[pp_compressor3_2.scala 31:57]
    c_comb[4] <= _c_comb_4_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 28:35]
    node _g_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 28:53]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[5] <= _g_comb_5_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 29:35]
    node _p_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 29:53]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[5] <= _p_comb_5_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 30:46]
    node _s_comb_5_T_1 = bits(_s_comb_5_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_5_T_2 = xor(p_comb[5], _s_comb_5_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[5] <= _s_comb_5_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 31:34]
    node _c_comb_5_T_1 = bits(_c_comb_5_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_5_T_2 = and(_c_comb_5_T_1, p_comb[5]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_5_T_3 = or(_c_comb_5_T_2, g_comb[5]) @[pp_compressor3_2.scala 31:57]
    c_comb[5] <= _c_comb_5_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 28:35]
    node _g_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 28:53]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[6] <= _g_comb_6_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 29:35]
    node _p_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 29:53]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[6] <= _p_comb_6_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 30:46]
    node _s_comb_6_T_1 = bits(_s_comb_6_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_6_T_2 = xor(p_comb[6], _s_comb_6_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[6] <= _s_comb_6_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 31:34]
    node _c_comb_6_T_1 = bits(_c_comb_6_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_6_T_2 = and(_c_comb_6_T_1, p_comb[6]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_6_T_3 = or(_c_comb_6_T_2, g_comb[6]) @[pp_compressor3_2.scala 31:57]
    c_comb[6] <= _c_comb_6_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 28:35]
    node _g_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 28:53]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[7] <= _g_comb_7_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 29:35]
    node _p_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 29:53]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[7] <= _p_comb_7_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 30:46]
    node _s_comb_7_T_1 = bits(_s_comb_7_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_7_T_2 = xor(p_comb[7], _s_comb_7_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[7] <= _s_comb_7_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 31:34]
    node _c_comb_7_T_1 = bits(_c_comb_7_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_7_T_2 = and(_c_comb_7_T_1, p_comb[7]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_7_T_3 = or(_c_comb_7_T_2, g_comb[7]) @[pp_compressor3_2.scala 31:57]
    c_comb[7] <= _c_comb_7_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 28:35]
    node _g_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 28:53]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[8] <= _g_comb_8_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 29:35]
    node _p_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 29:53]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[8] <= _p_comb_8_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 30:46]
    node _s_comb_8_T_1 = bits(_s_comb_8_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_8_T_2 = xor(p_comb[8], _s_comb_8_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[8] <= _s_comb_8_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 31:34]
    node _c_comb_8_T_1 = bits(_c_comb_8_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_8_T_2 = and(_c_comb_8_T_1, p_comb[8]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_8_T_3 = or(_c_comb_8_T_2, g_comb[8]) @[pp_compressor3_2.scala 31:57]
    c_comb[8] <= _c_comb_8_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 28:35]
    node _g_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 28:53]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[9] <= _g_comb_9_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 29:35]
    node _p_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 29:53]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[9] <= _p_comb_9_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 30:46]
    node _s_comb_9_T_1 = bits(_s_comb_9_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_9_T_2 = xor(p_comb[9], _s_comb_9_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[9] <= _s_comb_9_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 31:34]
    node _c_comb_9_T_1 = bits(_c_comb_9_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_9_T_2 = and(_c_comb_9_T_1, p_comb[9]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_9_T_3 = or(_c_comb_9_T_2, g_comb[9]) @[pp_compressor3_2.scala 31:57]
    c_comb[9] <= _c_comb_9_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 28:35]
    node _g_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 28:53]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[10] <= _g_comb_10_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 29:35]
    node _p_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 29:53]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[10] <= _p_comb_10_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 30:46]
    node _s_comb_10_T_1 = bits(_s_comb_10_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_10_T_2 = xor(p_comb[10], _s_comb_10_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[10] <= _s_comb_10_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 31:34]
    node _c_comb_10_T_1 = bits(_c_comb_10_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_10_T_2 = and(_c_comb_10_T_1, p_comb[10]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_10_T_3 = or(_c_comb_10_T_2, g_comb[10]) @[pp_compressor3_2.scala 31:57]
    c_comb[10] <= _c_comb_10_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 28:35]
    node _g_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 28:53]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[11] <= _g_comb_11_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 29:35]
    node _p_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 29:53]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[11] <= _p_comb_11_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 30:46]
    node _s_comb_11_T_1 = bits(_s_comb_11_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_11_T_2 = xor(p_comb[11], _s_comb_11_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[11] <= _s_comb_11_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 31:34]
    node _c_comb_11_T_1 = bits(_c_comb_11_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_11_T_2 = and(_c_comb_11_T_1, p_comb[11]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_11_T_3 = or(_c_comb_11_T_2, g_comb[11]) @[pp_compressor3_2.scala 31:57]
    c_comb[11] <= _c_comb_11_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 28:35]
    node _g_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 28:53]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[12] <= _g_comb_12_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 29:35]
    node _p_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 29:53]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[12] <= _p_comb_12_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 30:46]
    node _s_comb_12_T_1 = bits(_s_comb_12_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_12_T_2 = xor(p_comb[12], _s_comb_12_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[12] <= _s_comb_12_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 31:34]
    node _c_comb_12_T_1 = bits(_c_comb_12_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_12_T_2 = and(_c_comb_12_T_1, p_comb[12]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_12_T_3 = or(_c_comb_12_T_2, g_comb[12]) @[pp_compressor3_2.scala 31:57]
    c_comb[12] <= _c_comb_12_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 28:35]
    node _g_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 28:53]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[13] <= _g_comb_13_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 29:35]
    node _p_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 29:53]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[13] <= _p_comb_13_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 30:46]
    node _s_comb_13_T_1 = bits(_s_comb_13_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_13_T_2 = xor(p_comb[13], _s_comb_13_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[13] <= _s_comb_13_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 31:34]
    node _c_comb_13_T_1 = bits(_c_comb_13_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_13_T_2 = and(_c_comb_13_T_1, p_comb[13]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_13_T_3 = or(_c_comb_13_T_2, g_comb[13]) @[pp_compressor3_2.scala 31:57]
    c_comb[13] <= _c_comb_13_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 28:35]
    node _g_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 28:53]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[14] <= _g_comb_14_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 29:35]
    node _p_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 29:53]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[14] <= _p_comb_14_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 30:46]
    node _s_comb_14_T_1 = bits(_s_comb_14_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_14_T_2 = xor(p_comb[14], _s_comb_14_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[14] <= _s_comb_14_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 31:34]
    node _c_comb_14_T_1 = bits(_c_comb_14_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_14_T_2 = and(_c_comb_14_T_1, p_comb[14]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_14_T_3 = or(_c_comb_14_T_2, g_comb[14]) @[pp_compressor3_2.scala 31:57]
    c_comb[14] <= _c_comb_14_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 28:35]
    node _g_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 28:53]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[15] <= _g_comb_15_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 29:35]
    node _p_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 29:53]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[15] <= _p_comb_15_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 30:46]
    node _s_comb_15_T_1 = bits(_s_comb_15_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_15_T_2 = xor(p_comb[15], _s_comb_15_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[15] <= _s_comb_15_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 31:34]
    node _c_comb_15_T_1 = bits(_c_comb_15_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_15_T_2 = and(_c_comb_15_T_1, p_comb[15]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_15_T_3 = or(_c_comb_15_T_2, g_comb[15]) @[pp_compressor3_2.scala 31:57]
    c_comb[15] <= _c_comb_15_T_3 @[pp_compressor3_2.scala 31:19]
    node output_S_lo_lo_lo = cat(s_comb[1], s_comb[0]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo_hi = cat(s_comb[3], s_comb[2]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_lo = cat(s_comb[5], s_comb[4]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_hi = cat(s_comb[7], s_comb[6]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_lo = cat(s_comb[9], s_comb[8]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_hi = cat(s_comb[11], s_comb[10]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_lo = cat(s_comb[13], s_comb[12]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_hi = cat(s_comb[15], s_comb[14]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T_1 = asSInt(_output_S_T) @[pp_compressor3_2.scala 34:31]
    output.S <= _output_S_T_1 @[pp_compressor3_2.scala 34:14]
    node output_C_lo_lo_lo = cat(c_comb[1], c_comb[0]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo_hi = cat(c_comb[3], c_comb[2]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo = cat(output_C_lo_lo_hi, output_C_lo_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_lo = cat(c_comb[5], c_comb[4]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_hi = cat(c_comb[7], c_comb[6]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi = cat(output_C_lo_hi_hi, output_C_lo_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo = cat(output_C_lo_hi, output_C_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_lo = cat(c_comb[9], c_comb[8]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_hi = cat(c_comb[11], c_comb[10]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo = cat(output_C_hi_lo_hi, output_C_hi_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_lo = cat(c_comb[13], c_comb[12]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_hi = cat(c_comb[15], c_comb[14]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi = cat(output_C_hi_hi_hi, output_C_hi_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi = cat(output_C_hi_hi, output_C_hi_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T = cat(output_C_hi, output_C_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T_1 = bits(_output_C_T, 14, 0) @[pp_compressor3_2.scala 35:36]
    node _output_C_T_2 = cat(_output_C_T_1, UInt<1>("h0")) @[Cat.scala 33:92]
    node _output_C_T_3 = asSInt(_output_C_T_2) @[pp_compressor3_2.scala 35:61]
    output.C <= _output_C_T_3 @[pp_compressor3_2.scala 35:14]

  module pp_compressor3_2_2 :
    input clock : Clock
    input reset : Reset
    output input : { flip pp0_in : SInt<16>, flip pp1_in : SInt<16>, flip pp2_in : SInt<16>}
    output output : { S : SInt<16>, C : SInt<16>}

    wire g_comb : UInt<1>[16] @[pp_compressor3_2.scala 22:22]
    wire p_comb : UInt<1>[16] @[pp_compressor3_2.scala 23:22]
    wire s_comb : UInt<1>[16] @[pp_compressor3_2.scala 24:22]
    wire c_comb : UInt<1>[16] @[pp_compressor3_2.scala 25:22]
    node _g_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 28:35]
    node _g_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 28:53]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[0] <= _g_comb_0_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 29:35]
    node _p_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 29:53]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[0] <= _p_comb_0_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 30:46]
    node _s_comb_0_T_1 = bits(_s_comb_0_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_0_T_2 = xor(p_comb[0], _s_comb_0_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[0] <= _s_comb_0_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 31:34]
    node _c_comb_0_T_1 = bits(_c_comb_0_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_0_T_2 = and(_c_comb_0_T_1, p_comb[0]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_0_T_3 = or(_c_comb_0_T_2, g_comb[0]) @[pp_compressor3_2.scala 31:57]
    c_comb[0] <= _c_comb_0_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 28:35]
    node _g_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 28:53]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[1] <= _g_comb_1_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 29:35]
    node _p_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 29:53]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[1] <= _p_comb_1_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 30:46]
    node _s_comb_1_T_1 = bits(_s_comb_1_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_1_T_2 = xor(p_comb[1], _s_comb_1_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[1] <= _s_comb_1_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 31:34]
    node _c_comb_1_T_1 = bits(_c_comb_1_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_1_T_2 = and(_c_comb_1_T_1, p_comb[1]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_1_T_3 = or(_c_comb_1_T_2, g_comb[1]) @[pp_compressor3_2.scala 31:57]
    c_comb[1] <= _c_comb_1_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 28:35]
    node _g_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 28:53]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[2] <= _g_comb_2_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 29:35]
    node _p_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 29:53]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[2] <= _p_comb_2_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 30:46]
    node _s_comb_2_T_1 = bits(_s_comb_2_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_2_T_2 = xor(p_comb[2], _s_comb_2_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[2] <= _s_comb_2_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 31:34]
    node _c_comb_2_T_1 = bits(_c_comb_2_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_2_T_2 = and(_c_comb_2_T_1, p_comb[2]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_2_T_3 = or(_c_comb_2_T_2, g_comb[2]) @[pp_compressor3_2.scala 31:57]
    c_comb[2] <= _c_comb_2_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 28:35]
    node _g_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 28:53]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[3] <= _g_comb_3_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 29:35]
    node _p_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 29:53]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[3] <= _p_comb_3_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 30:46]
    node _s_comb_3_T_1 = bits(_s_comb_3_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_3_T_2 = xor(p_comb[3], _s_comb_3_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[3] <= _s_comb_3_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 31:34]
    node _c_comb_3_T_1 = bits(_c_comb_3_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_3_T_2 = and(_c_comb_3_T_1, p_comb[3]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_3_T_3 = or(_c_comb_3_T_2, g_comb[3]) @[pp_compressor3_2.scala 31:57]
    c_comb[3] <= _c_comb_3_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 28:35]
    node _g_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 28:53]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[4] <= _g_comb_4_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 29:35]
    node _p_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 29:53]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[4] <= _p_comb_4_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 30:46]
    node _s_comb_4_T_1 = bits(_s_comb_4_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_4_T_2 = xor(p_comb[4], _s_comb_4_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[4] <= _s_comb_4_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 31:34]
    node _c_comb_4_T_1 = bits(_c_comb_4_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_4_T_2 = and(_c_comb_4_T_1, p_comb[4]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_4_T_3 = or(_c_comb_4_T_2, g_comb[4]) @[pp_compressor3_2.scala 31:57]
    c_comb[4] <= _c_comb_4_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 28:35]
    node _g_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 28:53]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[5] <= _g_comb_5_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 29:35]
    node _p_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 29:53]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[5] <= _p_comb_5_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 30:46]
    node _s_comb_5_T_1 = bits(_s_comb_5_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_5_T_2 = xor(p_comb[5], _s_comb_5_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[5] <= _s_comb_5_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 31:34]
    node _c_comb_5_T_1 = bits(_c_comb_5_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_5_T_2 = and(_c_comb_5_T_1, p_comb[5]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_5_T_3 = or(_c_comb_5_T_2, g_comb[5]) @[pp_compressor3_2.scala 31:57]
    c_comb[5] <= _c_comb_5_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 28:35]
    node _g_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 28:53]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[6] <= _g_comb_6_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 29:35]
    node _p_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 29:53]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[6] <= _p_comb_6_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 30:46]
    node _s_comb_6_T_1 = bits(_s_comb_6_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_6_T_2 = xor(p_comb[6], _s_comb_6_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[6] <= _s_comb_6_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 31:34]
    node _c_comb_6_T_1 = bits(_c_comb_6_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_6_T_2 = and(_c_comb_6_T_1, p_comb[6]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_6_T_3 = or(_c_comb_6_T_2, g_comb[6]) @[pp_compressor3_2.scala 31:57]
    c_comb[6] <= _c_comb_6_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 28:35]
    node _g_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 28:53]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[7] <= _g_comb_7_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 29:35]
    node _p_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 29:53]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[7] <= _p_comb_7_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 30:46]
    node _s_comb_7_T_1 = bits(_s_comb_7_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_7_T_2 = xor(p_comb[7], _s_comb_7_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[7] <= _s_comb_7_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 31:34]
    node _c_comb_7_T_1 = bits(_c_comb_7_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_7_T_2 = and(_c_comb_7_T_1, p_comb[7]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_7_T_3 = or(_c_comb_7_T_2, g_comb[7]) @[pp_compressor3_2.scala 31:57]
    c_comb[7] <= _c_comb_7_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 28:35]
    node _g_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 28:53]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[8] <= _g_comb_8_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 29:35]
    node _p_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 29:53]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[8] <= _p_comb_8_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 30:46]
    node _s_comb_8_T_1 = bits(_s_comb_8_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_8_T_2 = xor(p_comb[8], _s_comb_8_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[8] <= _s_comb_8_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 31:34]
    node _c_comb_8_T_1 = bits(_c_comb_8_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_8_T_2 = and(_c_comb_8_T_1, p_comb[8]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_8_T_3 = or(_c_comb_8_T_2, g_comb[8]) @[pp_compressor3_2.scala 31:57]
    c_comb[8] <= _c_comb_8_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 28:35]
    node _g_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 28:53]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[9] <= _g_comb_9_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 29:35]
    node _p_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 29:53]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[9] <= _p_comb_9_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 30:46]
    node _s_comb_9_T_1 = bits(_s_comb_9_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_9_T_2 = xor(p_comb[9], _s_comb_9_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[9] <= _s_comb_9_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 31:34]
    node _c_comb_9_T_1 = bits(_c_comb_9_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_9_T_2 = and(_c_comb_9_T_1, p_comb[9]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_9_T_3 = or(_c_comb_9_T_2, g_comb[9]) @[pp_compressor3_2.scala 31:57]
    c_comb[9] <= _c_comb_9_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 28:35]
    node _g_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 28:53]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[10] <= _g_comb_10_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 29:35]
    node _p_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 29:53]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[10] <= _p_comb_10_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 30:46]
    node _s_comb_10_T_1 = bits(_s_comb_10_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_10_T_2 = xor(p_comb[10], _s_comb_10_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[10] <= _s_comb_10_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 31:34]
    node _c_comb_10_T_1 = bits(_c_comb_10_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_10_T_2 = and(_c_comb_10_T_1, p_comb[10]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_10_T_3 = or(_c_comb_10_T_2, g_comb[10]) @[pp_compressor3_2.scala 31:57]
    c_comb[10] <= _c_comb_10_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 28:35]
    node _g_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 28:53]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[11] <= _g_comb_11_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 29:35]
    node _p_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 29:53]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[11] <= _p_comb_11_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 30:46]
    node _s_comb_11_T_1 = bits(_s_comb_11_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_11_T_2 = xor(p_comb[11], _s_comb_11_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[11] <= _s_comb_11_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 31:34]
    node _c_comb_11_T_1 = bits(_c_comb_11_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_11_T_2 = and(_c_comb_11_T_1, p_comb[11]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_11_T_3 = or(_c_comb_11_T_2, g_comb[11]) @[pp_compressor3_2.scala 31:57]
    c_comb[11] <= _c_comb_11_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 28:35]
    node _g_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 28:53]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[12] <= _g_comb_12_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 29:35]
    node _p_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 29:53]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[12] <= _p_comb_12_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 30:46]
    node _s_comb_12_T_1 = bits(_s_comb_12_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_12_T_2 = xor(p_comb[12], _s_comb_12_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[12] <= _s_comb_12_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 31:34]
    node _c_comb_12_T_1 = bits(_c_comb_12_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_12_T_2 = and(_c_comb_12_T_1, p_comb[12]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_12_T_3 = or(_c_comb_12_T_2, g_comb[12]) @[pp_compressor3_2.scala 31:57]
    c_comb[12] <= _c_comb_12_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 28:35]
    node _g_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 28:53]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[13] <= _g_comb_13_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 29:35]
    node _p_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 29:53]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[13] <= _p_comb_13_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 30:46]
    node _s_comb_13_T_1 = bits(_s_comb_13_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_13_T_2 = xor(p_comb[13], _s_comb_13_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[13] <= _s_comb_13_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 31:34]
    node _c_comb_13_T_1 = bits(_c_comb_13_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_13_T_2 = and(_c_comb_13_T_1, p_comb[13]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_13_T_3 = or(_c_comb_13_T_2, g_comb[13]) @[pp_compressor3_2.scala 31:57]
    c_comb[13] <= _c_comb_13_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 28:35]
    node _g_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 28:53]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[14] <= _g_comb_14_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 29:35]
    node _p_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 29:53]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[14] <= _p_comb_14_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 30:46]
    node _s_comb_14_T_1 = bits(_s_comb_14_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_14_T_2 = xor(p_comb[14], _s_comb_14_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[14] <= _s_comb_14_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 31:34]
    node _c_comb_14_T_1 = bits(_c_comb_14_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_14_T_2 = and(_c_comb_14_T_1, p_comb[14]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_14_T_3 = or(_c_comb_14_T_2, g_comb[14]) @[pp_compressor3_2.scala 31:57]
    c_comb[14] <= _c_comb_14_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 28:35]
    node _g_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 28:53]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[15] <= _g_comb_15_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 29:35]
    node _p_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 29:53]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[15] <= _p_comb_15_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 30:46]
    node _s_comb_15_T_1 = bits(_s_comb_15_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_15_T_2 = xor(p_comb[15], _s_comb_15_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[15] <= _s_comb_15_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 31:34]
    node _c_comb_15_T_1 = bits(_c_comb_15_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_15_T_2 = and(_c_comb_15_T_1, p_comb[15]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_15_T_3 = or(_c_comb_15_T_2, g_comb[15]) @[pp_compressor3_2.scala 31:57]
    c_comb[15] <= _c_comb_15_T_3 @[pp_compressor3_2.scala 31:19]
    node output_S_lo_lo_lo = cat(s_comb[1], s_comb[0]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo_hi = cat(s_comb[3], s_comb[2]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_lo = cat(s_comb[5], s_comb[4]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_hi = cat(s_comb[7], s_comb[6]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_lo = cat(s_comb[9], s_comb[8]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_hi = cat(s_comb[11], s_comb[10]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_lo = cat(s_comb[13], s_comb[12]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_hi = cat(s_comb[15], s_comb[14]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T_1 = asSInt(_output_S_T) @[pp_compressor3_2.scala 34:31]
    output.S <= _output_S_T_1 @[pp_compressor3_2.scala 34:14]
    node output_C_lo_lo_lo = cat(c_comb[1], c_comb[0]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo_hi = cat(c_comb[3], c_comb[2]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo = cat(output_C_lo_lo_hi, output_C_lo_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_lo = cat(c_comb[5], c_comb[4]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_hi = cat(c_comb[7], c_comb[6]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi = cat(output_C_lo_hi_hi, output_C_lo_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo = cat(output_C_lo_hi, output_C_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_lo = cat(c_comb[9], c_comb[8]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_hi = cat(c_comb[11], c_comb[10]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo = cat(output_C_hi_lo_hi, output_C_hi_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_lo = cat(c_comb[13], c_comb[12]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_hi = cat(c_comb[15], c_comb[14]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi = cat(output_C_hi_hi_hi, output_C_hi_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi = cat(output_C_hi_hi, output_C_hi_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T = cat(output_C_hi, output_C_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T_1 = bits(_output_C_T, 14, 0) @[pp_compressor3_2.scala 35:36]
    node _output_C_T_2 = cat(_output_C_T_1, UInt<1>("h0")) @[Cat.scala 33:92]
    node _output_C_T_3 = asSInt(_output_C_T_2) @[pp_compressor3_2.scala 35:61]
    output.C <= _output_C_T_3 @[pp_compressor3_2.scala 35:14]

  module wallaceTree :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip data_i : SInt<16>[5], data_o : SInt<16>}

    inst rca of RCA @[wallace_tree.scala 13:19]
    rca.clock <= clock
    rca.reset <= reset
    wire _rca_in_WIRE : SInt<16>[2] @[wallace_tree.scala 52:32]
    _rca_in_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 52:32]
    _rca_in_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 52:32]
    wire rca_in : SInt<16>[2]
    rca_in <= _rca_in_WIRE
    wire _l1_csa_in_WIRE : SInt<16>[3] @[wallace_tree.scala 55:36]
    _l1_csa_in_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 55:36]
    _l1_csa_in_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 55:36]
    _l1_csa_in_WIRE[2] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 55:36]
    wire l1_csa_in : SInt<16>[3]
    l1_csa_in <= _l1_csa_in_WIRE
    wire _l1_csa_os_WIRE : SInt<16>[1] @[wallace_tree.scala 56:36]
    _l1_csa_os_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 56:36]
    wire l1_csa_os : SInt<16>[1]
    l1_csa_os <= _l1_csa_os_WIRE
    wire _l1_csa_oc_WIRE : SInt<16>[1] @[wallace_tree.scala 57:36]
    _l1_csa_oc_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 57:36]
    wire l1_csa_oc : SInt<16>[1]
    l1_csa_oc <= _l1_csa_oc_WIRE
    wire _l1_csa_out_WIRE : SInt<16>[4] @[wallace_tree.scala 58:36]
    _l1_csa_out_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 58:36]
    _l1_csa_out_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 58:36]
    _l1_csa_out_WIRE[2] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 58:36]
    _l1_csa_out_WIRE[3] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 58:36]
    wire l1_csa_out : SInt<16>[4]
    l1_csa_out <= _l1_csa_out_WIRE
    inst layer1CSA_0 of pp_compressor3_2 @[wallace_tree.scala 59:44]
    layer1CSA_0.clock <= clock
    layer1CSA_0.reset <= reset
    l1_csa_in[0] <= io.data_i[0] @[wallace_tree.scala 61:43]
    l1_csa_in[1] <= io.data_i[1] @[wallace_tree.scala 61:43]
    l1_csa_in[2] <= io.data_i[2] @[wallace_tree.scala 61:43]
    layer1CSA_0.input.pp0_in <= l1_csa_in[0] @[wallace_tree.scala 63:31]
    layer1CSA_0.input.pp1_in <= l1_csa_in[1] @[wallace_tree.scala 64:31]
    layer1CSA_0.input.pp2_in <= l1_csa_in[2] @[wallace_tree.scala 65:31]
    l1_csa_os[0] <= layer1CSA_0.output.S @[wallace_tree.scala 66:31]
    l1_csa_oc[0] <= layer1CSA_0.output.C @[wallace_tree.scala 67:31]
    l1_csa_out[0] <= l1_csa_os[0] @[wallace_tree.scala 68:33]
    l1_csa_out[1] <= l1_csa_oc[0] @[wallace_tree.scala 69:35]
    l1_csa_out[3] <= io.data_i[4] @[wallace_tree.scala 73:32]
    l1_csa_out[2] <= io.data_i[3] @[wallace_tree.scala 73:32]
    wire _l2_csa_in_WIRE : SInt<16>[3] @[wallace_tree.scala 81:37]
    _l2_csa_in_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 81:37]
    _l2_csa_in_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 81:37]
    _l2_csa_in_WIRE[2] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 81:37]
    wire l2_csa_in : SInt<16>[3]
    l2_csa_in <= _l2_csa_in_WIRE
    wire _l2_csa_os_WIRE : SInt<16>[1] @[wallace_tree.scala 82:37]
    _l2_csa_os_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 82:37]
    wire l2_csa_os : SInt<16>[1]
    l2_csa_os <= _l2_csa_os_WIRE
    wire _l2_csa_oc_WIRE : SInt<16>[1] @[wallace_tree.scala 83:37]
    _l2_csa_oc_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 83:37]
    wire l2_csa_oc : SInt<16>[1]
    l2_csa_oc <= _l2_csa_oc_WIRE
    wire _l2_csa_out_WIRE : SInt<16>[3] @[wallace_tree.scala 84:38]
    _l2_csa_out_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 84:38]
    _l2_csa_out_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 84:38]
    _l2_csa_out_WIRE[2] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 84:38]
    wire l2_csa_out : SInt<16>[3]
    l2_csa_out <= _l2_csa_out_WIRE
    inst layer2CSA_0 of pp_compressor3_2_1 @[wallace_tree.scala 85:46]
    layer2CSA_0.clock <= clock
    layer2CSA_0.reset <= reset
    l2_csa_in[0] <= l1_csa_out[0] @[wallace_tree.scala 87:46]
    l2_csa_in[1] <= l1_csa_out[1] @[wallace_tree.scala 87:46]
    l2_csa_in[2] <= l1_csa_out[2] @[wallace_tree.scala 87:46]
    layer2CSA_0.input.pp0_in <= l2_csa_in[0] @[wallace_tree.scala 89:33]
    layer2CSA_0.input.pp1_in <= l2_csa_in[1] @[wallace_tree.scala 90:33]
    layer2CSA_0.input.pp2_in <= l2_csa_in[2] @[wallace_tree.scala 91:33]
    l2_csa_os[0] <= layer2CSA_0.output.S @[wallace_tree.scala 92:33]
    l2_csa_oc[0] <= layer2CSA_0.output.C @[wallace_tree.scala 93:33]
    l2_csa_out[0] <= l2_csa_os[0] @[wallace_tree.scala 94:35]
    l2_csa_out[1] <= l2_csa_oc[0] @[wallace_tree.scala 95:37]
    l2_csa_out[2] <= l1_csa_out[3] @[wallace_tree.scala 99:34]
    wire _l3_csa_in_WIRE : SInt<16>[3] @[wallace_tree.scala 107:39]
    _l3_csa_in_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 107:39]
    _l3_csa_in_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 107:39]
    _l3_csa_in_WIRE[2] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 107:39]
    wire l3_csa_in : SInt<16>[3]
    l3_csa_in <= _l3_csa_in_WIRE
    wire _l3_csa_os_WIRE : SInt<16>[1] @[wallace_tree.scala 108:39]
    _l3_csa_os_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 108:39]
    wire l3_csa_os : SInt<16>[1]
    l3_csa_os <= _l3_csa_os_WIRE
    wire _l3_csa_oc_WIRE : SInt<16>[1] @[wallace_tree.scala 109:39]
    _l3_csa_oc_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 109:39]
    wire l3_csa_oc : SInt<16>[1]
    l3_csa_oc <= _l3_csa_oc_WIRE
    wire _l3_csa_out_WIRE : SInt<16>[2] @[wallace_tree.scala 110:40]
    _l3_csa_out_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 110:40]
    _l3_csa_out_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 110:40]
    wire l3_csa_out : SInt<16>[2]
    l3_csa_out <= _l3_csa_out_WIRE
    inst layer3CSA_0 of pp_compressor3_2_2 @[wallace_tree.scala 111:48]
    layer3CSA_0.clock <= clock
    layer3CSA_0.reset <= reset
    l3_csa_in[0] <= l2_csa_out[0] @[wallace_tree.scala 113:48]
    l3_csa_in[1] <= l2_csa_out[1] @[wallace_tree.scala 113:48]
    l3_csa_in[2] <= l2_csa_out[2] @[wallace_tree.scala 113:48]
    layer3CSA_0.input.pp0_in <= l3_csa_in[0] @[wallace_tree.scala 115:35]
    layer3CSA_0.input.pp1_in <= l3_csa_in[1] @[wallace_tree.scala 116:35]
    layer3CSA_0.input.pp2_in <= l3_csa_in[2] @[wallace_tree.scala 117:35]
    l3_csa_os[0] <= layer3CSA_0.output.S @[wallace_tree.scala 118:22]
    l3_csa_oc[0] <= layer3CSA_0.output.C @[wallace_tree.scala 119:22]
    l3_csa_out[0] <= l3_csa_os[0] @[wallace_tree.scala 120:27]
    l3_csa_out[1] <= l3_csa_oc[0] @[wallace_tree.scala 121:31]
    rca_in <= l3_csa_out @[wallace_tree.scala 129:16]
    rca.input.a_in <= rca_in[0] @[wallace_tree.scala 250:18]
    rca.input.b_in <= rca_in[1] @[wallace_tree.scala 251:18]
    rca.input.c_in <= asSInt(UInt<1>("h0")) @[wallace_tree.scala 252:18]
    io.data_o <= rca.output.S @[wallace_tree.scala 253:18]

