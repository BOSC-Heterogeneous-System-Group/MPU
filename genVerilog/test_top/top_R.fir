circuit top_R :
  module booth2Encoder :
    input clock : Clock
    input reset : Reset
    output input : { flip multiplier : SInt<8>}
    output output : { X2 : UInt<4>, inv : UInt<4>, set0 : UInt<4>}

    wire multiplier2 : UInt<9> @[booth2_encoder.scala 22:27]
    wire bits : UInt<3>[4] @[booth2_encoder.scala 23:27]
    wire X2Bools : UInt<1>[4] @[booth2_encoder.scala 25:30]
    X2Bools[0] <= UInt<1>("h0") @[booth2_encoder.scala 25:30]
    X2Bools[1] <= UInt<1>("h0") @[booth2_encoder.scala 25:30]
    X2Bools[2] <= UInt<1>("h0") @[booth2_encoder.scala 25:30]
    X2Bools[3] <= UInt<1>("h0") @[booth2_encoder.scala 25:30]
    wire invBools : UInt<1>[4] @[booth2_encoder.scala 26:30]
    invBools[0] <= UInt<1>("h0") @[booth2_encoder.scala 26:30]
    invBools[1] <= UInt<1>("h0") @[booth2_encoder.scala 26:30]
    invBools[2] <= UInt<1>("h0") @[booth2_encoder.scala 26:30]
    invBools[3] <= UInt<1>("h0") @[booth2_encoder.scala 26:30]
    wire set0Bools : UInt<1>[4] @[booth2_encoder.scala 27:30]
    set0Bools[0] <= UInt<1>("h0") @[booth2_encoder.scala 27:30]
    set0Bools[1] <= UInt<1>("h0") @[booth2_encoder.scala 27:30]
    set0Bools[2] <= UInt<1>("h0") @[booth2_encoder.scala 27:30]
    set0Bools[3] <= UInt<1>("h0") @[booth2_encoder.scala 27:30]
    node multiplier2_hi = asUInt(input.multiplier) @[Cat.scala 33:92]
    node _multiplier2_T = cat(multiplier2_hi, UInt<1>("h0")) @[Cat.scala 33:92]
    multiplier2 <= _multiplier2_T @[booth2_encoder.scala 29:17]
    node _bits_0_T = bits(multiplier2, 2, 0) @[booth2_encoder.scala 32:31]
    bits[0] <= _bits_0_T @[booth2_encoder.scala 32:17]
    node _bits_1_T = bits(multiplier2, 4, 2) @[booth2_encoder.scala 32:31]
    bits[1] <= _bits_1_T @[booth2_encoder.scala 32:17]
    node _bits_2_T = bits(multiplier2, 6, 4) @[booth2_encoder.scala 32:31]
    bits[2] <= _bits_2_T @[booth2_encoder.scala 32:17]
    node _bits_3_T = bits(multiplier2, 8, 6) @[booth2_encoder.scala 32:31]
    bits[3] <= _bits_3_T @[booth2_encoder.scala 32:17]
    node _X2Bools_0_T = bits(bits[0], 0, 0) @[booth2_encoder.scala 36:35]
    node _X2Bools_0_T_1 = bits(bits[0], 1, 1) @[booth2_encoder.scala 36:46]
    node _X2Bools_0_T_2 = xor(_X2Bools_0_T, _X2Bools_0_T_1) @[booth2_encoder.scala 36:38]
    node _X2Bools_0_T_3 = not(_X2Bools_0_T_2) @[booth2_encoder.scala 36:26]
    node _X2Bools_0_T_4 = bits(_X2Bools_0_T_3, 0, 0) @[booth2_encoder.scala 36:52]
    X2Bools[0] <= _X2Bools_0_T_4 @[booth2_encoder.scala 36:22]
    node _invBools_0_T = bits(bits[0], 2, 2) @[booth2_encoder.scala 37:32]
    node _invBools_0_T_1 = bits(_invBools_0_T, 0, 0) @[booth2_encoder.scala 37:36]
    invBools[0] <= _invBools_0_T_1 @[booth2_encoder.scala 37:22]
    node _set0Bools_0_T = andr(bits[0]) @[booth2_encoder.scala 38:33]
    node _set0Bools_0_T_1 = not(bits[0]) @[booth2_encoder.scala 38:48]
    node _set0Bools_0_T_2 = andr(_set0Bools_0_T_1) @[booth2_encoder.scala 38:58]
    node _set0Bools_0_T_3 = bits(_set0Bools_0_T_2, 0, 0) @[booth2_encoder.scala 38:63]
    node _set0Bools_0_T_4 = or(_set0Bools_0_T, _set0Bools_0_T_3) @[booth2_encoder.scala 38:45]
    set0Bools[0] <= _set0Bools_0_T_4 @[booth2_encoder.scala 38:22]
    node _X2Bools_1_T = bits(bits[1], 0, 0) @[booth2_encoder.scala 36:35]
    node _X2Bools_1_T_1 = bits(bits[1], 1, 1) @[booth2_encoder.scala 36:46]
    node _X2Bools_1_T_2 = xor(_X2Bools_1_T, _X2Bools_1_T_1) @[booth2_encoder.scala 36:38]
    node _X2Bools_1_T_3 = not(_X2Bools_1_T_2) @[booth2_encoder.scala 36:26]
    node _X2Bools_1_T_4 = bits(_X2Bools_1_T_3, 0, 0) @[booth2_encoder.scala 36:52]
    X2Bools[1] <= _X2Bools_1_T_4 @[booth2_encoder.scala 36:22]
    node _invBools_1_T = bits(bits[1], 2, 2) @[booth2_encoder.scala 37:32]
    node _invBools_1_T_1 = bits(_invBools_1_T, 0, 0) @[booth2_encoder.scala 37:36]
    invBools[1] <= _invBools_1_T_1 @[booth2_encoder.scala 37:22]
    node _set0Bools_1_T = andr(bits[1]) @[booth2_encoder.scala 38:33]
    node _set0Bools_1_T_1 = not(bits[1]) @[booth2_encoder.scala 38:48]
    node _set0Bools_1_T_2 = andr(_set0Bools_1_T_1) @[booth2_encoder.scala 38:58]
    node _set0Bools_1_T_3 = bits(_set0Bools_1_T_2, 0, 0) @[booth2_encoder.scala 38:63]
    node _set0Bools_1_T_4 = or(_set0Bools_1_T, _set0Bools_1_T_3) @[booth2_encoder.scala 38:45]
    set0Bools[1] <= _set0Bools_1_T_4 @[booth2_encoder.scala 38:22]
    node _X2Bools_2_T = bits(bits[2], 0, 0) @[booth2_encoder.scala 36:35]
    node _X2Bools_2_T_1 = bits(bits[2], 1, 1) @[booth2_encoder.scala 36:46]
    node _X2Bools_2_T_2 = xor(_X2Bools_2_T, _X2Bools_2_T_1) @[booth2_encoder.scala 36:38]
    node _X2Bools_2_T_3 = not(_X2Bools_2_T_2) @[booth2_encoder.scala 36:26]
    node _X2Bools_2_T_4 = bits(_X2Bools_2_T_3, 0, 0) @[booth2_encoder.scala 36:52]
    X2Bools[2] <= _X2Bools_2_T_4 @[booth2_encoder.scala 36:22]
    node _invBools_2_T = bits(bits[2], 2, 2) @[booth2_encoder.scala 37:32]
    node _invBools_2_T_1 = bits(_invBools_2_T, 0, 0) @[booth2_encoder.scala 37:36]
    invBools[2] <= _invBools_2_T_1 @[booth2_encoder.scala 37:22]
    node _set0Bools_2_T = andr(bits[2]) @[booth2_encoder.scala 38:33]
    node _set0Bools_2_T_1 = not(bits[2]) @[booth2_encoder.scala 38:48]
    node _set0Bools_2_T_2 = andr(_set0Bools_2_T_1) @[booth2_encoder.scala 38:58]
    node _set0Bools_2_T_3 = bits(_set0Bools_2_T_2, 0, 0) @[booth2_encoder.scala 38:63]
    node _set0Bools_2_T_4 = or(_set0Bools_2_T, _set0Bools_2_T_3) @[booth2_encoder.scala 38:45]
    set0Bools[2] <= _set0Bools_2_T_4 @[booth2_encoder.scala 38:22]
    node _X2Bools_3_T = bits(bits[3], 0, 0) @[booth2_encoder.scala 36:35]
    node _X2Bools_3_T_1 = bits(bits[3], 1, 1) @[booth2_encoder.scala 36:46]
    node _X2Bools_3_T_2 = xor(_X2Bools_3_T, _X2Bools_3_T_1) @[booth2_encoder.scala 36:38]
    node _X2Bools_3_T_3 = not(_X2Bools_3_T_2) @[booth2_encoder.scala 36:26]
    node _X2Bools_3_T_4 = bits(_X2Bools_3_T_3, 0, 0) @[booth2_encoder.scala 36:52]
    X2Bools[3] <= _X2Bools_3_T_4 @[booth2_encoder.scala 36:22]
    node _invBools_3_T = bits(bits[3], 2, 2) @[booth2_encoder.scala 37:32]
    node _invBools_3_T_1 = bits(_invBools_3_T, 0, 0) @[booth2_encoder.scala 37:36]
    invBools[3] <= _invBools_3_T_1 @[booth2_encoder.scala 37:22]
    node _set0Bools_3_T = andr(bits[3]) @[booth2_encoder.scala 38:33]
    node _set0Bools_3_T_1 = not(bits[3]) @[booth2_encoder.scala 38:48]
    node _set0Bools_3_T_2 = andr(_set0Bools_3_T_1) @[booth2_encoder.scala 38:58]
    node _set0Bools_3_T_3 = bits(_set0Bools_3_T_2, 0, 0) @[booth2_encoder.scala 38:63]
    node _set0Bools_3_T_4 = or(_set0Bools_3_T, _set0Bools_3_T_3) @[booth2_encoder.scala 38:45]
    set0Bools[3] <= _set0Bools_3_T_4 @[booth2_encoder.scala 38:22]
    node output_X2_lo = cat(X2Bools[1], X2Bools[0]) @[booth2_encoder.scala 42:28]
    node output_X2_hi = cat(X2Bools[3], X2Bools[2]) @[booth2_encoder.scala 42:28]
    node _output_X2_T = cat(output_X2_hi, output_X2_lo) @[booth2_encoder.scala 42:28]
    output.X2 <= _output_X2_T @[booth2_encoder.scala 42:17]
    node output_inv_lo = cat(invBools[1], invBools[0]) @[booth2_encoder.scala 43:29]
    node output_inv_hi = cat(invBools[3], invBools[2]) @[booth2_encoder.scala 43:29]
    node _output_inv_T = cat(output_inv_hi, output_inv_lo) @[booth2_encoder.scala 43:29]
    output.inv <= _output_inv_T @[booth2_encoder.scala 43:17]
    node output_set0_lo = cat(set0Bools[1], set0Bools[0]) @[booth2_encoder.scala 44:30]
    node output_set0_hi = cat(set0Bools[3], set0Bools[2]) @[booth2_encoder.scala 44:30]
    node _output_set0_T = cat(output_set0_hi, output_set0_lo) @[booth2_encoder.scala 44:30]
    output.set0 <= _output_set0_T @[booth2_encoder.scala 44:17]

  module ppGenerator :
    input clock : Clock
    input reset : Reset
    output inputData : { flip multiplicand : SInt<8>}
    output inputCtrl : { flip X2 : UInt<4>, flip inv : UInt<4>, flip Set0 : UInt<4>}
    output outputData : { pp_out : SInt<16>[4], sig_out : SInt<16>}

    wire E : UInt<1>[4] @[pp_generator.scala 28:26]
    wire E_inv : UInt<1>[4] @[pp_generator.scala 29:26]
    wire pp_X2 : SInt<9>[4] @[pp_generator.scala 31:26]
    wire pp_set : SInt<9>[4] @[pp_generator.scala 32:26]
    wire pp_inv : SInt<9>[4] @[pp_generator.scala 33:26]
    wire pp_temp : SInt<16>[4] @[pp_generator.scala 34:26]
    wire _pp_WIRE : SInt<16>[4] @[pp_generator.scala 36:37]
    _pp_WIRE[0] <= asSInt(UInt<16>("h0")) @[pp_generator.scala 36:37]
    _pp_WIRE[1] <= asSInt(UInt<16>("h0")) @[pp_generator.scala 36:37]
    _pp_WIRE[2] <= asSInt(UInt<16>("h0")) @[pp_generator.scala 36:37]
    _pp_WIRE[3] <= asSInt(UInt<16>("h0")) @[pp_generator.scala 36:37]
    reg pp : SInt<16>[4], clock with :
      reset => (reset, _pp_WIRE) @[pp_generator.scala 36:29]
    reg sign_com : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<16>("h0"))) @[pp_generator.scala 37:29]
    node _pp_X2_0_T = bits(inputCtrl.X2, 0, 0) @[pp_generator.scala 40:38]
    node _pp_X2_0_T_1 = bits(_pp_X2_0_T, 0, 0) @[pp_generator.scala 40:42]
    node pp_X2_0_lo = asUInt(asSInt(UInt<1>("h0"))) @[Cat.scala 33:92]
    node pp_X2_0_hi = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_0_T_2 = cat(pp_X2_0_hi, pp_X2_0_lo) @[Cat.scala 33:92]
    node _pp_X2_0_T_3 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 41:51]
    node pp_X2_0_lo_1 = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_0_T_4 = cat(_pp_X2_0_T_3, pp_X2_0_lo_1) @[Cat.scala 33:92]
    node _pp_X2_0_T_5 = mux(_pp_X2_0_T_1, _pp_X2_0_T_2, _pp_X2_0_T_4) @[pp_generator.scala 40:25]
    node _pp_X2_0_T_6 = asSInt(_pp_X2_0_T_5) @[pp_generator.scala 41:90]
    pp_X2[0] <= _pp_X2_0_T_6 @[pp_generator.scala 40:19]
    node _pp_set_0_T = bits(inputCtrl.Set0, 0, 0) @[pp_generator.scala 42:40]
    node _pp_set_0_T_1 = bits(_pp_set_0_T, 0, 0) @[pp_generator.scala 42:44]
    node _pp_set_0_T_2 = mux(_pp_set_0_T_1, asSInt(UInt<9>("h0")), pp_X2[0]) @[pp_generator.scala 42:25]
    pp_set[0] <= _pp_set_0_T_2 @[pp_generator.scala 42:19]
    node _pp_inv_0_T = bits(inputCtrl.inv, 0, 0) @[pp_generator.scala 43:39]
    node _pp_inv_0_T_1 = bits(_pp_inv_0_T, 0, 0) @[pp_generator.scala 43:43]
    node _pp_inv_0_T_2 = not(pp_set[0]) @[pp_generator.scala 43:51]
    node _pp_inv_0_T_3 = asSInt(_pp_inv_0_T_2) @[pp_generator.scala 43:51]
    node _pp_inv_0_T_4 = mux(_pp_inv_0_T_1, _pp_inv_0_T_3, pp_set[0]) @[pp_generator.scala 43:25]
    pp_inv[0] <= _pp_inv_0_T_4 @[pp_generator.scala 43:19]
    node _E_inv_0_T = bits(inputCtrl.Set0, 0, 0) @[pp_generator.scala 44:40]
    node _E_inv_0_T_1 = bits(_E_inv_0_T, 0, 0) @[pp_generator.scala 44:44]
    node _E_inv_0_T_2 = bits(inputCtrl.inv, 0, 0) @[pp_generator.scala 44:65]
    node _E_inv_0_T_3 = bits(_E_inv_0_T_2, 0, 0) @[pp_generator.scala 44:69]
    node _E_inv_0_T_4 = bits(inputCtrl.inv, 0, 0) @[pp_generator.scala 44:91]
    node _E_inv_0_T_5 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 44:117]
    node _E_inv_0_T_6 = xor(_E_inv_0_T_4, _E_inv_0_T_5) @[pp_generator.scala 44:94]
    node _E_inv_0_T_7 = bits(_E_inv_0_T_6, 0, 0) @[pp_generator.scala 44:131]
    node _E_inv_0_T_8 = mux(_E_inv_0_T_1, _E_inv_0_T_3, _E_inv_0_T_7) @[pp_generator.scala 44:25]
    E_inv[0] <= _E_inv_0_T_8 @[pp_generator.scala 44:19]
    node _E_0_T = not(E_inv[0]) @[pp_generator.scala 45:22]
    E[0] <= _E_0_T @[pp_generator.scala 45:19]
    node pp_temp_0_lo_lo = asUInt(pp_inv[0]) @[Cat.scala 33:92]
    node pp_temp_0_lo = cat(E_inv[0], pp_temp_0_lo_lo) @[Cat.scala 33:92]
    node pp_temp_0_hi_hi = cat(UInt<4>("h0"), E[0]) @[Cat.scala 33:92]
    node pp_temp_0_hi = cat(pp_temp_0_hi_hi, E_inv[0]) @[Cat.scala 33:92]
    node _pp_temp_0_T = cat(pp_temp_0_hi, pp_temp_0_lo) @[Cat.scala 33:92]
    node _pp_temp_0_T_1 = asSInt(_pp_temp_0_T) @[pp_generator.scala 51:115]
    pp_temp[0] <= _pp_temp_0_T_1 @[pp_generator.scala 51:28]
    node _pp_X2_1_T = bits(inputCtrl.X2, 1, 1) @[pp_generator.scala 40:38]
    node _pp_X2_1_T_1 = bits(_pp_X2_1_T, 0, 0) @[pp_generator.scala 40:42]
    node pp_X2_1_lo = asUInt(asSInt(UInt<1>("h0"))) @[Cat.scala 33:92]
    node pp_X2_1_hi = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_1_T_2 = cat(pp_X2_1_hi, pp_X2_1_lo) @[Cat.scala 33:92]
    node _pp_X2_1_T_3 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 41:51]
    node pp_X2_1_lo_1 = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_1_T_4 = cat(_pp_X2_1_T_3, pp_X2_1_lo_1) @[Cat.scala 33:92]
    node _pp_X2_1_T_5 = mux(_pp_X2_1_T_1, _pp_X2_1_T_2, _pp_X2_1_T_4) @[pp_generator.scala 40:25]
    node _pp_X2_1_T_6 = asSInt(_pp_X2_1_T_5) @[pp_generator.scala 41:90]
    pp_X2[1] <= _pp_X2_1_T_6 @[pp_generator.scala 40:19]
    node _pp_set_1_T = bits(inputCtrl.Set0, 1, 1) @[pp_generator.scala 42:40]
    node _pp_set_1_T_1 = bits(_pp_set_1_T, 0, 0) @[pp_generator.scala 42:44]
    node _pp_set_1_T_2 = mux(_pp_set_1_T_1, asSInt(UInt<9>("h0")), pp_X2[1]) @[pp_generator.scala 42:25]
    pp_set[1] <= _pp_set_1_T_2 @[pp_generator.scala 42:19]
    node _pp_inv_1_T = bits(inputCtrl.inv, 1, 1) @[pp_generator.scala 43:39]
    node _pp_inv_1_T_1 = bits(_pp_inv_1_T, 0, 0) @[pp_generator.scala 43:43]
    node _pp_inv_1_T_2 = not(pp_set[1]) @[pp_generator.scala 43:51]
    node _pp_inv_1_T_3 = asSInt(_pp_inv_1_T_2) @[pp_generator.scala 43:51]
    node _pp_inv_1_T_4 = mux(_pp_inv_1_T_1, _pp_inv_1_T_3, pp_set[1]) @[pp_generator.scala 43:25]
    pp_inv[1] <= _pp_inv_1_T_4 @[pp_generator.scala 43:19]
    node _E_inv_1_T = bits(inputCtrl.Set0, 1, 1) @[pp_generator.scala 44:40]
    node _E_inv_1_T_1 = bits(_E_inv_1_T, 0, 0) @[pp_generator.scala 44:44]
    node _E_inv_1_T_2 = bits(inputCtrl.inv, 1, 1) @[pp_generator.scala 44:65]
    node _E_inv_1_T_3 = bits(_E_inv_1_T_2, 0, 0) @[pp_generator.scala 44:69]
    node _E_inv_1_T_4 = bits(inputCtrl.inv, 1, 1) @[pp_generator.scala 44:91]
    node _E_inv_1_T_5 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 44:117]
    node _E_inv_1_T_6 = xor(_E_inv_1_T_4, _E_inv_1_T_5) @[pp_generator.scala 44:94]
    node _E_inv_1_T_7 = bits(_E_inv_1_T_6, 0, 0) @[pp_generator.scala 44:131]
    node _E_inv_1_T_8 = mux(_E_inv_1_T_1, _E_inv_1_T_3, _E_inv_1_T_7) @[pp_generator.scala 44:25]
    E_inv[1] <= _E_inv_1_T_8 @[pp_generator.scala 44:19]
    node _E_1_T = not(E_inv[1]) @[pp_generator.scala 45:22]
    E[1] <= _E_1_T @[pp_generator.scala 45:19]
    node pp_temp_1_lo_lo = asUInt(pp_inv[1]) @[Cat.scala 33:92]
    node pp_temp_1_lo = cat(E[1], pp_temp_1_lo_lo) @[Cat.scala 33:92]
    node pp_temp_1_hi = cat(UInt<5>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
    node _pp_temp_1_T = cat(pp_temp_1_hi, pp_temp_1_lo) @[Cat.scala 33:92]
    node _pp_temp_1_T_1 = asSInt(_pp_temp_1_T) @[pp_generator.scala 55:94]
    pp_temp[1] <= _pp_temp_1_T_1 @[pp_generator.scala 55:24]
    node _pp_X2_2_T = bits(inputCtrl.X2, 2, 2) @[pp_generator.scala 40:38]
    node _pp_X2_2_T_1 = bits(_pp_X2_2_T, 0, 0) @[pp_generator.scala 40:42]
    node pp_X2_2_lo = asUInt(asSInt(UInt<1>("h0"))) @[Cat.scala 33:92]
    node pp_X2_2_hi = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_2_T_2 = cat(pp_X2_2_hi, pp_X2_2_lo) @[Cat.scala 33:92]
    node _pp_X2_2_T_3 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 41:51]
    node pp_X2_2_lo_1 = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_2_T_4 = cat(_pp_X2_2_T_3, pp_X2_2_lo_1) @[Cat.scala 33:92]
    node _pp_X2_2_T_5 = mux(_pp_X2_2_T_1, _pp_X2_2_T_2, _pp_X2_2_T_4) @[pp_generator.scala 40:25]
    node _pp_X2_2_T_6 = asSInt(_pp_X2_2_T_5) @[pp_generator.scala 41:90]
    pp_X2[2] <= _pp_X2_2_T_6 @[pp_generator.scala 40:19]
    node _pp_set_2_T = bits(inputCtrl.Set0, 2, 2) @[pp_generator.scala 42:40]
    node _pp_set_2_T_1 = bits(_pp_set_2_T, 0, 0) @[pp_generator.scala 42:44]
    node _pp_set_2_T_2 = mux(_pp_set_2_T_1, asSInt(UInt<9>("h0")), pp_X2[2]) @[pp_generator.scala 42:25]
    pp_set[2] <= _pp_set_2_T_2 @[pp_generator.scala 42:19]
    node _pp_inv_2_T = bits(inputCtrl.inv, 2, 2) @[pp_generator.scala 43:39]
    node _pp_inv_2_T_1 = bits(_pp_inv_2_T, 0, 0) @[pp_generator.scala 43:43]
    node _pp_inv_2_T_2 = not(pp_set[2]) @[pp_generator.scala 43:51]
    node _pp_inv_2_T_3 = asSInt(_pp_inv_2_T_2) @[pp_generator.scala 43:51]
    node _pp_inv_2_T_4 = mux(_pp_inv_2_T_1, _pp_inv_2_T_3, pp_set[2]) @[pp_generator.scala 43:25]
    pp_inv[2] <= _pp_inv_2_T_4 @[pp_generator.scala 43:19]
    node _E_inv_2_T = bits(inputCtrl.Set0, 2, 2) @[pp_generator.scala 44:40]
    node _E_inv_2_T_1 = bits(_E_inv_2_T, 0, 0) @[pp_generator.scala 44:44]
    node _E_inv_2_T_2 = bits(inputCtrl.inv, 2, 2) @[pp_generator.scala 44:65]
    node _E_inv_2_T_3 = bits(_E_inv_2_T_2, 0, 0) @[pp_generator.scala 44:69]
    node _E_inv_2_T_4 = bits(inputCtrl.inv, 2, 2) @[pp_generator.scala 44:91]
    node _E_inv_2_T_5 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 44:117]
    node _E_inv_2_T_6 = xor(_E_inv_2_T_4, _E_inv_2_T_5) @[pp_generator.scala 44:94]
    node _E_inv_2_T_7 = bits(_E_inv_2_T_6, 0, 0) @[pp_generator.scala 44:131]
    node _E_inv_2_T_8 = mux(_E_inv_2_T_1, _E_inv_2_T_3, _E_inv_2_T_7) @[pp_generator.scala 44:25]
    E_inv[2] <= _E_inv_2_T_8 @[pp_generator.scala 44:19]
    node _E_2_T = not(E_inv[2]) @[pp_generator.scala 45:22]
    E[2] <= _E_2_T @[pp_generator.scala 45:19]
    node pp_temp_2_lo_lo = asUInt(pp_inv[2]) @[Cat.scala 33:92]
    node pp_temp_2_lo = cat(E[2], pp_temp_2_lo_lo) @[Cat.scala 33:92]
    node pp_temp_2_hi = cat(UInt<5>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
    node _pp_temp_2_T = cat(pp_temp_2_hi, pp_temp_2_lo) @[Cat.scala 33:92]
    node _pp_temp_2_T_1 = asSInt(_pp_temp_2_T) @[pp_generator.scala 55:94]
    pp_temp[2] <= _pp_temp_2_T_1 @[pp_generator.scala 55:24]
    node _pp_X2_3_T = bits(inputCtrl.X2, 3, 3) @[pp_generator.scala 40:38]
    node _pp_X2_3_T_1 = bits(_pp_X2_3_T, 0, 0) @[pp_generator.scala 40:42]
    node pp_X2_3_lo = asUInt(asSInt(UInt<1>("h0"))) @[Cat.scala 33:92]
    node pp_X2_3_hi = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_3_T_2 = cat(pp_X2_3_hi, pp_X2_3_lo) @[Cat.scala 33:92]
    node _pp_X2_3_T_3 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 41:51]
    node pp_X2_3_lo_1 = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_3_T_4 = cat(_pp_X2_3_T_3, pp_X2_3_lo_1) @[Cat.scala 33:92]
    node _pp_X2_3_T_5 = mux(_pp_X2_3_T_1, _pp_X2_3_T_2, _pp_X2_3_T_4) @[pp_generator.scala 40:25]
    node _pp_X2_3_T_6 = asSInt(_pp_X2_3_T_5) @[pp_generator.scala 41:90]
    pp_X2[3] <= _pp_X2_3_T_6 @[pp_generator.scala 40:19]
    node _pp_set_3_T = bits(inputCtrl.Set0, 3, 3) @[pp_generator.scala 42:40]
    node _pp_set_3_T_1 = bits(_pp_set_3_T, 0, 0) @[pp_generator.scala 42:44]
    node _pp_set_3_T_2 = mux(_pp_set_3_T_1, asSInt(UInt<9>("h0")), pp_X2[3]) @[pp_generator.scala 42:25]
    pp_set[3] <= _pp_set_3_T_2 @[pp_generator.scala 42:19]
    node _pp_inv_3_T = bits(inputCtrl.inv, 3, 3) @[pp_generator.scala 43:39]
    node _pp_inv_3_T_1 = bits(_pp_inv_3_T, 0, 0) @[pp_generator.scala 43:43]
    node _pp_inv_3_T_2 = not(pp_set[3]) @[pp_generator.scala 43:51]
    node _pp_inv_3_T_3 = asSInt(_pp_inv_3_T_2) @[pp_generator.scala 43:51]
    node _pp_inv_3_T_4 = mux(_pp_inv_3_T_1, _pp_inv_3_T_3, pp_set[3]) @[pp_generator.scala 43:25]
    pp_inv[3] <= _pp_inv_3_T_4 @[pp_generator.scala 43:19]
    node _E_inv_3_T = bits(inputCtrl.Set0, 3, 3) @[pp_generator.scala 44:40]
    node _E_inv_3_T_1 = bits(_E_inv_3_T, 0, 0) @[pp_generator.scala 44:44]
    node _E_inv_3_T_2 = bits(inputCtrl.inv, 3, 3) @[pp_generator.scala 44:65]
    node _E_inv_3_T_3 = bits(_E_inv_3_T_2, 0, 0) @[pp_generator.scala 44:69]
    node _E_inv_3_T_4 = bits(inputCtrl.inv, 3, 3) @[pp_generator.scala 44:91]
    node _E_inv_3_T_5 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 44:117]
    node _E_inv_3_T_6 = xor(_E_inv_3_T_4, _E_inv_3_T_5) @[pp_generator.scala 44:94]
    node _E_inv_3_T_7 = bits(_E_inv_3_T_6, 0, 0) @[pp_generator.scala 44:131]
    node _E_inv_3_T_8 = mux(_E_inv_3_T_1, _E_inv_3_T_3, _E_inv_3_T_7) @[pp_generator.scala 44:25]
    E_inv[3] <= _E_inv_3_T_8 @[pp_generator.scala 44:19]
    node _E_3_T = not(E_inv[3]) @[pp_generator.scala 45:22]
    E[3] <= _E_3_T @[pp_generator.scala 45:19]
    node pp_temp_3_lo_lo = asUInt(pp_inv[3]) @[Cat.scala 33:92]
    node pp_temp_3_lo = cat(E[3], pp_temp_3_lo_lo) @[Cat.scala 33:92]
    node pp_temp_3_hi = cat(UInt<5>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
    node _pp_temp_3_T = cat(pp_temp_3_hi, pp_temp_3_lo) @[Cat.scala 33:92]
    node _pp_temp_3_T_1 = asSInt(_pp_temp_3_T) @[pp_generator.scala 55:94]
    pp_temp[3] <= _pp_temp_3_T_1 @[pp_generator.scala 55:24]
    pp[0] <= pp_temp[0] @[pp_generator.scala 61:19]
    node _pp_1_T = bits(pp_temp[1], 13, 0) @[pp_generator.scala 63:36]
    node _pp_1_T_1 = bits(inputCtrl.inv, 0, 0) @[pp_generator.scala 63:78]
    node pp_1_hi = cat(_pp_1_T, UInt<1>("h0")) @[Cat.scala 33:92]
    node _pp_1_T_2 = cat(pp_1_hi, _pp_1_T_1) @[Cat.scala 33:92]
    node _pp_1_T_3 = asSInt(_pp_1_T_2) @[pp_generator.scala 63:85]
    pp[1] <= _pp_1_T_3 @[pp_generator.scala 63:19]
    node _pp_2_T = bits(pp_temp[2], 11, 0) @[pp_generator.scala 65:36]
    node _pp_2_T_1 = bits(inputCtrl.inv, 1, 1) @[pp_generator.scala 65:78]
    node pp_2_lo = cat(_pp_2_T_1, UInt<2>("h0")) @[Cat.scala 33:92]
    node pp_2_hi = cat(_pp_2_T, UInt<1>("h0")) @[Cat.scala 33:92]
    node _pp_2_T_2 = cat(pp_2_hi, pp_2_lo) @[Cat.scala 33:92]
    node _pp_2_T_3 = asSInt(_pp_2_T_2) @[pp_generator.scala 65:103]
    pp[2] <= _pp_2_T_3 @[pp_generator.scala 65:19]
    node _pp_3_T = bits(pp_temp[3], 9, 0) @[pp_generator.scala 65:36]
    node _pp_3_T_1 = bits(inputCtrl.inv, 2, 2) @[pp_generator.scala 65:78]
    node pp_3_lo = cat(_pp_3_T_1, UInt<4>("h0")) @[Cat.scala 33:92]
    node pp_3_hi = cat(_pp_3_T, UInt<1>("h0")) @[Cat.scala 33:92]
    node _pp_3_T_2 = cat(pp_3_hi, pp_3_lo) @[Cat.scala 33:92]
    node _pp_3_T_3 = asSInt(_pp_3_T_2) @[pp_generator.scala 65:103]
    pp[3] <= _pp_3_T_3 @[pp_generator.scala 65:19]
    node _sign_com_T = bits(inputCtrl.inv, 3, 3) @[pp_generator.scala 68:54]
    node sign_com_hi = cat(UInt<9>("h0"), _sign_com_T) @[Cat.scala 33:92]
    node _sign_com_T_1 = cat(sign_com_hi, UInt<6>("h0")) @[Cat.scala 33:92]
    node _sign_com_T_2 = asSInt(_sign_com_T_1) @[pp_generator.scala 68:97]
    sign_com <= _sign_com_T_2 @[pp_generator.scala 68:14]
    outputData.pp_out <= pp @[pp_generator.scala 70:25]
    outputData.sig_out <= sign_com @[pp_generator.scala 71:25]

  module RCA :
    input clock : Clock
    input reset : Reset
    output input : { flip a_in : SInt<16>, flip b_in : SInt<16>, flip c_in : SInt<1>}
    output output : { S : SInt<16>, C : SInt<16>}

    wire g_comb : UInt<1>[16] @[rca.scala 22:22]
    wire p_comb : UInt<1>[16] @[rca.scala 23:22]
    wire s_comb : UInt<1>[16] @[rca.scala 24:22]
    wire c_comb : UInt<1>[17] @[rca.scala 25:22]
    node _c_comb_0_T = bits(input.c_in, 0, 0) @[rca.scala 27:29]
    c_comb[0] <= _c_comb_0_T @[rca.scala 27:15]
    node _g_comb_0_T = bits(input.a_in, 0, 0) @[rca.scala 30:35]
    node _g_comb_0_T_1 = bits(input.b_in, 0, 0) @[rca.scala 30:51]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[rca.scala 30:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[0] <= _g_comb_0_T_3 @[rca.scala 30:21]
    node _p_comb_0_T = bits(input.a_in, 0, 0) @[rca.scala 31:35]
    node _p_comb_0_T_1 = bits(input.b_in, 0, 0) @[rca.scala 31:51]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[rca.scala 31:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[0] <= _p_comb_0_T_3 @[rca.scala 31:21]
    node _s_comb_0_T = xor(p_comb[0], c_comb[0]) @[rca.scala 32:34]
    s_comb[0] <= _s_comb_0_T @[rca.scala 32:21]
    node _c_comb_1_T = and(c_comb[0], p_comb[0]) @[rca.scala 33:34]
    node _c_comb_1_T_1 = or(_c_comb_1_T, g_comb[0]) @[rca.scala 33:46]
    c_comb[1] <= _c_comb_1_T_1 @[rca.scala 33:21]
    node _g_comb_1_T = bits(input.a_in, 1, 1) @[rca.scala 30:35]
    node _g_comb_1_T_1 = bits(input.b_in, 1, 1) @[rca.scala 30:51]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[rca.scala 30:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[1] <= _g_comb_1_T_3 @[rca.scala 30:21]
    node _p_comb_1_T = bits(input.a_in, 1, 1) @[rca.scala 31:35]
    node _p_comb_1_T_1 = bits(input.b_in, 1, 1) @[rca.scala 31:51]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[rca.scala 31:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[1] <= _p_comb_1_T_3 @[rca.scala 31:21]
    node _s_comb_1_T = xor(p_comb[1], c_comb[1]) @[rca.scala 32:34]
    s_comb[1] <= _s_comb_1_T @[rca.scala 32:21]
    node _c_comb_2_T = and(c_comb[1], p_comb[1]) @[rca.scala 33:34]
    node _c_comb_2_T_1 = or(_c_comb_2_T, g_comb[1]) @[rca.scala 33:46]
    c_comb[2] <= _c_comb_2_T_1 @[rca.scala 33:21]
    node _g_comb_2_T = bits(input.a_in, 2, 2) @[rca.scala 30:35]
    node _g_comb_2_T_1 = bits(input.b_in, 2, 2) @[rca.scala 30:51]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[rca.scala 30:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[2] <= _g_comb_2_T_3 @[rca.scala 30:21]
    node _p_comb_2_T = bits(input.a_in, 2, 2) @[rca.scala 31:35]
    node _p_comb_2_T_1 = bits(input.b_in, 2, 2) @[rca.scala 31:51]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[rca.scala 31:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[2] <= _p_comb_2_T_3 @[rca.scala 31:21]
    node _s_comb_2_T = xor(p_comb[2], c_comb[2]) @[rca.scala 32:34]
    s_comb[2] <= _s_comb_2_T @[rca.scala 32:21]
    node _c_comb_3_T = and(c_comb[2], p_comb[2]) @[rca.scala 33:34]
    node _c_comb_3_T_1 = or(_c_comb_3_T, g_comb[2]) @[rca.scala 33:46]
    c_comb[3] <= _c_comb_3_T_1 @[rca.scala 33:21]
    node _g_comb_3_T = bits(input.a_in, 3, 3) @[rca.scala 30:35]
    node _g_comb_3_T_1 = bits(input.b_in, 3, 3) @[rca.scala 30:51]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[rca.scala 30:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[3] <= _g_comb_3_T_3 @[rca.scala 30:21]
    node _p_comb_3_T = bits(input.a_in, 3, 3) @[rca.scala 31:35]
    node _p_comb_3_T_1 = bits(input.b_in, 3, 3) @[rca.scala 31:51]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[rca.scala 31:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[3] <= _p_comb_3_T_3 @[rca.scala 31:21]
    node _s_comb_3_T = xor(p_comb[3], c_comb[3]) @[rca.scala 32:34]
    s_comb[3] <= _s_comb_3_T @[rca.scala 32:21]
    node _c_comb_4_T = and(c_comb[3], p_comb[3]) @[rca.scala 33:34]
    node _c_comb_4_T_1 = or(_c_comb_4_T, g_comb[3]) @[rca.scala 33:46]
    c_comb[4] <= _c_comb_4_T_1 @[rca.scala 33:21]
    node _g_comb_4_T = bits(input.a_in, 4, 4) @[rca.scala 30:35]
    node _g_comb_4_T_1 = bits(input.b_in, 4, 4) @[rca.scala 30:51]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[rca.scala 30:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[4] <= _g_comb_4_T_3 @[rca.scala 30:21]
    node _p_comb_4_T = bits(input.a_in, 4, 4) @[rca.scala 31:35]
    node _p_comb_4_T_1 = bits(input.b_in, 4, 4) @[rca.scala 31:51]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[rca.scala 31:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[4] <= _p_comb_4_T_3 @[rca.scala 31:21]
    node _s_comb_4_T = xor(p_comb[4], c_comb[4]) @[rca.scala 32:34]
    s_comb[4] <= _s_comb_4_T @[rca.scala 32:21]
    node _c_comb_5_T = and(c_comb[4], p_comb[4]) @[rca.scala 33:34]
    node _c_comb_5_T_1 = or(_c_comb_5_T, g_comb[4]) @[rca.scala 33:46]
    c_comb[5] <= _c_comb_5_T_1 @[rca.scala 33:21]
    node _g_comb_5_T = bits(input.a_in, 5, 5) @[rca.scala 30:35]
    node _g_comb_5_T_1 = bits(input.b_in, 5, 5) @[rca.scala 30:51]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[rca.scala 30:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[5] <= _g_comb_5_T_3 @[rca.scala 30:21]
    node _p_comb_5_T = bits(input.a_in, 5, 5) @[rca.scala 31:35]
    node _p_comb_5_T_1 = bits(input.b_in, 5, 5) @[rca.scala 31:51]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[rca.scala 31:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[5] <= _p_comb_5_T_3 @[rca.scala 31:21]
    node _s_comb_5_T = xor(p_comb[5], c_comb[5]) @[rca.scala 32:34]
    s_comb[5] <= _s_comb_5_T @[rca.scala 32:21]
    node _c_comb_6_T = and(c_comb[5], p_comb[5]) @[rca.scala 33:34]
    node _c_comb_6_T_1 = or(_c_comb_6_T, g_comb[5]) @[rca.scala 33:46]
    c_comb[6] <= _c_comb_6_T_1 @[rca.scala 33:21]
    node _g_comb_6_T = bits(input.a_in, 6, 6) @[rca.scala 30:35]
    node _g_comb_6_T_1 = bits(input.b_in, 6, 6) @[rca.scala 30:51]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[rca.scala 30:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[6] <= _g_comb_6_T_3 @[rca.scala 30:21]
    node _p_comb_6_T = bits(input.a_in, 6, 6) @[rca.scala 31:35]
    node _p_comb_6_T_1 = bits(input.b_in, 6, 6) @[rca.scala 31:51]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[rca.scala 31:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[6] <= _p_comb_6_T_3 @[rca.scala 31:21]
    node _s_comb_6_T = xor(p_comb[6], c_comb[6]) @[rca.scala 32:34]
    s_comb[6] <= _s_comb_6_T @[rca.scala 32:21]
    node _c_comb_7_T = and(c_comb[6], p_comb[6]) @[rca.scala 33:34]
    node _c_comb_7_T_1 = or(_c_comb_7_T, g_comb[6]) @[rca.scala 33:46]
    c_comb[7] <= _c_comb_7_T_1 @[rca.scala 33:21]
    node _g_comb_7_T = bits(input.a_in, 7, 7) @[rca.scala 30:35]
    node _g_comb_7_T_1 = bits(input.b_in, 7, 7) @[rca.scala 30:51]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[rca.scala 30:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[7] <= _g_comb_7_T_3 @[rca.scala 30:21]
    node _p_comb_7_T = bits(input.a_in, 7, 7) @[rca.scala 31:35]
    node _p_comb_7_T_1 = bits(input.b_in, 7, 7) @[rca.scala 31:51]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[rca.scala 31:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[7] <= _p_comb_7_T_3 @[rca.scala 31:21]
    node _s_comb_7_T = xor(p_comb[7], c_comb[7]) @[rca.scala 32:34]
    s_comb[7] <= _s_comb_7_T @[rca.scala 32:21]
    node _c_comb_8_T = and(c_comb[7], p_comb[7]) @[rca.scala 33:34]
    node _c_comb_8_T_1 = or(_c_comb_8_T, g_comb[7]) @[rca.scala 33:46]
    c_comb[8] <= _c_comb_8_T_1 @[rca.scala 33:21]
    node _g_comb_8_T = bits(input.a_in, 8, 8) @[rca.scala 30:35]
    node _g_comb_8_T_1 = bits(input.b_in, 8, 8) @[rca.scala 30:51]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[rca.scala 30:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[8] <= _g_comb_8_T_3 @[rca.scala 30:21]
    node _p_comb_8_T = bits(input.a_in, 8, 8) @[rca.scala 31:35]
    node _p_comb_8_T_1 = bits(input.b_in, 8, 8) @[rca.scala 31:51]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[rca.scala 31:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[8] <= _p_comb_8_T_3 @[rca.scala 31:21]
    node _s_comb_8_T = xor(p_comb[8], c_comb[8]) @[rca.scala 32:34]
    s_comb[8] <= _s_comb_8_T @[rca.scala 32:21]
    node _c_comb_9_T = and(c_comb[8], p_comb[8]) @[rca.scala 33:34]
    node _c_comb_9_T_1 = or(_c_comb_9_T, g_comb[8]) @[rca.scala 33:46]
    c_comb[9] <= _c_comb_9_T_1 @[rca.scala 33:21]
    node _g_comb_9_T = bits(input.a_in, 9, 9) @[rca.scala 30:35]
    node _g_comb_9_T_1 = bits(input.b_in, 9, 9) @[rca.scala 30:51]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[rca.scala 30:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[9] <= _g_comb_9_T_3 @[rca.scala 30:21]
    node _p_comb_9_T = bits(input.a_in, 9, 9) @[rca.scala 31:35]
    node _p_comb_9_T_1 = bits(input.b_in, 9, 9) @[rca.scala 31:51]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[rca.scala 31:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[9] <= _p_comb_9_T_3 @[rca.scala 31:21]
    node _s_comb_9_T = xor(p_comb[9], c_comb[9]) @[rca.scala 32:34]
    s_comb[9] <= _s_comb_9_T @[rca.scala 32:21]
    node _c_comb_10_T = and(c_comb[9], p_comb[9]) @[rca.scala 33:34]
    node _c_comb_10_T_1 = or(_c_comb_10_T, g_comb[9]) @[rca.scala 33:46]
    c_comb[10] <= _c_comb_10_T_1 @[rca.scala 33:21]
    node _g_comb_10_T = bits(input.a_in, 10, 10) @[rca.scala 30:35]
    node _g_comb_10_T_1 = bits(input.b_in, 10, 10) @[rca.scala 30:51]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[rca.scala 30:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[10] <= _g_comb_10_T_3 @[rca.scala 30:21]
    node _p_comb_10_T = bits(input.a_in, 10, 10) @[rca.scala 31:35]
    node _p_comb_10_T_1 = bits(input.b_in, 10, 10) @[rca.scala 31:51]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[rca.scala 31:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[10] <= _p_comb_10_T_3 @[rca.scala 31:21]
    node _s_comb_10_T = xor(p_comb[10], c_comb[10]) @[rca.scala 32:34]
    s_comb[10] <= _s_comb_10_T @[rca.scala 32:21]
    node _c_comb_11_T = and(c_comb[10], p_comb[10]) @[rca.scala 33:34]
    node _c_comb_11_T_1 = or(_c_comb_11_T, g_comb[10]) @[rca.scala 33:46]
    c_comb[11] <= _c_comb_11_T_1 @[rca.scala 33:21]
    node _g_comb_11_T = bits(input.a_in, 11, 11) @[rca.scala 30:35]
    node _g_comb_11_T_1 = bits(input.b_in, 11, 11) @[rca.scala 30:51]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[rca.scala 30:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[11] <= _g_comb_11_T_3 @[rca.scala 30:21]
    node _p_comb_11_T = bits(input.a_in, 11, 11) @[rca.scala 31:35]
    node _p_comb_11_T_1 = bits(input.b_in, 11, 11) @[rca.scala 31:51]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[rca.scala 31:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[11] <= _p_comb_11_T_3 @[rca.scala 31:21]
    node _s_comb_11_T = xor(p_comb[11], c_comb[11]) @[rca.scala 32:34]
    s_comb[11] <= _s_comb_11_T @[rca.scala 32:21]
    node _c_comb_12_T = and(c_comb[11], p_comb[11]) @[rca.scala 33:34]
    node _c_comb_12_T_1 = or(_c_comb_12_T, g_comb[11]) @[rca.scala 33:46]
    c_comb[12] <= _c_comb_12_T_1 @[rca.scala 33:21]
    node _g_comb_12_T = bits(input.a_in, 12, 12) @[rca.scala 30:35]
    node _g_comb_12_T_1 = bits(input.b_in, 12, 12) @[rca.scala 30:51]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[rca.scala 30:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[12] <= _g_comb_12_T_3 @[rca.scala 30:21]
    node _p_comb_12_T = bits(input.a_in, 12, 12) @[rca.scala 31:35]
    node _p_comb_12_T_1 = bits(input.b_in, 12, 12) @[rca.scala 31:51]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[rca.scala 31:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[12] <= _p_comb_12_T_3 @[rca.scala 31:21]
    node _s_comb_12_T = xor(p_comb[12], c_comb[12]) @[rca.scala 32:34]
    s_comb[12] <= _s_comb_12_T @[rca.scala 32:21]
    node _c_comb_13_T = and(c_comb[12], p_comb[12]) @[rca.scala 33:34]
    node _c_comb_13_T_1 = or(_c_comb_13_T, g_comb[12]) @[rca.scala 33:46]
    c_comb[13] <= _c_comb_13_T_1 @[rca.scala 33:21]
    node _g_comb_13_T = bits(input.a_in, 13, 13) @[rca.scala 30:35]
    node _g_comb_13_T_1 = bits(input.b_in, 13, 13) @[rca.scala 30:51]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[rca.scala 30:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[13] <= _g_comb_13_T_3 @[rca.scala 30:21]
    node _p_comb_13_T = bits(input.a_in, 13, 13) @[rca.scala 31:35]
    node _p_comb_13_T_1 = bits(input.b_in, 13, 13) @[rca.scala 31:51]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[rca.scala 31:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[13] <= _p_comb_13_T_3 @[rca.scala 31:21]
    node _s_comb_13_T = xor(p_comb[13], c_comb[13]) @[rca.scala 32:34]
    s_comb[13] <= _s_comb_13_T @[rca.scala 32:21]
    node _c_comb_14_T = and(c_comb[13], p_comb[13]) @[rca.scala 33:34]
    node _c_comb_14_T_1 = or(_c_comb_14_T, g_comb[13]) @[rca.scala 33:46]
    c_comb[14] <= _c_comb_14_T_1 @[rca.scala 33:21]
    node _g_comb_14_T = bits(input.a_in, 14, 14) @[rca.scala 30:35]
    node _g_comb_14_T_1 = bits(input.b_in, 14, 14) @[rca.scala 30:51]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[rca.scala 30:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[14] <= _g_comb_14_T_3 @[rca.scala 30:21]
    node _p_comb_14_T = bits(input.a_in, 14, 14) @[rca.scala 31:35]
    node _p_comb_14_T_1 = bits(input.b_in, 14, 14) @[rca.scala 31:51]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[rca.scala 31:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[14] <= _p_comb_14_T_3 @[rca.scala 31:21]
    node _s_comb_14_T = xor(p_comb[14], c_comb[14]) @[rca.scala 32:34]
    s_comb[14] <= _s_comb_14_T @[rca.scala 32:21]
    node _c_comb_15_T = and(c_comb[14], p_comb[14]) @[rca.scala 33:34]
    node _c_comb_15_T_1 = or(_c_comb_15_T, g_comb[14]) @[rca.scala 33:46]
    c_comb[15] <= _c_comb_15_T_1 @[rca.scala 33:21]
    node _g_comb_15_T = bits(input.a_in, 15, 15) @[rca.scala 30:35]
    node _g_comb_15_T_1 = bits(input.b_in, 15, 15) @[rca.scala 30:51]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[rca.scala 30:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[15] <= _g_comb_15_T_3 @[rca.scala 30:21]
    node _p_comb_15_T = bits(input.a_in, 15, 15) @[rca.scala 31:35]
    node _p_comb_15_T_1 = bits(input.b_in, 15, 15) @[rca.scala 31:51]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[rca.scala 31:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[15] <= _p_comb_15_T_3 @[rca.scala 31:21]
    node _s_comb_15_T = xor(p_comb[15], c_comb[15]) @[rca.scala 32:34]
    s_comb[15] <= _s_comb_15_T @[rca.scala 32:21]
    node _c_comb_16_T = and(c_comb[15], p_comb[15]) @[rca.scala 33:34]
    node _c_comb_16_T_1 = or(_c_comb_16_T, g_comb[15]) @[rca.scala 33:46]
    c_comb[16] <= _c_comb_16_T_1 @[rca.scala 33:21]
    node output_S_lo_lo_lo = cat(s_comb[1], s_comb[0]) @[rca.scala 36:24]
    node output_S_lo_lo_hi = cat(s_comb[3], s_comb[2]) @[rca.scala 36:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[rca.scala 36:24]
    node output_S_lo_hi_lo = cat(s_comb[5], s_comb[4]) @[rca.scala 36:24]
    node output_S_lo_hi_hi = cat(s_comb[7], s_comb[6]) @[rca.scala 36:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[rca.scala 36:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[rca.scala 36:24]
    node output_S_hi_lo_lo = cat(s_comb[9], s_comb[8]) @[rca.scala 36:24]
    node output_S_hi_lo_hi = cat(s_comb[11], s_comb[10]) @[rca.scala 36:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[rca.scala 36:24]
    node output_S_hi_hi_lo = cat(s_comb[13], s_comb[12]) @[rca.scala 36:24]
    node output_S_hi_hi_hi = cat(s_comb[15], s_comb[14]) @[rca.scala 36:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[rca.scala 36:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[rca.scala 36:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[rca.scala 36:24]
    node _output_S_T_1 = asSInt(_output_S_T) @[rca.scala 36:31]
    output.S <= _output_S_T_1 @[rca.scala 36:14]
    node _output_C_T = asSInt(c_comb[16]) @[rca.scala 37:40]
    output.C <= _output_C_T @[rca.scala 37:14]

  module pp_compressor3_2 :
    input clock : Clock
    input reset : Reset
    output input : { flip pp0_in : SInt<16>, flip pp1_in : SInt<16>, flip pp2_in : SInt<16>}
    output output : { S : SInt<16>, C : SInt<16>}

    wire g_comb : UInt<1>[16] @[pp_compressor3_2.scala 22:22]
    wire p_comb : UInt<1>[16] @[pp_compressor3_2.scala 23:22]
    wire s_comb : UInt<1>[16] @[pp_compressor3_2.scala 24:22]
    wire c_comb : UInt<1>[16] @[pp_compressor3_2.scala 25:22]
    node _g_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 28:35]
    node _g_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 28:53]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[0] <= _g_comb_0_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 29:35]
    node _p_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 29:53]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[0] <= _p_comb_0_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 30:46]
    node _s_comb_0_T_1 = bits(_s_comb_0_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_0_T_2 = xor(p_comb[0], _s_comb_0_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[0] <= _s_comb_0_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 31:34]
    node _c_comb_0_T_1 = bits(_c_comb_0_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_0_T_2 = and(_c_comb_0_T_1, p_comb[0]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_0_T_3 = or(_c_comb_0_T_2, g_comb[0]) @[pp_compressor3_2.scala 31:57]
    c_comb[0] <= _c_comb_0_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 28:35]
    node _g_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 28:53]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[1] <= _g_comb_1_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 29:35]
    node _p_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 29:53]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[1] <= _p_comb_1_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 30:46]
    node _s_comb_1_T_1 = bits(_s_comb_1_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_1_T_2 = xor(p_comb[1], _s_comb_1_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[1] <= _s_comb_1_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 31:34]
    node _c_comb_1_T_1 = bits(_c_comb_1_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_1_T_2 = and(_c_comb_1_T_1, p_comb[1]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_1_T_3 = or(_c_comb_1_T_2, g_comb[1]) @[pp_compressor3_2.scala 31:57]
    c_comb[1] <= _c_comb_1_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 28:35]
    node _g_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 28:53]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[2] <= _g_comb_2_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 29:35]
    node _p_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 29:53]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[2] <= _p_comb_2_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 30:46]
    node _s_comb_2_T_1 = bits(_s_comb_2_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_2_T_2 = xor(p_comb[2], _s_comb_2_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[2] <= _s_comb_2_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 31:34]
    node _c_comb_2_T_1 = bits(_c_comb_2_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_2_T_2 = and(_c_comb_2_T_1, p_comb[2]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_2_T_3 = or(_c_comb_2_T_2, g_comb[2]) @[pp_compressor3_2.scala 31:57]
    c_comb[2] <= _c_comb_2_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 28:35]
    node _g_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 28:53]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[3] <= _g_comb_3_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 29:35]
    node _p_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 29:53]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[3] <= _p_comb_3_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 30:46]
    node _s_comb_3_T_1 = bits(_s_comb_3_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_3_T_2 = xor(p_comb[3], _s_comb_3_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[3] <= _s_comb_3_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 31:34]
    node _c_comb_3_T_1 = bits(_c_comb_3_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_3_T_2 = and(_c_comb_3_T_1, p_comb[3]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_3_T_3 = or(_c_comb_3_T_2, g_comb[3]) @[pp_compressor3_2.scala 31:57]
    c_comb[3] <= _c_comb_3_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 28:35]
    node _g_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 28:53]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[4] <= _g_comb_4_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 29:35]
    node _p_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 29:53]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[4] <= _p_comb_4_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 30:46]
    node _s_comb_4_T_1 = bits(_s_comb_4_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_4_T_2 = xor(p_comb[4], _s_comb_4_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[4] <= _s_comb_4_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 31:34]
    node _c_comb_4_T_1 = bits(_c_comb_4_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_4_T_2 = and(_c_comb_4_T_1, p_comb[4]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_4_T_3 = or(_c_comb_4_T_2, g_comb[4]) @[pp_compressor3_2.scala 31:57]
    c_comb[4] <= _c_comb_4_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 28:35]
    node _g_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 28:53]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[5] <= _g_comb_5_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 29:35]
    node _p_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 29:53]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[5] <= _p_comb_5_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 30:46]
    node _s_comb_5_T_1 = bits(_s_comb_5_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_5_T_2 = xor(p_comb[5], _s_comb_5_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[5] <= _s_comb_5_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 31:34]
    node _c_comb_5_T_1 = bits(_c_comb_5_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_5_T_2 = and(_c_comb_5_T_1, p_comb[5]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_5_T_3 = or(_c_comb_5_T_2, g_comb[5]) @[pp_compressor3_2.scala 31:57]
    c_comb[5] <= _c_comb_5_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 28:35]
    node _g_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 28:53]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[6] <= _g_comb_6_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 29:35]
    node _p_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 29:53]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[6] <= _p_comb_6_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 30:46]
    node _s_comb_6_T_1 = bits(_s_comb_6_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_6_T_2 = xor(p_comb[6], _s_comb_6_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[6] <= _s_comb_6_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 31:34]
    node _c_comb_6_T_1 = bits(_c_comb_6_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_6_T_2 = and(_c_comb_6_T_1, p_comb[6]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_6_T_3 = or(_c_comb_6_T_2, g_comb[6]) @[pp_compressor3_2.scala 31:57]
    c_comb[6] <= _c_comb_6_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 28:35]
    node _g_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 28:53]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[7] <= _g_comb_7_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 29:35]
    node _p_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 29:53]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[7] <= _p_comb_7_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 30:46]
    node _s_comb_7_T_1 = bits(_s_comb_7_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_7_T_2 = xor(p_comb[7], _s_comb_7_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[7] <= _s_comb_7_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 31:34]
    node _c_comb_7_T_1 = bits(_c_comb_7_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_7_T_2 = and(_c_comb_7_T_1, p_comb[7]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_7_T_3 = or(_c_comb_7_T_2, g_comb[7]) @[pp_compressor3_2.scala 31:57]
    c_comb[7] <= _c_comb_7_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 28:35]
    node _g_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 28:53]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[8] <= _g_comb_8_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 29:35]
    node _p_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 29:53]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[8] <= _p_comb_8_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 30:46]
    node _s_comb_8_T_1 = bits(_s_comb_8_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_8_T_2 = xor(p_comb[8], _s_comb_8_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[8] <= _s_comb_8_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 31:34]
    node _c_comb_8_T_1 = bits(_c_comb_8_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_8_T_2 = and(_c_comb_8_T_1, p_comb[8]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_8_T_3 = or(_c_comb_8_T_2, g_comb[8]) @[pp_compressor3_2.scala 31:57]
    c_comb[8] <= _c_comb_8_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 28:35]
    node _g_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 28:53]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[9] <= _g_comb_9_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 29:35]
    node _p_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 29:53]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[9] <= _p_comb_9_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 30:46]
    node _s_comb_9_T_1 = bits(_s_comb_9_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_9_T_2 = xor(p_comb[9], _s_comb_9_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[9] <= _s_comb_9_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 31:34]
    node _c_comb_9_T_1 = bits(_c_comb_9_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_9_T_2 = and(_c_comb_9_T_1, p_comb[9]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_9_T_3 = or(_c_comb_9_T_2, g_comb[9]) @[pp_compressor3_2.scala 31:57]
    c_comb[9] <= _c_comb_9_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 28:35]
    node _g_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 28:53]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[10] <= _g_comb_10_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 29:35]
    node _p_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 29:53]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[10] <= _p_comb_10_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 30:46]
    node _s_comb_10_T_1 = bits(_s_comb_10_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_10_T_2 = xor(p_comb[10], _s_comb_10_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[10] <= _s_comb_10_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 31:34]
    node _c_comb_10_T_1 = bits(_c_comb_10_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_10_T_2 = and(_c_comb_10_T_1, p_comb[10]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_10_T_3 = or(_c_comb_10_T_2, g_comb[10]) @[pp_compressor3_2.scala 31:57]
    c_comb[10] <= _c_comb_10_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 28:35]
    node _g_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 28:53]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[11] <= _g_comb_11_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 29:35]
    node _p_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 29:53]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[11] <= _p_comb_11_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 30:46]
    node _s_comb_11_T_1 = bits(_s_comb_11_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_11_T_2 = xor(p_comb[11], _s_comb_11_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[11] <= _s_comb_11_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 31:34]
    node _c_comb_11_T_1 = bits(_c_comb_11_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_11_T_2 = and(_c_comb_11_T_1, p_comb[11]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_11_T_3 = or(_c_comb_11_T_2, g_comb[11]) @[pp_compressor3_2.scala 31:57]
    c_comb[11] <= _c_comb_11_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 28:35]
    node _g_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 28:53]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[12] <= _g_comb_12_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 29:35]
    node _p_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 29:53]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[12] <= _p_comb_12_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 30:46]
    node _s_comb_12_T_1 = bits(_s_comb_12_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_12_T_2 = xor(p_comb[12], _s_comb_12_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[12] <= _s_comb_12_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 31:34]
    node _c_comb_12_T_1 = bits(_c_comb_12_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_12_T_2 = and(_c_comb_12_T_1, p_comb[12]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_12_T_3 = or(_c_comb_12_T_2, g_comb[12]) @[pp_compressor3_2.scala 31:57]
    c_comb[12] <= _c_comb_12_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 28:35]
    node _g_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 28:53]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[13] <= _g_comb_13_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 29:35]
    node _p_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 29:53]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[13] <= _p_comb_13_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 30:46]
    node _s_comb_13_T_1 = bits(_s_comb_13_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_13_T_2 = xor(p_comb[13], _s_comb_13_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[13] <= _s_comb_13_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 31:34]
    node _c_comb_13_T_1 = bits(_c_comb_13_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_13_T_2 = and(_c_comb_13_T_1, p_comb[13]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_13_T_3 = or(_c_comb_13_T_2, g_comb[13]) @[pp_compressor3_2.scala 31:57]
    c_comb[13] <= _c_comb_13_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 28:35]
    node _g_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 28:53]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[14] <= _g_comb_14_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 29:35]
    node _p_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 29:53]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[14] <= _p_comb_14_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 30:46]
    node _s_comb_14_T_1 = bits(_s_comb_14_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_14_T_2 = xor(p_comb[14], _s_comb_14_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[14] <= _s_comb_14_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 31:34]
    node _c_comb_14_T_1 = bits(_c_comb_14_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_14_T_2 = and(_c_comb_14_T_1, p_comb[14]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_14_T_3 = or(_c_comb_14_T_2, g_comb[14]) @[pp_compressor3_2.scala 31:57]
    c_comb[14] <= _c_comb_14_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 28:35]
    node _g_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 28:53]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[15] <= _g_comb_15_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 29:35]
    node _p_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 29:53]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[15] <= _p_comb_15_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 30:46]
    node _s_comb_15_T_1 = bits(_s_comb_15_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_15_T_2 = xor(p_comb[15], _s_comb_15_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[15] <= _s_comb_15_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 31:34]
    node _c_comb_15_T_1 = bits(_c_comb_15_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_15_T_2 = and(_c_comb_15_T_1, p_comb[15]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_15_T_3 = or(_c_comb_15_T_2, g_comb[15]) @[pp_compressor3_2.scala 31:57]
    c_comb[15] <= _c_comb_15_T_3 @[pp_compressor3_2.scala 31:19]
    node output_S_lo_lo_lo = cat(s_comb[1], s_comb[0]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo_hi = cat(s_comb[3], s_comb[2]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_lo = cat(s_comb[5], s_comb[4]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_hi = cat(s_comb[7], s_comb[6]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_lo = cat(s_comb[9], s_comb[8]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_hi = cat(s_comb[11], s_comb[10]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_lo = cat(s_comb[13], s_comb[12]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_hi = cat(s_comb[15], s_comb[14]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T_1 = asSInt(_output_S_T) @[pp_compressor3_2.scala 34:31]
    output.S <= _output_S_T_1 @[pp_compressor3_2.scala 34:14]
    node output_C_lo_lo_lo = cat(c_comb[1], c_comb[0]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo_hi = cat(c_comb[3], c_comb[2]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo = cat(output_C_lo_lo_hi, output_C_lo_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_lo = cat(c_comb[5], c_comb[4]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_hi = cat(c_comb[7], c_comb[6]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi = cat(output_C_lo_hi_hi, output_C_lo_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo = cat(output_C_lo_hi, output_C_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_lo = cat(c_comb[9], c_comb[8]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_hi = cat(c_comb[11], c_comb[10]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo = cat(output_C_hi_lo_hi, output_C_hi_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_lo = cat(c_comb[13], c_comb[12]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_hi = cat(c_comb[15], c_comb[14]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi = cat(output_C_hi_hi_hi, output_C_hi_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi = cat(output_C_hi_hi, output_C_hi_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T = cat(output_C_hi, output_C_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T_1 = bits(_output_C_T, 14, 0) @[pp_compressor3_2.scala 35:36]
    node _output_C_T_2 = cat(_output_C_T_1, UInt<1>("h0")) @[Cat.scala 33:92]
    node _output_C_T_3 = asSInt(_output_C_T_2) @[pp_compressor3_2.scala 35:61]
    output.C <= _output_C_T_3 @[pp_compressor3_2.scala 35:14]

  module pp_compressor3_2_1 :
    input clock : Clock
    input reset : Reset
    output input : { flip pp0_in : SInt<16>, flip pp1_in : SInt<16>, flip pp2_in : SInt<16>}
    output output : { S : SInt<16>, C : SInt<16>}

    wire g_comb : UInt<1>[16] @[pp_compressor3_2.scala 22:22]
    wire p_comb : UInt<1>[16] @[pp_compressor3_2.scala 23:22]
    wire s_comb : UInt<1>[16] @[pp_compressor3_2.scala 24:22]
    wire c_comb : UInt<1>[16] @[pp_compressor3_2.scala 25:22]
    node _g_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 28:35]
    node _g_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 28:53]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[0] <= _g_comb_0_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 29:35]
    node _p_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 29:53]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[0] <= _p_comb_0_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 30:46]
    node _s_comb_0_T_1 = bits(_s_comb_0_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_0_T_2 = xor(p_comb[0], _s_comb_0_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[0] <= _s_comb_0_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 31:34]
    node _c_comb_0_T_1 = bits(_c_comb_0_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_0_T_2 = and(_c_comb_0_T_1, p_comb[0]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_0_T_3 = or(_c_comb_0_T_2, g_comb[0]) @[pp_compressor3_2.scala 31:57]
    c_comb[0] <= _c_comb_0_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 28:35]
    node _g_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 28:53]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[1] <= _g_comb_1_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 29:35]
    node _p_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 29:53]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[1] <= _p_comb_1_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 30:46]
    node _s_comb_1_T_1 = bits(_s_comb_1_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_1_T_2 = xor(p_comb[1], _s_comb_1_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[1] <= _s_comb_1_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 31:34]
    node _c_comb_1_T_1 = bits(_c_comb_1_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_1_T_2 = and(_c_comb_1_T_1, p_comb[1]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_1_T_3 = or(_c_comb_1_T_2, g_comb[1]) @[pp_compressor3_2.scala 31:57]
    c_comb[1] <= _c_comb_1_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 28:35]
    node _g_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 28:53]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[2] <= _g_comb_2_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 29:35]
    node _p_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 29:53]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[2] <= _p_comb_2_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 30:46]
    node _s_comb_2_T_1 = bits(_s_comb_2_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_2_T_2 = xor(p_comb[2], _s_comb_2_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[2] <= _s_comb_2_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 31:34]
    node _c_comb_2_T_1 = bits(_c_comb_2_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_2_T_2 = and(_c_comb_2_T_1, p_comb[2]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_2_T_3 = or(_c_comb_2_T_2, g_comb[2]) @[pp_compressor3_2.scala 31:57]
    c_comb[2] <= _c_comb_2_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 28:35]
    node _g_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 28:53]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[3] <= _g_comb_3_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 29:35]
    node _p_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 29:53]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[3] <= _p_comb_3_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 30:46]
    node _s_comb_3_T_1 = bits(_s_comb_3_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_3_T_2 = xor(p_comb[3], _s_comb_3_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[3] <= _s_comb_3_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 31:34]
    node _c_comb_3_T_1 = bits(_c_comb_3_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_3_T_2 = and(_c_comb_3_T_1, p_comb[3]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_3_T_3 = or(_c_comb_3_T_2, g_comb[3]) @[pp_compressor3_2.scala 31:57]
    c_comb[3] <= _c_comb_3_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 28:35]
    node _g_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 28:53]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[4] <= _g_comb_4_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 29:35]
    node _p_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 29:53]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[4] <= _p_comb_4_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 30:46]
    node _s_comb_4_T_1 = bits(_s_comb_4_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_4_T_2 = xor(p_comb[4], _s_comb_4_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[4] <= _s_comb_4_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 31:34]
    node _c_comb_4_T_1 = bits(_c_comb_4_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_4_T_2 = and(_c_comb_4_T_1, p_comb[4]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_4_T_3 = or(_c_comb_4_T_2, g_comb[4]) @[pp_compressor3_2.scala 31:57]
    c_comb[4] <= _c_comb_4_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 28:35]
    node _g_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 28:53]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[5] <= _g_comb_5_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 29:35]
    node _p_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 29:53]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[5] <= _p_comb_5_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 30:46]
    node _s_comb_5_T_1 = bits(_s_comb_5_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_5_T_2 = xor(p_comb[5], _s_comb_5_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[5] <= _s_comb_5_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 31:34]
    node _c_comb_5_T_1 = bits(_c_comb_5_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_5_T_2 = and(_c_comb_5_T_1, p_comb[5]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_5_T_3 = or(_c_comb_5_T_2, g_comb[5]) @[pp_compressor3_2.scala 31:57]
    c_comb[5] <= _c_comb_5_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 28:35]
    node _g_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 28:53]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[6] <= _g_comb_6_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 29:35]
    node _p_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 29:53]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[6] <= _p_comb_6_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 30:46]
    node _s_comb_6_T_1 = bits(_s_comb_6_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_6_T_2 = xor(p_comb[6], _s_comb_6_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[6] <= _s_comb_6_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 31:34]
    node _c_comb_6_T_1 = bits(_c_comb_6_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_6_T_2 = and(_c_comb_6_T_1, p_comb[6]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_6_T_3 = or(_c_comb_6_T_2, g_comb[6]) @[pp_compressor3_2.scala 31:57]
    c_comb[6] <= _c_comb_6_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 28:35]
    node _g_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 28:53]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[7] <= _g_comb_7_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 29:35]
    node _p_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 29:53]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[7] <= _p_comb_7_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 30:46]
    node _s_comb_7_T_1 = bits(_s_comb_7_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_7_T_2 = xor(p_comb[7], _s_comb_7_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[7] <= _s_comb_7_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 31:34]
    node _c_comb_7_T_1 = bits(_c_comb_7_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_7_T_2 = and(_c_comb_7_T_1, p_comb[7]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_7_T_3 = or(_c_comb_7_T_2, g_comb[7]) @[pp_compressor3_2.scala 31:57]
    c_comb[7] <= _c_comb_7_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 28:35]
    node _g_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 28:53]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[8] <= _g_comb_8_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 29:35]
    node _p_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 29:53]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[8] <= _p_comb_8_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 30:46]
    node _s_comb_8_T_1 = bits(_s_comb_8_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_8_T_2 = xor(p_comb[8], _s_comb_8_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[8] <= _s_comb_8_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 31:34]
    node _c_comb_8_T_1 = bits(_c_comb_8_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_8_T_2 = and(_c_comb_8_T_1, p_comb[8]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_8_T_3 = or(_c_comb_8_T_2, g_comb[8]) @[pp_compressor3_2.scala 31:57]
    c_comb[8] <= _c_comb_8_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 28:35]
    node _g_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 28:53]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[9] <= _g_comb_9_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 29:35]
    node _p_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 29:53]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[9] <= _p_comb_9_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 30:46]
    node _s_comb_9_T_1 = bits(_s_comb_9_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_9_T_2 = xor(p_comb[9], _s_comb_9_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[9] <= _s_comb_9_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 31:34]
    node _c_comb_9_T_1 = bits(_c_comb_9_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_9_T_2 = and(_c_comb_9_T_1, p_comb[9]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_9_T_3 = or(_c_comb_9_T_2, g_comb[9]) @[pp_compressor3_2.scala 31:57]
    c_comb[9] <= _c_comb_9_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 28:35]
    node _g_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 28:53]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[10] <= _g_comb_10_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 29:35]
    node _p_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 29:53]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[10] <= _p_comb_10_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 30:46]
    node _s_comb_10_T_1 = bits(_s_comb_10_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_10_T_2 = xor(p_comb[10], _s_comb_10_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[10] <= _s_comb_10_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 31:34]
    node _c_comb_10_T_1 = bits(_c_comb_10_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_10_T_2 = and(_c_comb_10_T_1, p_comb[10]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_10_T_3 = or(_c_comb_10_T_2, g_comb[10]) @[pp_compressor3_2.scala 31:57]
    c_comb[10] <= _c_comb_10_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 28:35]
    node _g_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 28:53]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[11] <= _g_comb_11_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 29:35]
    node _p_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 29:53]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[11] <= _p_comb_11_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 30:46]
    node _s_comb_11_T_1 = bits(_s_comb_11_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_11_T_2 = xor(p_comb[11], _s_comb_11_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[11] <= _s_comb_11_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 31:34]
    node _c_comb_11_T_1 = bits(_c_comb_11_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_11_T_2 = and(_c_comb_11_T_1, p_comb[11]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_11_T_3 = or(_c_comb_11_T_2, g_comb[11]) @[pp_compressor3_2.scala 31:57]
    c_comb[11] <= _c_comb_11_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 28:35]
    node _g_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 28:53]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[12] <= _g_comb_12_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 29:35]
    node _p_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 29:53]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[12] <= _p_comb_12_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 30:46]
    node _s_comb_12_T_1 = bits(_s_comb_12_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_12_T_2 = xor(p_comb[12], _s_comb_12_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[12] <= _s_comb_12_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 31:34]
    node _c_comb_12_T_1 = bits(_c_comb_12_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_12_T_2 = and(_c_comb_12_T_1, p_comb[12]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_12_T_3 = or(_c_comb_12_T_2, g_comb[12]) @[pp_compressor3_2.scala 31:57]
    c_comb[12] <= _c_comb_12_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 28:35]
    node _g_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 28:53]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[13] <= _g_comb_13_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 29:35]
    node _p_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 29:53]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[13] <= _p_comb_13_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 30:46]
    node _s_comb_13_T_1 = bits(_s_comb_13_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_13_T_2 = xor(p_comb[13], _s_comb_13_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[13] <= _s_comb_13_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 31:34]
    node _c_comb_13_T_1 = bits(_c_comb_13_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_13_T_2 = and(_c_comb_13_T_1, p_comb[13]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_13_T_3 = or(_c_comb_13_T_2, g_comb[13]) @[pp_compressor3_2.scala 31:57]
    c_comb[13] <= _c_comb_13_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 28:35]
    node _g_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 28:53]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[14] <= _g_comb_14_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 29:35]
    node _p_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 29:53]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[14] <= _p_comb_14_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 30:46]
    node _s_comb_14_T_1 = bits(_s_comb_14_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_14_T_2 = xor(p_comb[14], _s_comb_14_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[14] <= _s_comb_14_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 31:34]
    node _c_comb_14_T_1 = bits(_c_comb_14_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_14_T_2 = and(_c_comb_14_T_1, p_comb[14]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_14_T_3 = or(_c_comb_14_T_2, g_comb[14]) @[pp_compressor3_2.scala 31:57]
    c_comb[14] <= _c_comb_14_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 28:35]
    node _g_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 28:53]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[15] <= _g_comb_15_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 29:35]
    node _p_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 29:53]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[15] <= _p_comb_15_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 30:46]
    node _s_comb_15_T_1 = bits(_s_comb_15_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_15_T_2 = xor(p_comb[15], _s_comb_15_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[15] <= _s_comb_15_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 31:34]
    node _c_comb_15_T_1 = bits(_c_comb_15_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_15_T_2 = and(_c_comb_15_T_1, p_comb[15]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_15_T_3 = or(_c_comb_15_T_2, g_comb[15]) @[pp_compressor3_2.scala 31:57]
    c_comb[15] <= _c_comb_15_T_3 @[pp_compressor3_2.scala 31:19]
    node output_S_lo_lo_lo = cat(s_comb[1], s_comb[0]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo_hi = cat(s_comb[3], s_comb[2]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_lo = cat(s_comb[5], s_comb[4]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_hi = cat(s_comb[7], s_comb[6]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_lo = cat(s_comb[9], s_comb[8]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_hi = cat(s_comb[11], s_comb[10]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_lo = cat(s_comb[13], s_comb[12]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_hi = cat(s_comb[15], s_comb[14]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T_1 = asSInt(_output_S_T) @[pp_compressor3_2.scala 34:31]
    output.S <= _output_S_T_1 @[pp_compressor3_2.scala 34:14]
    node output_C_lo_lo_lo = cat(c_comb[1], c_comb[0]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo_hi = cat(c_comb[3], c_comb[2]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo = cat(output_C_lo_lo_hi, output_C_lo_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_lo = cat(c_comb[5], c_comb[4]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_hi = cat(c_comb[7], c_comb[6]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi = cat(output_C_lo_hi_hi, output_C_lo_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo = cat(output_C_lo_hi, output_C_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_lo = cat(c_comb[9], c_comb[8]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_hi = cat(c_comb[11], c_comb[10]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo = cat(output_C_hi_lo_hi, output_C_hi_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_lo = cat(c_comb[13], c_comb[12]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_hi = cat(c_comb[15], c_comb[14]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi = cat(output_C_hi_hi_hi, output_C_hi_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi = cat(output_C_hi_hi, output_C_hi_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T = cat(output_C_hi, output_C_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T_1 = bits(_output_C_T, 14, 0) @[pp_compressor3_2.scala 35:36]
    node _output_C_T_2 = cat(_output_C_T_1, UInt<1>("h0")) @[Cat.scala 33:92]
    node _output_C_T_3 = asSInt(_output_C_T_2) @[pp_compressor3_2.scala 35:61]
    output.C <= _output_C_T_3 @[pp_compressor3_2.scala 35:14]

  module pp_compressor3_2_2 :
    input clock : Clock
    input reset : Reset
    output input : { flip pp0_in : SInt<16>, flip pp1_in : SInt<16>, flip pp2_in : SInt<16>}
    output output : { S : SInt<16>, C : SInt<16>}

    wire g_comb : UInt<1>[16] @[pp_compressor3_2.scala 22:22]
    wire p_comb : UInt<1>[16] @[pp_compressor3_2.scala 23:22]
    wire s_comb : UInt<1>[16] @[pp_compressor3_2.scala 24:22]
    wire c_comb : UInt<1>[16] @[pp_compressor3_2.scala 25:22]
    node _g_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 28:35]
    node _g_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 28:53]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[0] <= _g_comb_0_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 29:35]
    node _p_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 29:53]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[0] <= _p_comb_0_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 30:46]
    node _s_comb_0_T_1 = bits(_s_comb_0_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_0_T_2 = xor(p_comb[0], _s_comb_0_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[0] <= _s_comb_0_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 31:34]
    node _c_comb_0_T_1 = bits(_c_comb_0_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_0_T_2 = and(_c_comb_0_T_1, p_comb[0]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_0_T_3 = or(_c_comb_0_T_2, g_comb[0]) @[pp_compressor3_2.scala 31:57]
    c_comb[0] <= _c_comb_0_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 28:35]
    node _g_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 28:53]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[1] <= _g_comb_1_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 29:35]
    node _p_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 29:53]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[1] <= _p_comb_1_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 30:46]
    node _s_comb_1_T_1 = bits(_s_comb_1_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_1_T_2 = xor(p_comb[1], _s_comb_1_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[1] <= _s_comb_1_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 31:34]
    node _c_comb_1_T_1 = bits(_c_comb_1_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_1_T_2 = and(_c_comb_1_T_1, p_comb[1]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_1_T_3 = or(_c_comb_1_T_2, g_comb[1]) @[pp_compressor3_2.scala 31:57]
    c_comb[1] <= _c_comb_1_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 28:35]
    node _g_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 28:53]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[2] <= _g_comb_2_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 29:35]
    node _p_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 29:53]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[2] <= _p_comb_2_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 30:46]
    node _s_comb_2_T_1 = bits(_s_comb_2_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_2_T_2 = xor(p_comb[2], _s_comb_2_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[2] <= _s_comb_2_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 31:34]
    node _c_comb_2_T_1 = bits(_c_comb_2_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_2_T_2 = and(_c_comb_2_T_1, p_comb[2]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_2_T_3 = or(_c_comb_2_T_2, g_comb[2]) @[pp_compressor3_2.scala 31:57]
    c_comb[2] <= _c_comb_2_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 28:35]
    node _g_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 28:53]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[3] <= _g_comb_3_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 29:35]
    node _p_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 29:53]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[3] <= _p_comb_3_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 30:46]
    node _s_comb_3_T_1 = bits(_s_comb_3_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_3_T_2 = xor(p_comb[3], _s_comb_3_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[3] <= _s_comb_3_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 31:34]
    node _c_comb_3_T_1 = bits(_c_comb_3_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_3_T_2 = and(_c_comb_3_T_1, p_comb[3]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_3_T_3 = or(_c_comb_3_T_2, g_comb[3]) @[pp_compressor3_2.scala 31:57]
    c_comb[3] <= _c_comb_3_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 28:35]
    node _g_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 28:53]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[4] <= _g_comb_4_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 29:35]
    node _p_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 29:53]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[4] <= _p_comb_4_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 30:46]
    node _s_comb_4_T_1 = bits(_s_comb_4_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_4_T_2 = xor(p_comb[4], _s_comb_4_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[4] <= _s_comb_4_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 31:34]
    node _c_comb_4_T_1 = bits(_c_comb_4_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_4_T_2 = and(_c_comb_4_T_1, p_comb[4]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_4_T_3 = or(_c_comb_4_T_2, g_comb[4]) @[pp_compressor3_2.scala 31:57]
    c_comb[4] <= _c_comb_4_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 28:35]
    node _g_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 28:53]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[5] <= _g_comb_5_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 29:35]
    node _p_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 29:53]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[5] <= _p_comb_5_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 30:46]
    node _s_comb_5_T_1 = bits(_s_comb_5_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_5_T_2 = xor(p_comb[5], _s_comb_5_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[5] <= _s_comb_5_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 31:34]
    node _c_comb_5_T_1 = bits(_c_comb_5_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_5_T_2 = and(_c_comb_5_T_1, p_comb[5]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_5_T_3 = or(_c_comb_5_T_2, g_comb[5]) @[pp_compressor3_2.scala 31:57]
    c_comb[5] <= _c_comb_5_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 28:35]
    node _g_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 28:53]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[6] <= _g_comb_6_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 29:35]
    node _p_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 29:53]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[6] <= _p_comb_6_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 30:46]
    node _s_comb_6_T_1 = bits(_s_comb_6_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_6_T_2 = xor(p_comb[6], _s_comb_6_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[6] <= _s_comb_6_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 31:34]
    node _c_comb_6_T_1 = bits(_c_comb_6_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_6_T_2 = and(_c_comb_6_T_1, p_comb[6]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_6_T_3 = or(_c_comb_6_T_2, g_comb[6]) @[pp_compressor3_2.scala 31:57]
    c_comb[6] <= _c_comb_6_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 28:35]
    node _g_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 28:53]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[7] <= _g_comb_7_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 29:35]
    node _p_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 29:53]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[7] <= _p_comb_7_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 30:46]
    node _s_comb_7_T_1 = bits(_s_comb_7_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_7_T_2 = xor(p_comb[7], _s_comb_7_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[7] <= _s_comb_7_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 31:34]
    node _c_comb_7_T_1 = bits(_c_comb_7_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_7_T_2 = and(_c_comb_7_T_1, p_comb[7]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_7_T_3 = or(_c_comb_7_T_2, g_comb[7]) @[pp_compressor3_2.scala 31:57]
    c_comb[7] <= _c_comb_7_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 28:35]
    node _g_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 28:53]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[8] <= _g_comb_8_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 29:35]
    node _p_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 29:53]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[8] <= _p_comb_8_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 30:46]
    node _s_comb_8_T_1 = bits(_s_comb_8_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_8_T_2 = xor(p_comb[8], _s_comb_8_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[8] <= _s_comb_8_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 31:34]
    node _c_comb_8_T_1 = bits(_c_comb_8_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_8_T_2 = and(_c_comb_8_T_1, p_comb[8]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_8_T_3 = or(_c_comb_8_T_2, g_comb[8]) @[pp_compressor3_2.scala 31:57]
    c_comb[8] <= _c_comb_8_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 28:35]
    node _g_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 28:53]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[9] <= _g_comb_9_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 29:35]
    node _p_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 29:53]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[9] <= _p_comb_9_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 30:46]
    node _s_comb_9_T_1 = bits(_s_comb_9_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_9_T_2 = xor(p_comb[9], _s_comb_9_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[9] <= _s_comb_9_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 31:34]
    node _c_comb_9_T_1 = bits(_c_comb_9_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_9_T_2 = and(_c_comb_9_T_1, p_comb[9]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_9_T_3 = or(_c_comb_9_T_2, g_comb[9]) @[pp_compressor3_2.scala 31:57]
    c_comb[9] <= _c_comb_9_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 28:35]
    node _g_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 28:53]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[10] <= _g_comb_10_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 29:35]
    node _p_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 29:53]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[10] <= _p_comb_10_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 30:46]
    node _s_comb_10_T_1 = bits(_s_comb_10_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_10_T_2 = xor(p_comb[10], _s_comb_10_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[10] <= _s_comb_10_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 31:34]
    node _c_comb_10_T_1 = bits(_c_comb_10_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_10_T_2 = and(_c_comb_10_T_1, p_comb[10]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_10_T_3 = or(_c_comb_10_T_2, g_comb[10]) @[pp_compressor3_2.scala 31:57]
    c_comb[10] <= _c_comb_10_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 28:35]
    node _g_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 28:53]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[11] <= _g_comb_11_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 29:35]
    node _p_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 29:53]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[11] <= _p_comb_11_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 30:46]
    node _s_comb_11_T_1 = bits(_s_comb_11_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_11_T_2 = xor(p_comb[11], _s_comb_11_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[11] <= _s_comb_11_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 31:34]
    node _c_comb_11_T_1 = bits(_c_comb_11_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_11_T_2 = and(_c_comb_11_T_1, p_comb[11]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_11_T_3 = or(_c_comb_11_T_2, g_comb[11]) @[pp_compressor3_2.scala 31:57]
    c_comb[11] <= _c_comb_11_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 28:35]
    node _g_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 28:53]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[12] <= _g_comb_12_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 29:35]
    node _p_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 29:53]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[12] <= _p_comb_12_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 30:46]
    node _s_comb_12_T_1 = bits(_s_comb_12_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_12_T_2 = xor(p_comb[12], _s_comb_12_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[12] <= _s_comb_12_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 31:34]
    node _c_comb_12_T_1 = bits(_c_comb_12_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_12_T_2 = and(_c_comb_12_T_1, p_comb[12]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_12_T_3 = or(_c_comb_12_T_2, g_comb[12]) @[pp_compressor3_2.scala 31:57]
    c_comb[12] <= _c_comb_12_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 28:35]
    node _g_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 28:53]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[13] <= _g_comb_13_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 29:35]
    node _p_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 29:53]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[13] <= _p_comb_13_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 30:46]
    node _s_comb_13_T_1 = bits(_s_comb_13_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_13_T_2 = xor(p_comb[13], _s_comb_13_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[13] <= _s_comb_13_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 31:34]
    node _c_comb_13_T_1 = bits(_c_comb_13_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_13_T_2 = and(_c_comb_13_T_1, p_comb[13]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_13_T_3 = or(_c_comb_13_T_2, g_comb[13]) @[pp_compressor3_2.scala 31:57]
    c_comb[13] <= _c_comb_13_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 28:35]
    node _g_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 28:53]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[14] <= _g_comb_14_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 29:35]
    node _p_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 29:53]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[14] <= _p_comb_14_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 30:46]
    node _s_comb_14_T_1 = bits(_s_comb_14_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_14_T_2 = xor(p_comb[14], _s_comb_14_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[14] <= _s_comb_14_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 31:34]
    node _c_comb_14_T_1 = bits(_c_comb_14_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_14_T_2 = and(_c_comb_14_T_1, p_comb[14]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_14_T_3 = or(_c_comb_14_T_2, g_comb[14]) @[pp_compressor3_2.scala 31:57]
    c_comb[14] <= _c_comb_14_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 28:35]
    node _g_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 28:53]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[15] <= _g_comb_15_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 29:35]
    node _p_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 29:53]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[15] <= _p_comb_15_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 30:46]
    node _s_comb_15_T_1 = bits(_s_comb_15_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_15_T_2 = xor(p_comb[15], _s_comb_15_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[15] <= _s_comb_15_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 31:34]
    node _c_comb_15_T_1 = bits(_c_comb_15_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_15_T_2 = and(_c_comb_15_T_1, p_comb[15]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_15_T_3 = or(_c_comb_15_T_2, g_comb[15]) @[pp_compressor3_2.scala 31:57]
    c_comb[15] <= _c_comb_15_T_3 @[pp_compressor3_2.scala 31:19]
    node output_S_lo_lo_lo = cat(s_comb[1], s_comb[0]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo_hi = cat(s_comb[3], s_comb[2]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_lo = cat(s_comb[5], s_comb[4]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_hi = cat(s_comb[7], s_comb[6]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_lo = cat(s_comb[9], s_comb[8]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_hi = cat(s_comb[11], s_comb[10]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_lo = cat(s_comb[13], s_comb[12]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_hi = cat(s_comb[15], s_comb[14]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T_1 = asSInt(_output_S_T) @[pp_compressor3_2.scala 34:31]
    output.S <= _output_S_T_1 @[pp_compressor3_2.scala 34:14]
    node output_C_lo_lo_lo = cat(c_comb[1], c_comb[0]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo_hi = cat(c_comb[3], c_comb[2]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo = cat(output_C_lo_lo_hi, output_C_lo_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_lo = cat(c_comb[5], c_comb[4]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_hi = cat(c_comb[7], c_comb[6]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi = cat(output_C_lo_hi_hi, output_C_lo_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo = cat(output_C_lo_hi, output_C_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_lo = cat(c_comb[9], c_comb[8]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_hi = cat(c_comb[11], c_comb[10]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo = cat(output_C_hi_lo_hi, output_C_hi_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_lo = cat(c_comb[13], c_comb[12]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_hi = cat(c_comb[15], c_comb[14]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi = cat(output_C_hi_hi_hi, output_C_hi_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi = cat(output_C_hi_hi, output_C_hi_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T = cat(output_C_hi, output_C_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T_1 = bits(_output_C_T, 14, 0) @[pp_compressor3_2.scala 35:36]
    node _output_C_T_2 = cat(_output_C_T_1, UInt<1>("h0")) @[Cat.scala 33:92]
    node _output_C_T_3 = asSInt(_output_C_T_2) @[pp_compressor3_2.scala 35:61]
    output.C <= _output_C_T_3 @[pp_compressor3_2.scala 35:14]

  module wallaceTree :
    input clock : Clock
    input reset : Reset
    output io : { flip data_i : SInt<16>[5], data_o : SInt<16>}

    inst rca of RCA @[wallace_tree.scala 13:19]
    rca.clock <= clock
    rca.reset <= reset
    wire _rca_in_WIRE : SInt<16>[2] @[wallace_tree.scala 52:32]
    _rca_in_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 52:32]
    _rca_in_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 52:32]
    wire rca_in : SInt<16>[2]
    rca_in <= _rca_in_WIRE
    wire _l1_csa_in_WIRE : SInt<16>[3] @[wallace_tree.scala 55:36]
    _l1_csa_in_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 55:36]
    _l1_csa_in_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 55:36]
    _l1_csa_in_WIRE[2] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 55:36]
    wire l1_csa_in : SInt<16>[3]
    l1_csa_in <= _l1_csa_in_WIRE
    wire _l1_csa_os_WIRE : SInt<16>[1] @[wallace_tree.scala 56:36]
    _l1_csa_os_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 56:36]
    wire l1_csa_os : SInt<16>[1]
    l1_csa_os <= _l1_csa_os_WIRE
    wire _l1_csa_oc_WIRE : SInt<16>[1] @[wallace_tree.scala 57:36]
    _l1_csa_oc_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 57:36]
    wire l1_csa_oc : SInt<16>[1]
    l1_csa_oc <= _l1_csa_oc_WIRE
    wire _l1_csa_out_WIRE : SInt<16>[4] @[wallace_tree.scala 58:36]
    _l1_csa_out_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 58:36]
    _l1_csa_out_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 58:36]
    _l1_csa_out_WIRE[2] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 58:36]
    _l1_csa_out_WIRE[3] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 58:36]
    wire l1_csa_out : SInt<16>[4]
    l1_csa_out <= _l1_csa_out_WIRE
    inst layer1CSA_0 of pp_compressor3_2 @[wallace_tree.scala 59:44]
    layer1CSA_0.clock <= clock
    layer1CSA_0.reset <= reset
    l1_csa_in[0] <= io.data_i[0] @[wallace_tree.scala 61:43]
    l1_csa_in[1] <= io.data_i[1] @[wallace_tree.scala 61:43]
    l1_csa_in[2] <= io.data_i[2] @[wallace_tree.scala 61:43]
    layer1CSA_0.input.pp0_in <= l1_csa_in[0] @[wallace_tree.scala 63:31]
    layer1CSA_0.input.pp1_in <= l1_csa_in[1] @[wallace_tree.scala 64:31]
    layer1CSA_0.input.pp2_in <= l1_csa_in[2] @[wallace_tree.scala 65:31]
    l1_csa_os[0] <= layer1CSA_0.output.S @[wallace_tree.scala 66:31]
    l1_csa_oc[0] <= layer1CSA_0.output.C @[wallace_tree.scala 67:31]
    l1_csa_out[0] <= l1_csa_os[0] @[wallace_tree.scala 68:33]
    l1_csa_out[1] <= l1_csa_oc[0] @[wallace_tree.scala 69:35]
    l1_csa_out[3] <= io.data_i[4] @[wallace_tree.scala 73:32]
    l1_csa_out[2] <= io.data_i[3] @[wallace_tree.scala 73:32]
    wire _l2_csa_in_WIRE : SInt<16>[3] @[wallace_tree.scala 81:37]
    _l2_csa_in_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 81:37]
    _l2_csa_in_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 81:37]
    _l2_csa_in_WIRE[2] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 81:37]
    wire l2_csa_in : SInt<16>[3]
    l2_csa_in <= _l2_csa_in_WIRE
    wire _l2_csa_os_WIRE : SInt<16>[1] @[wallace_tree.scala 82:37]
    _l2_csa_os_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 82:37]
    wire l2_csa_os : SInt<16>[1]
    l2_csa_os <= _l2_csa_os_WIRE
    wire _l2_csa_oc_WIRE : SInt<16>[1] @[wallace_tree.scala 83:37]
    _l2_csa_oc_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 83:37]
    wire l2_csa_oc : SInt<16>[1]
    l2_csa_oc <= _l2_csa_oc_WIRE
    wire _l2_csa_out_WIRE : SInt<16>[3] @[wallace_tree.scala 84:38]
    _l2_csa_out_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 84:38]
    _l2_csa_out_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 84:38]
    _l2_csa_out_WIRE[2] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 84:38]
    wire l2_csa_out : SInt<16>[3]
    l2_csa_out <= _l2_csa_out_WIRE
    inst layer2CSA_0 of pp_compressor3_2_1 @[wallace_tree.scala 85:46]
    layer2CSA_0.clock <= clock
    layer2CSA_0.reset <= reset
    l2_csa_in[0] <= l1_csa_out[0] @[wallace_tree.scala 87:46]
    l2_csa_in[1] <= l1_csa_out[1] @[wallace_tree.scala 87:46]
    l2_csa_in[2] <= l1_csa_out[2] @[wallace_tree.scala 87:46]
    layer2CSA_0.input.pp0_in <= l2_csa_in[0] @[wallace_tree.scala 89:33]
    layer2CSA_0.input.pp1_in <= l2_csa_in[1] @[wallace_tree.scala 90:33]
    layer2CSA_0.input.pp2_in <= l2_csa_in[2] @[wallace_tree.scala 91:33]
    l2_csa_os[0] <= layer2CSA_0.output.S @[wallace_tree.scala 92:33]
    l2_csa_oc[0] <= layer2CSA_0.output.C @[wallace_tree.scala 93:33]
    l2_csa_out[0] <= l2_csa_os[0] @[wallace_tree.scala 94:35]
    l2_csa_out[1] <= l2_csa_oc[0] @[wallace_tree.scala 95:37]
    l2_csa_out[2] <= l1_csa_out[3] @[wallace_tree.scala 99:34]
    wire _l3_csa_in_WIRE : SInt<16>[3] @[wallace_tree.scala 107:39]
    _l3_csa_in_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 107:39]
    _l3_csa_in_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 107:39]
    _l3_csa_in_WIRE[2] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 107:39]
    wire l3_csa_in : SInt<16>[3]
    l3_csa_in <= _l3_csa_in_WIRE
    wire _l3_csa_os_WIRE : SInt<16>[1] @[wallace_tree.scala 108:39]
    _l3_csa_os_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 108:39]
    wire l3_csa_os : SInt<16>[1]
    l3_csa_os <= _l3_csa_os_WIRE
    wire _l3_csa_oc_WIRE : SInt<16>[1] @[wallace_tree.scala 109:39]
    _l3_csa_oc_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 109:39]
    wire l3_csa_oc : SInt<16>[1]
    l3_csa_oc <= _l3_csa_oc_WIRE
    wire _l3_csa_out_WIRE : SInt<16>[2] @[wallace_tree.scala 110:40]
    _l3_csa_out_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 110:40]
    _l3_csa_out_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 110:40]
    wire l3_csa_out : SInt<16>[2]
    l3_csa_out <= _l3_csa_out_WIRE
    inst layer3CSA_0 of pp_compressor3_2_2 @[wallace_tree.scala 111:48]
    layer3CSA_0.clock <= clock
    layer3CSA_0.reset <= reset
    l3_csa_in[0] <= l2_csa_out[0] @[wallace_tree.scala 113:48]
    l3_csa_in[1] <= l2_csa_out[1] @[wallace_tree.scala 113:48]
    l3_csa_in[2] <= l2_csa_out[2] @[wallace_tree.scala 113:48]
    layer3CSA_0.input.pp0_in <= l3_csa_in[0] @[wallace_tree.scala 115:35]
    layer3CSA_0.input.pp1_in <= l3_csa_in[1] @[wallace_tree.scala 116:35]
    layer3CSA_0.input.pp2_in <= l3_csa_in[2] @[wallace_tree.scala 117:35]
    l3_csa_os[0] <= layer3CSA_0.output.S @[wallace_tree.scala 118:22]
    l3_csa_oc[0] <= layer3CSA_0.output.C @[wallace_tree.scala 119:22]
    l3_csa_out[0] <= l3_csa_os[0] @[wallace_tree.scala 120:27]
    l3_csa_out[1] <= l3_csa_oc[0] @[wallace_tree.scala 121:31]
    rca_in <= l3_csa_out @[wallace_tree.scala 129:16]
    rca.input.a_in <= rca_in[0] @[wallace_tree.scala 250:18]
    rca.input.b_in <= rca_in[1] @[wallace_tree.scala 251:18]
    rca.input.c_in <= asSInt(UInt<1>("h0")) @[wallace_tree.scala 252:18]
    io.data_o <= rca.output.S @[wallace_tree.scala 253:18]

  module Multiplier :
    input clock : Clock
    input reset : Reset
    output input : { flip multiplicand : SInt<8>, flip multiplier : SInt<8>}
    output output : { product : SInt<16>}

    inst booth2_encoder of booth2Encoder @[multiplier.scala 21:34]
    booth2_encoder.clock <= clock
    booth2_encoder.reset <= reset
    inst pp_generator of ppGenerator @[multiplier.scala 22:34]
    pp_generator.clock <= clock
    pp_generator.reset <= reset
    inst wallace_tree of wallaceTree @[multiplier.scala 23:34]
    wallace_tree.clock <= clock
    wallace_tree.reset <= reset
    booth2_encoder.input.multiplier <= input.multiplier @[multiplier.scala 25:37]
    pp_generator.inputData.multiplicand <= input.multiplicand @[multiplier.scala 27:41]
    pp_generator.inputCtrl.X2 <= booth2_encoder.output.X2 @[multiplier.scala 28:41]
    pp_generator.inputCtrl.inv <= booth2_encoder.output.inv @[multiplier.scala 29:41]
    pp_generator.inputCtrl.Set0 <= booth2_encoder.output.set0 @[multiplier.scala 30:41]
    wallace_tree.io.data_i[0] <= pp_generator.outputData.pp_out[0] @[multiplier.scala 33:35]
    wallace_tree.io.data_i[1] <= pp_generator.outputData.pp_out[1] @[multiplier.scala 33:35]
    wallace_tree.io.data_i[2] <= pp_generator.outputData.pp_out[2] @[multiplier.scala 33:35]
    wallace_tree.io.data_i[3] <= pp_generator.outputData.pp_out[3] @[multiplier.scala 33:35]
    wallace_tree.io.data_i[4] <= pp_generator.outputData.sig_out @[multiplier.scala 35:40]
    output.product <= wallace_tree.io.data_o @[multiplier.scala 37:41]

  module RCA_1 :
    input clock : Clock
    input reset : Reset
    output input : { flip a_in : SInt<32>, flip b_in : SInt<32>, flip c_in : SInt<1>}
    output output : { S : SInt<32>, C : SInt<32>}

    wire g_comb : UInt<1>[32] @[rca.scala 22:22]
    wire p_comb : UInt<1>[32] @[rca.scala 23:22]
    wire s_comb : UInt<1>[32] @[rca.scala 24:22]
    wire c_comb : UInt<1>[33] @[rca.scala 25:22]
    node _c_comb_0_T = bits(input.c_in, 0, 0) @[rca.scala 27:29]
    c_comb[0] <= _c_comb_0_T @[rca.scala 27:15]
    node _g_comb_0_T = bits(input.a_in, 0, 0) @[rca.scala 30:35]
    node _g_comb_0_T_1 = bits(input.b_in, 0, 0) @[rca.scala 30:51]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[rca.scala 30:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[0] <= _g_comb_0_T_3 @[rca.scala 30:21]
    node _p_comb_0_T = bits(input.a_in, 0, 0) @[rca.scala 31:35]
    node _p_comb_0_T_1 = bits(input.b_in, 0, 0) @[rca.scala 31:51]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[rca.scala 31:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[0] <= _p_comb_0_T_3 @[rca.scala 31:21]
    node _s_comb_0_T = xor(p_comb[0], c_comb[0]) @[rca.scala 32:34]
    s_comb[0] <= _s_comb_0_T @[rca.scala 32:21]
    node _c_comb_1_T = and(c_comb[0], p_comb[0]) @[rca.scala 33:34]
    node _c_comb_1_T_1 = or(_c_comb_1_T, g_comb[0]) @[rca.scala 33:46]
    c_comb[1] <= _c_comb_1_T_1 @[rca.scala 33:21]
    node _g_comb_1_T = bits(input.a_in, 1, 1) @[rca.scala 30:35]
    node _g_comb_1_T_1 = bits(input.b_in, 1, 1) @[rca.scala 30:51]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[rca.scala 30:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[1] <= _g_comb_1_T_3 @[rca.scala 30:21]
    node _p_comb_1_T = bits(input.a_in, 1, 1) @[rca.scala 31:35]
    node _p_comb_1_T_1 = bits(input.b_in, 1, 1) @[rca.scala 31:51]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[rca.scala 31:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[1] <= _p_comb_1_T_3 @[rca.scala 31:21]
    node _s_comb_1_T = xor(p_comb[1], c_comb[1]) @[rca.scala 32:34]
    s_comb[1] <= _s_comb_1_T @[rca.scala 32:21]
    node _c_comb_2_T = and(c_comb[1], p_comb[1]) @[rca.scala 33:34]
    node _c_comb_2_T_1 = or(_c_comb_2_T, g_comb[1]) @[rca.scala 33:46]
    c_comb[2] <= _c_comb_2_T_1 @[rca.scala 33:21]
    node _g_comb_2_T = bits(input.a_in, 2, 2) @[rca.scala 30:35]
    node _g_comb_2_T_1 = bits(input.b_in, 2, 2) @[rca.scala 30:51]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[rca.scala 30:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[2] <= _g_comb_2_T_3 @[rca.scala 30:21]
    node _p_comb_2_T = bits(input.a_in, 2, 2) @[rca.scala 31:35]
    node _p_comb_2_T_1 = bits(input.b_in, 2, 2) @[rca.scala 31:51]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[rca.scala 31:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[2] <= _p_comb_2_T_3 @[rca.scala 31:21]
    node _s_comb_2_T = xor(p_comb[2], c_comb[2]) @[rca.scala 32:34]
    s_comb[2] <= _s_comb_2_T @[rca.scala 32:21]
    node _c_comb_3_T = and(c_comb[2], p_comb[2]) @[rca.scala 33:34]
    node _c_comb_3_T_1 = or(_c_comb_3_T, g_comb[2]) @[rca.scala 33:46]
    c_comb[3] <= _c_comb_3_T_1 @[rca.scala 33:21]
    node _g_comb_3_T = bits(input.a_in, 3, 3) @[rca.scala 30:35]
    node _g_comb_3_T_1 = bits(input.b_in, 3, 3) @[rca.scala 30:51]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[rca.scala 30:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[3] <= _g_comb_3_T_3 @[rca.scala 30:21]
    node _p_comb_3_T = bits(input.a_in, 3, 3) @[rca.scala 31:35]
    node _p_comb_3_T_1 = bits(input.b_in, 3, 3) @[rca.scala 31:51]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[rca.scala 31:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[3] <= _p_comb_3_T_3 @[rca.scala 31:21]
    node _s_comb_3_T = xor(p_comb[3], c_comb[3]) @[rca.scala 32:34]
    s_comb[3] <= _s_comb_3_T @[rca.scala 32:21]
    node _c_comb_4_T = and(c_comb[3], p_comb[3]) @[rca.scala 33:34]
    node _c_comb_4_T_1 = or(_c_comb_4_T, g_comb[3]) @[rca.scala 33:46]
    c_comb[4] <= _c_comb_4_T_1 @[rca.scala 33:21]
    node _g_comb_4_T = bits(input.a_in, 4, 4) @[rca.scala 30:35]
    node _g_comb_4_T_1 = bits(input.b_in, 4, 4) @[rca.scala 30:51]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[rca.scala 30:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[4] <= _g_comb_4_T_3 @[rca.scala 30:21]
    node _p_comb_4_T = bits(input.a_in, 4, 4) @[rca.scala 31:35]
    node _p_comb_4_T_1 = bits(input.b_in, 4, 4) @[rca.scala 31:51]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[rca.scala 31:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[4] <= _p_comb_4_T_3 @[rca.scala 31:21]
    node _s_comb_4_T = xor(p_comb[4], c_comb[4]) @[rca.scala 32:34]
    s_comb[4] <= _s_comb_4_T @[rca.scala 32:21]
    node _c_comb_5_T = and(c_comb[4], p_comb[4]) @[rca.scala 33:34]
    node _c_comb_5_T_1 = or(_c_comb_5_T, g_comb[4]) @[rca.scala 33:46]
    c_comb[5] <= _c_comb_5_T_1 @[rca.scala 33:21]
    node _g_comb_5_T = bits(input.a_in, 5, 5) @[rca.scala 30:35]
    node _g_comb_5_T_1 = bits(input.b_in, 5, 5) @[rca.scala 30:51]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[rca.scala 30:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[5] <= _g_comb_5_T_3 @[rca.scala 30:21]
    node _p_comb_5_T = bits(input.a_in, 5, 5) @[rca.scala 31:35]
    node _p_comb_5_T_1 = bits(input.b_in, 5, 5) @[rca.scala 31:51]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[rca.scala 31:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[5] <= _p_comb_5_T_3 @[rca.scala 31:21]
    node _s_comb_5_T = xor(p_comb[5], c_comb[5]) @[rca.scala 32:34]
    s_comb[5] <= _s_comb_5_T @[rca.scala 32:21]
    node _c_comb_6_T = and(c_comb[5], p_comb[5]) @[rca.scala 33:34]
    node _c_comb_6_T_1 = or(_c_comb_6_T, g_comb[5]) @[rca.scala 33:46]
    c_comb[6] <= _c_comb_6_T_1 @[rca.scala 33:21]
    node _g_comb_6_T = bits(input.a_in, 6, 6) @[rca.scala 30:35]
    node _g_comb_6_T_1 = bits(input.b_in, 6, 6) @[rca.scala 30:51]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[rca.scala 30:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[6] <= _g_comb_6_T_3 @[rca.scala 30:21]
    node _p_comb_6_T = bits(input.a_in, 6, 6) @[rca.scala 31:35]
    node _p_comb_6_T_1 = bits(input.b_in, 6, 6) @[rca.scala 31:51]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[rca.scala 31:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[6] <= _p_comb_6_T_3 @[rca.scala 31:21]
    node _s_comb_6_T = xor(p_comb[6], c_comb[6]) @[rca.scala 32:34]
    s_comb[6] <= _s_comb_6_T @[rca.scala 32:21]
    node _c_comb_7_T = and(c_comb[6], p_comb[6]) @[rca.scala 33:34]
    node _c_comb_7_T_1 = or(_c_comb_7_T, g_comb[6]) @[rca.scala 33:46]
    c_comb[7] <= _c_comb_7_T_1 @[rca.scala 33:21]
    node _g_comb_7_T = bits(input.a_in, 7, 7) @[rca.scala 30:35]
    node _g_comb_7_T_1 = bits(input.b_in, 7, 7) @[rca.scala 30:51]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[rca.scala 30:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[7] <= _g_comb_7_T_3 @[rca.scala 30:21]
    node _p_comb_7_T = bits(input.a_in, 7, 7) @[rca.scala 31:35]
    node _p_comb_7_T_1 = bits(input.b_in, 7, 7) @[rca.scala 31:51]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[rca.scala 31:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[7] <= _p_comb_7_T_3 @[rca.scala 31:21]
    node _s_comb_7_T = xor(p_comb[7], c_comb[7]) @[rca.scala 32:34]
    s_comb[7] <= _s_comb_7_T @[rca.scala 32:21]
    node _c_comb_8_T = and(c_comb[7], p_comb[7]) @[rca.scala 33:34]
    node _c_comb_8_T_1 = or(_c_comb_8_T, g_comb[7]) @[rca.scala 33:46]
    c_comb[8] <= _c_comb_8_T_1 @[rca.scala 33:21]
    node _g_comb_8_T = bits(input.a_in, 8, 8) @[rca.scala 30:35]
    node _g_comb_8_T_1 = bits(input.b_in, 8, 8) @[rca.scala 30:51]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[rca.scala 30:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[8] <= _g_comb_8_T_3 @[rca.scala 30:21]
    node _p_comb_8_T = bits(input.a_in, 8, 8) @[rca.scala 31:35]
    node _p_comb_8_T_1 = bits(input.b_in, 8, 8) @[rca.scala 31:51]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[rca.scala 31:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[8] <= _p_comb_8_T_3 @[rca.scala 31:21]
    node _s_comb_8_T = xor(p_comb[8], c_comb[8]) @[rca.scala 32:34]
    s_comb[8] <= _s_comb_8_T @[rca.scala 32:21]
    node _c_comb_9_T = and(c_comb[8], p_comb[8]) @[rca.scala 33:34]
    node _c_comb_9_T_1 = or(_c_comb_9_T, g_comb[8]) @[rca.scala 33:46]
    c_comb[9] <= _c_comb_9_T_1 @[rca.scala 33:21]
    node _g_comb_9_T = bits(input.a_in, 9, 9) @[rca.scala 30:35]
    node _g_comb_9_T_1 = bits(input.b_in, 9, 9) @[rca.scala 30:51]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[rca.scala 30:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[9] <= _g_comb_9_T_3 @[rca.scala 30:21]
    node _p_comb_9_T = bits(input.a_in, 9, 9) @[rca.scala 31:35]
    node _p_comb_9_T_1 = bits(input.b_in, 9, 9) @[rca.scala 31:51]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[rca.scala 31:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[9] <= _p_comb_9_T_3 @[rca.scala 31:21]
    node _s_comb_9_T = xor(p_comb[9], c_comb[9]) @[rca.scala 32:34]
    s_comb[9] <= _s_comb_9_T @[rca.scala 32:21]
    node _c_comb_10_T = and(c_comb[9], p_comb[9]) @[rca.scala 33:34]
    node _c_comb_10_T_1 = or(_c_comb_10_T, g_comb[9]) @[rca.scala 33:46]
    c_comb[10] <= _c_comb_10_T_1 @[rca.scala 33:21]
    node _g_comb_10_T = bits(input.a_in, 10, 10) @[rca.scala 30:35]
    node _g_comb_10_T_1 = bits(input.b_in, 10, 10) @[rca.scala 30:51]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[rca.scala 30:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[10] <= _g_comb_10_T_3 @[rca.scala 30:21]
    node _p_comb_10_T = bits(input.a_in, 10, 10) @[rca.scala 31:35]
    node _p_comb_10_T_1 = bits(input.b_in, 10, 10) @[rca.scala 31:51]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[rca.scala 31:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[10] <= _p_comb_10_T_3 @[rca.scala 31:21]
    node _s_comb_10_T = xor(p_comb[10], c_comb[10]) @[rca.scala 32:34]
    s_comb[10] <= _s_comb_10_T @[rca.scala 32:21]
    node _c_comb_11_T = and(c_comb[10], p_comb[10]) @[rca.scala 33:34]
    node _c_comb_11_T_1 = or(_c_comb_11_T, g_comb[10]) @[rca.scala 33:46]
    c_comb[11] <= _c_comb_11_T_1 @[rca.scala 33:21]
    node _g_comb_11_T = bits(input.a_in, 11, 11) @[rca.scala 30:35]
    node _g_comb_11_T_1 = bits(input.b_in, 11, 11) @[rca.scala 30:51]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[rca.scala 30:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[11] <= _g_comb_11_T_3 @[rca.scala 30:21]
    node _p_comb_11_T = bits(input.a_in, 11, 11) @[rca.scala 31:35]
    node _p_comb_11_T_1 = bits(input.b_in, 11, 11) @[rca.scala 31:51]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[rca.scala 31:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[11] <= _p_comb_11_T_3 @[rca.scala 31:21]
    node _s_comb_11_T = xor(p_comb[11], c_comb[11]) @[rca.scala 32:34]
    s_comb[11] <= _s_comb_11_T @[rca.scala 32:21]
    node _c_comb_12_T = and(c_comb[11], p_comb[11]) @[rca.scala 33:34]
    node _c_comb_12_T_1 = or(_c_comb_12_T, g_comb[11]) @[rca.scala 33:46]
    c_comb[12] <= _c_comb_12_T_1 @[rca.scala 33:21]
    node _g_comb_12_T = bits(input.a_in, 12, 12) @[rca.scala 30:35]
    node _g_comb_12_T_1 = bits(input.b_in, 12, 12) @[rca.scala 30:51]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[rca.scala 30:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[12] <= _g_comb_12_T_3 @[rca.scala 30:21]
    node _p_comb_12_T = bits(input.a_in, 12, 12) @[rca.scala 31:35]
    node _p_comb_12_T_1 = bits(input.b_in, 12, 12) @[rca.scala 31:51]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[rca.scala 31:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[12] <= _p_comb_12_T_3 @[rca.scala 31:21]
    node _s_comb_12_T = xor(p_comb[12], c_comb[12]) @[rca.scala 32:34]
    s_comb[12] <= _s_comb_12_T @[rca.scala 32:21]
    node _c_comb_13_T = and(c_comb[12], p_comb[12]) @[rca.scala 33:34]
    node _c_comb_13_T_1 = or(_c_comb_13_T, g_comb[12]) @[rca.scala 33:46]
    c_comb[13] <= _c_comb_13_T_1 @[rca.scala 33:21]
    node _g_comb_13_T = bits(input.a_in, 13, 13) @[rca.scala 30:35]
    node _g_comb_13_T_1 = bits(input.b_in, 13, 13) @[rca.scala 30:51]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[rca.scala 30:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[13] <= _g_comb_13_T_3 @[rca.scala 30:21]
    node _p_comb_13_T = bits(input.a_in, 13, 13) @[rca.scala 31:35]
    node _p_comb_13_T_1 = bits(input.b_in, 13, 13) @[rca.scala 31:51]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[rca.scala 31:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[13] <= _p_comb_13_T_3 @[rca.scala 31:21]
    node _s_comb_13_T = xor(p_comb[13], c_comb[13]) @[rca.scala 32:34]
    s_comb[13] <= _s_comb_13_T @[rca.scala 32:21]
    node _c_comb_14_T = and(c_comb[13], p_comb[13]) @[rca.scala 33:34]
    node _c_comb_14_T_1 = or(_c_comb_14_T, g_comb[13]) @[rca.scala 33:46]
    c_comb[14] <= _c_comb_14_T_1 @[rca.scala 33:21]
    node _g_comb_14_T = bits(input.a_in, 14, 14) @[rca.scala 30:35]
    node _g_comb_14_T_1 = bits(input.b_in, 14, 14) @[rca.scala 30:51]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[rca.scala 30:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[14] <= _g_comb_14_T_3 @[rca.scala 30:21]
    node _p_comb_14_T = bits(input.a_in, 14, 14) @[rca.scala 31:35]
    node _p_comb_14_T_1 = bits(input.b_in, 14, 14) @[rca.scala 31:51]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[rca.scala 31:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[14] <= _p_comb_14_T_3 @[rca.scala 31:21]
    node _s_comb_14_T = xor(p_comb[14], c_comb[14]) @[rca.scala 32:34]
    s_comb[14] <= _s_comb_14_T @[rca.scala 32:21]
    node _c_comb_15_T = and(c_comb[14], p_comb[14]) @[rca.scala 33:34]
    node _c_comb_15_T_1 = or(_c_comb_15_T, g_comb[14]) @[rca.scala 33:46]
    c_comb[15] <= _c_comb_15_T_1 @[rca.scala 33:21]
    node _g_comb_15_T = bits(input.a_in, 15, 15) @[rca.scala 30:35]
    node _g_comb_15_T_1 = bits(input.b_in, 15, 15) @[rca.scala 30:51]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[rca.scala 30:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[15] <= _g_comb_15_T_3 @[rca.scala 30:21]
    node _p_comb_15_T = bits(input.a_in, 15, 15) @[rca.scala 31:35]
    node _p_comb_15_T_1 = bits(input.b_in, 15, 15) @[rca.scala 31:51]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[rca.scala 31:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[15] <= _p_comb_15_T_3 @[rca.scala 31:21]
    node _s_comb_15_T = xor(p_comb[15], c_comb[15]) @[rca.scala 32:34]
    s_comb[15] <= _s_comb_15_T @[rca.scala 32:21]
    node _c_comb_16_T = and(c_comb[15], p_comb[15]) @[rca.scala 33:34]
    node _c_comb_16_T_1 = or(_c_comb_16_T, g_comb[15]) @[rca.scala 33:46]
    c_comb[16] <= _c_comb_16_T_1 @[rca.scala 33:21]
    node _g_comb_16_T = bits(input.a_in, 16, 16) @[rca.scala 30:35]
    node _g_comb_16_T_1 = bits(input.b_in, 16, 16) @[rca.scala 30:51]
    node _g_comb_16_T_2 = and(_g_comb_16_T, _g_comb_16_T_1) @[rca.scala 30:39]
    node _g_comb_16_T_3 = bits(_g_comb_16_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[16] <= _g_comb_16_T_3 @[rca.scala 30:21]
    node _p_comb_16_T = bits(input.a_in, 16, 16) @[rca.scala 31:35]
    node _p_comb_16_T_1 = bits(input.b_in, 16, 16) @[rca.scala 31:51]
    node _p_comb_16_T_2 = xor(_p_comb_16_T, _p_comb_16_T_1) @[rca.scala 31:39]
    node _p_comb_16_T_3 = bits(_p_comb_16_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[16] <= _p_comb_16_T_3 @[rca.scala 31:21]
    node _s_comb_16_T = xor(p_comb[16], c_comb[16]) @[rca.scala 32:34]
    s_comb[16] <= _s_comb_16_T @[rca.scala 32:21]
    node _c_comb_17_T = and(c_comb[16], p_comb[16]) @[rca.scala 33:34]
    node _c_comb_17_T_1 = or(_c_comb_17_T, g_comb[16]) @[rca.scala 33:46]
    c_comb[17] <= _c_comb_17_T_1 @[rca.scala 33:21]
    node _g_comb_17_T = bits(input.a_in, 17, 17) @[rca.scala 30:35]
    node _g_comb_17_T_1 = bits(input.b_in, 17, 17) @[rca.scala 30:51]
    node _g_comb_17_T_2 = and(_g_comb_17_T, _g_comb_17_T_1) @[rca.scala 30:39]
    node _g_comb_17_T_3 = bits(_g_comb_17_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[17] <= _g_comb_17_T_3 @[rca.scala 30:21]
    node _p_comb_17_T = bits(input.a_in, 17, 17) @[rca.scala 31:35]
    node _p_comb_17_T_1 = bits(input.b_in, 17, 17) @[rca.scala 31:51]
    node _p_comb_17_T_2 = xor(_p_comb_17_T, _p_comb_17_T_1) @[rca.scala 31:39]
    node _p_comb_17_T_3 = bits(_p_comb_17_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[17] <= _p_comb_17_T_3 @[rca.scala 31:21]
    node _s_comb_17_T = xor(p_comb[17], c_comb[17]) @[rca.scala 32:34]
    s_comb[17] <= _s_comb_17_T @[rca.scala 32:21]
    node _c_comb_18_T = and(c_comb[17], p_comb[17]) @[rca.scala 33:34]
    node _c_comb_18_T_1 = or(_c_comb_18_T, g_comb[17]) @[rca.scala 33:46]
    c_comb[18] <= _c_comb_18_T_1 @[rca.scala 33:21]
    node _g_comb_18_T = bits(input.a_in, 18, 18) @[rca.scala 30:35]
    node _g_comb_18_T_1 = bits(input.b_in, 18, 18) @[rca.scala 30:51]
    node _g_comb_18_T_2 = and(_g_comb_18_T, _g_comb_18_T_1) @[rca.scala 30:39]
    node _g_comb_18_T_3 = bits(_g_comb_18_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[18] <= _g_comb_18_T_3 @[rca.scala 30:21]
    node _p_comb_18_T = bits(input.a_in, 18, 18) @[rca.scala 31:35]
    node _p_comb_18_T_1 = bits(input.b_in, 18, 18) @[rca.scala 31:51]
    node _p_comb_18_T_2 = xor(_p_comb_18_T, _p_comb_18_T_1) @[rca.scala 31:39]
    node _p_comb_18_T_3 = bits(_p_comb_18_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[18] <= _p_comb_18_T_3 @[rca.scala 31:21]
    node _s_comb_18_T = xor(p_comb[18], c_comb[18]) @[rca.scala 32:34]
    s_comb[18] <= _s_comb_18_T @[rca.scala 32:21]
    node _c_comb_19_T = and(c_comb[18], p_comb[18]) @[rca.scala 33:34]
    node _c_comb_19_T_1 = or(_c_comb_19_T, g_comb[18]) @[rca.scala 33:46]
    c_comb[19] <= _c_comb_19_T_1 @[rca.scala 33:21]
    node _g_comb_19_T = bits(input.a_in, 19, 19) @[rca.scala 30:35]
    node _g_comb_19_T_1 = bits(input.b_in, 19, 19) @[rca.scala 30:51]
    node _g_comb_19_T_2 = and(_g_comb_19_T, _g_comb_19_T_1) @[rca.scala 30:39]
    node _g_comb_19_T_3 = bits(_g_comb_19_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[19] <= _g_comb_19_T_3 @[rca.scala 30:21]
    node _p_comb_19_T = bits(input.a_in, 19, 19) @[rca.scala 31:35]
    node _p_comb_19_T_1 = bits(input.b_in, 19, 19) @[rca.scala 31:51]
    node _p_comb_19_T_2 = xor(_p_comb_19_T, _p_comb_19_T_1) @[rca.scala 31:39]
    node _p_comb_19_T_3 = bits(_p_comb_19_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[19] <= _p_comb_19_T_3 @[rca.scala 31:21]
    node _s_comb_19_T = xor(p_comb[19], c_comb[19]) @[rca.scala 32:34]
    s_comb[19] <= _s_comb_19_T @[rca.scala 32:21]
    node _c_comb_20_T = and(c_comb[19], p_comb[19]) @[rca.scala 33:34]
    node _c_comb_20_T_1 = or(_c_comb_20_T, g_comb[19]) @[rca.scala 33:46]
    c_comb[20] <= _c_comb_20_T_1 @[rca.scala 33:21]
    node _g_comb_20_T = bits(input.a_in, 20, 20) @[rca.scala 30:35]
    node _g_comb_20_T_1 = bits(input.b_in, 20, 20) @[rca.scala 30:51]
    node _g_comb_20_T_2 = and(_g_comb_20_T, _g_comb_20_T_1) @[rca.scala 30:39]
    node _g_comb_20_T_3 = bits(_g_comb_20_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[20] <= _g_comb_20_T_3 @[rca.scala 30:21]
    node _p_comb_20_T = bits(input.a_in, 20, 20) @[rca.scala 31:35]
    node _p_comb_20_T_1 = bits(input.b_in, 20, 20) @[rca.scala 31:51]
    node _p_comb_20_T_2 = xor(_p_comb_20_T, _p_comb_20_T_1) @[rca.scala 31:39]
    node _p_comb_20_T_3 = bits(_p_comb_20_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[20] <= _p_comb_20_T_3 @[rca.scala 31:21]
    node _s_comb_20_T = xor(p_comb[20], c_comb[20]) @[rca.scala 32:34]
    s_comb[20] <= _s_comb_20_T @[rca.scala 32:21]
    node _c_comb_21_T = and(c_comb[20], p_comb[20]) @[rca.scala 33:34]
    node _c_comb_21_T_1 = or(_c_comb_21_T, g_comb[20]) @[rca.scala 33:46]
    c_comb[21] <= _c_comb_21_T_1 @[rca.scala 33:21]
    node _g_comb_21_T = bits(input.a_in, 21, 21) @[rca.scala 30:35]
    node _g_comb_21_T_1 = bits(input.b_in, 21, 21) @[rca.scala 30:51]
    node _g_comb_21_T_2 = and(_g_comb_21_T, _g_comb_21_T_1) @[rca.scala 30:39]
    node _g_comb_21_T_3 = bits(_g_comb_21_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[21] <= _g_comb_21_T_3 @[rca.scala 30:21]
    node _p_comb_21_T = bits(input.a_in, 21, 21) @[rca.scala 31:35]
    node _p_comb_21_T_1 = bits(input.b_in, 21, 21) @[rca.scala 31:51]
    node _p_comb_21_T_2 = xor(_p_comb_21_T, _p_comb_21_T_1) @[rca.scala 31:39]
    node _p_comb_21_T_3 = bits(_p_comb_21_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[21] <= _p_comb_21_T_3 @[rca.scala 31:21]
    node _s_comb_21_T = xor(p_comb[21], c_comb[21]) @[rca.scala 32:34]
    s_comb[21] <= _s_comb_21_T @[rca.scala 32:21]
    node _c_comb_22_T = and(c_comb[21], p_comb[21]) @[rca.scala 33:34]
    node _c_comb_22_T_1 = or(_c_comb_22_T, g_comb[21]) @[rca.scala 33:46]
    c_comb[22] <= _c_comb_22_T_1 @[rca.scala 33:21]
    node _g_comb_22_T = bits(input.a_in, 22, 22) @[rca.scala 30:35]
    node _g_comb_22_T_1 = bits(input.b_in, 22, 22) @[rca.scala 30:51]
    node _g_comb_22_T_2 = and(_g_comb_22_T, _g_comb_22_T_1) @[rca.scala 30:39]
    node _g_comb_22_T_3 = bits(_g_comb_22_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[22] <= _g_comb_22_T_3 @[rca.scala 30:21]
    node _p_comb_22_T = bits(input.a_in, 22, 22) @[rca.scala 31:35]
    node _p_comb_22_T_1 = bits(input.b_in, 22, 22) @[rca.scala 31:51]
    node _p_comb_22_T_2 = xor(_p_comb_22_T, _p_comb_22_T_1) @[rca.scala 31:39]
    node _p_comb_22_T_3 = bits(_p_comb_22_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[22] <= _p_comb_22_T_3 @[rca.scala 31:21]
    node _s_comb_22_T = xor(p_comb[22], c_comb[22]) @[rca.scala 32:34]
    s_comb[22] <= _s_comb_22_T @[rca.scala 32:21]
    node _c_comb_23_T = and(c_comb[22], p_comb[22]) @[rca.scala 33:34]
    node _c_comb_23_T_1 = or(_c_comb_23_T, g_comb[22]) @[rca.scala 33:46]
    c_comb[23] <= _c_comb_23_T_1 @[rca.scala 33:21]
    node _g_comb_23_T = bits(input.a_in, 23, 23) @[rca.scala 30:35]
    node _g_comb_23_T_1 = bits(input.b_in, 23, 23) @[rca.scala 30:51]
    node _g_comb_23_T_2 = and(_g_comb_23_T, _g_comb_23_T_1) @[rca.scala 30:39]
    node _g_comb_23_T_3 = bits(_g_comb_23_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[23] <= _g_comb_23_T_3 @[rca.scala 30:21]
    node _p_comb_23_T = bits(input.a_in, 23, 23) @[rca.scala 31:35]
    node _p_comb_23_T_1 = bits(input.b_in, 23, 23) @[rca.scala 31:51]
    node _p_comb_23_T_2 = xor(_p_comb_23_T, _p_comb_23_T_1) @[rca.scala 31:39]
    node _p_comb_23_T_3 = bits(_p_comb_23_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[23] <= _p_comb_23_T_3 @[rca.scala 31:21]
    node _s_comb_23_T = xor(p_comb[23], c_comb[23]) @[rca.scala 32:34]
    s_comb[23] <= _s_comb_23_T @[rca.scala 32:21]
    node _c_comb_24_T = and(c_comb[23], p_comb[23]) @[rca.scala 33:34]
    node _c_comb_24_T_1 = or(_c_comb_24_T, g_comb[23]) @[rca.scala 33:46]
    c_comb[24] <= _c_comb_24_T_1 @[rca.scala 33:21]
    node _g_comb_24_T = bits(input.a_in, 24, 24) @[rca.scala 30:35]
    node _g_comb_24_T_1 = bits(input.b_in, 24, 24) @[rca.scala 30:51]
    node _g_comb_24_T_2 = and(_g_comb_24_T, _g_comb_24_T_1) @[rca.scala 30:39]
    node _g_comb_24_T_3 = bits(_g_comb_24_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[24] <= _g_comb_24_T_3 @[rca.scala 30:21]
    node _p_comb_24_T = bits(input.a_in, 24, 24) @[rca.scala 31:35]
    node _p_comb_24_T_1 = bits(input.b_in, 24, 24) @[rca.scala 31:51]
    node _p_comb_24_T_2 = xor(_p_comb_24_T, _p_comb_24_T_1) @[rca.scala 31:39]
    node _p_comb_24_T_3 = bits(_p_comb_24_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[24] <= _p_comb_24_T_3 @[rca.scala 31:21]
    node _s_comb_24_T = xor(p_comb[24], c_comb[24]) @[rca.scala 32:34]
    s_comb[24] <= _s_comb_24_T @[rca.scala 32:21]
    node _c_comb_25_T = and(c_comb[24], p_comb[24]) @[rca.scala 33:34]
    node _c_comb_25_T_1 = or(_c_comb_25_T, g_comb[24]) @[rca.scala 33:46]
    c_comb[25] <= _c_comb_25_T_1 @[rca.scala 33:21]
    node _g_comb_25_T = bits(input.a_in, 25, 25) @[rca.scala 30:35]
    node _g_comb_25_T_1 = bits(input.b_in, 25, 25) @[rca.scala 30:51]
    node _g_comb_25_T_2 = and(_g_comb_25_T, _g_comb_25_T_1) @[rca.scala 30:39]
    node _g_comb_25_T_3 = bits(_g_comb_25_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[25] <= _g_comb_25_T_3 @[rca.scala 30:21]
    node _p_comb_25_T = bits(input.a_in, 25, 25) @[rca.scala 31:35]
    node _p_comb_25_T_1 = bits(input.b_in, 25, 25) @[rca.scala 31:51]
    node _p_comb_25_T_2 = xor(_p_comb_25_T, _p_comb_25_T_1) @[rca.scala 31:39]
    node _p_comb_25_T_3 = bits(_p_comb_25_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[25] <= _p_comb_25_T_3 @[rca.scala 31:21]
    node _s_comb_25_T = xor(p_comb[25], c_comb[25]) @[rca.scala 32:34]
    s_comb[25] <= _s_comb_25_T @[rca.scala 32:21]
    node _c_comb_26_T = and(c_comb[25], p_comb[25]) @[rca.scala 33:34]
    node _c_comb_26_T_1 = or(_c_comb_26_T, g_comb[25]) @[rca.scala 33:46]
    c_comb[26] <= _c_comb_26_T_1 @[rca.scala 33:21]
    node _g_comb_26_T = bits(input.a_in, 26, 26) @[rca.scala 30:35]
    node _g_comb_26_T_1 = bits(input.b_in, 26, 26) @[rca.scala 30:51]
    node _g_comb_26_T_2 = and(_g_comb_26_T, _g_comb_26_T_1) @[rca.scala 30:39]
    node _g_comb_26_T_3 = bits(_g_comb_26_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[26] <= _g_comb_26_T_3 @[rca.scala 30:21]
    node _p_comb_26_T = bits(input.a_in, 26, 26) @[rca.scala 31:35]
    node _p_comb_26_T_1 = bits(input.b_in, 26, 26) @[rca.scala 31:51]
    node _p_comb_26_T_2 = xor(_p_comb_26_T, _p_comb_26_T_1) @[rca.scala 31:39]
    node _p_comb_26_T_3 = bits(_p_comb_26_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[26] <= _p_comb_26_T_3 @[rca.scala 31:21]
    node _s_comb_26_T = xor(p_comb[26], c_comb[26]) @[rca.scala 32:34]
    s_comb[26] <= _s_comb_26_T @[rca.scala 32:21]
    node _c_comb_27_T = and(c_comb[26], p_comb[26]) @[rca.scala 33:34]
    node _c_comb_27_T_1 = or(_c_comb_27_T, g_comb[26]) @[rca.scala 33:46]
    c_comb[27] <= _c_comb_27_T_1 @[rca.scala 33:21]
    node _g_comb_27_T = bits(input.a_in, 27, 27) @[rca.scala 30:35]
    node _g_comb_27_T_1 = bits(input.b_in, 27, 27) @[rca.scala 30:51]
    node _g_comb_27_T_2 = and(_g_comb_27_T, _g_comb_27_T_1) @[rca.scala 30:39]
    node _g_comb_27_T_3 = bits(_g_comb_27_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[27] <= _g_comb_27_T_3 @[rca.scala 30:21]
    node _p_comb_27_T = bits(input.a_in, 27, 27) @[rca.scala 31:35]
    node _p_comb_27_T_1 = bits(input.b_in, 27, 27) @[rca.scala 31:51]
    node _p_comb_27_T_2 = xor(_p_comb_27_T, _p_comb_27_T_1) @[rca.scala 31:39]
    node _p_comb_27_T_3 = bits(_p_comb_27_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[27] <= _p_comb_27_T_3 @[rca.scala 31:21]
    node _s_comb_27_T = xor(p_comb[27], c_comb[27]) @[rca.scala 32:34]
    s_comb[27] <= _s_comb_27_T @[rca.scala 32:21]
    node _c_comb_28_T = and(c_comb[27], p_comb[27]) @[rca.scala 33:34]
    node _c_comb_28_T_1 = or(_c_comb_28_T, g_comb[27]) @[rca.scala 33:46]
    c_comb[28] <= _c_comb_28_T_1 @[rca.scala 33:21]
    node _g_comb_28_T = bits(input.a_in, 28, 28) @[rca.scala 30:35]
    node _g_comb_28_T_1 = bits(input.b_in, 28, 28) @[rca.scala 30:51]
    node _g_comb_28_T_2 = and(_g_comb_28_T, _g_comb_28_T_1) @[rca.scala 30:39]
    node _g_comb_28_T_3 = bits(_g_comb_28_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[28] <= _g_comb_28_T_3 @[rca.scala 30:21]
    node _p_comb_28_T = bits(input.a_in, 28, 28) @[rca.scala 31:35]
    node _p_comb_28_T_1 = bits(input.b_in, 28, 28) @[rca.scala 31:51]
    node _p_comb_28_T_2 = xor(_p_comb_28_T, _p_comb_28_T_1) @[rca.scala 31:39]
    node _p_comb_28_T_3 = bits(_p_comb_28_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[28] <= _p_comb_28_T_3 @[rca.scala 31:21]
    node _s_comb_28_T = xor(p_comb[28], c_comb[28]) @[rca.scala 32:34]
    s_comb[28] <= _s_comb_28_T @[rca.scala 32:21]
    node _c_comb_29_T = and(c_comb[28], p_comb[28]) @[rca.scala 33:34]
    node _c_comb_29_T_1 = or(_c_comb_29_T, g_comb[28]) @[rca.scala 33:46]
    c_comb[29] <= _c_comb_29_T_1 @[rca.scala 33:21]
    node _g_comb_29_T = bits(input.a_in, 29, 29) @[rca.scala 30:35]
    node _g_comb_29_T_1 = bits(input.b_in, 29, 29) @[rca.scala 30:51]
    node _g_comb_29_T_2 = and(_g_comb_29_T, _g_comb_29_T_1) @[rca.scala 30:39]
    node _g_comb_29_T_3 = bits(_g_comb_29_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[29] <= _g_comb_29_T_3 @[rca.scala 30:21]
    node _p_comb_29_T = bits(input.a_in, 29, 29) @[rca.scala 31:35]
    node _p_comb_29_T_1 = bits(input.b_in, 29, 29) @[rca.scala 31:51]
    node _p_comb_29_T_2 = xor(_p_comb_29_T, _p_comb_29_T_1) @[rca.scala 31:39]
    node _p_comb_29_T_3 = bits(_p_comb_29_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[29] <= _p_comb_29_T_3 @[rca.scala 31:21]
    node _s_comb_29_T = xor(p_comb[29], c_comb[29]) @[rca.scala 32:34]
    s_comb[29] <= _s_comb_29_T @[rca.scala 32:21]
    node _c_comb_30_T = and(c_comb[29], p_comb[29]) @[rca.scala 33:34]
    node _c_comb_30_T_1 = or(_c_comb_30_T, g_comb[29]) @[rca.scala 33:46]
    c_comb[30] <= _c_comb_30_T_1 @[rca.scala 33:21]
    node _g_comb_30_T = bits(input.a_in, 30, 30) @[rca.scala 30:35]
    node _g_comb_30_T_1 = bits(input.b_in, 30, 30) @[rca.scala 30:51]
    node _g_comb_30_T_2 = and(_g_comb_30_T, _g_comb_30_T_1) @[rca.scala 30:39]
    node _g_comb_30_T_3 = bits(_g_comb_30_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[30] <= _g_comb_30_T_3 @[rca.scala 30:21]
    node _p_comb_30_T = bits(input.a_in, 30, 30) @[rca.scala 31:35]
    node _p_comb_30_T_1 = bits(input.b_in, 30, 30) @[rca.scala 31:51]
    node _p_comb_30_T_2 = xor(_p_comb_30_T, _p_comb_30_T_1) @[rca.scala 31:39]
    node _p_comb_30_T_3 = bits(_p_comb_30_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[30] <= _p_comb_30_T_3 @[rca.scala 31:21]
    node _s_comb_30_T = xor(p_comb[30], c_comb[30]) @[rca.scala 32:34]
    s_comb[30] <= _s_comb_30_T @[rca.scala 32:21]
    node _c_comb_31_T = and(c_comb[30], p_comb[30]) @[rca.scala 33:34]
    node _c_comb_31_T_1 = or(_c_comb_31_T, g_comb[30]) @[rca.scala 33:46]
    c_comb[31] <= _c_comb_31_T_1 @[rca.scala 33:21]
    node _g_comb_31_T = bits(input.a_in, 31, 31) @[rca.scala 30:35]
    node _g_comb_31_T_1 = bits(input.b_in, 31, 31) @[rca.scala 30:51]
    node _g_comb_31_T_2 = and(_g_comb_31_T, _g_comb_31_T_1) @[rca.scala 30:39]
    node _g_comb_31_T_3 = bits(_g_comb_31_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[31] <= _g_comb_31_T_3 @[rca.scala 30:21]
    node _p_comb_31_T = bits(input.a_in, 31, 31) @[rca.scala 31:35]
    node _p_comb_31_T_1 = bits(input.b_in, 31, 31) @[rca.scala 31:51]
    node _p_comb_31_T_2 = xor(_p_comb_31_T, _p_comb_31_T_1) @[rca.scala 31:39]
    node _p_comb_31_T_3 = bits(_p_comb_31_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[31] <= _p_comb_31_T_3 @[rca.scala 31:21]
    node _s_comb_31_T = xor(p_comb[31], c_comb[31]) @[rca.scala 32:34]
    s_comb[31] <= _s_comb_31_T @[rca.scala 32:21]
    node _c_comb_32_T = and(c_comb[31], p_comb[31]) @[rca.scala 33:34]
    node _c_comb_32_T_1 = or(_c_comb_32_T, g_comb[31]) @[rca.scala 33:46]
    c_comb[32] <= _c_comb_32_T_1 @[rca.scala 33:21]
    node output_S_lo_lo_lo_lo = cat(s_comb[1], s_comb[0]) @[rca.scala 36:24]
    node output_S_lo_lo_lo_hi = cat(s_comb[3], s_comb[2]) @[rca.scala 36:24]
    node output_S_lo_lo_lo = cat(output_S_lo_lo_lo_hi, output_S_lo_lo_lo_lo) @[rca.scala 36:24]
    node output_S_lo_lo_hi_lo = cat(s_comb[5], s_comb[4]) @[rca.scala 36:24]
    node output_S_lo_lo_hi_hi = cat(s_comb[7], s_comb[6]) @[rca.scala 36:24]
    node output_S_lo_lo_hi = cat(output_S_lo_lo_hi_hi, output_S_lo_lo_hi_lo) @[rca.scala 36:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[rca.scala 36:24]
    node output_S_lo_hi_lo_lo = cat(s_comb[9], s_comb[8]) @[rca.scala 36:24]
    node output_S_lo_hi_lo_hi = cat(s_comb[11], s_comb[10]) @[rca.scala 36:24]
    node output_S_lo_hi_lo = cat(output_S_lo_hi_lo_hi, output_S_lo_hi_lo_lo) @[rca.scala 36:24]
    node output_S_lo_hi_hi_lo = cat(s_comb[13], s_comb[12]) @[rca.scala 36:24]
    node output_S_lo_hi_hi_hi = cat(s_comb[15], s_comb[14]) @[rca.scala 36:24]
    node output_S_lo_hi_hi = cat(output_S_lo_hi_hi_hi, output_S_lo_hi_hi_lo) @[rca.scala 36:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[rca.scala 36:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[rca.scala 36:24]
    node output_S_hi_lo_lo_lo = cat(s_comb[17], s_comb[16]) @[rca.scala 36:24]
    node output_S_hi_lo_lo_hi = cat(s_comb[19], s_comb[18]) @[rca.scala 36:24]
    node output_S_hi_lo_lo = cat(output_S_hi_lo_lo_hi, output_S_hi_lo_lo_lo) @[rca.scala 36:24]
    node output_S_hi_lo_hi_lo = cat(s_comb[21], s_comb[20]) @[rca.scala 36:24]
    node output_S_hi_lo_hi_hi = cat(s_comb[23], s_comb[22]) @[rca.scala 36:24]
    node output_S_hi_lo_hi = cat(output_S_hi_lo_hi_hi, output_S_hi_lo_hi_lo) @[rca.scala 36:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[rca.scala 36:24]
    node output_S_hi_hi_lo_lo = cat(s_comb[25], s_comb[24]) @[rca.scala 36:24]
    node output_S_hi_hi_lo_hi = cat(s_comb[27], s_comb[26]) @[rca.scala 36:24]
    node output_S_hi_hi_lo = cat(output_S_hi_hi_lo_hi, output_S_hi_hi_lo_lo) @[rca.scala 36:24]
    node output_S_hi_hi_hi_lo = cat(s_comb[29], s_comb[28]) @[rca.scala 36:24]
    node output_S_hi_hi_hi_hi = cat(s_comb[31], s_comb[30]) @[rca.scala 36:24]
    node output_S_hi_hi_hi = cat(output_S_hi_hi_hi_hi, output_S_hi_hi_hi_lo) @[rca.scala 36:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[rca.scala 36:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[rca.scala 36:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[rca.scala 36:24]
    node _output_S_T_1 = asSInt(_output_S_T) @[rca.scala 36:31]
    output.S <= _output_S_T_1 @[rca.scala 36:14]
    node _output_C_T = asSInt(c_comb[32]) @[rca.scala 37:40]
    output.C <= _output_C_T @[rca.scala 37:14]

  module MacUnit :
    input clock : Clock
    input reset : Reset
    output io : { flip in_a : SInt<8>, flip in_b : SInt<8>, flip in_c : SInt<32>, out_c : SInt<32>}

    inst mul of Multiplier @[MacUnit.scala 15:19]
    mul.clock <= clock
    mul.reset <= reset
    inst rca of RCA_1 @[MacUnit.scala 16:19]
    rca.clock <= clock
    rca.reset <= reset
    mul.input.multiplicand <= io.in_a @[MacUnit.scala 18:26]
    mul.input.multiplier <= io.in_b @[MacUnit.scala 19:26]
    node _rca_input_a_in_T = bits(mul.output.product, 15, 15) @[MacUnit.scala 21:71]
    node _rca_input_a_in_T_1 = bits(_rca_input_a_in_T, 0, 0) @[Bitwise.scala 77:15]
    node _rca_input_a_in_T_2 = mux(_rca_input_a_in_T_1, UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
    node rca_input_a_in_lo = asUInt(mul.output.product) @[Cat.scala 33:92]
    node _rca_input_a_in_T_3 = cat(_rca_input_a_in_T_2, rca_input_a_in_lo) @[Cat.scala 33:92]
    node _rca_input_a_in_T_4 = asSInt(_rca_input_a_in_T_3) @[MacUnit.scala 21:108]
    rca.input.a_in <= _rca_input_a_in_T_4 @[MacUnit.scala 21:19]
    rca.input.b_in <= io.in_c @[MacUnit.scala 22:19]
    rca.input.c_in <= asSInt(UInt<32>("h0")) @[MacUnit.scala 23:19]
    io.out_c <= rca.output.S @[MacUnit.scala 24:19]

  module PE :
    input clock : Clock
    input reset : Reset
    output io : { flip in_control : { ctrl_sa_send_data : UInt<1>}, flip in_a : SInt<8>, flip in_b : SInt<8>, flip in_c : SInt<32>, out_control : { ctrl_sa_send_data : UInt<1>}, out_a : SInt<8>, out_b : SInt<8>, out_c : SInt<32>}

    reg a_reg : SInt<8>, clock with :
      reset => (reset, asSInt(UInt<8>("h0"))) @[PE.scala 24:22]
    reg b_reg : SInt<8>, clock with :
      reset => (reset, asSInt(UInt<8>("h0"))) @[PE.scala 25:22]
    reg c_reg : SInt<32>, clock with :
      reset => (reset, asSInt(UInt<32>("h0"))) @[PE.scala 26:22]
    inst mac of MacUnit @[PE.scala 28:19]
    mac.clock <= clock
    mac.reset <= reset
    mac.io.in_a <= io.in_a @[PE.scala 29:15]
    mac.io.in_b <= io.in_b @[PE.scala 30:15]
    mac.io.in_c <= c_reg @[PE.scala 31:15]
    a_reg <= io.in_a @[PE.scala 33:9]
    b_reg <= io.in_b @[PE.scala 34:9]
    node _c_reg_T = mux(io.in_control.ctrl_sa_send_data, io.in_c, mac.io.out_c) @[PE.scala 36:15]
    c_reg <= _c_reg_T @[PE.scala 36:9]
    io.out_a <= a_reg @[PE.scala 38:12]
    io.out_b <= b_reg @[PE.scala 39:12]
    io.out_c <= c_reg @[PE.scala 40:12]
    io.out_control <= io.in_control @[PE.scala 42:18]

  module booth2Encoder_1 :
    input clock : Clock
    input reset : Reset
    output input : { flip multiplier : SInt<8>}
    output output : { X2 : UInt<4>, inv : UInt<4>, set0 : UInt<4>}

    wire multiplier2 : UInt<9> @[booth2_encoder.scala 22:27]
    wire bits : UInt<3>[4] @[booth2_encoder.scala 23:27]
    wire X2Bools : UInt<1>[4] @[booth2_encoder.scala 25:30]
    X2Bools[0] <= UInt<1>("h0") @[booth2_encoder.scala 25:30]
    X2Bools[1] <= UInt<1>("h0") @[booth2_encoder.scala 25:30]
    X2Bools[2] <= UInt<1>("h0") @[booth2_encoder.scala 25:30]
    X2Bools[3] <= UInt<1>("h0") @[booth2_encoder.scala 25:30]
    wire invBools : UInt<1>[4] @[booth2_encoder.scala 26:30]
    invBools[0] <= UInt<1>("h0") @[booth2_encoder.scala 26:30]
    invBools[1] <= UInt<1>("h0") @[booth2_encoder.scala 26:30]
    invBools[2] <= UInt<1>("h0") @[booth2_encoder.scala 26:30]
    invBools[3] <= UInt<1>("h0") @[booth2_encoder.scala 26:30]
    wire set0Bools : UInt<1>[4] @[booth2_encoder.scala 27:30]
    set0Bools[0] <= UInt<1>("h0") @[booth2_encoder.scala 27:30]
    set0Bools[1] <= UInt<1>("h0") @[booth2_encoder.scala 27:30]
    set0Bools[2] <= UInt<1>("h0") @[booth2_encoder.scala 27:30]
    set0Bools[3] <= UInt<1>("h0") @[booth2_encoder.scala 27:30]
    node multiplier2_hi = asUInt(input.multiplier) @[Cat.scala 33:92]
    node _multiplier2_T = cat(multiplier2_hi, UInt<1>("h0")) @[Cat.scala 33:92]
    multiplier2 <= _multiplier2_T @[booth2_encoder.scala 29:17]
    node _bits_0_T = bits(multiplier2, 2, 0) @[booth2_encoder.scala 32:31]
    bits[0] <= _bits_0_T @[booth2_encoder.scala 32:17]
    node _bits_1_T = bits(multiplier2, 4, 2) @[booth2_encoder.scala 32:31]
    bits[1] <= _bits_1_T @[booth2_encoder.scala 32:17]
    node _bits_2_T = bits(multiplier2, 6, 4) @[booth2_encoder.scala 32:31]
    bits[2] <= _bits_2_T @[booth2_encoder.scala 32:17]
    node _bits_3_T = bits(multiplier2, 8, 6) @[booth2_encoder.scala 32:31]
    bits[3] <= _bits_3_T @[booth2_encoder.scala 32:17]
    node _X2Bools_0_T = bits(bits[0], 0, 0) @[booth2_encoder.scala 36:35]
    node _X2Bools_0_T_1 = bits(bits[0], 1, 1) @[booth2_encoder.scala 36:46]
    node _X2Bools_0_T_2 = xor(_X2Bools_0_T, _X2Bools_0_T_1) @[booth2_encoder.scala 36:38]
    node _X2Bools_0_T_3 = not(_X2Bools_0_T_2) @[booth2_encoder.scala 36:26]
    node _X2Bools_0_T_4 = bits(_X2Bools_0_T_3, 0, 0) @[booth2_encoder.scala 36:52]
    X2Bools[0] <= _X2Bools_0_T_4 @[booth2_encoder.scala 36:22]
    node _invBools_0_T = bits(bits[0], 2, 2) @[booth2_encoder.scala 37:32]
    node _invBools_0_T_1 = bits(_invBools_0_T, 0, 0) @[booth2_encoder.scala 37:36]
    invBools[0] <= _invBools_0_T_1 @[booth2_encoder.scala 37:22]
    node _set0Bools_0_T = andr(bits[0]) @[booth2_encoder.scala 38:33]
    node _set0Bools_0_T_1 = not(bits[0]) @[booth2_encoder.scala 38:48]
    node _set0Bools_0_T_2 = andr(_set0Bools_0_T_1) @[booth2_encoder.scala 38:58]
    node _set0Bools_0_T_3 = bits(_set0Bools_0_T_2, 0, 0) @[booth2_encoder.scala 38:63]
    node _set0Bools_0_T_4 = or(_set0Bools_0_T, _set0Bools_0_T_3) @[booth2_encoder.scala 38:45]
    set0Bools[0] <= _set0Bools_0_T_4 @[booth2_encoder.scala 38:22]
    node _X2Bools_1_T = bits(bits[1], 0, 0) @[booth2_encoder.scala 36:35]
    node _X2Bools_1_T_1 = bits(bits[1], 1, 1) @[booth2_encoder.scala 36:46]
    node _X2Bools_1_T_2 = xor(_X2Bools_1_T, _X2Bools_1_T_1) @[booth2_encoder.scala 36:38]
    node _X2Bools_1_T_3 = not(_X2Bools_1_T_2) @[booth2_encoder.scala 36:26]
    node _X2Bools_1_T_4 = bits(_X2Bools_1_T_3, 0, 0) @[booth2_encoder.scala 36:52]
    X2Bools[1] <= _X2Bools_1_T_4 @[booth2_encoder.scala 36:22]
    node _invBools_1_T = bits(bits[1], 2, 2) @[booth2_encoder.scala 37:32]
    node _invBools_1_T_1 = bits(_invBools_1_T, 0, 0) @[booth2_encoder.scala 37:36]
    invBools[1] <= _invBools_1_T_1 @[booth2_encoder.scala 37:22]
    node _set0Bools_1_T = andr(bits[1]) @[booth2_encoder.scala 38:33]
    node _set0Bools_1_T_1 = not(bits[1]) @[booth2_encoder.scala 38:48]
    node _set0Bools_1_T_2 = andr(_set0Bools_1_T_1) @[booth2_encoder.scala 38:58]
    node _set0Bools_1_T_3 = bits(_set0Bools_1_T_2, 0, 0) @[booth2_encoder.scala 38:63]
    node _set0Bools_1_T_4 = or(_set0Bools_1_T, _set0Bools_1_T_3) @[booth2_encoder.scala 38:45]
    set0Bools[1] <= _set0Bools_1_T_4 @[booth2_encoder.scala 38:22]
    node _X2Bools_2_T = bits(bits[2], 0, 0) @[booth2_encoder.scala 36:35]
    node _X2Bools_2_T_1 = bits(bits[2], 1, 1) @[booth2_encoder.scala 36:46]
    node _X2Bools_2_T_2 = xor(_X2Bools_2_T, _X2Bools_2_T_1) @[booth2_encoder.scala 36:38]
    node _X2Bools_2_T_3 = not(_X2Bools_2_T_2) @[booth2_encoder.scala 36:26]
    node _X2Bools_2_T_4 = bits(_X2Bools_2_T_3, 0, 0) @[booth2_encoder.scala 36:52]
    X2Bools[2] <= _X2Bools_2_T_4 @[booth2_encoder.scala 36:22]
    node _invBools_2_T = bits(bits[2], 2, 2) @[booth2_encoder.scala 37:32]
    node _invBools_2_T_1 = bits(_invBools_2_T, 0, 0) @[booth2_encoder.scala 37:36]
    invBools[2] <= _invBools_2_T_1 @[booth2_encoder.scala 37:22]
    node _set0Bools_2_T = andr(bits[2]) @[booth2_encoder.scala 38:33]
    node _set0Bools_2_T_1 = not(bits[2]) @[booth2_encoder.scala 38:48]
    node _set0Bools_2_T_2 = andr(_set0Bools_2_T_1) @[booth2_encoder.scala 38:58]
    node _set0Bools_2_T_3 = bits(_set0Bools_2_T_2, 0, 0) @[booth2_encoder.scala 38:63]
    node _set0Bools_2_T_4 = or(_set0Bools_2_T, _set0Bools_2_T_3) @[booth2_encoder.scala 38:45]
    set0Bools[2] <= _set0Bools_2_T_4 @[booth2_encoder.scala 38:22]
    node _X2Bools_3_T = bits(bits[3], 0, 0) @[booth2_encoder.scala 36:35]
    node _X2Bools_3_T_1 = bits(bits[3], 1, 1) @[booth2_encoder.scala 36:46]
    node _X2Bools_3_T_2 = xor(_X2Bools_3_T, _X2Bools_3_T_1) @[booth2_encoder.scala 36:38]
    node _X2Bools_3_T_3 = not(_X2Bools_3_T_2) @[booth2_encoder.scala 36:26]
    node _X2Bools_3_T_4 = bits(_X2Bools_3_T_3, 0, 0) @[booth2_encoder.scala 36:52]
    X2Bools[3] <= _X2Bools_3_T_4 @[booth2_encoder.scala 36:22]
    node _invBools_3_T = bits(bits[3], 2, 2) @[booth2_encoder.scala 37:32]
    node _invBools_3_T_1 = bits(_invBools_3_T, 0, 0) @[booth2_encoder.scala 37:36]
    invBools[3] <= _invBools_3_T_1 @[booth2_encoder.scala 37:22]
    node _set0Bools_3_T = andr(bits[3]) @[booth2_encoder.scala 38:33]
    node _set0Bools_3_T_1 = not(bits[3]) @[booth2_encoder.scala 38:48]
    node _set0Bools_3_T_2 = andr(_set0Bools_3_T_1) @[booth2_encoder.scala 38:58]
    node _set0Bools_3_T_3 = bits(_set0Bools_3_T_2, 0, 0) @[booth2_encoder.scala 38:63]
    node _set0Bools_3_T_4 = or(_set0Bools_3_T, _set0Bools_3_T_3) @[booth2_encoder.scala 38:45]
    set0Bools[3] <= _set0Bools_3_T_4 @[booth2_encoder.scala 38:22]
    node output_X2_lo = cat(X2Bools[1], X2Bools[0]) @[booth2_encoder.scala 42:28]
    node output_X2_hi = cat(X2Bools[3], X2Bools[2]) @[booth2_encoder.scala 42:28]
    node _output_X2_T = cat(output_X2_hi, output_X2_lo) @[booth2_encoder.scala 42:28]
    output.X2 <= _output_X2_T @[booth2_encoder.scala 42:17]
    node output_inv_lo = cat(invBools[1], invBools[0]) @[booth2_encoder.scala 43:29]
    node output_inv_hi = cat(invBools[3], invBools[2]) @[booth2_encoder.scala 43:29]
    node _output_inv_T = cat(output_inv_hi, output_inv_lo) @[booth2_encoder.scala 43:29]
    output.inv <= _output_inv_T @[booth2_encoder.scala 43:17]
    node output_set0_lo = cat(set0Bools[1], set0Bools[0]) @[booth2_encoder.scala 44:30]
    node output_set0_hi = cat(set0Bools[3], set0Bools[2]) @[booth2_encoder.scala 44:30]
    node _output_set0_T = cat(output_set0_hi, output_set0_lo) @[booth2_encoder.scala 44:30]
    output.set0 <= _output_set0_T @[booth2_encoder.scala 44:17]

  module ppGenerator_1 :
    input clock : Clock
    input reset : Reset
    output inputData : { flip multiplicand : SInt<8>}
    output inputCtrl : { flip X2 : UInt<4>, flip inv : UInt<4>, flip Set0 : UInt<4>}
    output outputData : { pp_out : SInt<16>[4], sig_out : SInt<16>}

    wire E : UInt<1>[4] @[pp_generator.scala 28:26]
    wire E_inv : UInt<1>[4] @[pp_generator.scala 29:26]
    wire pp_X2 : SInt<9>[4] @[pp_generator.scala 31:26]
    wire pp_set : SInt<9>[4] @[pp_generator.scala 32:26]
    wire pp_inv : SInt<9>[4] @[pp_generator.scala 33:26]
    wire pp_temp : SInt<16>[4] @[pp_generator.scala 34:26]
    wire _pp_WIRE : SInt<16>[4] @[pp_generator.scala 36:37]
    _pp_WIRE[0] <= asSInt(UInt<16>("h0")) @[pp_generator.scala 36:37]
    _pp_WIRE[1] <= asSInt(UInt<16>("h0")) @[pp_generator.scala 36:37]
    _pp_WIRE[2] <= asSInt(UInt<16>("h0")) @[pp_generator.scala 36:37]
    _pp_WIRE[3] <= asSInt(UInt<16>("h0")) @[pp_generator.scala 36:37]
    reg pp : SInt<16>[4], clock with :
      reset => (reset, _pp_WIRE) @[pp_generator.scala 36:29]
    reg sign_com : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<16>("h0"))) @[pp_generator.scala 37:29]
    node _pp_X2_0_T = bits(inputCtrl.X2, 0, 0) @[pp_generator.scala 40:38]
    node _pp_X2_0_T_1 = bits(_pp_X2_0_T, 0, 0) @[pp_generator.scala 40:42]
    node pp_X2_0_lo = asUInt(asSInt(UInt<1>("h0"))) @[Cat.scala 33:92]
    node pp_X2_0_hi = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_0_T_2 = cat(pp_X2_0_hi, pp_X2_0_lo) @[Cat.scala 33:92]
    node _pp_X2_0_T_3 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 41:51]
    node pp_X2_0_lo_1 = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_0_T_4 = cat(_pp_X2_0_T_3, pp_X2_0_lo_1) @[Cat.scala 33:92]
    node _pp_X2_0_T_5 = mux(_pp_X2_0_T_1, _pp_X2_0_T_2, _pp_X2_0_T_4) @[pp_generator.scala 40:25]
    node _pp_X2_0_T_6 = asSInt(_pp_X2_0_T_5) @[pp_generator.scala 41:90]
    pp_X2[0] <= _pp_X2_0_T_6 @[pp_generator.scala 40:19]
    node _pp_set_0_T = bits(inputCtrl.Set0, 0, 0) @[pp_generator.scala 42:40]
    node _pp_set_0_T_1 = bits(_pp_set_0_T, 0, 0) @[pp_generator.scala 42:44]
    node _pp_set_0_T_2 = mux(_pp_set_0_T_1, asSInt(UInt<9>("h0")), pp_X2[0]) @[pp_generator.scala 42:25]
    pp_set[0] <= _pp_set_0_T_2 @[pp_generator.scala 42:19]
    node _pp_inv_0_T = bits(inputCtrl.inv, 0, 0) @[pp_generator.scala 43:39]
    node _pp_inv_0_T_1 = bits(_pp_inv_0_T, 0, 0) @[pp_generator.scala 43:43]
    node _pp_inv_0_T_2 = not(pp_set[0]) @[pp_generator.scala 43:51]
    node _pp_inv_0_T_3 = asSInt(_pp_inv_0_T_2) @[pp_generator.scala 43:51]
    node _pp_inv_0_T_4 = mux(_pp_inv_0_T_1, _pp_inv_0_T_3, pp_set[0]) @[pp_generator.scala 43:25]
    pp_inv[0] <= _pp_inv_0_T_4 @[pp_generator.scala 43:19]
    node _E_inv_0_T = bits(inputCtrl.Set0, 0, 0) @[pp_generator.scala 44:40]
    node _E_inv_0_T_1 = bits(_E_inv_0_T, 0, 0) @[pp_generator.scala 44:44]
    node _E_inv_0_T_2 = bits(inputCtrl.inv, 0, 0) @[pp_generator.scala 44:65]
    node _E_inv_0_T_3 = bits(_E_inv_0_T_2, 0, 0) @[pp_generator.scala 44:69]
    node _E_inv_0_T_4 = bits(inputCtrl.inv, 0, 0) @[pp_generator.scala 44:91]
    node _E_inv_0_T_5 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 44:117]
    node _E_inv_0_T_6 = xor(_E_inv_0_T_4, _E_inv_0_T_5) @[pp_generator.scala 44:94]
    node _E_inv_0_T_7 = bits(_E_inv_0_T_6, 0, 0) @[pp_generator.scala 44:131]
    node _E_inv_0_T_8 = mux(_E_inv_0_T_1, _E_inv_0_T_3, _E_inv_0_T_7) @[pp_generator.scala 44:25]
    E_inv[0] <= _E_inv_0_T_8 @[pp_generator.scala 44:19]
    node _E_0_T = not(E_inv[0]) @[pp_generator.scala 45:22]
    E[0] <= _E_0_T @[pp_generator.scala 45:19]
    node pp_temp_0_lo_lo = asUInt(pp_inv[0]) @[Cat.scala 33:92]
    node pp_temp_0_lo = cat(E_inv[0], pp_temp_0_lo_lo) @[Cat.scala 33:92]
    node pp_temp_0_hi_hi = cat(UInt<4>("h0"), E[0]) @[Cat.scala 33:92]
    node pp_temp_0_hi = cat(pp_temp_0_hi_hi, E_inv[0]) @[Cat.scala 33:92]
    node _pp_temp_0_T = cat(pp_temp_0_hi, pp_temp_0_lo) @[Cat.scala 33:92]
    node _pp_temp_0_T_1 = asSInt(_pp_temp_0_T) @[pp_generator.scala 51:115]
    pp_temp[0] <= _pp_temp_0_T_1 @[pp_generator.scala 51:28]
    node _pp_X2_1_T = bits(inputCtrl.X2, 1, 1) @[pp_generator.scala 40:38]
    node _pp_X2_1_T_1 = bits(_pp_X2_1_T, 0, 0) @[pp_generator.scala 40:42]
    node pp_X2_1_lo = asUInt(asSInt(UInt<1>("h0"))) @[Cat.scala 33:92]
    node pp_X2_1_hi = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_1_T_2 = cat(pp_X2_1_hi, pp_X2_1_lo) @[Cat.scala 33:92]
    node _pp_X2_1_T_3 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 41:51]
    node pp_X2_1_lo_1 = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_1_T_4 = cat(_pp_X2_1_T_3, pp_X2_1_lo_1) @[Cat.scala 33:92]
    node _pp_X2_1_T_5 = mux(_pp_X2_1_T_1, _pp_X2_1_T_2, _pp_X2_1_T_4) @[pp_generator.scala 40:25]
    node _pp_X2_1_T_6 = asSInt(_pp_X2_1_T_5) @[pp_generator.scala 41:90]
    pp_X2[1] <= _pp_X2_1_T_6 @[pp_generator.scala 40:19]
    node _pp_set_1_T = bits(inputCtrl.Set0, 1, 1) @[pp_generator.scala 42:40]
    node _pp_set_1_T_1 = bits(_pp_set_1_T, 0, 0) @[pp_generator.scala 42:44]
    node _pp_set_1_T_2 = mux(_pp_set_1_T_1, asSInt(UInt<9>("h0")), pp_X2[1]) @[pp_generator.scala 42:25]
    pp_set[1] <= _pp_set_1_T_2 @[pp_generator.scala 42:19]
    node _pp_inv_1_T = bits(inputCtrl.inv, 1, 1) @[pp_generator.scala 43:39]
    node _pp_inv_1_T_1 = bits(_pp_inv_1_T, 0, 0) @[pp_generator.scala 43:43]
    node _pp_inv_1_T_2 = not(pp_set[1]) @[pp_generator.scala 43:51]
    node _pp_inv_1_T_3 = asSInt(_pp_inv_1_T_2) @[pp_generator.scala 43:51]
    node _pp_inv_1_T_4 = mux(_pp_inv_1_T_1, _pp_inv_1_T_3, pp_set[1]) @[pp_generator.scala 43:25]
    pp_inv[1] <= _pp_inv_1_T_4 @[pp_generator.scala 43:19]
    node _E_inv_1_T = bits(inputCtrl.Set0, 1, 1) @[pp_generator.scala 44:40]
    node _E_inv_1_T_1 = bits(_E_inv_1_T, 0, 0) @[pp_generator.scala 44:44]
    node _E_inv_1_T_2 = bits(inputCtrl.inv, 1, 1) @[pp_generator.scala 44:65]
    node _E_inv_1_T_3 = bits(_E_inv_1_T_2, 0, 0) @[pp_generator.scala 44:69]
    node _E_inv_1_T_4 = bits(inputCtrl.inv, 1, 1) @[pp_generator.scala 44:91]
    node _E_inv_1_T_5 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 44:117]
    node _E_inv_1_T_6 = xor(_E_inv_1_T_4, _E_inv_1_T_5) @[pp_generator.scala 44:94]
    node _E_inv_1_T_7 = bits(_E_inv_1_T_6, 0, 0) @[pp_generator.scala 44:131]
    node _E_inv_1_T_8 = mux(_E_inv_1_T_1, _E_inv_1_T_3, _E_inv_1_T_7) @[pp_generator.scala 44:25]
    E_inv[1] <= _E_inv_1_T_8 @[pp_generator.scala 44:19]
    node _E_1_T = not(E_inv[1]) @[pp_generator.scala 45:22]
    E[1] <= _E_1_T @[pp_generator.scala 45:19]
    node pp_temp_1_lo_lo = asUInt(pp_inv[1]) @[Cat.scala 33:92]
    node pp_temp_1_lo = cat(E[1], pp_temp_1_lo_lo) @[Cat.scala 33:92]
    node pp_temp_1_hi = cat(UInt<5>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
    node _pp_temp_1_T = cat(pp_temp_1_hi, pp_temp_1_lo) @[Cat.scala 33:92]
    node _pp_temp_1_T_1 = asSInt(_pp_temp_1_T) @[pp_generator.scala 55:94]
    pp_temp[1] <= _pp_temp_1_T_1 @[pp_generator.scala 55:24]
    node _pp_X2_2_T = bits(inputCtrl.X2, 2, 2) @[pp_generator.scala 40:38]
    node _pp_X2_2_T_1 = bits(_pp_X2_2_T, 0, 0) @[pp_generator.scala 40:42]
    node pp_X2_2_lo = asUInt(asSInt(UInt<1>("h0"))) @[Cat.scala 33:92]
    node pp_X2_2_hi = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_2_T_2 = cat(pp_X2_2_hi, pp_X2_2_lo) @[Cat.scala 33:92]
    node _pp_X2_2_T_3 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 41:51]
    node pp_X2_2_lo_1 = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_2_T_4 = cat(_pp_X2_2_T_3, pp_X2_2_lo_1) @[Cat.scala 33:92]
    node _pp_X2_2_T_5 = mux(_pp_X2_2_T_1, _pp_X2_2_T_2, _pp_X2_2_T_4) @[pp_generator.scala 40:25]
    node _pp_X2_2_T_6 = asSInt(_pp_X2_2_T_5) @[pp_generator.scala 41:90]
    pp_X2[2] <= _pp_X2_2_T_6 @[pp_generator.scala 40:19]
    node _pp_set_2_T = bits(inputCtrl.Set0, 2, 2) @[pp_generator.scala 42:40]
    node _pp_set_2_T_1 = bits(_pp_set_2_T, 0, 0) @[pp_generator.scala 42:44]
    node _pp_set_2_T_2 = mux(_pp_set_2_T_1, asSInt(UInt<9>("h0")), pp_X2[2]) @[pp_generator.scala 42:25]
    pp_set[2] <= _pp_set_2_T_2 @[pp_generator.scala 42:19]
    node _pp_inv_2_T = bits(inputCtrl.inv, 2, 2) @[pp_generator.scala 43:39]
    node _pp_inv_2_T_1 = bits(_pp_inv_2_T, 0, 0) @[pp_generator.scala 43:43]
    node _pp_inv_2_T_2 = not(pp_set[2]) @[pp_generator.scala 43:51]
    node _pp_inv_2_T_3 = asSInt(_pp_inv_2_T_2) @[pp_generator.scala 43:51]
    node _pp_inv_2_T_4 = mux(_pp_inv_2_T_1, _pp_inv_2_T_3, pp_set[2]) @[pp_generator.scala 43:25]
    pp_inv[2] <= _pp_inv_2_T_4 @[pp_generator.scala 43:19]
    node _E_inv_2_T = bits(inputCtrl.Set0, 2, 2) @[pp_generator.scala 44:40]
    node _E_inv_2_T_1 = bits(_E_inv_2_T, 0, 0) @[pp_generator.scala 44:44]
    node _E_inv_2_T_2 = bits(inputCtrl.inv, 2, 2) @[pp_generator.scala 44:65]
    node _E_inv_2_T_3 = bits(_E_inv_2_T_2, 0, 0) @[pp_generator.scala 44:69]
    node _E_inv_2_T_4 = bits(inputCtrl.inv, 2, 2) @[pp_generator.scala 44:91]
    node _E_inv_2_T_5 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 44:117]
    node _E_inv_2_T_6 = xor(_E_inv_2_T_4, _E_inv_2_T_5) @[pp_generator.scala 44:94]
    node _E_inv_2_T_7 = bits(_E_inv_2_T_6, 0, 0) @[pp_generator.scala 44:131]
    node _E_inv_2_T_8 = mux(_E_inv_2_T_1, _E_inv_2_T_3, _E_inv_2_T_7) @[pp_generator.scala 44:25]
    E_inv[2] <= _E_inv_2_T_8 @[pp_generator.scala 44:19]
    node _E_2_T = not(E_inv[2]) @[pp_generator.scala 45:22]
    E[2] <= _E_2_T @[pp_generator.scala 45:19]
    node pp_temp_2_lo_lo = asUInt(pp_inv[2]) @[Cat.scala 33:92]
    node pp_temp_2_lo = cat(E[2], pp_temp_2_lo_lo) @[Cat.scala 33:92]
    node pp_temp_2_hi = cat(UInt<5>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
    node _pp_temp_2_T = cat(pp_temp_2_hi, pp_temp_2_lo) @[Cat.scala 33:92]
    node _pp_temp_2_T_1 = asSInt(_pp_temp_2_T) @[pp_generator.scala 55:94]
    pp_temp[2] <= _pp_temp_2_T_1 @[pp_generator.scala 55:24]
    node _pp_X2_3_T = bits(inputCtrl.X2, 3, 3) @[pp_generator.scala 40:38]
    node _pp_X2_3_T_1 = bits(_pp_X2_3_T, 0, 0) @[pp_generator.scala 40:42]
    node pp_X2_3_lo = asUInt(asSInt(UInt<1>("h0"))) @[Cat.scala 33:92]
    node pp_X2_3_hi = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_3_T_2 = cat(pp_X2_3_hi, pp_X2_3_lo) @[Cat.scala 33:92]
    node _pp_X2_3_T_3 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 41:51]
    node pp_X2_3_lo_1 = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_3_T_4 = cat(_pp_X2_3_T_3, pp_X2_3_lo_1) @[Cat.scala 33:92]
    node _pp_X2_3_T_5 = mux(_pp_X2_3_T_1, _pp_X2_3_T_2, _pp_X2_3_T_4) @[pp_generator.scala 40:25]
    node _pp_X2_3_T_6 = asSInt(_pp_X2_3_T_5) @[pp_generator.scala 41:90]
    pp_X2[3] <= _pp_X2_3_T_6 @[pp_generator.scala 40:19]
    node _pp_set_3_T = bits(inputCtrl.Set0, 3, 3) @[pp_generator.scala 42:40]
    node _pp_set_3_T_1 = bits(_pp_set_3_T, 0, 0) @[pp_generator.scala 42:44]
    node _pp_set_3_T_2 = mux(_pp_set_3_T_1, asSInt(UInt<9>("h0")), pp_X2[3]) @[pp_generator.scala 42:25]
    pp_set[3] <= _pp_set_3_T_2 @[pp_generator.scala 42:19]
    node _pp_inv_3_T = bits(inputCtrl.inv, 3, 3) @[pp_generator.scala 43:39]
    node _pp_inv_3_T_1 = bits(_pp_inv_3_T, 0, 0) @[pp_generator.scala 43:43]
    node _pp_inv_3_T_2 = not(pp_set[3]) @[pp_generator.scala 43:51]
    node _pp_inv_3_T_3 = asSInt(_pp_inv_3_T_2) @[pp_generator.scala 43:51]
    node _pp_inv_3_T_4 = mux(_pp_inv_3_T_1, _pp_inv_3_T_3, pp_set[3]) @[pp_generator.scala 43:25]
    pp_inv[3] <= _pp_inv_3_T_4 @[pp_generator.scala 43:19]
    node _E_inv_3_T = bits(inputCtrl.Set0, 3, 3) @[pp_generator.scala 44:40]
    node _E_inv_3_T_1 = bits(_E_inv_3_T, 0, 0) @[pp_generator.scala 44:44]
    node _E_inv_3_T_2 = bits(inputCtrl.inv, 3, 3) @[pp_generator.scala 44:65]
    node _E_inv_3_T_3 = bits(_E_inv_3_T_2, 0, 0) @[pp_generator.scala 44:69]
    node _E_inv_3_T_4 = bits(inputCtrl.inv, 3, 3) @[pp_generator.scala 44:91]
    node _E_inv_3_T_5 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 44:117]
    node _E_inv_3_T_6 = xor(_E_inv_3_T_4, _E_inv_3_T_5) @[pp_generator.scala 44:94]
    node _E_inv_3_T_7 = bits(_E_inv_3_T_6, 0, 0) @[pp_generator.scala 44:131]
    node _E_inv_3_T_8 = mux(_E_inv_3_T_1, _E_inv_3_T_3, _E_inv_3_T_7) @[pp_generator.scala 44:25]
    E_inv[3] <= _E_inv_3_T_8 @[pp_generator.scala 44:19]
    node _E_3_T = not(E_inv[3]) @[pp_generator.scala 45:22]
    E[3] <= _E_3_T @[pp_generator.scala 45:19]
    node pp_temp_3_lo_lo = asUInt(pp_inv[3]) @[Cat.scala 33:92]
    node pp_temp_3_lo = cat(E[3], pp_temp_3_lo_lo) @[Cat.scala 33:92]
    node pp_temp_3_hi = cat(UInt<5>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
    node _pp_temp_3_T = cat(pp_temp_3_hi, pp_temp_3_lo) @[Cat.scala 33:92]
    node _pp_temp_3_T_1 = asSInt(_pp_temp_3_T) @[pp_generator.scala 55:94]
    pp_temp[3] <= _pp_temp_3_T_1 @[pp_generator.scala 55:24]
    pp[0] <= pp_temp[0] @[pp_generator.scala 61:19]
    node _pp_1_T = bits(pp_temp[1], 13, 0) @[pp_generator.scala 63:36]
    node _pp_1_T_1 = bits(inputCtrl.inv, 0, 0) @[pp_generator.scala 63:78]
    node pp_1_hi = cat(_pp_1_T, UInt<1>("h0")) @[Cat.scala 33:92]
    node _pp_1_T_2 = cat(pp_1_hi, _pp_1_T_1) @[Cat.scala 33:92]
    node _pp_1_T_3 = asSInt(_pp_1_T_2) @[pp_generator.scala 63:85]
    pp[1] <= _pp_1_T_3 @[pp_generator.scala 63:19]
    node _pp_2_T = bits(pp_temp[2], 11, 0) @[pp_generator.scala 65:36]
    node _pp_2_T_1 = bits(inputCtrl.inv, 1, 1) @[pp_generator.scala 65:78]
    node pp_2_lo = cat(_pp_2_T_1, UInt<2>("h0")) @[Cat.scala 33:92]
    node pp_2_hi = cat(_pp_2_T, UInt<1>("h0")) @[Cat.scala 33:92]
    node _pp_2_T_2 = cat(pp_2_hi, pp_2_lo) @[Cat.scala 33:92]
    node _pp_2_T_3 = asSInt(_pp_2_T_2) @[pp_generator.scala 65:103]
    pp[2] <= _pp_2_T_3 @[pp_generator.scala 65:19]
    node _pp_3_T = bits(pp_temp[3], 9, 0) @[pp_generator.scala 65:36]
    node _pp_3_T_1 = bits(inputCtrl.inv, 2, 2) @[pp_generator.scala 65:78]
    node pp_3_lo = cat(_pp_3_T_1, UInt<4>("h0")) @[Cat.scala 33:92]
    node pp_3_hi = cat(_pp_3_T, UInt<1>("h0")) @[Cat.scala 33:92]
    node _pp_3_T_2 = cat(pp_3_hi, pp_3_lo) @[Cat.scala 33:92]
    node _pp_3_T_3 = asSInt(_pp_3_T_2) @[pp_generator.scala 65:103]
    pp[3] <= _pp_3_T_3 @[pp_generator.scala 65:19]
    node _sign_com_T = bits(inputCtrl.inv, 3, 3) @[pp_generator.scala 68:54]
    node sign_com_hi = cat(UInt<9>("h0"), _sign_com_T) @[Cat.scala 33:92]
    node _sign_com_T_1 = cat(sign_com_hi, UInt<6>("h0")) @[Cat.scala 33:92]
    node _sign_com_T_2 = asSInt(_sign_com_T_1) @[pp_generator.scala 68:97]
    sign_com <= _sign_com_T_2 @[pp_generator.scala 68:14]
    outputData.pp_out <= pp @[pp_generator.scala 70:25]
    outputData.sig_out <= sign_com @[pp_generator.scala 71:25]

  module RCA_2 :
    input clock : Clock
    input reset : Reset
    output input : { flip a_in : SInt<16>, flip b_in : SInt<16>, flip c_in : SInt<1>}
    output output : { S : SInt<16>, C : SInt<16>}

    wire g_comb : UInt<1>[16] @[rca.scala 22:22]
    wire p_comb : UInt<1>[16] @[rca.scala 23:22]
    wire s_comb : UInt<1>[16] @[rca.scala 24:22]
    wire c_comb : UInt<1>[17] @[rca.scala 25:22]
    node _c_comb_0_T = bits(input.c_in, 0, 0) @[rca.scala 27:29]
    c_comb[0] <= _c_comb_0_T @[rca.scala 27:15]
    node _g_comb_0_T = bits(input.a_in, 0, 0) @[rca.scala 30:35]
    node _g_comb_0_T_1 = bits(input.b_in, 0, 0) @[rca.scala 30:51]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[rca.scala 30:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[0] <= _g_comb_0_T_3 @[rca.scala 30:21]
    node _p_comb_0_T = bits(input.a_in, 0, 0) @[rca.scala 31:35]
    node _p_comb_0_T_1 = bits(input.b_in, 0, 0) @[rca.scala 31:51]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[rca.scala 31:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[0] <= _p_comb_0_T_3 @[rca.scala 31:21]
    node _s_comb_0_T = xor(p_comb[0], c_comb[0]) @[rca.scala 32:34]
    s_comb[0] <= _s_comb_0_T @[rca.scala 32:21]
    node _c_comb_1_T = and(c_comb[0], p_comb[0]) @[rca.scala 33:34]
    node _c_comb_1_T_1 = or(_c_comb_1_T, g_comb[0]) @[rca.scala 33:46]
    c_comb[1] <= _c_comb_1_T_1 @[rca.scala 33:21]
    node _g_comb_1_T = bits(input.a_in, 1, 1) @[rca.scala 30:35]
    node _g_comb_1_T_1 = bits(input.b_in, 1, 1) @[rca.scala 30:51]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[rca.scala 30:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[1] <= _g_comb_1_T_3 @[rca.scala 30:21]
    node _p_comb_1_T = bits(input.a_in, 1, 1) @[rca.scala 31:35]
    node _p_comb_1_T_1 = bits(input.b_in, 1, 1) @[rca.scala 31:51]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[rca.scala 31:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[1] <= _p_comb_1_T_3 @[rca.scala 31:21]
    node _s_comb_1_T = xor(p_comb[1], c_comb[1]) @[rca.scala 32:34]
    s_comb[1] <= _s_comb_1_T @[rca.scala 32:21]
    node _c_comb_2_T = and(c_comb[1], p_comb[1]) @[rca.scala 33:34]
    node _c_comb_2_T_1 = or(_c_comb_2_T, g_comb[1]) @[rca.scala 33:46]
    c_comb[2] <= _c_comb_2_T_1 @[rca.scala 33:21]
    node _g_comb_2_T = bits(input.a_in, 2, 2) @[rca.scala 30:35]
    node _g_comb_2_T_1 = bits(input.b_in, 2, 2) @[rca.scala 30:51]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[rca.scala 30:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[2] <= _g_comb_2_T_3 @[rca.scala 30:21]
    node _p_comb_2_T = bits(input.a_in, 2, 2) @[rca.scala 31:35]
    node _p_comb_2_T_1 = bits(input.b_in, 2, 2) @[rca.scala 31:51]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[rca.scala 31:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[2] <= _p_comb_2_T_3 @[rca.scala 31:21]
    node _s_comb_2_T = xor(p_comb[2], c_comb[2]) @[rca.scala 32:34]
    s_comb[2] <= _s_comb_2_T @[rca.scala 32:21]
    node _c_comb_3_T = and(c_comb[2], p_comb[2]) @[rca.scala 33:34]
    node _c_comb_3_T_1 = or(_c_comb_3_T, g_comb[2]) @[rca.scala 33:46]
    c_comb[3] <= _c_comb_3_T_1 @[rca.scala 33:21]
    node _g_comb_3_T = bits(input.a_in, 3, 3) @[rca.scala 30:35]
    node _g_comb_3_T_1 = bits(input.b_in, 3, 3) @[rca.scala 30:51]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[rca.scala 30:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[3] <= _g_comb_3_T_3 @[rca.scala 30:21]
    node _p_comb_3_T = bits(input.a_in, 3, 3) @[rca.scala 31:35]
    node _p_comb_3_T_1 = bits(input.b_in, 3, 3) @[rca.scala 31:51]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[rca.scala 31:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[3] <= _p_comb_3_T_3 @[rca.scala 31:21]
    node _s_comb_3_T = xor(p_comb[3], c_comb[3]) @[rca.scala 32:34]
    s_comb[3] <= _s_comb_3_T @[rca.scala 32:21]
    node _c_comb_4_T = and(c_comb[3], p_comb[3]) @[rca.scala 33:34]
    node _c_comb_4_T_1 = or(_c_comb_4_T, g_comb[3]) @[rca.scala 33:46]
    c_comb[4] <= _c_comb_4_T_1 @[rca.scala 33:21]
    node _g_comb_4_T = bits(input.a_in, 4, 4) @[rca.scala 30:35]
    node _g_comb_4_T_1 = bits(input.b_in, 4, 4) @[rca.scala 30:51]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[rca.scala 30:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[4] <= _g_comb_4_T_3 @[rca.scala 30:21]
    node _p_comb_4_T = bits(input.a_in, 4, 4) @[rca.scala 31:35]
    node _p_comb_4_T_1 = bits(input.b_in, 4, 4) @[rca.scala 31:51]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[rca.scala 31:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[4] <= _p_comb_4_T_3 @[rca.scala 31:21]
    node _s_comb_4_T = xor(p_comb[4], c_comb[4]) @[rca.scala 32:34]
    s_comb[4] <= _s_comb_4_T @[rca.scala 32:21]
    node _c_comb_5_T = and(c_comb[4], p_comb[4]) @[rca.scala 33:34]
    node _c_comb_5_T_1 = or(_c_comb_5_T, g_comb[4]) @[rca.scala 33:46]
    c_comb[5] <= _c_comb_5_T_1 @[rca.scala 33:21]
    node _g_comb_5_T = bits(input.a_in, 5, 5) @[rca.scala 30:35]
    node _g_comb_5_T_1 = bits(input.b_in, 5, 5) @[rca.scala 30:51]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[rca.scala 30:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[5] <= _g_comb_5_T_3 @[rca.scala 30:21]
    node _p_comb_5_T = bits(input.a_in, 5, 5) @[rca.scala 31:35]
    node _p_comb_5_T_1 = bits(input.b_in, 5, 5) @[rca.scala 31:51]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[rca.scala 31:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[5] <= _p_comb_5_T_3 @[rca.scala 31:21]
    node _s_comb_5_T = xor(p_comb[5], c_comb[5]) @[rca.scala 32:34]
    s_comb[5] <= _s_comb_5_T @[rca.scala 32:21]
    node _c_comb_6_T = and(c_comb[5], p_comb[5]) @[rca.scala 33:34]
    node _c_comb_6_T_1 = or(_c_comb_6_T, g_comb[5]) @[rca.scala 33:46]
    c_comb[6] <= _c_comb_6_T_1 @[rca.scala 33:21]
    node _g_comb_6_T = bits(input.a_in, 6, 6) @[rca.scala 30:35]
    node _g_comb_6_T_1 = bits(input.b_in, 6, 6) @[rca.scala 30:51]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[rca.scala 30:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[6] <= _g_comb_6_T_3 @[rca.scala 30:21]
    node _p_comb_6_T = bits(input.a_in, 6, 6) @[rca.scala 31:35]
    node _p_comb_6_T_1 = bits(input.b_in, 6, 6) @[rca.scala 31:51]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[rca.scala 31:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[6] <= _p_comb_6_T_3 @[rca.scala 31:21]
    node _s_comb_6_T = xor(p_comb[6], c_comb[6]) @[rca.scala 32:34]
    s_comb[6] <= _s_comb_6_T @[rca.scala 32:21]
    node _c_comb_7_T = and(c_comb[6], p_comb[6]) @[rca.scala 33:34]
    node _c_comb_7_T_1 = or(_c_comb_7_T, g_comb[6]) @[rca.scala 33:46]
    c_comb[7] <= _c_comb_7_T_1 @[rca.scala 33:21]
    node _g_comb_7_T = bits(input.a_in, 7, 7) @[rca.scala 30:35]
    node _g_comb_7_T_1 = bits(input.b_in, 7, 7) @[rca.scala 30:51]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[rca.scala 30:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[7] <= _g_comb_7_T_3 @[rca.scala 30:21]
    node _p_comb_7_T = bits(input.a_in, 7, 7) @[rca.scala 31:35]
    node _p_comb_7_T_1 = bits(input.b_in, 7, 7) @[rca.scala 31:51]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[rca.scala 31:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[7] <= _p_comb_7_T_3 @[rca.scala 31:21]
    node _s_comb_7_T = xor(p_comb[7], c_comb[7]) @[rca.scala 32:34]
    s_comb[7] <= _s_comb_7_T @[rca.scala 32:21]
    node _c_comb_8_T = and(c_comb[7], p_comb[7]) @[rca.scala 33:34]
    node _c_comb_8_T_1 = or(_c_comb_8_T, g_comb[7]) @[rca.scala 33:46]
    c_comb[8] <= _c_comb_8_T_1 @[rca.scala 33:21]
    node _g_comb_8_T = bits(input.a_in, 8, 8) @[rca.scala 30:35]
    node _g_comb_8_T_1 = bits(input.b_in, 8, 8) @[rca.scala 30:51]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[rca.scala 30:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[8] <= _g_comb_8_T_3 @[rca.scala 30:21]
    node _p_comb_8_T = bits(input.a_in, 8, 8) @[rca.scala 31:35]
    node _p_comb_8_T_1 = bits(input.b_in, 8, 8) @[rca.scala 31:51]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[rca.scala 31:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[8] <= _p_comb_8_T_3 @[rca.scala 31:21]
    node _s_comb_8_T = xor(p_comb[8], c_comb[8]) @[rca.scala 32:34]
    s_comb[8] <= _s_comb_8_T @[rca.scala 32:21]
    node _c_comb_9_T = and(c_comb[8], p_comb[8]) @[rca.scala 33:34]
    node _c_comb_9_T_1 = or(_c_comb_9_T, g_comb[8]) @[rca.scala 33:46]
    c_comb[9] <= _c_comb_9_T_1 @[rca.scala 33:21]
    node _g_comb_9_T = bits(input.a_in, 9, 9) @[rca.scala 30:35]
    node _g_comb_9_T_1 = bits(input.b_in, 9, 9) @[rca.scala 30:51]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[rca.scala 30:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[9] <= _g_comb_9_T_3 @[rca.scala 30:21]
    node _p_comb_9_T = bits(input.a_in, 9, 9) @[rca.scala 31:35]
    node _p_comb_9_T_1 = bits(input.b_in, 9, 9) @[rca.scala 31:51]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[rca.scala 31:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[9] <= _p_comb_9_T_3 @[rca.scala 31:21]
    node _s_comb_9_T = xor(p_comb[9], c_comb[9]) @[rca.scala 32:34]
    s_comb[9] <= _s_comb_9_T @[rca.scala 32:21]
    node _c_comb_10_T = and(c_comb[9], p_comb[9]) @[rca.scala 33:34]
    node _c_comb_10_T_1 = or(_c_comb_10_T, g_comb[9]) @[rca.scala 33:46]
    c_comb[10] <= _c_comb_10_T_1 @[rca.scala 33:21]
    node _g_comb_10_T = bits(input.a_in, 10, 10) @[rca.scala 30:35]
    node _g_comb_10_T_1 = bits(input.b_in, 10, 10) @[rca.scala 30:51]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[rca.scala 30:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[10] <= _g_comb_10_T_3 @[rca.scala 30:21]
    node _p_comb_10_T = bits(input.a_in, 10, 10) @[rca.scala 31:35]
    node _p_comb_10_T_1 = bits(input.b_in, 10, 10) @[rca.scala 31:51]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[rca.scala 31:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[10] <= _p_comb_10_T_3 @[rca.scala 31:21]
    node _s_comb_10_T = xor(p_comb[10], c_comb[10]) @[rca.scala 32:34]
    s_comb[10] <= _s_comb_10_T @[rca.scala 32:21]
    node _c_comb_11_T = and(c_comb[10], p_comb[10]) @[rca.scala 33:34]
    node _c_comb_11_T_1 = or(_c_comb_11_T, g_comb[10]) @[rca.scala 33:46]
    c_comb[11] <= _c_comb_11_T_1 @[rca.scala 33:21]
    node _g_comb_11_T = bits(input.a_in, 11, 11) @[rca.scala 30:35]
    node _g_comb_11_T_1 = bits(input.b_in, 11, 11) @[rca.scala 30:51]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[rca.scala 30:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[11] <= _g_comb_11_T_3 @[rca.scala 30:21]
    node _p_comb_11_T = bits(input.a_in, 11, 11) @[rca.scala 31:35]
    node _p_comb_11_T_1 = bits(input.b_in, 11, 11) @[rca.scala 31:51]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[rca.scala 31:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[11] <= _p_comb_11_T_3 @[rca.scala 31:21]
    node _s_comb_11_T = xor(p_comb[11], c_comb[11]) @[rca.scala 32:34]
    s_comb[11] <= _s_comb_11_T @[rca.scala 32:21]
    node _c_comb_12_T = and(c_comb[11], p_comb[11]) @[rca.scala 33:34]
    node _c_comb_12_T_1 = or(_c_comb_12_T, g_comb[11]) @[rca.scala 33:46]
    c_comb[12] <= _c_comb_12_T_1 @[rca.scala 33:21]
    node _g_comb_12_T = bits(input.a_in, 12, 12) @[rca.scala 30:35]
    node _g_comb_12_T_1 = bits(input.b_in, 12, 12) @[rca.scala 30:51]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[rca.scala 30:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[12] <= _g_comb_12_T_3 @[rca.scala 30:21]
    node _p_comb_12_T = bits(input.a_in, 12, 12) @[rca.scala 31:35]
    node _p_comb_12_T_1 = bits(input.b_in, 12, 12) @[rca.scala 31:51]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[rca.scala 31:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[12] <= _p_comb_12_T_3 @[rca.scala 31:21]
    node _s_comb_12_T = xor(p_comb[12], c_comb[12]) @[rca.scala 32:34]
    s_comb[12] <= _s_comb_12_T @[rca.scala 32:21]
    node _c_comb_13_T = and(c_comb[12], p_comb[12]) @[rca.scala 33:34]
    node _c_comb_13_T_1 = or(_c_comb_13_T, g_comb[12]) @[rca.scala 33:46]
    c_comb[13] <= _c_comb_13_T_1 @[rca.scala 33:21]
    node _g_comb_13_T = bits(input.a_in, 13, 13) @[rca.scala 30:35]
    node _g_comb_13_T_1 = bits(input.b_in, 13, 13) @[rca.scala 30:51]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[rca.scala 30:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[13] <= _g_comb_13_T_3 @[rca.scala 30:21]
    node _p_comb_13_T = bits(input.a_in, 13, 13) @[rca.scala 31:35]
    node _p_comb_13_T_1 = bits(input.b_in, 13, 13) @[rca.scala 31:51]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[rca.scala 31:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[13] <= _p_comb_13_T_3 @[rca.scala 31:21]
    node _s_comb_13_T = xor(p_comb[13], c_comb[13]) @[rca.scala 32:34]
    s_comb[13] <= _s_comb_13_T @[rca.scala 32:21]
    node _c_comb_14_T = and(c_comb[13], p_comb[13]) @[rca.scala 33:34]
    node _c_comb_14_T_1 = or(_c_comb_14_T, g_comb[13]) @[rca.scala 33:46]
    c_comb[14] <= _c_comb_14_T_1 @[rca.scala 33:21]
    node _g_comb_14_T = bits(input.a_in, 14, 14) @[rca.scala 30:35]
    node _g_comb_14_T_1 = bits(input.b_in, 14, 14) @[rca.scala 30:51]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[rca.scala 30:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[14] <= _g_comb_14_T_3 @[rca.scala 30:21]
    node _p_comb_14_T = bits(input.a_in, 14, 14) @[rca.scala 31:35]
    node _p_comb_14_T_1 = bits(input.b_in, 14, 14) @[rca.scala 31:51]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[rca.scala 31:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[14] <= _p_comb_14_T_3 @[rca.scala 31:21]
    node _s_comb_14_T = xor(p_comb[14], c_comb[14]) @[rca.scala 32:34]
    s_comb[14] <= _s_comb_14_T @[rca.scala 32:21]
    node _c_comb_15_T = and(c_comb[14], p_comb[14]) @[rca.scala 33:34]
    node _c_comb_15_T_1 = or(_c_comb_15_T, g_comb[14]) @[rca.scala 33:46]
    c_comb[15] <= _c_comb_15_T_1 @[rca.scala 33:21]
    node _g_comb_15_T = bits(input.a_in, 15, 15) @[rca.scala 30:35]
    node _g_comb_15_T_1 = bits(input.b_in, 15, 15) @[rca.scala 30:51]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[rca.scala 30:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[15] <= _g_comb_15_T_3 @[rca.scala 30:21]
    node _p_comb_15_T = bits(input.a_in, 15, 15) @[rca.scala 31:35]
    node _p_comb_15_T_1 = bits(input.b_in, 15, 15) @[rca.scala 31:51]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[rca.scala 31:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[15] <= _p_comb_15_T_3 @[rca.scala 31:21]
    node _s_comb_15_T = xor(p_comb[15], c_comb[15]) @[rca.scala 32:34]
    s_comb[15] <= _s_comb_15_T @[rca.scala 32:21]
    node _c_comb_16_T = and(c_comb[15], p_comb[15]) @[rca.scala 33:34]
    node _c_comb_16_T_1 = or(_c_comb_16_T, g_comb[15]) @[rca.scala 33:46]
    c_comb[16] <= _c_comb_16_T_1 @[rca.scala 33:21]
    node output_S_lo_lo_lo = cat(s_comb[1], s_comb[0]) @[rca.scala 36:24]
    node output_S_lo_lo_hi = cat(s_comb[3], s_comb[2]) @[rca.scala 36:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[rca.scala 36:24]
    node output_S_lo_hi_lo = cat(s_comb[5], s_comb[4]) @[rca.scala 36:24]
    node output_S_lo_hi_hi = cat(s_comb[7], s_comb[6]) @[rca.scala 36:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[rca.scala 36:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[rca.scala 36:24]
    node output_S_hi_lo_lo = cat(s_comb[9], s_comb[8]) @[rca.scala 36:24]
    node output_S_hi_lo_hi = cat(s_comb[11], s_comb[10]) @[rca.scala 36:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[rca.scala 36:24]
    node output_S_hi_hi_lo = cat(s_comb[13], s_comb[12]) @[rca.scala 36:24]
    node output_S_hi_hi_hi = cat(s_comb[15], s_comb[14]) @[rca.scala 36:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[rca.scala 36:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[rca.scala 36:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[rca.scala 36:24]
    node _output_S_T_1 = asSInt(_output_S_T) @[rca.scala 36:31]
    output.S <= _output_S_T_1 @[rca.scala 36:14]
    node _output_C_T = asSInt(c_comb[16]) @[rca.scala 37:40]
    output.C <= _output_C_T @[rca.scala 37:14]

  module pp_compressor3_2_3 :
    input clock : Clock
    input reset : Reset
    output input : { flip pp0_in : SInt<16>, flip pp1_in : SInt<16>, flip pp2_in : SInt<16>}
    output output : { S : SInt<16>, C : SInt<16>}

    wire g_comb : UInt<1>[16] @[pp_compressor3_2.scala 22:22]
    wire p_comb : UInt<1>[16] @[pp_compressor3_2.scala 23:22]
    wire s_comb : UInt<1>[16] @[pp_compressor3_2.scala 24:22]
    wire c_comb : UInt<1>[16] @[pp_compressor3_2.scala 25:22]
    node _g_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 28:35]
    node _g_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 28:53]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[0] <= _g_comb_0_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 29:35]
    node _p_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 29:53]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[0] <= _p_comb_0_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 30:46]
    node _s_comb_0_T_1 = bits(_s_comb_0_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_0_T_2 = xor(p_comb[0], _s_comb_0_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[0] <= _s_comb_0_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 31:34]
    node _c_comb_0_T_1 = bits(_c_comb_0_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_0_T_2 = and(_c_comb_0_T_1, p_comb[0]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_0_T_3 = or(_c_comb_0_T_2, g_comb[0]) @[pp_compressor3_2.scala 31:57]
    c_comb[0] <= _c_comb_0_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 28:35]
    node _g_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 28:53]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[1] <= _g_comb_1_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 29:35]
    node _p_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 29:53]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[1] <= _p_comb_1_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 30:46]
    node _s_comb_1_T_1 = bits(_s_comb_1_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_1_T_2 = xor(p_comb[1], _s_comb_1_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[1] <= _s_comb_1_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 31:34]
    node _c_comb_1_T_1 = bits(_c_comb_1_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_1_T_2 = and(_c_comb_1_T_1, p_comb[1]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_1_T_3 = or(_c_comb_1_T_2, g_comb[1]) @[pp_compressor3_2.scala 31:57]
    c_comb[1] <= _c_comb_1_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 28:35]
    node _g_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 28:53]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[2] <= _g_comb_2_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 29:35]
    node _p_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 29:53]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[2] <= _p_comb_2_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 30:46]
    node _s_comb_2_T_1 = bits(_s_comb_2_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_2_T_2 = xor(p_comb[2], _s_comb_2_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[2] <= _s_comb_2_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 31:34]
    node _c_comb_2_T_1 = bits(_c_comb_2_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_2_T_2 = and(_c_comb_2_T_1, p_comb[2]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_2_T_3 = or(_c_comb_2_T_2, g_comb[2]) @[pp_compressor3_2.scala 31:57]
    c_comb[2] <= _c_comb_2_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 28:35]
    node _g_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 28:53]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[3] <= _g_comb_3_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 29:35]
    node _p_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 29:53]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[3] <= _p_comb_3_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 30:46]
    node _s_comb_3_T_1 = bits(_s_comb_3_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_3_T_2 = xor(p_comb[3], _s_comb_3_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[3] <= _s_comb_3_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 31:34]
    node _c_comb_3_T_1 = bits(_c_comb_3_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_3_T_2 = and(_c_comb_3_T_1, p_comb[3]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_3_T_3 = or(_c_comb_3_T_2, g_comb[3]) @[pp_compressor3_2.scala 31:57]
    c_comb[3] <= _c_comb_3_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 28:35]
    node _g_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 28:53]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[4] <= _g_comb_4_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 29:35]
    node _p_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 29:53]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[4] <= _p_comb_4_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 30:46]
    node _s_comb_4_T_1 = bits(_s_comb_4_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_4_T_2 = xor(p_comb[4], _s_comb_4_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[4] <= _s_comb_4_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 31:34]
    node _c_comb_4_T_1 = bits(_c_comb_4_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_4_T_2 = and(_c_comb_4_T_1, p_comb[4]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_4_T_3 = or(_c_comb_4_T_2, g_comb[4]) @[pp_compressor3_2.scala 31:57]
    c_comb[4] <= _c_comb_4_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 28:35]
    node _g_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 28:53]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[5] <= _g_comb_5_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 29:35]
    node _p_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 29:53]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[5] <= _p_comb_5_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 30:46]
    node _s_comb_5_T_1 = bits(_s_comb_5_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_5_T_2 = xor(p_comb[5], _s_comb_5_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[5] <= _s_comb_5_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 31:34]
    node _c_comb_5_T_1 = bits(_c_comb_5_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_5_T_2 = and(_c_comb_5_T_1, p_comb[5]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_5_T_3 = or(_c_comb_5_T_2, g_comb[5]) @[pp_compressor3_2.scala 31:57]
    c_comb[5] <= _c_comb_5_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 28:35]
    node _g_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 28:53]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[6] <= _g_comb_6_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 29:35]
    node _p_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 29:53]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[6] <= _p_comb_6_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 30:46]
    node _s_comb_6_T_1 = bits(_s_comb_6_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_6_T_2 = xor(p_comb[6], _s_comb_6_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[6] <= _s_comb_6_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 31:34]
    node _c_comb_6_T_1 = bits(_c_comb_6_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_6_T_2 = and(_c_comb_6_T_1, p_comb[6]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_6_T_3 = or(_c_comb_6_T_2, g_comb[6]) @[pp_compressor3_2.scala 31:57]
    c_comb[6] <= _c_comb_6_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 28:35]
    node _g_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 28:53]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[7] <= _g_comb_7_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 29:35]
    node _p_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 29:53]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[7] <= _p_comb_7_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 30:46]
    node _s_comb_7_T_1 = bits(_s_comb_7_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_7_T_2 = xor(p_comb[7], _s_comb_7_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[7] <= _s_comb_7_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 31:34]
    node _c_comb_7_T_1 = bits(_c_comb_7_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_7_T_2 = and(_c_comb_7_T_1, p_comb[7]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_7_T_3 = or(_c_comb_7_T_2, g_comb[7]) @[pp_compressor3_2.scala 31:57]
    c_comb[7] <= _c_comb_7_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 28:35]
    node _g_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 28:53]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[8] <= _g_comb_8_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 29:35]
    node _p_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 29:53]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[8] <= _p_comb_8_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 30:46]
    node _s_comb_8_T_1 = bits(_s_comb_8_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_8_T_2 = xor(p_comb[8], _s_comb_8_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[8] <= _s_comb_8_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 31:34]
    node _c_comb_8_T_1 = bits(_c_comb_8_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_8_T_2 = and(_c_comb_8_T_1, p_comb[8]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_8_T_3 = or(_c_comb_8_T_2, g_comb[8]) @[pp_compressor3_2.scala 31:57]
    c_comb[8] <= _c_comb_8_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 28:35]
    node _g_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 28:53]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[9] <= _g_comb_9_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 29:35]
    node _p_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 29:53]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[9] <= _p_comb_9_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 30:46]
    node _s_comb_9_T_1 = bits(_s_comb_9_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_9_T_2 = xor(p_comb[9], _s_comb_9_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[9] <= _s_comb_9_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 31:34]
    node _c_comb_9_T_1 = bits(_c_comb_9_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_9_T_2 = and(_c_comb_9_T_1, p_comb[9]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_9_T_3 = or(_c_comb_9_T_2, g_comb[9]) @[pp_compressor3_2.scala 31:57]
    c_comb[9] <= _c_comb_9_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 28:35]
    node _g_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 28:53]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[10] <= _g_comb_10_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 29:35]
    node _p_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 29:53]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[10] <= _p_comb_10_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 30:46]
    node _s_comb_10_T_1 = bits(_s_comb_10_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_10_T_2 = xor(p_comb[10], _s_comb_10_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[10] <= _s_comb_10_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 31:34]
    node _c_comb_10_T_1 = bits(_c_comb_10_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_10_T_2 = and(_c_comb_10_T_1, p_comb[10]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_10_T_3 = or(_c_comb_10_T_2, g_comb[10]) @[pp_compressor3_2.scala 31:57]
    c_comb[10] <= _c_comb_10_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 28:35]
    node _g_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 28:53]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[11] <= _g_comb_11_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 29:35]
    node _p_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 29:53]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[11] <= _p_comb_11_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 30:46]
    node _s_comb_11_T_1 = bits(_s_comb_11_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_11_T_2 = xor(p_comb[11], _s_comb_11_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[11] <= _s_comb_11_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 31:34]
    node _c_comb_11_T_1 = bits(_c_comb_11_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_11_T_2 = and(_c_comb_11_T_1, p_comb[11]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_11_T_3 = or(_c_comb_11_T_2, g_comb[11]) @[pp_compressor3_2.scala 31:57]
    c_comb[11] <= _c_comb_11_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 28:35]
    node _g_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 28:53]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[12] <= _g_comb_12_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 29:35]
    node _p_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 29:53]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[12] <= _p_comb_12_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 30:46]
    node _s_comb_12_T_1 = bits(_s_comb_12_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_12_T_2 = xor(p_comb[12], _s_comb_12_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[12] <= _s_comb_12_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 31:34]
    node _c_comb_12_T_1 = bits(_c_comb_12_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_12_T_2 = and(_c_comb_12_T_1, p_comb[12]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_12_T_3 = or(_c_comb_12_T_2, g_comb[12]) @[pp_compressor3_2.scala 31:57]
    c_comb[12] <= _c_comb_12_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 28:35]
    node _g_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 28:53]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[13] <= _g_comb_13_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 29:35]
    node _p_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 29:53]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[13] <= _p_comb_13_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 30:46]
    node _s_comb_13_T_1 = bits(_s_comb_13_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_13_T_2 = xor(p_comb[13], _s_comb_13_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[13] <= _s_comb_13_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 31:34]
    node _c_comb_13_T_1 = bits(_c_comb_13_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_13_T_2 = and(_c_comb_13_T_1, p_comb[13]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_13_T_3 = or(_c_comb_13_T_2, g_comb[13]) @[pp_compressor3_2.scala 31:57]
    c_comb[13] <= _c_comb_13_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 28:35]
    node _g_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 28:53]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[14] <= _g_comb_14_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 29:35]
    node _p_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 29:53]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[14] <= _p_comb_14_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 30:46]
    node _s_comb_14_T_1 = bits(_s_comb_14_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_14_T_2 = xor(p_comb[14], _s_comb_14_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[14] <= _s_comb_14_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 31:34]
    node _c_comb_14_T_1 = bits(_c_comb_14_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_14_T_2 = and(_c_comb_14_T_1, p_comb[14]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_14_T_3 = or(_c_comb_14_T_2, g_comb[14]) @[pp_compressor3_2.scala 31:57]
    c_comb[14] <= _c_comb_14_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 28:35]
    node _g_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 28:53]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[15] <= _g_comb_15_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 29:35]
    node _p_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 29:53]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[15] <= _p_comb_15_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 30:46]
    node _s_comb_15_T_1 = bits(_s_comb_15_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_15_T_2 = xor(p_comb[15], _s_comb_15_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[15] <= _s_comb_15_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 31:34]
    node _c_comb_15_T_1 = bits(_c_comb_15_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_15_T_2 = and(_c_comb_15_T_1, p_comb[15]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_15_T_3 = or(_c_comb_15_T_2, g_comb[15]) @[pp_compressor3_2.scala 31:57]
    c_comb[15] <= _c_comb_15_T_3 @[pp_compressor3_2.scala 31:19]
    node output_S_lo_lo_lo = cat(s_comb[1], s_comb[0]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo_hi = cat(s_comb[3], s_comb[2]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_lo = cat(s_comb[5], s_comb[4]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_hi = cat(s_comb[7], s_comb[6]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_lo = cat(s_comb[9], s_comb[8]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_hi = cat(s_comb[11], s_comb[10]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_lo = cat(s_comb[13], s_comb[12]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_hi = cat(s_comb[15], s_comb[14]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T_1 = asSInt(_output_S_T) @[pp_compressor3_2.scala 34:31]
    output.S <= _output_S_T_1 @[pp_compressor3_2.scala 34:14]
    node output_C_lo_lo_lo = cat(c_comb[1], c_comb[0]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo_hi = cat(c_comb[3], c_comb[2]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo = cat(output_C_lo_lo_hi, output_C_lo_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_lo = cat(c_comb[5], c_comb[4]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_hi = cat(c_comb[7], c_comb[6]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi = cat(output_C_lo_hi_hi, output_C_lo_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo = cat(output_C_lo_hi, output_C_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_lo = cat(c_comb[9], c_comb[8]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_hi = cat(c_comb[11], c_comb[10]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo = cat(output_C_hi_lo_hi, output_C_hi_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_lo = cat(c_comb[13], c_comb[12]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_hi = cat(c_comb[15], c_comb[14]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi = cat(output_C_hi_hi_hi, output_C_hi_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi = cat(output_C_hi_hi, output_C_hi_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T = cat(output_C_hi, output_C_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T_1 = bits(_output_C_T, 14, 0) @[pp_compressor3_2.scala 35:36]
    node _output_C_T_2 = cat(_output_C_T_1, UInt<1>("h0")) @[Cat.scala 33:92]
    node _output_C_T_3 = asSInt(_output_C_T_2) @[pp_compressor3_2.scala 35:61]
    output.C <= _output_C_T_3 @[pp_compressor3_2.scala 35:14]

  module pp_compressor3_2_4 :
    input clock : Clock
    input reset : Reset
    output input : { flip pp0_in : SInt<16>, flip pp1_in : SInt<16>, flip pp2_in : SInt<16>}
    output output : { S : SInt<16>, C : SInt<16>}

    wire g_comb : UInt<1>[16] @[pp_compressor3_2.scala 22:22]
    wire p_comb : UInt<1>[16] @[pp_compressor3_2.scala 23:22]
    wire s_comb : UInt<1>[16] @[pp_compressor3_2.scala 24:22]
    wire c_comb : UInt<1>[16] @[pp_compressor3_2.scala 25:22]
    node _g_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 28:35]
    node _g_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 28:53]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[0] <= _g_comb_0_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 29:35]
    node _p_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 29:53]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[0] <= _p_comb_0_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 30:46]
    node _s_comb_0_T_1 = bits(_s_comb_0_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_0_T_2 = xor(p_comb[0], _s_comb_0_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[0] <= _s_comb_0_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 31:34]
    node _c_comb_0_T_1 = bits(_c_comb_0_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_0_T_2 = and(_c_comb_0_T_1, p_comb[0]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_0_T_3 = or(_c_comb_0_T_2, g_comb[0]) @[pp_compressor3_2.scala 31:57]
    c_comb[0] <= _c_comb_0_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 28:35]
    node _g_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 28:53]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[1] <= _g_comb_1_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 29:35]
    node _p_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 29:53]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[1] <= _p_comb_1_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 30:46]
    node _s_comb_1_T_1 = bits(_s_comb_1_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_1_T_2 = xor(p_comb[1], _s_comb_1_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[1] <= _s_comb_1_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 31:34]
    node _c_comb_1_T_1 = bits(_c_comb_1_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_1_T_2 = and(_c_comb_1_T_1, p_comb[1]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_1_T_3 = or(_c_comb_1_T_2, g_comb[1]) @[pp_compressor3_2.scala 31:57]
    c_comb[1] <= _c_comb_1_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 28:35]
    node _g_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 28:53]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[2] <= _g_comb_2_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 29:35]
    node _p_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 29:53]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[2] <= _p_comb_2_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 30:46]
    node _s_comb_2_T_1 = bits(_s_comb_2_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_2_T_2 = xor(p_comb[2], _s_comb_2_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[2] <= _s_comb_2_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 31:34]
    node _c_comb_2_T_1 = bits(_c_comb_2_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_2_T_2 = and(_c_comb_2_T_1, p_comb[2]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_2_T_3 = or(_c_comb_2_T_2, g_comb[2]) @[pp_compressor3_2.scala 31:57]
    c_comb[2] <= _c_comb_2_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 28:35]
    node _g_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 28:53]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[3] <= _g_comb_3_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 29:35]
    node _p_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 29:53]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[3] <= _p_comb_3_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 30:46]
    node _s_comb_3_T_1 = bits(_s_comb_3_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_3_T_2 = xor(p_comb[3], _s_comb_3_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[3] <= _s_comb_3_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 31:34]
    node _c_comb_3_T_1 = bits(_c_comb_3_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_3_T_2 = and(_c_comb_3_T_1, p_comb[3]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_3_T_3 = or(_c_comb_3_T_2, g_comb[3]) @[pp_compressor3_2.scala 31:57]
    c_comb[3] <= _c_comb_3_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 28:35]
    node _g_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 28:53]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[4] <= _g_comb_4_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 29:35]
    node _p_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 29:53]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[4] <= _p_comb_4_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 30:46]
    node _s_comb_4_T_1 = bits(_s_comb_4_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_4_T_2 = xor(p_comb[4], _s_comb_4_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[4] <= _s_comb_4_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 31:34]
    node _c_comb_4_T_1 = bits(_c_comb_4_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_4_T_2 = and(_c_comb_4_T_1, p_comb[4]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_4_T_3 = or(_c_comb_4_T_2, g_comb[4]) @[pp_compressor3_2.scala 31:57]
    c_comb[4] <= _c_comb_4_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 28:35]
    node _g_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 28:53]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[5] <= _g_comb_5_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 29:35]
    node _p_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 29:53]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[5] <= _p_comb_5_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 30:46]
    node _s_comb_5_T_1 = bits(_s_comb_5_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_5_T_2 = xor(p_comb[5], _s_comb_5_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[5] <= _s_comb_5_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 31:34]
    node _c_comb_5_T_1 = bits(_c_comb_5_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_5_T_2 = and(_c_comb_5_T_1, p_comb[5]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_5_T_3 = or(_c_comb_5_T_2, g_comb[5]) @[pp_compressor3_2.scala 31:57]
    c_comb[5] <= _c_comb_5_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 28:35]
    node _g_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 28:53]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[6] <= _g_comb_6_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 29:35]
    node _p_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 29:53]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[6] <= _p_comb_6_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 30:46]
    node _s_comb_6_T_1 = bits(_s_comb_6_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_6_T_2 = xor(p_comb[6], _s_comb_6_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[6] <= _s_comb_6_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 31:34]
    node _c_comb_6_T_1 = bits(_c_comb_6_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_6_T_2 = and(_c_comb_6_T_1, p_comb[6]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_6_T_3 = or(_c_comb_6_T_2, g_comb[6]) @[pp_compressor3_2.scala 31:57]
    c_comb[6] <= _c_comb_6_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 28:35]
    node _g_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 28:53]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[7] <= _g_comb_7_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 29:35]
    node _p_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 29:53]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[7] <= _p_comb_7_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 30:46]
    node _s_comb_7_T_1 = bits(_s_comb_7_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_7_T_2 = xor(p_comb[7], _s_comb_7_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[7] <= _s_comb_7_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 31:34]
    node _c_comb_7_T_1 = bits(_c_comb_7_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_7_T_2 = and(_c_comb_7_T_1, p_comb[7]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_7_T_3 = or(_c_comb_7_T_2, g_comb[7]) @[pp_compressor3_2.scala 31:57]
    c_comb[7] <= _c_comb_7_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 28:35]
    node _g_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 28:53]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[8] <= _g_comb_8_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 29:35]
    node _p_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 29:53]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[8] <= _p_comb_8_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 30:46]
    node _s_comb_8_T_1 = bits(_s_comb_8_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_8_T_2 = xor(p_comb[8], _s_comb_8_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[8] <= _s_comb_8_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 31:34]
    node _c_comb_8_T_1 = bits(_c_comb_8_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_8_T_2 = and(_c_comb_8_T_1, p_comb[8]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_8_T_3 = or(_c_comb_8_T_2, g_comb[8]) @[pp_compressor3_2.scala 31:57]
    c_comb[8] <= _c_comb_8_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 28:35]
    node _g_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 28:53]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[9] <= _g_comb_9_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 29:35]
    node _p_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 29:53]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[9] <= _p_comb_9_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 30:46]
    node _s_comb_9_T_1 = bits(_s_comb_9_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_9_T_2 = xor(p_comb[9], _s_comb_9_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[9] <= _s_comb_9_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 31:34]
    node _c_comb_9_T_1 = bits(_c_comb_9_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_9_T_2 = and(_c_comb_9_T_1, p_comb[9]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_9_T_3 = or(_c_comb_9_T_2, g_comb[9]) @[pp_compressor3_2.scala 31:57]
    c_comb[9] <= _c_comb_9_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 28:35]
    node _g_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 28:53]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[10] <= _g_comb_10_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 29:35]
    node _p_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 29:53]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[10] <= _p_comb_10_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 30:46]
    node _s_comb_10_T_1 = bits(_s_comb_10_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_10_T_2 = xor(p_comb[10], _s_comb_10_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[10] <= _s_comb_10_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 31:34]
    node _c_comb_10_T_1 = bits(_c_comb_10_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_10_T_2 = and(_c_comb_10_T_1, p_comb[10]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_10_T_3 = or(_c_comb_10_T_2, g_comb[10]) @[pp_compressor3_2.scala 31:57]
    c_comb[10] <= _c_comb_10_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 28:35]
    node _g_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 28:53]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[11] <= _g_comb_11_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 29:35]
    node _p_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 29:53]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[11] <= _p_comb_11_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 30:46]
    node _s_comb_11_T_1 = bits(_s_comb_11_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_11_T_2 = xor(p_comb[11], _s_comb_11_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[11] <= _s_comb_11_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 31:34]
    node _c_comb_11_T_1 = bits(_c_comb_11_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_11_T_2 = and(_c_comb_11_T_1, p_comb[11]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_11_T_3 = or(_c_comb_11_T_2, g_comb[11]) @[pp_compressor3_2.scala 31:57]
    c_comb[11] <= _c_comb_11_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 28:35]
    node _g_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 28:53]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[12] <= _g_comb_12_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 29:35]
    node _p_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 29:53]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[12] <= _p_comb_12_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 30:46]
    node _s_comb_12_T_1 = bits(_s_comb_12_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_12_T_2 = xor(p_comb[12], _s_comb_12_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[12] <= _s_comb_12_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 31:34]
    node _c_comb_12_T_1 = bits(_c_comb_12_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_12_T_2 = and(_c_comb_12_T_1, p_comb[12]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_12_T_3 = or(_c_comb_12_T_2, g_comb[12]) @[pp_compressor3_2.scala 31:57]
    c_comb[12] <= _c_comb_12_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 28:35]
    node _g_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 28:53]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[13] <= _g_comb_13_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 29:35]
    node _p_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 29:53]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[13] <= _p_comb_13_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 30:46]
    node _s_comb_13_T_1 = bits(_s_comb_13_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_13_T_2 = xor(p_comb[13], _s_comb_13_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[13] <= _s_comb_13_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 31:34]
    node _c_comb_13_T_1 = bits(_c_comb_13_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_13_T_2 = and(_c_comb_13_T_1, p_comb[13]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_13_T_3 = or(_c_comb_13_T_2, g_comb[13]) @[pp_compressor3_2.scala 31:57]
    c_comb[13] <= _c_comb_13_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 28:35]
    node _g_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 28:53]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[14] <= _g_comb_14_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 29:35]
    node _p_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 29:53]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[14] <= _p_comb_14_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 30:46]
    node _s_comb_14_T_1 = bits(_s_comb_14_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_14_T_2 = xor(p_comb[14], _s_comb_14_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[14] <= _s_comb_14_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 31:34]
    node _c_comb_14_T_1 = bits(_c_comb_14_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_14_T_2 = and(_c_comb_14_T_1, p_comb[14]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_14_T_3 = or(_c_comb_14_T_2, g_comb[14]) @[pp_compressor3_2.scala 31:57]
    c_comb[14] <= _c_comb_14_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 28:35]
    node _g_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 28:53]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[15] <= _g_comb_15_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 29:35]
    node _p_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 29:53]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[15] <= _p_comb_15_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 30:46]
    node _s_comb_15_T_1 = bits(_s_comb_15_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_15_T_2 = xor(p_comb[15], _s_comb_15_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[15] <= _s_comb_15_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 31:34]
    node _c_comb_15_T_1 = bits(_c_comb_15_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_15_T_2 = and(_c_comb_15_T_1, p_comb[15]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_15_T_3 = or(_c_comb_15_T_2, g_comb[15]) @[pp_compressor3_2.scala 31:57]
    c_comb[15] <= _c_comb_15_T_3 @[pp_compressor3_2.scala 31:19]
    node output_S_lo_lo_lo = cat(s_comb[1], s_comb[0]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo_hi = cat(s_comb[3], s_comb[2]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_lo = cat(s_comb[5], s_comb[4]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_hi = cat(s_comb[7], s_comb[6]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_lo = cat(s_comb[9], s_comb[8]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_hi = cat(s_comb[11], s_comb[10]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_lo = cat(s_comb[13], s_comb[12]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_hi = cat(s_comb[15], s_comb[14]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T_1 = asSInt(_output_S_T) @[pp_compressor3_2.scala 34:31]
    output.S <= _output_S_T_1 @[pp_compressor3_2.scala 34:14]
    node output_C_lo_lo_lo = cat(c_comb[1], c_comb[0]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo_hi = cat(c_comb[3], c_comb[2]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo = cat(output_C_lo_lo_hi, output_C_lo_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_lo = cat(c_comb[5], c_comb[4]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_hi = cat(c_comb[7], c_comb[6]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi = cat(output_C_lo_hi_hi, output_C_lo_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo = cat(output_C_lo_hi, output_C_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_lo = cat(c_comb[9], c_comb[8]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_hi = cat(c_comb[11], c_comb[10]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo = cat(output_C_hi_lo_hi, output_C_hi_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_lo = cat(c_comb[13], c_comb[12]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_hi = cat(c_comb[15], c_comb[14]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi = cat(output_C_hi_hi_hi, output_C_hi_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi = cat(output_C_hi_hi, output_C_hi_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T = cat(output_C_hi, output_C_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T_1 = bits(_output_C_T, 14, 0) @[pp_compressor3_2.scala 35:36]
    node _output_C_T_2 = cat(_output_C_T_1, UInt<1>("h0")) @[Cat.scala 33:92]
    node _output_C_T_3 = asSInt(_output_C_T_2) @[pp_compressor3_2.scala 35:61]
    output.C <= _output_C_T_3 @[pp_compressor3_2.scala 35:14]

  module pp_compressor3_2_5 :
    input clock : Clock
    input reset : Reset
    output input : { flip pp0_in : SInt<16>, flip pp1_in : SInt<16>, flip pp2_in : SInt<16>}
    output output : { S : SInt<16>, C : SInt<16>}

    wire g_comb : UInt<1>[16] @[pp_compressor3_2.scala 22:22]
    wire p_comb : UInt<1>[16] @[pp_compressor3_2.scala 23:22]
    wire s_comb : UInt<1>[16] @[pp_compressor3_2.scala 24:22]
    wire c_comb : UInt<1>[16] @[pp_compressor3_2.scala 25:22]
    node _g_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 28:35]
    node _g_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 28:53]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[0] <= _g_comb_0_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 29:35]
    node _p_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 29:53]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[0] <= _p_comb_0_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 30:46]
    node _s_comb_0_T_1 = bits(_s_comb_0_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_0_T_2 = xor(p_comb[0], _s_comb_0_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[0] <= _s_comb_0_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 31:34]
    node _c_comb_0_T_1 = bits(_c_comb_0_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_0_T_2 = and(_c_comb_0_T_1, p_comb[0]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_0_T_3 = or(_c_comb_0_T_2, g_comb[0]) @[pp_compressor3_2.scala 31:57]
    c_comb[0] <= _c_comb_0_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 28:35]
    node _g_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 28:53]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[1] <= _g_comb_1_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 29:35]
    node _p_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 29:53]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[1] <= _p_comb_1_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 30:46]
    node _s_comb_1_T_1 = bits(_s_comb_1_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_1_T_2 = xor(p_comb[1], _s_comb_1_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[1] <= _s_comb_1_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 31:34]
    node _c_comb_1_T_1 = bits(_c_comb_1_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_1_T_2 = and(_c_comb_1_T_1, p_comb[1]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_1_T_3 = or(_c_comb_1_T_2, g_comb[1]) @[pp_compressor3_2.scala 31:57]
    c_comb[1] <= _c_comb_1_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 28:35]
    node _g_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 28:53]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[2] <= _g_comb_2_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 29:35]
    node _p_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 29:53]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[2] <= _p_comb_2_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 30:46]
    node _s_comb_2_T_1 = bits(_s_comb_2_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_2_T_2 = xor(p_comb[2], _s_comb_2_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[2] <= _s_comb_2_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 31:34]
    node _c_comb_2_T_1 = bits(_c_comb_2_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_2_T_2 = and(_c_comb_2_T_1, p_comb[2]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_2_T_3 = or(_c_comb_2_T_2, g_comb[2]) @[pp_compressor3_2.scala 31:57]
    c_comb[2] <= _c_comb_2_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 28:35]
    node _g_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 28:53]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[3] <= _g_comb_3_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 29:35]
    node _p_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 29:53]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[3] <= _p_comb_3_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 30:46]
    node _s_comb_3_T_1 = bits(_s_comb_3_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_3_T_2 = xor(p_comb[3], _s_comb_3_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[3] <= _s_comb_3_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 31:34]
    node _c_comb_3_T_1 = bits(_c_comb_3_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_3_T_2 = and(_c_comb_3_T_1, p_comb[3]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_3_T_3 = or(_c_comb_3_T_2, g_comb[3]) @[pp_compressor3_2.scala 31:57]
    c_comb[3] <= _c_comb_3_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 28:35]
    node _g_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 28:53]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[4] <= _g_comb_4_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 29:35]
    node _p_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 29:53]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[4] <= _p_comb_4_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 30:46]
    node _s_comb_4_T_1 = bits(_s_comb_4_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_4_T_2 = xor(p_comb[4], _s_comb_4_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[4] <= _s_comb_4_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 31:34]
    node _c_comb_4_T_1 = bits(_c_comb_4_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_4_T_2 = and(_c_comb_4_T_1, p_comb[4]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_4_T_3 = or(_c_comb_4_T_2, g_comb[4]) @[pp_compressor3_2.scala 31:57]
    c_comb[4] <= _c_comb_4_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 28:35]
    node _g_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 28:53]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[5] <= _g_comb_5_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 29:35]
    node _p_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 29:53]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[5] <= _p_comb_5_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 30:46]
    node _s_comb_5_T_1 = bits(_s_comb_5_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_5_T_2 = xor(p_comb[5], _s_comb_5_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[5] <= _s_comb_5_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 31:34]
    node _c_comb_5_T_1 = bits(_c_comb_5_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_5_T_2 = and(_c_comb_5_T_1, p_comb[5]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_5_T_3 = or(_c_comb_5_T_2, g_comb[5]) @[pp_compressor3_2.scala 31:57]
    c_comb[5] <= _c_comb_5_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 28:35]
    node _g_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 28:53]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[6] <= _g_comb_6_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 29:35]
    node _p_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 29:53]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[6] <= _p_comb_6_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 30:46]
    node _s_comb_6_T_1 = bits(_s_comb_6_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_6_T_2 = xor(p_comb[6], _s_comb_6_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[6] <= _s_comb_6_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 31:34]
    node _c_comb_6_T_1 = bits(_c_comb_6_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_6_T_2 = and(_c_comb_6_T_1, p_comb[6]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_6_T_3 = or(_c_comb_6_T_2, g_comb[6]) @[pp_compressor3_2.scala 31:57]
    c_comb[6] <= _c_comb_6_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 28:35]
    node _g_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 28:53]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[7] <= _g_comb_7_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 29:35]
    node _p_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 29:53]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[7] <= _p_comb_7_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 30:46]
    node _s_comb_7_T_1 = bits(_s_comb_7_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_7_T_2 = xor(p_comb[7], _s_comb_7_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[7] <= _s_comb_7_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 31:34]
    node _c_comb_7_T_1 = bits(_c_comb_7_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_7_T_2 = and(_c_comb_7_T_1, p_comb[7]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_7_T_3 = or(_c_comb_7_T_2, g_comb[7]) @[pp_compressor3_2.scala 31:57]
    c_comb[7] <= _c_comb_7_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 28:35]
    node _g_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 28:53]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[8] <= _g_comb_8_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 29:35]
    node _p_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 29:53]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[8] <= _p_comb_8_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 30:46]
    node _s_comb_8_T_1 = bits(_s_comb_8_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_8_T_2 = xor(p_comb[8], _s_comb_8_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[8] <= _s_comb_8_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 31:34]
    node _c_comb_8_T_1 = bits(_c_comb_8_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_8_T_2 = and(_c_comb_8_T_1, p_comb[8]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_8_T_3 = or(_c_comb_8_T_2, g_comb[8]) @[pp_compressor3_2.scala 31:57]
    c_comb[8] <= _c_comb_8_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 28:35]
    node _g_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 28:53]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[9] <= _g_comb_9_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 29:35]
    node _p_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 29:53]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[9] <= _p_comb_9_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 30:46]
    node _s_comb_9_T_1 = bits(_s_comb_9_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_9_T_2 = xor(p_comb[9], _s_comb_9_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[9] <= _s_comb_9_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 31:34]
    node _c_comb_9_T_1 = bits(_c_comb_9_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_9_T_2 = and(_c_comb_9_T_1, p_comb[9]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_9_T_3 = or(_c_comb_9_T_2, g_comb[9]) @[pp_compressor3_2.scala 31:57]
    c_comb[9] <= _c_comb_9_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 28:35]
    node _g_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 28:53]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[10] <= _g_comb_10_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 29:35]
    node _p_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 29:53]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[10] <= _p_comb_10_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 30:46]
    node _s_comb_10_T_1 = bits(_s_comb_10_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_10_T_2 = xor(p_comb[10], _s_comb_10_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[10] <= _s_comb_10_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 31:34]
    node _c_comb_10_T_1 = bits(_c_comb_10_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_10_T_2 = and(_c_comb_10_T_1, p_comb[10]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_10_T_3 = or(_c_comb_10_T_2, g_comb[10]) @[pp_compressor3_2.scala 31:57]
    c_comb[10] <= _c_comb_10_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 28:35]
    node _g_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 28:53]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[11] <= _g_comb_11_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 29:35]
    node _p_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 29:53]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[11] <= _p_comb_11_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 30:46]
    node _s_comb_11_T_1 = bits(_s_comb_11_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_11_T_2 = xor(p_comb[11], _s_comb_11_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[11] <= _s_comb_11_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 31:34]
    node _c_comb_11_T_1 = bits(_c_comb_11_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_11_T_2 = and(_c_comb_11_T_1, p_comb[11]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_11_T_3 = or(_c_comb_11_T_2, g_comb[11]) @[pp_compressor3_2.scala 31:57]
    c_comb[11] <= _c_comb_11_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 28:35]
    node _g_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 28:53]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[12] <= _g_comb_12_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 29:35]
    node _p_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 29:53]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[12] <= _p_comb_12_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 30:46]
    node _s_comb_12_T_1 = bits(_s_comb_12_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_12_T_2 = xor(p_comb[12], _s_comb_12_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[12] <= _s_comb_12_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 31:34]
    node _c_comb_12_T_1 = bits(_c_comb_12_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_12_T_2 = and(_c_comb_12_T_1, p_comb[12]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_12_T_3 = or(_c_comb_12_T_2, g_comb[12]) @[pp_compressor3_2.scala 31:57]
    c_comb[12] <= _c_comb_12_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 28:35]
    node _g_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 28:53]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[13] <= _g_comb_13_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 29:35]
    node _p_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 29:53]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[13] <= _p_comb_13_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 30:46]
    node _s_comb_13_T_1 = bits(_s_comb_13_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_13_T_2 = xor(p_comb[13], _s_comb_13_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[13] <= _s_comb_13_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 31:34]
    node _c_comb_13_T_1 = bits(_c_comb_13_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_13_T_2 = and(_c_comb_13_T_1, p_comb[13]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_13_T_3 = or(_c_comb_13_T_2, g_comb[13]) @[pp_compressor3_2.scala 31:57]
    c_comb[13] <= _c_comb_13_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 28:35]
    node _g_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 28:53]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[14] <= _g_comb_14_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 29:35]
    node _p_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 29:53]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[14] <= _p_comb_14_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 30:46]
    node _s_comb_14_T_1 = bits(_s_comb_14_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_14_T_2 = xor(p_comb[14], _s_comb_14_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[14] <= _s_comb_14_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 31:34]
    node _c_comb_14_T_1 = bits(_c_comb_14_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_14_T_2 = and(_c_comb_14_T_1, p_comb[14]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_14_T_3 = or(_c_comb_14_T_2, g_comb[14]) @[pp_compressor3_2.scala 31:57]
    c_comb[14] <= _c_comb_14_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 28:35]
    node _g_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 28:53]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[15] <= _g_comb_15_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 29:35]
    node _p_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 29:53]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[15] <= _p_comb_15_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 30:46]
    node _s_comb_15_T_1 = bits(_s_comb_15_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_15_T_2 = xor(p_comb[15], _s_comb_15_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[15] <= _s_comb_15_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 31:34]
    node _c_comb_15_T_1 = bits(_c_comb_15_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_15_T_2 = and(_c_comb_15_T_1, p_comb[15]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_15_T_3 = or(_c_comb_15_T_2, g_comb[15]) @[pp_compressor3_2.scala 31:57]
    c_comb[15] <= _c_comb_15_T_3 @[pp_compressor3_2.scala 31:19]
    node output_S_lo_lo_lo = cat(s_comb[1], s_comb[0]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo_hi = cat(s_comb[3], s_comb[2]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_lo = cat(s_comb[5], s_comb[4]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_hi = cat(s_comb[7], s_comb[6]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_lo = cat(s_comb[9], s_comb[8]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_hi = cat(s_comb[11], s_comb[10]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_lo = cat(s_comb[13], s_comb[12]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_hi = cat(s_comb[15], s_comb[14]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T_1 = asSInt(_output_S_T) @[pp_compressor3_2.scala 34:31]
    output.S <= _output_S_T_1 @[pp_compressor3_2.scala 34:14]
    node output_C_lo_lo_lo = cat(c_comb[1], c_comb[0]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo_hi = cat(c_comb[3], c_comb[2]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo = cat(output_C_lo_lo_hi, output_C_lo_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_lo = cat(c_comb[5], c_comb[4]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_hi = cat(c_comb[7], c_comb[6]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi = cat(output_C_lo_hi_hi, output_C_lo_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo = cat(output_C_lo_hi, output_C_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_lo = cat(c_comb[9], c_comb[8]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_hi = cat(c_comb[11], c_comb[10]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo = cat(output_C_hi_lo_hi, output_C_hi_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_lo = cat(c_comb[13], c_comb[12]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_hi = cat(c_comb[15], c_comb[14]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi = cat(output_C_hi_hi_hi, output_C_hi_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi = cat(output_C_hi_hi, output_C_hi_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T = cat(output_C_hi, output_C_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T_1 = bits(_output_C_T, 14, 0) @[pp_compressor3_2.scala 35:36]
    node _output_C_T_2 = cat(_output_C_T_1, UInt<1>("h0")) @[Cat.scala 33:92]
    node _output_C_T_3 = asSInt(_output_C_T_2) @[pp_compressor3_2.scala 35:61]
    output.C <= _output_C_T_3 @[pp_compressor3_2.scala 35:14]

  module wallaceTree_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip data_i : SInt<16>[5], data_o : SInt<16>}

    inst rca of RCA_2 @[wallace_tree.scala 13:19]
    rca.clock <= clock
    rca.reset <= reset
    wire _rca_in_WIRE : SInt<16>[2] @[wallace_tree.scala 52:32]
    _rca_in_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 52:32]
    _rca_in_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 52:32]
    wire rca_in : SInt<16>[2]
    rca_in <= _rca_in_WIRE
    wire _l1_csa_in_WIRE : SInt<16>[3] @[wallace_tree.scala 55:36]
    _l1_csa_in_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 55:36]
    _l1_csa_in_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 55:36]
    _l1_csa_in_WIRE[2] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 55:36]
    wire l1_csa_in : SInt<16>[3]
    l1_csa_in <= _l1_csa_in_WIRE
    wire _l1_csa_os_WIRE : SInt<16>[1] @[wallace_tree.scala 56:36]
    _l1_csa_os_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 56:36]
    wire l1_csa_os : SInt<16>[1]
    l1_csa_os <= _l1_csa_os_WIRE
    wire _l1_csa_oc_WIRE : SInt<16>[1] @[wallace_tree.scala 57:36]
    _l1_csa_oc_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 57:36]
    wire l1_csa_oc : SInt<16>[1]
    l1_csa_oc <= _l1_csa_oc_WIRE
    wire _l1_csa_out_WIRE : SInt<16>[4] @[wallace_tree.scala 58:36]
    _l1_csa_out_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 58:36]
    _l1_csa_out_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 58:36]
    _l1_csa_out_WIRE[2] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 58:36]
    _l1_csa_out_WIRE[3] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 58:36]
    wire l1_csa_out : SInt<16>[4]
    l1_csa_out <= _l1_csa_out_WIRE
    inst layer1CSA_0 of pp_compressor3_2_3 @[wallace_tree.scala 59:44]
    layer1CSA_0.clock <= clock
    layer1CSA_0.reset <= reset
    l1_csa_in[0] <= io.data_i[0] @[wallace_tree.scala 61:43]
    l1_csa_in[1] <= io.data_i[1] @[wallace_tree.scala 61:43]
    l1_csa_in[2] <= io.data_i[2] @[wallace_tree.scala 61:43]
    layer1CSA_0.input.pp0_in <= l1_csa_in[0] @[wallace_tree.scala 63:31]
    layer1CSA_0.input.pp1_in <= l1_csa_in[1] @[wallace_tree.scala 64:31]
    layer1CSA_0.input.pp2_in <= l1_csa_in[2] @[wallace_tree.scala 65:31]
    l1_csa_os[0] <= layer1CSA_0.output.S @[wallace_tree.scala 66:31]
    l1_csa_oc[0] <= layer1CSA_0.output.C @[wallace_tree.scala 67:31]
    l1_csa_out[0] <= l1_csa_os[0] @[wallace_tree.scala 68:33]
    l1_csa_out[1] <= l1_csa_oc[0] @[wallace_tree.scala 69:35]
    l1_csa_out[3] <= io.data_i[4] @[wallace_tree.scala 73:32]
    l1_csa_out[2] <= io.data_i[3] @[wallace_tree.scala 73:32]
    wire _l2_csa_in_WIRE : SInt<16>[3] @[wallace_tree.scala 81:37]
    _l2_csa_in_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 81:37]
    _l2_csa_in_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 81:37]
    _l2_csa_in_WIRE[2] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 81:37]
    wire l2_csa_in : SInt<16>[3]
    l2_csa_in <= _l2_csa_in_WIRE
    wire _l2_csa_os_WIRE : SInt<16>[1] @[wallace_tree.scala 82:37]
    _l2_csa_os_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 82:37]
    wire l2_csa_os : SInt<16>[1]
    l2_csa_os <= _l2_csa_os_WIRE
    wire _l2_csa_oc_WIRE : SInt<16>[1] @[wallace_tree.scala 83:37]
    _l2_csa_oc_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 83:37]
    wire l2_csa_oc : SInt<16>[1]
    l2_csa_oc <= _l2_csa_oc_WIRE
    wire _l2_csa_out_WIRE : SInt<16>[3] @[wallace_tree.scala 84:38]
    _l2_csa_out_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 84:38]
    _l2_csa_out_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 84:38]
    _l2_csa_out_WIRE[2] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 84:38]
    wire l2_csa_out : SInt<16>[3]
    l2_csa_out <= _l2_csa_out_WIRE
    inst layer2CSA_0 of pp_compressor3_2_4 @[wallace_tree.scala 85:46]
    layer2CSA_0.clock <= clock
    layer2CSA_0.reset <= reset
    l2_csa_in[0] <= l1_csa_out[0] @[wallace_tree.scala 87:46]
    l2_csa_in[1] <= l1_csa_out[1] @[wallace_tree.scala 87:46]
    l2_csa_in[2] <= l1_csa_out[2] @[wallace_tree.scala 87:46]
    layer2CSA_0.input.pp0_in <= l2_csa_in[0] @[wallace_tree.scala 89:33]
    layer2CSA_0.input.pp1_in <= l2_csa_in[1] @[wallace_tree.scala 90:33]
    layer2CSA_0.input.pp2_in <= l2_csa_in[2] @[wallace_tree.scala 91:33]
    l2_csa_os[0] <= layer2CSA_0.output.S @[wallace_tree.scala 92:33]
    l2_csa_oc[0] <= layer2CSA_0.output.C @[wallace_tree.scala 93:33]
    l2_csa_out[0] <= l2_csa_os[0] @[wallace_tree.scala 94:35]
    l2_csa_out[1] <= l2_csa_oc[0] @[wallace_tree.scala 95:37]
    l2_csa_out[2] <= l1_csa_out[3] @[wallace_tree.scala 99:34]
    wire _l3_csa_in_WIRE : SInt<16>[3] @[wallace_tree.scala 107:39]
    _l3_csa_in_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 107:39]
    _l3_csa_in_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 107:39]
    _l3_csa_in_WIRE[2] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 107:39]
    wire l3_csa_in : SInt<16>[3]
    l3_csa_in <= _l3_csa_in_WIRE
    wire _l3_csa_os_WIRE : SInt<16>[1] @[wallace_tree.scala 108:39]
    _l3_csa_os_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 108:39]
    wire l3_csa_os : SInt<16>[1]
    l3_csa_os <= _l3_csa_os_WIRE
    wire _l3_csa_oc_WIRE : SInt<16>[1] @[wallace_tree.scala 109:39]
    _l3_csa_oc_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 109:39]
    wire l3_csa_oc : SInt<16>[1]
    l3_csa_oc <= _l3_csa_oc_WIRE
    wire _l3_csa_out_WIRE : SInt<16>[2] @[wallace_tree.scala 110:40]
    _l3_csa_out_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 110:40]
    _l3_csa_out_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 110:40]
    wire l3_csa_out : SInt<16>[2]
    l3_csa_out <= _l3_csa_out_WIRE
    inst layer3CSA_0 of pp_compressor3_2_5 @[wallace_tree.scala 111:48]
    layer3CSA_0.clock <= clock
    layer3CSA_0.reset <= reset
    l3_csa_in[0] <= l2_csa_out[0] @[wallace_tree.scala 113:48]
    l3_csa_in[1] <= l2_csa_out[1] @[wallace_tree.scala 113:48]
    l3_csa_in[2] <= l2_csa_out[2] @[wallace_tree.scala 113:48]
    layer3CSA_0.input.pp0_in <= l3_csa_in[0] @[wallace_tree.scala 115:35]
    layer3CSA_0.input.pp1_in <= l3_csa_in[1] @[wallace_tree.scala 116:35]
    layer3CSA_0.input.pp2_in <= l3_csa_in[2] @[wallace_tree.scala 117:35]
    l3_csa_os[0] <= layer3CSA_0.output.S @[wallace_tree.scala 118:22]
    l3_csa_oc[0] <= layer3CSA_0.output.C @[wallace_tree.scala 119:22]
    l3_csa_out[0] <= l3_csa_os[0] @[wallace_tree.scala 120:27]
    l3_csa_out[1] <= l3_csa_oc[0] @[wallace_tree.scala 121:31]
    rca_in <= l3_csa_out @[wallace_tree.scala 129:16]
    rca.input.a_in <= rca_in[0] @[wallace_tree.scala 250:18]
    rca.input.b_in <= rca_in[1] @[wallace_tree.scala 251:18]
    rca.input.c_in <= asSInt(UInt<1>("h0")) @[wallace_tree.scala 252:18]
    io.data_o <= rca.output.S @[wallace_tree.scala 253:18]

  module Multiplier_1 :
    input clock : Clock
    input reset : Reset
    output input : { flip multiplicand : SInt<8>, flip multiplier : SInt<8>}
    output output : { product : SInt<16>}

    inst booth2_encoder of booth2Encoder_1 @[multiplier.scala 21:34]
    booth2_encoder.clock <= clock
    booth2_encoder.reset <= reset
    inst pp_generator of ppGenerator_1 @[multiplier.scala 22:34]
    pp_generator.clock <= clock
    pp_generator.reset <= reset
    inst wallace_tree of wallaceTree_1 @[multiplier.scala 23:34]
    wallace_tree.clock <= clock
    wallace_tree.reset <= reset
    booth2_encoder.input.multiplier <= input.multiplier @[multiplier.scala 25:37]
    pp_generator.inputData.multiplicand <= input.multiplicand @[multiplier.scala 27:41]
    pp_generator.inputCtrl.X2 <= booth2_encoder.output.X2 @[multiplier.scala 28:41]
    pp_generator.inputCtrl.inv <= booth2_encoder.output.inv @[multiplier.scala 29:41]
    pp_generator.inputCtrl.Set0 <= booth2_encoder.output.set0 @[multiplier.scala 30:41]
    wallace_tree.io.data_i[0] <= pp_generator.outputData.pp_out[0] @[multiplier.scala 33:35]
    wallace_tree.io.data_i[1] <= pp_generator.outputData.pp_out[1] @[multiplier.scala 33:35]
    wallace_tree.io.data_i[2] <= pp_generator.outputData.pp_out[2] @[multiplier.scala 33:35]
    wallace_tree.io.data_i[3] <= pp_generator.outputData.pp_out[3] @[multiplier.scala 33:35]
    wallace_tree.io.data_i[4] <= pp_generator.outputData.sig_out @[multiplier.scala 35:40]
    output.product <= wallace_tree.io.data_o @[multiplier.scala 37:41]

  module RCA_3 :
    input clock : Clock
    input reset : Reset
    output input : { flip a_in : SInt<32>, flip b_in : SInt<32>, flip c_in : SInt<1>}
    output output : { S : SInt<32>, C : SInt<32>}

    wire g_comb : UInt<1>[32] @[rca.scala 22:22]
    wire p_comb : UInt<1>[32] @[rca.scala 23:22]
    wire s_comb : UInt<1>[32] @[rca.scala 24:22]
    wire c_comb : UInt<1>[33] @[rca.scala 25:22]
    node _c_comb_0_T = bits(input.c_in, 0, 0) @[rca.scala 27:29]
    c_comb[0] <= _c_comb_0_T @[rca.scala 27:15]
    node _g_comb_0_T = bits(input.a_in, 0, 0) @[rca.scala 30:35]
    node _g_comb_0_T_1 = bits(input.b_in, 0, 0) @[rca.scala 30:51]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[rca.scala 30:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[0] <= _g_comb_0_T_3 @[rca.scala 30:21]
    node _p_comb_0_T = bits(input.a_in, 0, 0) @[rca.scala 31:35]
    node _p_comb_0_T_1 = bits(input.b_in, 0, 0) @[rca.scala 31:51]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[rca.scala 31:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[0] <= _p_comb_0_T_3 @[rca.scala 31:21]
    node _s_comb_0_T = xor(p_comb[0], c_comb[0]) @[rca.scala 32:34]
    s_comb[0] <= _s_comb_0_T @[rca.scala 32:21]
    node _c_comb_1_T = and(c_comb[0], p_comb[0]) @[rca.scala 33:34]
    node _c_comb_1_T_1 = or(_c_comb_1_T, g_comb[0]) @[rca.scala 33:46]
    c_comb[1] <= _c_comb_1_T_1 @[rca.scala 33:21]
    node _g_comb_1_T = bits(input.a_in, 1, 1) @[rca.scala 30:35]
    node _g_comb_1_T_1 = bits(input.b_in, 1, 1) @[rca.scala 30:51]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[rca.scala 30:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[1] <= _g_comb_1_T_3 @[rca.scala 30:21]
    node _p_comb_1_T = bits(input.a_in, 1, 1) @[rca.scala 31:35]
    node _p_comb_1_T_1 = bits(input.b_in, 1, 1) @[rca.scala 31:51]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[rca.scala 31:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[1] <= _p_comb_1_T_3 @[rca.scala 31:21]
    node _s_comb_1_T = xor(p_comb[1], c_comb[1]) @[rca.scala 32:34]
    s_comb[1] <= _s_comb_1_T @[rca.scala 32:21]
    node _c_comb_2_T = and(c_comb[1], p_comb[1]) @[rca.scala 33:34]
    node _c_comb_2_T_1 = or(_c_comb_2_T, g_comb[1]) @[rca.scala 33:46]
    c_comb[2] <= _c_comb_2_T_1 @[rca.scala 33:21]
    node _g_comb_2_T = bits(input.a_in, 2, 2) @[rca.scala 30:35]
    node _g_comb_2_T_1 = bits(input.b_in, 2, 2) @[rca.scala 30:51]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[rca.scala 30:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[2] <= _g_comb_2_T_3 @[rca.scala 30:21]
    node _p_comb_2_T = bits(input.a_in, 2, 2) @[rca.scala 31:35]
    node _p_comb_2_T_1 = bits(input.b_in, 2, 2) @[rca.scala 31:51]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[rca.scala 31:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[2] <= _p_comb_2_T_3 @[rca.scala 31:21]
    node _s_comb_2_T = xor(p_comb[2], c_comb[2]) @[rca.scala 32:34]
    s_comb[2] <= _s_comb_2_T @[rca.scala 32:21]
    node _c_comb_3_T = and(c_comb[2], p_comb[2]) @[rca.scala 33:34]
    node _c_comb_3_T_1 = or(_c_comb_3_T, g_comb[2]) @[rca.scala 33:46]
    c_comb[3] <= _c_comb_3_T_1 @[rca.scala 33:21]
    node _g_comb_3_T = bits(input.a_in, 3, 3) @[rca.scala 30:35]
    node _g_comb_3_T_1 = bits(input.b_in, 3, 3) @[rca.scala 30:51]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[rca.scala 30:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[3] <= _g_comb_3_T_3 @[rca.scala 30:21]
    node _p_comb_3_T = bits(input.a_in, 3, 3) @[rca.scala 31:35]
    node _p_comb_3_T_1 = bits(input.b_in, 3, 3) @[rca.scala 31:51]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[rca.scala 31:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[3] <= _p_comb_3_T_3 @[rca.scala 31:21]
    node _s_comb_3_T = xor(p_comb[3], c_comb[3]) @[rca.scala 32:34]
    s_comb[3] <= _s_comb_3_T @[rca.scala 32:21]
    node _c_comb_4_T = and(c_comb[3], p_comb[3]) @[rca.scala 33:34]
    node _c_comb_4_T_1 = or(_c_comb_4_T, g_comb[3]) @[rca.scala 33:46]
    c_comb[4] <= _c_comb_4_T_1 @[rca.scala 33:21]
    node _g_comb_4_T = bits(input.a_in, 4, 4) @[rca.scala 30:35]
    node _g_comb_4_T_1 = bits(input.b_in, 4, 4) @[rca.scala 30:51]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[rca.scala 30:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[4] <= _g_comb_4_T_3 @[rca.scala 30:21]
    node _p_comb_4_T = bits(input.a_in, 4, 4) @[rca.scala 31:35]
    node _p_comb_4_T_1 = bits(input.b_in, 4, 4) @[rca.scala 31:51]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[rca.scala 31:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[4] <= _p_comb_4_T_3 @[rca.scala 31:21]
    node _s_comb_4_T = xor(p_comb[4], c_comb[4]) @[rca.scala 32:34]
    s_comb[4] <= _s_comb_4_T @[rca.scala 32:21]
    node _c_comb_5_T = and(c_comb[4], p_comb[4]) @[rca.scala 33:34]
    node _c_comb_5_T_1 = or(_c_comb_5_T, g_comb[4]) @[rca.scala 33:46]
    c_comb[5] <= _c_comb_5_T_1 @[rca.scala 33:21]
    node _g_comb_5_T = bits(input.a_in, 5, 5) @[rca.scala 30:35]
    node _g_comb_5_T_1 = bits(input.b_in, 5, 5) @[rca.scala 30:51]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[rca.scala 30:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[5] <= _g_comb_5_T_3 @[rca.scala 30:21]
    node _p_comb_5_T = bits(input.a_in, 5, 5) @[rca.scala 31:35]
    node _p_comb_5_T_1 = bits(input.b_in, 5, 5) @[rca.scala 31:51]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[rca.scala 31:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[5] <= _p_comb_5_T_3 @[rca.scala 31:21]
    node _s_comb_5_T = xor(p_comb[5], c_comb[5]) @[rca.scala 32:34]
    s_comb[5] <= _s_comb_5_T @[rca.scala 32:21]
    node _c_comb_6_T = and(c_comb[5], p_comb[5]) @[rca.scala 33:34]
    node _c_comb_6_T_1 = or(_c_comb_6_T, g_comb[5]) @[rca.scala 33:46]
    c_comb[6] <= _c_comb_6_T_1 @[rca.scala 33:21]
    node _g_comb_6_T = bits(input.a_in, 6, 6) @[rca.scala 30:35]
    node _g_comb_6_T_1 = bits(input.b_in, 6, 6) @[rca.scala 30:51]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[rca.scala 30:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[6] <= _g_comb_6_T_3 @[rca.scala 30:21]
    node _p_comb_6_T = bits(input.a_in, 6, 6) @[rca.scala 31:35]
    node _p_comb_6_T_1 = bits(input.b_in, 6, 6) @[rca.scala 31:51]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[rca.scala 31:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[6] <= _p_comb_6_T_3 @[rca.scala 31:21]
    node _s_comb_6_T = xor(p_comb[6], c_comb[6]) @[rca.scala 32:34]
    s_comb[6] <= _s_comb_6_T @[rca.scala 32:21]
    node _c_comb_7_T = and(c_comb[6], p_comb[6]) @[rca.scala 33:34]
    node _c_comb_7_T_1 = or(_c_comb_7_T, g_comb[6]) @[rca.scala 33:46]
    c_comb[7] <= _c_comb_7_T_1 @[rca.scala 33:21]
    node _g_comb_7_T = bits(input.a_in, 7, 7) @[rca.scala 30:35]
    node _g_comb_7_T_1 = bits(input.b_in, 7, 7) @[rca.scala 30:51]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[rca.scala 30:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[7] <= _g_comb_7_T_3 @[rca.scala 30:21]
    node _p_comb_7_T = bits(input.a_in, 7, 7) @[rca.scala 31:35]
    node _p_comb_7_T_1 = bits(input.b_in, 7, 7) @[rca.scala 31:51]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[rca.scala 31:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[7] <= _p_comb_7_T_3 @[rca.scala 31:21]
    node _s_comb_7_T = xor(p_comb[7], c_comb[7]) @[rca.scala 32:34]
    s_comb[7] <= _s_comb_7_T @[rca.scala 32:21]
    node _c_comb_8_T = and(c_comb[7], p_comb[7]) @[rca.scala 33:34]
    node _c_comb_8_T_1 = or(_c_comb_8_T, g_comb[7]) @[rca.scala 33:46]
    c_comb[8] <= _c_comb_8_T_1 @[rca.scala 33:21]
    node _g_comb_8_T = bits(input.a_in, 8, 8) @[rca.scala 30:35]
    node _g_comb_8_T_1 = bits(input.b_in, 8, 8) @[rca.scala 30:51]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[rca.scala 30:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[8] <= _g_comb_8_T_3 @[rca.scala 30:21]
    node _p_comb_8_T = bits(input.a_in, 8, 8) @[rca.scala 31:35]
    node _p_comb_8_T_1 = bits(input.b_in, 8, 8) @[rca.scala 31:51]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[rca.scala 31:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[8] <= _p_comb_8_T_3 @[rca.scala 31:21]
    node _s_comb_8_T = xor(p_comb[8], c_comb[8]) @[rca.scala 32:34]
    s_comb[8] <= _s_comb_8_T @[rca.scala 32:21]
    node _c_comb_9_T = and(c_comb[8], p_comb[8]) @[rca.scala 33:34]
    node _c_comb_9_T_1 = or(_c_comb_9_T, g_comb[8]) @[rca.scala 33:46]
    c_comb[9] <= _c_comb_9_T_1 @[rca.scala 33:21]
    node _g_comb_9_T = bits(input.a_in, 9, 9) @[rca.scala 30:35]
    node _g_comb_9_T_1 = bits(input.b_in, 9, 9) @[rca.scala 30:51]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[rca.scala 30:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[9] <= _g_comb_9_T_3 @[rca.scala 30:21]
    node _p_comb_9_T = bits(input.a_in, 9, 9) @[rca.scala 31:35]
    node _p_comb_9_T_1 = bits(input.b_in, 9, 9) @[rca.scala 31:51]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[rca.scala 31:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[9] <= _p_comb_9_T_3 @[rca.scala 31:21]
    node _s_comb_9_T = xor(p_comb[9], c_comb[9]) @[rca.scala 32:34]
    s_comb[9] <= _s_comb_9_T @[rca.scala 32:21]
    node _c_comb_10_T = and(c_comb[9], p_comb[9]) @[rca.scala 33:34]
    node _c_comb_10_T_1 = or(_c_comb_10_T, g_comb[9]) @[rca.scala 33:46]
    c_comb[10] <= _c_comb_10_T_1 @[rca.scala 33:21]
    node _g_comb_10_T = bits(input.a_in, 10, 10) @[rca.scala 30:35]
    node _g_comb_10_T_1 = bits(input.b_in, 10, 10) @[rca.scala 30:51]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[rca.scala 30:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[10] <= _g_comb_10_T_3 @[rca.scala 30:21]
    node _p_comb_10_T = bits(input.a_in, 10, 10) @[rca.scala 31:35]
    node _p_comb_10_T_1 = bits(input.b_in, 10, 10) @[rca.scala 31:51]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[rca.scala 31:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[10] <= _p_comb_10_T_3 @[rca.scala 31:21]
    node _s_comb_10_T = xor(p_comb[10], c_comb[10]) @[rca.scala 32:34]
    s_comb[10] <= _s_comb_10_T @[rca.scala 32:21]
    node _c_comb_11_T = and(c_comb[10], p_comb[10]) @[rca.scala 33:34]
    node _c_comb_11_T_1 = or(_c_comb_11_T, g_comb[10]) @[rca.scala 33:46]
    c_comb[11] <= _c_comb_11_T_1 @[rca.scala 33:21]
    node _g_comb_11_T = bits(input.a_in, 11, 11) @[rca.scala 30:35]
    node _g_comb_11_T_1 = bits(input.b_in, 11, 11) @[rca.scala 30:51]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[rca.scala 30:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[11] <= _g_comb_11_T_3 @[rca.scala 30:21]
    node _p_comb_11_T = bits(input.a_in, 11, 11) @[rca.scala 31:35]
    node _p_comb_11_T_1 = bits(input.b_in, 11, 11) @[rca.scala 31:51]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[rca.scala 31:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[11] <= _p_comb_11_T_3 @[rca.scala 31:21]
    node _s_comb_11_T = xor(p_comb[11], c_comb[11]) @[rca.scala 32:34]
    s_comb[11] <= _s_comb_11_T @[rca.scala 32:21]
    node _c_comb_12_T = and(c_comb[11], p_comb[11]) @[rca.scala 33:34]
    node _c_comb_12_T_1 = or(_c_comb_12_T, g_comb[11]) @[rca.scala 33:46]
    c_comb[12] <= _c_comb_12_T_1 @[rca.scala 33:21]
    node _g_comb_12_T = bits(input.a_in, 12, 12) @[rca.scala 30:35]
    node _g_comb_12_T_1 = bits(input.b_in, 12, 12) @[rca.scala 30:51]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[rca.scala 30:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[12] <= _g_comb_12_T_3 @[rca.scala 30:21]
    node _p_comb_12_T = bits(input.a_in, 12, 12) @[rca.scala 31:35]
    node _p_comb_12_T_1 = bits(input.b_in, 12, 12) @[rca.scala 31:51]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[rca.scala 31:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[12] <= _p_comb_12_T_3 @[rca.scala 31:21]
    node _s_comb_12_T = xor(p_comb[12], c_comb[12]) @[rca.scala 32:34]
    s_comb[12] <= _s_comb_12_T @[rca.scala 32:21]
    node _c_comb_13_T = and(c_comb[12], p_comb[12]) @[rca.scala 33:34]
    node _c_comb_13_T_1 = or(_c_comb_13_T, g_comb[12]) @[rca.scala 33:46]
    c_comb[13] <= _c_comb_13_T_1 @[rca.scala 33:21]
    node _g_comb_13_T = bits(input.a_in, 13, 13) @[rca.scala 30:35]
    node _g_comb_13_T_1 = bits(input.b_in, 13, 13) @[rca.scala 30:51]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[rca.scala 30:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[13] <= _g_comb_13_T_3 @[rca.scala 30:21]
    node _p_comb_13_T = bits(input.a_in, 13, 13) @[rca.scala 31:35]
    node _p_comb_13_T_1 = bits(input.b_in, 13, 13) @[rca.scala 31:51]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[rca.scala 31:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[13] <= _p_comb_13_T_3 @[rca.scala 31:21]
    node _s_comb_13_T = xor(p_comb[13], c_comb[13]) @[rca.scala 32:34]
    s_comb[13] <= _s_comb_13_T @[rca.scala 32:21]
    node _c_comb_14_T = and(c_comb[13], p_comb[13]) @[rca.scala 33:34]
    node _c_comb_14_T_1 = or(_c_comb_14_T, g_comb[13]) @[rca.scala 33:46]
    c_comb[14] <= _c_comb_14_T_1 @[rca.scala 33:21]
    node _g_comb_14_T = bits(input.a_in, 14, 14) @[rca.scala 30:35]
    node _g_comb_14_T_1 = bits(input.b_in, 14, 14) @[rca.scala 30:51]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[rca.scala 30:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[14] <= _g_comb_14_T_3 @[rca.scala 30:21]
    node _p_comb_14_T = bits(input.a_in, 14, 14) @[rca.scala 31:35]
    node _p_comb_14_T_1 = bits(input.b_in, 14, 14) @[rca.scala 31:51]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[rca.scala 31:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[14] <= _p_comb_14_T_3 @[rca.scala 31:21]
    node _s_comb_14_T = xor(p_comb[14], c_comb[14]) @[rca.scala 32:34]
    s_comb[14] <= _s_comb_14_T @[rca.scala 32:21]
    node _c_comb_15_T = and(c_comb[14], p_comb[14]) @[rca.scala 33:34]
    node _c_comb_15_T_1 = or(_c_comb_15_T, g_comb[14]) @[rca.scala 33:46]
    c_comb[15] <= _c_comb_15_T_1 @[rca.scala 33:21]
    node _g_comb_15_T = bits(input.a_in, 15, 15) @[rca.scala 30:35]
    node _g_comb_15_T_1 = bits(input.b_in, 15, 15) @[rca.scala 30:51]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[rca.scala 30:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[15] <= _g_comb_15_T_3 @[rca.scala 30:21]
    node _p_comb_15_T = bits(input.a_in, 15, 15) @[rca.scala 31:35]
    node _p_comb_15_T_1 = bits(input.b_in, 15, 15) @[rca.scala 31:51]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[rca.scala 31:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[15] <= _p_comb_15_T_3 @[rca.scala 31:21]
    node _s_comb_15_T = xor(p_comb[15], c_comb[15]) @[rca.scala 32:34]
    s_comb[15] <= _s_comb_15_T @[rca.scala 32:21]
    node _c_comb_16_T = and(c_comb[15], p_comb[15]) @[rca.scala 33:34]
    node _c_comb_16_T_1 = or(_c_comb_16_T, g_comb[15]) @[rca.scala 33:46]
    c_comb[16] <= _c_comb_16_T_1 @[rca.scala 33:21]
    node _g_comb_16_T = bits(input.a_in, 16, 16) @[rca.scala 30:35]
    node _g_comb_16_T_1 = bits(input.b_in, 16, 16) @[rca.scala 30:51]
    node _g_comb_16_T_2 = and(_g_comb_16_T, _g_comb_16_T_1) @[rca.scala 30:39]
    node _g_comb_16_T_3 = bits(_g_comb_16_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[16] <= _g_comb_16_T_3 @[rca.scala 30:21]
    node _p_comb_16_T = bits(input.a_in, 16, 16) @[rca.scala 31:35]
    node _p_comb_16_T_1 = bits(input.b_in, 16, 16) @[rca.scala 31:51]
    node _p_comb_16_T_2 = xor(_p_comb_16_T, _p_comb_16_T_1) @[rca.scala 31:39]
    node _p_comb_16_T_3 = bits(_p_comb_16_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[16] <= _p_comb_16_T_3 @[rca.scala 31:21]
    node _s_comb_16_T = xor(p_comb[16], c_comb[16]) @[rca.scala 32:34]
    s_comb[16] <= _s_comb_16_T @[rca.scala 32:21]
    node _c_comb_17_T = and(c_comb[16], p_comb[16]) @[rca.scala 33:34]
    node _c_comb_17_T_1 = or(_c_comb_17_T, g_comb[16]) @[rca.scala 33:46]
    c_comb[17] <= _c_comb_17_T_1 @[rca.scala 33:21]
    node _g_comb_17_T = bits(input.a_in, 17, 17) @[rca.scala 30:35]
    node _g_comb_17_T_1 = bits(input.b_in, 17, 17) @[rca.scala 30:51]
    node _g_comb_17_T_2 = and(_g_comb_17_T, _g_comb_17_T_1) @[rca.scala 30:39]
    node _g_comb_17_T_3 = bits(_g_comb_17_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[17] <= _g_comb_17_T_3 @[rca.scala 30:21]
    node _p_comb_17_T = bits(input.a_in, 17, 17) @[rca.scala 31:35]
    node _p_comb_17_T_1 = bits(input.b_in, 17, 17) @[rca.scala 31:51]
    node _p_comb_17_T_2 = xor(_p_comb_17_T, _p_comb_17_T_1) @[rca.scala 31:39]
    node _p_comb_17_T_3 = bits(_p_comb_17_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[17] <= _p_comb_17_T_3 @[rca.scala 31:21]
    node _s_comb_17_T = xor(p_comb[17], c_comb[17]) @[rca.scala 32:34]
    s_comb[17] <= _s_comb_17_T @[rca.scala 32:21]
    node _c_comb_18_T = and(c_comb[17], p_comb[17]) @[rca.scala 33:34]
    node _c_comb_18_T_1 = or(_c_comb_18_T, g_comb[17]) @[rca.scala 33:46]
    c_comb[18] <= _c_comb_18_T_1 @[rca.scala 33:21]
    node _g_comb_18_T = bits(input.a_in, 18, 18) @[rca.scala 30:35]
    node _g_comb_18_T_1 = bits(input.b_in, 18, 18) @[rca.scala 30:51]
    node _g_comb_18_T_2 = and(_g_comb_18_T, _g_comb_18_T_1) @[rca.scala 30:39]
    node _g_comb_18_T_3 = bits(_g_comb_18_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[18] <= _g_comb_18_T_3 @[rca.scala 30:21]
    node _p_comb_18_T = bits(input.a_in, 18, 18) @[rca.scala 31:35]
    node _p_comb_18_T_1 = bits(input.b_in, 18, 18) @[rca.scala 31:51]
    node _p_comb_18_T_2 = xor(_p_comb_18_T, _p_comb_18_T_1) @[rca.scala 31:39]
    node _p_comb_18_T_3 = bits(_p_comb_18_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[18] <= _p_comb_18_T_3 @[rca.scala 31:21]
    node _s_comb_18_T = xor(p_comb[18], c_comb[18]) @[rca.scala 32:34]
    s_comb[18] <= _s_comb_18_T @[rca.scala 32:21]
    node _c_comb_19_T = and(c_comb[18], p_comb[18]) @[rca.scala 33:34]
    node _c_comb_19_T_1 = or(_c_comb_19_T, g_comb[18]) @[rca.scala 33:46]
    c_comb[19] <= _c_comb_19_T_1 @[rca.scala 33:21]
    node _g_comb_19_T = bits(input.a_in, 19, 19) @[rca.scala 30:35]
    node _g_comb_19_T_1 = bits(input.b_in, 19, 19) @[rca.scala 30:51]
    node _g_comb_19_T_2 = and(_g_comb_19_T, _g_comb_19_T_1) @[rca.scala 30:39]
    node _g_comb_19_T_3 = bits(_g_comb_19_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[19] <= _g_comb_19_T_3 @[rca.scala 30:21]
    node _p_comb_19_T = bits(input.a_in, 19, 19) @[rca.scala 31:35]
    node _p_comb_19_T_1 = bits(input.b_in, 19, 19) @[rca.scala 31:51]
    node _p_comb_19_T_2 = xor(_p_comb_19_T, _p_comb_19_T_1) @[rca.scala 31:39]
    node _p_comb_19_T_3 = bits(_p_comb_19_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[19] <= _p_comb_19_T_3 @[rca.scala 31:21]
    node _s_comb_19_T = xor(p_comb[19], c_comb[19]) @[rca.scala 32:34]
    s_comb[19] <= _s_comb_19_T @[rca.scala 32:21]
    node _c_comb_20_T = and(c_comb[19], p_comb[19]) @[rca.scala 33:34]
    node _c_comb_20_T_1 = or(_c_comb_20_T, g_comb[19]) @[rca.scala 33:46]
    c_comb[20] <= _c_comb_20_T_1 @[rca.scala 33:21]
    node _g_comb_20_T = bits(input.a_in, 20, 20) @[rca.scala 30:35]
    node _g_comb_20_T_1 = bits(input.b_in, 20, 20) @[rca.scala 30:51]
    node _g_comb_20_T_2 = and(_g_comb_20_T, _g_comb_20_T_1) @[rca.scala 30:39]
    node _g_comb_20_T_3 = bits(_g_comb_20_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[20] <= _g_comb_20_T_3 @[rca.scala 30:21]
    node _p_comb_20_T = bits(input.a_in, 20, 20) @[rca.scala 31:35]
    node _p_comb_20_T_1 = bits(input.b_in, 20, 20) @[rca.scala 31:51]
    node _p_comb_20_T_2 = xor(_p_comb_20_T, _p_comb_20_T_1) @[rca.scala 31:39]
    node _p_comb_20_T_3 = bits(_p_comb_20_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[20] <= _p_comb_20_T_3 @[rca.scala 31:21]
    node _s_comb_20_T = xor(p_comb[20], c_comb[20]) @[rca.scala 32:34]
    s_comb[20] <= _s_comb_20_T @[rca.scala 32:21]
    node _c_comb_21_T = and(c_comb[20], p_comb[20]) @[rca.scala 33:34]
    node _c_comb_21_T_1 = or(_c_comb_21_T, g_comb[20]) @[rca.scala 33:46]
    c_comb[21] <= _c_comb_21_T_1 @[rca.scala 33:21]
    node _g_comb_21_T = bits(input.a_in, 21, 21) @[rca.scala 30:35]
    node _g_comb_21_T_1 = bits(input.b_in, 21, 21) @[rca.scala 30:51]
    node _g_comb_21_T_2 = and(_g_comb_21_T, _g_comb_21_T_1) @[rca.scala 30:39]
    node _g_comb_21_T_3 = bits(_g_comb_21_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[21] <= _g_comb_21_T_3 @[rca.scala 30:21]
    node _p_comb_21_T = bits(input.a_in, 21, 21) @[rca.scala 31:35]
    node _p_comb_21_T_1 = bits(input.b_in, 21, 21) @[rca.scala 31:51]
    node _p_comb_21_T_2 = xor(_p_comb_21_T, _p_comb_21_T_1) @[rca.scala 31:39]
    node _p_comb_21_T_3 = bits(_p_comb_21_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[21] <= _p_comb_21_T_3 @[rca.scala 31:21]
    node _s_comb_21_T = xor(p_comb[21], c_comb[21]) @[rca.scala 32:34]
    s_comb[21] <= _s_comb_21_T @[rca.scala 32:21]
    node _c_comb_22_T = and(c_comb[21], p_comb[21]) @[rca.scala 33:34]
    node _c_comb_22_T_1 = or(_c_comb_22_T, g_comb[21]) @[rca.scala 33:46]
    c_comb[22] <= _c_comb_22_T_1 @[rca.scala 33:21]
    node _g_comb_22_T = bits(input.a_in, 22, 22) @[rca.scala 30:35]
    node _g_comb_22_T_1 = bits(input.b_in, 22, 22) @[rca.scala 30:51]
    node _g_comb_22_T_2 = and(_g_comb_22_T, _g_comb_22_T_1) @[rca.scala 30:39]
    node _g_comb_22_T_3 = bits(_g_comb_22_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[22] <= _g_comb_22_T_3 @[rca.scala 30:21]
    node _p_comb_22_T = bits(input.a_in, 22, 22) @[rca.scala 31:35]
    node _p_comb_22_T_1 = bits(input.b_in, 22, 22) @[rca.scala 31:51]
    node _p_comb_22_T_2 = xor(_p_comb_22_T, _p_comb_22_T_1) @[rca.scala 31:39]
    node _p_comb_22_T_3 = bits(_p_comb_22_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[22] <= _p_comb_22_T_3 @[rca.scala 31:21]
    node _s_comb_22_T = xor(p_comb[22], c_comb[22]) @[rca.scala 32:34]
    s_comb[22] <= _s_comb_22_T @[rca.scala 32:21]
    node _c_comb_23_T = and(c_comb[22], p_comb[22]) @[rca.scala 33:34]
    node _c_comb_23_T_1 = or(_c_comb_23_T, g_comb[22]) @[rca.scala 33:46]
    c_comb[23] <= _c_comb_23_T_1 @[rca.scala 33:21]
    node _g_comb_23_T = bits(input.a_in, 23, 23) @[rca.scala 30:35]
    node _g_comb_23_T_1 = bits(input.b_in, 23, 23) @[rca.scala 30:51]
    node _g_comb_23_T_2 = and(_g_comb_23_T, _g_comb_23_T_1) @[rca.scala 30:39]
    node _g_comb_23_T_3 = bits(_g_comb_23_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[23] <= _g_comb_23_T_3 @[rca.scala 30:21]
    node _p_comb_23_T = bits(input.a_in, 23, 23) @[rca.scala 31:35]
    node _p_comb_23_T_1 = bits(input.b_in, 23, 23) @[rca.scala 31:51]
    node _p_comb_23_T_2 = xor(_p_comb_23_T, _p_comb_23_T_1) @[rca.scala 31:39]
    node _p_comb_23_T_3 = bits(_p_comb_23_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[23] <= _p_comb_23_T_3 @[rca.scala 31:21]
    node _s_comb_23_T = xor(p_comb[23], c_comb[23]) @[rca.scala 32:34]
    s_comb[23] <= _s_comb_23_T @[rca.scala 32:21]
    node _c_comb_24_T = and(c_comb[23], p_comb[23]) @[rca.scala 33:34]
    node _c_comb_24_T_1 = or(_c_comb_24_T, g_comb[23]) @[rca.scala 33:46]
    c_comb[24] <= _c_comb_24_T_1 @[rca.scala 33:21]
    node _g_comb_24_T = bits(input.a_in, 24, 24) @[rca.scala 30:35]
    node _g_comb_24_T_1 = bits(input.b_in, 24, 24) @[rca.scala 30:51]
    node _g_comb_24_T_2 = and(_g_comb_24_T, _g_comb_24_T_1) @[rca.scala 30:39]
    node _g_comb_24_T_3 = bits(_g_comb_24_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[24] <= _g_comb_24_T_3 @[rca.scala 30:21]
    node _p_comb_24_T = bits(input.a_in, 24, 24) @[rca.scala 31:35]
    node _p_comb_24_T_1 = bits(input.b_in, 24, 24) @[rca.scala 31:51]
    node _p_comb_24_T_2 = xor(_p_comb_24_T, _p_comb_24_T_1) @[rca.scala 31:39]
    node _p_comb_24_T_3 = bits(_p_comb_24_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[24] <= _p_comb_24_T_3 @[rca.scala 31:21]
    node _s_comb_24_T = xor(p_comb[24], c_comb[24]) @[rca.scala 32:34]
    s_comb[24] <= _s_comb_24_T @[rca.scala 32:21]
    node _c_comb_25_T = and(c_comb[24], p_comb[24]) @[rca.scala 33:34]
    node _c_comb_25_T_1 = or(_c_comb_25_T, g_comb[24]) @[rca.scala 33:46]
    c_comb[25] <= _c_comb_25_T_1 @[rca.scala 33:21]
    node _g_comb_25_T = bits(input.a_in, 25, 25) @[rca.scala 30:35]
    node _g_comb_25_T_1 = bits(input.b_in, 25, 25) @[rca.scala 30:51]
    node _g_comb_25_T_2 = and(_g_comb_25_T, _g_comb_25_T_1) @[rca.scala 30:39]
    node _g_comb_25_T_3 = bits(_g_comb_25_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[25] <= _g_comb_25_T_3 @[rca.scala 30:21]
    node _p_comb_25_T = bits(input.a_in, 25, 25) @[rca.scala 31:35]
    node _p_comb_25_T_1 = bits(input.b_in, 25, 25) @[rca.scala 31:51]
    node _p_comb_25_T_2 = xor(_p_comb_25_T, _p_comb_25_T_1) @[rca.scala 31:39]
    node _p_comb_25_T_3 = bits(_p_comb_25_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[25] <= _p_comb_25_T_3 @[rca.scala 31:21]
    node _s_comb_25_T = xor(p_comb[25], c_comb[25]) @[rca.scala 32:34]
    s_comb[25] <= _s_comb_25_T @[rca.scala 32:21]
    node _c_comb_26_T = and(c_comb[25], p_comb[25]) @[rca.scala 33:34]
    node _c_comb_26_T_1 = or(_c_comb_26_T, g_comb[25]) @[rca.scala 33:46]
    c_comb[26] <= _c_comb_26_T_1 @[rca.scala 33:21]
    node _g_comb_26_T = bits(input.a_in, 26, 26) @[rca.scala 30:35]
    node _g_comb_26_T_1 = bits(input.b_in, 26, 26) @[rca.scala 30:51]
    node _g_comb_26_T_2 = and(_g_comb_26_T, _g_comb_26_T_1) @[rca.scala 30:39]
    node _g_comb_26_T_3 = bits(_g_comb_26_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[26] <= _g_comb_26_T_3 @[rca.scala 30:21]
    node _p_comb_26_T = bits(input.a_in, 26, 26) @[rca.scala 31:35]
    node _p_comb_26_T_1 = bits(input.b_in, 26, 26) @[rca.scala 31:51]
    node _p_comb_26_T_2 = xor(_p_comb_26_T, _p_comb_26_T_1) @[rca.scala 31:39]
    node _p_comb_26_T_3 = bits(_p_comb_26_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[26] <= _p_comb_26_T_3 @[rca.scala 31:21]
    node _s_comb_26_T = xor(p_comb[26], c_comb[26]) @[rca.scala 32:34]
    s_comb[26] <= _s_comb_26_T @[rca.scala 32:21]
    node _c_comb_27_T = and(c_comb[26], p_comb[26]) @[rca.scala 33:34]
    node _c_comb_27_T_1 = or(_c_comb_27_T, g_comb[26]) @[rca.scala 33:46]
    c_comb[27] <= _c_comb_27_T_1 @[rca.scala 33:21]
    node _g_comb_27_T = bits(input.a_in, 27, 27) @[rca.scala 30:35]
    node _g_comb_27_T_1 = bits(input.b_in, 27, 27) @[rca.scala 30:51]
    node _g_comb_27_T_2 = and(_g_comb_27_T, _g_comb_27_T_1) @[rca.scala 30:39]
    node _g_comb_27_T_3 = bits(_g_comb_27_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[27] <= _g_comb_27_T_3 @[rca.scala 30:21]
    node _p_comb_27_T = bits(input.a_in, 27, 27) @[rca.scala 31:35]
    node _p_comb_27_T_1 = bits(input.b_in, 27, 27) @[rca.scala 31:51]
    node _p_comb_27_T_2 = xor(_p_comb_27_T, _p_comb_27_T_1) @[rca.scala 31:39]
    node _p_comb_27_T_3 = bits(_p_comb_27_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[27] <= _p_comb_27_T_3 @[rca.scala 31:21]
    node _s_comb_27_T = xor(p_comb[27], c_comb[27]) @[rca.scala 32:34]
    s_comb[27] <= _s_comb_27_T @[rca.scala 32:21]
    node _c_comb_28_T = and(c_comb[27], p_comb[27]) @[rca.scala 33:34]
    node _c_comb_28_T_1 = or(_c_comb_28_T, g_comb[27]) @[rca.scala 33:46]
    c_comb[28] <= _c_comb_28_T_1 @[rca.scala 33:21]
    node _g_comb_28_T = bits(input.a_in, 28, 28) @[rca.scala 30:35]
    node _g_comb_28_T_1 = bits(input.b_in, 28, 28) @[rca.scala 30:51]
    node _g_comb_28_T_2 = and(_g_comb_28_T, _g_comb_28_T_1) @[rca.scala 30:39]
    node _g_comb_28_T_3 = bits(_g_comb_28_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[28] <= _g_comb_28_T_3 @[rca.scala 30:21]
    node _p_comb_28_T = bits(input.a_in, 28, 28) @[rca.scala 31:35]
    node _p_comb_28_T_1 = bits(input.b_in, 28, 28) @[rca.scala 31:51]
    node _p_comb_28_T_2 = xor(_p_comb_28_T, _p_comb_28_T_1) @[rca.scala 31:39]
    node _p_comb_28_T_3 = bits(_p_comb_28_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[28] <= _p_comb_28_T_3 @[rca.scala 31:21]
    node _s_comb_28_T = xor(p_comb[28], c_comb[28]) @[rca.scala 32:34]
    s_comb[28] <= _s_comb_28_T @[rca.scala 32:21]
    node _c_comb_29_T = and(c_comb[28], p_comb[28]) @[rca.scala 33:34]
    node _c_comb_29_T_1 = or(_c_comb_29_T, g_comb[28]) @[rca.scala 33:46]
    c_comb[29] <= _c_comb_29_T_1 @[rca.scala 33:21]
    node _g_comb_29_T = bits(input.a_in, 29, 29) @[rca.scala 30:35]
    node _g_comb_29_T_1 = bits(input.b_in, 29, 29) @[rca.scala 30:51]
    node _g_comb_29_T_2 = and(_g_comb_29_T, _g_comb_29_T_1) @[rca.scala 30:39]
    node _g_comb_29_T_3 = bits(_g_comb_29_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[29] <= _g_comb_29_T_3 @[rca.scala 30:21]
    node _p_comb_29_T = bits(input.a_in, 29, 29) @[rca.scala 31:35]
    node _p_comb_29_T_1 = bits(input.b_in, 29, 29) @[rca.scala 31:51]
    node _p_comb_29_T_2 = xor(_p_comb_29_T, _p_comb_29_T_1) @[rca.scala 31:39]
    node _p_comb_29_T_3 = bits(_p_comb_29_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[29] <= _p_comb_29_T_3 @[rca.scala 31:21]
    node _s_comb_29_T = xor(p_comb[29], c_comb[29]) @[rca.scala 32:34]
    s_comb[29] <= _s_comb_29_T @[rca.scala 32:21]
    node _c_comb_30_T = and(c_comb[29], p_comb[29]) @[rca.scala 33:34]
    node _c_comb_30_T_1 = or(_c_comb_30_T, g_comb[29]) @[rca.scala 33:46]
    c_comb[30] <= _c_comb_30_T_1 @[rca.scala 33:21]
    node _g_comb_30_T = bits(input.a_in, 30, 30) @[rca.scala 30:35]
    node _g_comb_30_T_1 = bits(input.b_in, 30, 30) @[rca.scala 30:51]
    node _g_comb_30_T_2 = and(_g_comb_30_T, _g_comb_30_T_1) @[rca.scala 30:39]
    node _g_comb_30_T_3 = bits(_g_comb_30_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[30] <= _g_comb_30_T_3 @[rca.scala 30:21]
    node _p_comb_30_T = bits(input.a_in, 30, 30) @[rca.scala 31:35]
    node _p_comb_30_T_1 = bits(input.b_in, 30, 30) @[rca.scala 31:51]
    node _p_comb_30_T_2 = xor(_p_comb_30_T, _p_comb_30_T_1) @[rca.scala 31:39]
    node _p_comb_30_T_3 = bits(_p_comb_30_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[30] <= _p_comb_30_T_3 @[rca.scala 31:21]
    node _s_comb_30_T = xor(p_comb[30], c_comb[30]) @[rca.scala 32:34]
    s_comb[30] <= _s_comb_30_T @[rca.scala 32:21]
    node _c_comb_31_T = and(c_comb[30], p_comb[30]) @[rca.scala 33:34]
    node _c_comb_31_T_1 = or(_c_comb_31_T, g_comb[30]) @[rca.scala 33:46]
    c_comb[31] <= _c_comb_31_T_1 @[rca.scala 33:21]
    node _g_comb_31_T = bits(input.a_in, 31, 31) @[rca.scala 30:35]
    node _g_comb_31_T_1 = bits(input.b_in, 31, 31) @[rca.scala 30:51]
    node _g_comb_31_T_2 = and(_g_comb_31_T, _g_comb_31_T_1) @[rca.scala 30:39]
    node _g_comb_31_T_3 = bits(_g_comb_31_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[31] <= _g_comb_31_T_3 @[rca.scala 30:21]
    node _p_comb_31_T = bits(input.a_in, 31, 31) @[rca.scala 31:35]
    node _p_comb_31_T_1 = bits(input.b_in, 31, 31) @[rca.scala 31:51]
    node _p_comb_31_T_2 = xor(_p_comb_31_T, _p_comb_31_T_1) @[rca.scala 31:39]
    node _p_comb_31_T_3 = bits(_p_comb_31_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[31] <= _p_comb_31_T_3 @[rca.scala 31:21]
    node _s_comb_31_T = xor(p_comb[31], c_comb[31]) @[rca.scala 32:34]
    s_comb[31] <= _s_comb_31_T @[rca.scala 32:21]
    node _c_comb_32_T = and(c_comb[31], p_comb[31]) @[rca.scala 33:34]
    node _c_comb_32_T_1 = or(_c_comb_32_T, g_comb[31]) @[rca.scala 33:46]
    c_comb[32] <= _c_comb_32_T_1 @[rca.scala 33:21]
    node output_S_lo_lo_lo_lo = cat(s_comb[1], s_comb[0]) @[rca.scala 36:24]
    node output_S_lo_lo_lo_hi = cat(s_comb[3], s_comb[2]) @[rca.scala 36:24]
    node output_S_lo_lo_lo = cat(output_S_lo_lo_lo_hi, output_S_lo_lo_lo_lo) @[rca.scala 36:24]
    node output_S_lo_lo_hi_lo = cat(s_comb[5], s_comb[4]) @[rca.scala 36:24]
    node output_S_lo_lo_hi_hi = cat(s_comb[7], s_comb[6]) @[rca.scala 36:24]
    node output_S_lo_lo_hi = cat(output_S_lo_lo_hi_hi, output_S_lo_lo_hi_lo) @[rca.scala 36:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[rca.scala 36:24]
    node output_S_lo_hi_lo_lo = cat(s_comb[9], s_comb[8]) @[rca.scala 36:24]
    node output_S_lo_hi_lo_hi = cat(s_comb[11], s_comb[10]) @[rca.scala 36:24]
    node output_S_lo_hi_lo = cat(output_S_lo_hi_lo_hi, output_S_lo_hi_lo_lo) @[rca.scala 36:24]
    node output_S_lo_hi_hi_lo = cat(s_comb[13], s_comb[12]) @[rca.scala 36:24]
    node output_S_lo_hi_hi_hi = cat(s_comb[15], s_comb[14]) @[rca.scala 36:24]
    node output_S_lo_hi_hi = cat(output_S_lo_hi_hi_hi, output_S_lo_hi_hi_lo) @[rca.scala 36:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[rca.scala 36:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[rca.scala 36:24]
    node output_S_hi_lo_lo_lo = cat(s_comb[17], s_comb[16]) @[rca.scala 36:24]
    node output_S_hi_lo_lo_hi = cat(s_comb[19], s_comb[18]) @[rca.scala 36:24]
    node output_S_hi_lo_lo = cat(output_S_hi_lo_lo_hi, output_S_hi_lo_lo_lo) @[rca.scala 36:24]
    node output_S_hi_lo_hi_lo = cat(s_comb[21], s_comb[20]) @[rca.scala 36:24]
    node output_S_hi_lo_hi_hi = cat(s_comb[23], s_comb[22]) @[rca.scala 36:24]
    node output_S_hi_lo_hi = cat(output_S_hi_lo_hi_hi, output_S_hi_lo_hi_lo) @[rca.scala 36:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[rca.scala 36:24]
    node output_S_hi_hi_lo_lo = cat(s_comb[25], s_comb[24]) @[rca.scala 36:24]
    node output_S_hi_hi_lo_hi = cat(s_comb[27], s_comb[26]) @[rca.scala 36:24]
    node output_S_hi_hi_lo = cat(output_S_hi_hi_lo_hi, output_S_hi_hi_lo_lo) @[rca.scala 36:24]
    node output_S_hi_hi_hi_lo = cat(s_comb[29], s_comb[28]) @[rca.scala 36:24]
    node output_S_hi_hi_hi_hi = cat(s_comb[31], s_comb[30]) @[rca.scala 36:24]
    node output_S_hi_hi_hi = cat(output_S_hi_hi_hi_hi, output_S_hi_hi_hi_lo) @[rca.scala 36:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[rca.scala 36:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[rca.scala 36:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[rca.scala 36:24]
    node _output_S_T_1 = asSInt(_output_S_T) @[rca.scala 36:31]
    output.S <= _output_S_T_1 @[rca.scala 36:14]
    node _output_C_T = asSInt(c_comb[32]) @[rca.scala 37:40]
    output.C <= _output_C_T @[rca.scala 37:14]

  module MacUnit_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in_a : SInt<8>, flip in_b : SInt<8>, flip in_c : SInt<32>, out_c : SInt<32>}

    inst mul of Multiplier_1 @[MacUnit.scala 15:19]
    mul.clock <= clock
    mul.reset <= reset
    inst rca of RCA_3 @[MacUnit.scala 16:19]
    rca.clock <= clock
    rca.reset <= reset
    mul.input.multiplicand <= io.in_a @[MacUnit.scala 18:26]
    mul.input.multiplier <= io.in_b @[MacUnit.scala 19:26]
    node _rca_input_a_in_T = bits(mul.output.product, 15, 15) @[MacUnit.scala 21:71]
    node _rca_input_a_in_T_1 = bits(_rca_input_a_in_T, 0, 0) @[Bitwise.scala 77:15]
    node _rca_input_a_in_T_2 = mux(_rca_input_a_in_T_1, UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
    node rca_input_a_in_lo = asUInt(mul.output.product) @[Cat.scala 33:92]
    node _rca_input_a_in_T_3 = cat(_rca_input_a_in_T_2, rca_input_a_in_lo) @[Cat.scala 33:92]
    node _rca_input_a_in_T_4 = asSInt(_rca_input_a_in_T_3) @[MacUnit.scala 21:108]
    rca.input.a_in <= _rca_input_a_in_T_4 @[MacUnit.scala 21:19]
    rca.input.b_in <= io.in_c @[MacUnit.scala 22:19]
    rca.input.c_in <= asSInt(UInt<32>("h0")) @[MacUnit.scala 23:19]
    io.out_c <= rca.output.S @[MacUnit.scala 24:19]

  module PE_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in_control : { ctrl_sa_send_data : UInt<1>}, flip in_a : SInt<8>, flip in_b : SInt<8>, flip in_c : SInt<32>, out_control : { ctrl_sa_send_data : UInt<1>}, out_a : SInt<8>, out_b : SInt<8>, out_c : SInt<32>}

    reg a_reg : SInt<8>, clock with :
      reset => (reset, asSInt(UInt<8>("h0"))) @[PE.scala 24:22]
    reg b_reg : SInt<8>, clock with :
      reset => (reset, asSInt(UInt<8>("h0"))) @[PE.scala 25:22]
    reg c_reg : SInt<32>, clock with :
      reset => (reset, asSInt(UInt<32>("h0"))) @[PE.scala 26:22]
    inst mac of MacUnit_1 @[PE.scala 28:19]
    mac.clock <= clock
    mac.reset <= reset
    mac.io.in_a <= io.in_a @[PE.scala 29:15]
    mac.io.in_b <= io.in_b @[PE.scala 30:15]
    mac.io.in_c <= c_reg @[PE.scala 31:15]
    a_reg <= io.in_a @[PE.scala 33:9]
    b_reg <= io.in_b @[PE.scala 34:9]
    node _c_reg_T = mux(io.in_control.ctrl_sa_send_data, io.in_c, mac.io.out_c) @[PE.scala 36:15]
    c_reg <= _c_reg_T @[PE.scala 36:9]
    io.out_a <= a_reg @[PE.scala 38:12]
    io.out_b <= b_reg @[PE.scala 39:12]
    io.out_c <= c_reg @[PE.scala 40:12]
    io.out_control <= io.in_control @[PE.scala 42:18]

  module booth2Encoder_2 :
    input clock : Clock
    input reset : Reset
    output input : { flip multiplier : SInt<8>}
    output output : { X2 : UInt<4>, inv : UInt<4>, set0 : UInt<4>}

    wire multiplier2 : UInt<9> @[booth2_encoder.scala 22:27]
    wire bits : UInt<3>[4] @[booth2_encoder.scala 23:27]
    wire X2Bools : UInt<1>[4] @[booth2_encoder.scala 25:30]
    X2Bools[0] <= UInt<1>("h0") @[booth2_encoder.scala 25:30]
    X2Bools[1] <= UInt<1>("h0") @[booth2_encoder.scala 25:30]
    X2Bools[2] <= UInt<1>("h0") @[booth2_encoder.scala 25:30]
    X2Bools[3] <= UInt<1>("h0") @[booth2_encoder.scala 25:30]
    wire invBools : UInt<1>[4] @[booth2_encoder.scala 26:30]
    invBools[0] <= UInt<1>("h0") @[booth2_encoder.scala 26:30]
    invBools[1] <= UInt<1>("h0") @[booth2_encoder.scala 26:30]
    invBools[2] <= UInt<1>("h0") @[booth2_encoder.scala 26:30]
    invBools[3] <= UInt<1>("h0") @[booth2_encoder.scala 26:30]
    wire set0Bools : UInt<1>[4] @[booth2_encoder.scala 27:30]
    set0Bools[0] <= UInt<1>("h0") @[booth2_encoder.scala 27:30]
    set0Bools[1] <= UInt<1>("h0") @[booth2_encoder.scala 27:30]
    set0Bools[2] <= UInt<1>("h0") @[booth2_encoder.scala 27:30]
    set0Bools[3] <= UInt<1>("h0") @[booth2_encoder.scala 27:30]
    node multiplier2_hi = asUInt(input.multiplier) @[Cat.scala 33:92]
    node _multiplier2_T = cat(multiplier2_hi, UInt<1>("h0")) @[Cat.scala 33:92]
    multiplier2 <= _multiplier2_T @[booth2_encoder.scala 29:17]
    node _bits_0_T = bits(multiplier2, 2, 0) @[booth2_encoder.scala 32:31]
    bits[0] <= _bits_0_T @[booth2_encoder.scala 32:17]
    node _bits_1_T = bits(multiplier2, 4, 2) @[booth2_encoder.scala 32:31]
    bits[1] <= _bits_1_T @[booth2_encoder.scala 32:17]
    node _bits_2_T = bits(multiplier2, 6, 4) @[booth2_encoder.scala 32:31]
    bits[2] <= _bits_2_T @[booth2_encoder.scala 32:17]
    node _bits_3_T = bits(multiplier2, 8, 6) @[booth2_encoder.scala 32:31]
    bits[3] <= _bits_3_T @[booth2_encoder.scala 32:17]
    node _X2Bools_0_T = bits(bits[0], 0, 0) @[booth2_encoder.scala 36:35]
    node _X2Bools_0_T_1 = bits(bits[0], 1, 1) @[booth2_encoder.scala 36:46]
    node _X2Bools_0_T_2 = xor(_X2Bools_0_T, _X2Bools_0_T_1) @[booth2_encoder.scala 36:38]
    node _X2Bools_0_T_3 = not(_X2Bools_0_T_2) @[booth2_encoder.scala 36:26]
    node _X2Bools_0_T_4 = bits(_X2Bools_0_T_3, 0, 0) @[booth2_encoder.scala 36:52]
    X2Bools[0] <= _X2Bools_0_T_4 @[booth2_encoder.scala 36:22]
    node _invBools_0_T = bits(bits[0], 2, 2) @[booth2_encoder.scala 37:32]
    node _invBools_0_T_1 = bits(_invBools_0_T, 0, 0) @[booth2_encoder.scala 37:36]
    invBools[0] <= _invBools_0_T_1 @[booth2_encoder.scala 37:22]
    node _set0Bools_0_T = andr(bits[0]) @[booth2_encoder.scala 38:33]
    node _set0Bools_0_T_1 = not(bits[0]) @[booth2_encoder.scala 38:48]
    node _set0Bools_0_T_2 = andr(_set0Bools_0_T_1) @[booth2_encoder.scala 38:58]
    node _set0Bools_0_T_3 = bits(_set0Bools_0_T_2, 0, 0) @[booth2_encoder.scala 38:63]
    node _set0Bools_0_T_4 = or(_set0Bools_0_T, _set0Bools_0_T_3) @[booth2_encoder.scala 38:45]
    set0Bools[0] <= _set0Bools_0_T_4 @[booth2_encoder.scala 38:22]
    node _X2Bools_1_T = bits(bits[1], 0, 0) @[booth2_encoder.scala 36:35]
    node _X2Bools_1_T_1 = bits(bits[1], 1, 1) @[booth2_encoder.scala 36:46]
    node _X2Bools_1_T_2 = xor(_X2Bools_1_T, _X2Bools_1_T_1) @[booth2_encoder.scala 36:38]
    node _X2Bools_1_T_3 = not(_X2Bools_1_T_2) @[booth2_encoder.scala 36:26]
    node _X2Bools_1_T_4 = bits(_X2Bools_1_T_3, 0, 0) @[booth2_encoder.scala 36:52]
    X2Bools[1] <= _X2Bools_1_T_4 @[booth2_encoder.scala 36:22]
    node _invBools_1_T = bits(bits[1], 2, 2) @[booth2_encoder.scala 37:32]
    node _invBools_1_T_1 = bits(_invBools_1_T, 0, 0) @[booth2_encoder.scala 37:36]
    invBools[1] <= _invBools_1_T_1 @[booth2_encoder.scala 37:22]
    node _set0Bools_1_T = andr(bits[1]) @[booth2_encoder.scala 38:33]
    node _set0Bools_1_T_1 = not(bits[1]) @[booth2_encoder.scala 38:48]
    node _set0Bools_1_T_2 = andr(_set0Bools_1_T_1) @[booth2_encoder.scala 38:58]
    node _set0Bools_1_T_3 = bits(_set0Bools_1_T_2, 0, 0) @[booth2_encoder.scala 38:63]
    node _set0Bools_1_T_4 = or(_set0Bools_1_T, _set0Bools_1_T_3) @[booth2_encoder.scala 38:45]
    set0Bools[1] <= _set0Bools_1_T_4 @[booth2_encoder.scala 38:22]
    node _X2Bools_2_T = bits(bits[2], 0, 0) @[booth2_encoder.scala 36:35]
    node _X2Bools_2_T_1 = bits(bits[2], 1, 1) @[booth2_encoder.scala 36:46]
    node _X2Bools_2_T_2 = xor(_X2Bools_2_T, _X2Bools_2_T_1) @[booth2_encoder.scala 36:38]
    node _X2Bools_2_T_3 = not(_X2Bools_2_T_2) @[booth2_encoder.scala 36:26]
    node _X2Bools_2_T_4 = bits(_X2Bools_2_T_3, 0, 0) @[booth2_encoder.scala 36:52]
    X2Bools[2] <= _X2Bools_2_T_4 @[booth2_encoder.scala 36:22]
    node _invBools_2_T = bits(bits[2], 2, 2) @[booth2_encoder.scala 37:32]
    node _invBools_2_T_1 = bits(_invBools_2_T, 0, 0) @[booth2_encoder.scala 37:36]
    invBools[2] <= _invBools_2_T_1 @[booth2_encoder.scala 37:22]
    node _set0Bools_2_T = andr(bits[2]) @[booth2_encoder.scala 38:33]
    node _set0Bools_2_T_1 = not(bits[2]) @[booth2_encoder.scala 38:48]
    node _set0Bools_2_T_2 = andr(_set0Bools_2_T_1) @[booth2_encoder.scala 38:58]
    node _set0Bools_2_T_3 = bits(_set0Bools_2_T_2, 0, 0) @[booth2_encoder.scala 38:63]
    node _set0Bools_2_T_4 = or(_set0Bools_2_T, _set0Bools_2_T_3) @[booth2_encoder.scala 38:45]
    set0Bools[2] <= _set0Bools_2_T_4 @[booth2_encoder.scala 38:22]
    node _X2Bools_3_T = bits(bits[3], 0, 0) @[booth2_encoder.scala 36:35]
    node _X2Bools_3_T_1 = bits(bits[3], 1, 1) @[booth2_encoder.scala 36:46]
    node _X2Bools_3_T_2 = xor(_X2Bools_3_T, _X2Bools_3_T_1) @[booth2_encoder.scala 36:38]
    node _X2Bools_3_T_3 = not(_X2Bools_3_T_2) @[booth2_encoder.scala 36:26]
    node _X2Bools_3_T_4 = bits(_X2Bools_3_T_3, 0, 0) @[booth2_encoder.scala 36:52]
    X2Bools[3] <= _X2Bools_3_T_4 @[booth2_encoder.scala 36:22]
    node _invBools_3_T = bits(bits[3], 2, 2) @[booth2_encoder.scala 37:32]
    node _invBools_3_T_1 = bits(_invBools_3_T, 0, 0) @[booth2_encoder.scala 37:36]
    invBools[3] <= _invBools_3_T_1 @[booth2_encoder.scala 37:22]
    node _set0Bools_3_T = andr(bits[3]) @[booth2_encoder.scala 38:33]
    node _set0Bools_3_T_1 = not(bits[3]) @[booth2_encoder.scala 38:48]
    node _set0Bools_3_T_2 = andr(_set0Bools_3_T_1) @[booth2_encoder.scala 38:58]
    node _set0Bools_3_T_3 = bits(_set0Bools_3_T_2, 0, 0) @[booth2_encoder.scala 38:63]
    node _set0Bools_3_T_4 = or(_set0Bools_3_T, _set0Bools_3_T_3) @[booth2_encoder.scala 38:45]
    set0Bools[3] <= _set0Bools_3_T_4 @[booth2_encoder.scala 38:22]
    node output_X2_lo = cat(X2Bools[1], X2Bools[0]) @[booth2_encoder.scala 42:28]
    node output_X2_hi = cat(X2Bools[3], X2Bools[2]) @[booth2_encoder.scala 42:28]
    node _output_X2_T = cat(output_X2_hi, output_X2_lo) @[booth2_encoder.scala 42:28]
    output.X2 <= _output_X2_T @[booth2_encoder.scala 42:17]
    node output_inv_lo = cat(invBools[1], invBools[0]) @[booth2_encoder.scala 43:29]
    node output_inv_hi = cat(invBools[3], invBools[2]) @[booth2_encoder.scala 43:29]
    node _output_inv_T = cat(output_inv_hi, output_inv_lo) @[booth2_encoder.scala 43:29]
    output.inv <= _output_inv_T @[booth2_encoder.scala 43:17]
    node output_set0_lo = cat(set0Bools[1], set0Bools[0]) @[booth2_encoder.scala 44:30]
    node output_set0_hi = cat(set0Bools[3], set0Bools[2]) @[booth2_encoder.scala 44:30]
    node _output_set0_T = cat(output_set0_hi, output_set0_lo) @[booth2_encoder.scala 44:30]
    output.set0 <= _output_set0_T @[booth2_encoder.scala 44:17]

  module ppGenerator_2 :
    input clock : Clock
    input reset : Reset
    output inputData : { flip multiplicand : SInt<8>}
    output inputCtrl : { flip X2 : UInt<4>, flip inv : UInt<4>, flip Set0 : UInt<4>}
    output outputData : { pp_out : SInt<16>[4], sig_out : SInt<16>}

    wire E : UInt<1>[4] @[pp_generator.scala 28:26]
    wire E_inv : UInt<1>[4] @[pp_generator.scala 29:26]
    wire pp_X2 : SInt<9>[4] @[pp_generator.scala 31:26]
    wire pp_set : SInt<9>[4] @[pp_generator.scala 32:26]
    wire pp_inv : SInt<9>[4] @[pp_generator.scala 33:26]
    wire pp_temp : SInt<16>[4] @[pp_generator.scala 34:26]
    wire _pp_WIRE : SInt<16>[4] @[pp_generator.scala 36:37]
    _pp_WIRE[0] <= asSInt(UInt<16>("h0")) @[pp_generator.scala 36:37]
    _pp_WIRE[1] <= asSInt(UInt<16>("h0")) @[pp_generator.scala 36:37]
    _pp_WIRE[2] <= asSInt(UInt<16>("h0")) @[pp_generator.scala 36:37]
    _pp_WIRE[3] <= asSInt(UInt<16>("h0")) @[pp_generator.scala 36:37]
    reg pp : SInt<16>[4], clock with :
      reset => (reset, _pp_WIRE) @[pp_generator.scala 36:29]
    reg sign_com : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<16>("h0"))) @[pp_generator.scala 37:29]
    node _pp_X2_0_T = bits(inputCtrl.X2, 0, 0) @[pp_generator.scala 40:38]
    node _pp_X2_0_T_1 = bits(_pp_X2_0_T, 0, 0) @[pp_generator.scala 40:42]
    node pp_X2_0_lo = asUInt(asSInt(UInt<1>("h0"))) @[Cat.scala 33:92]
    node pp_X2_0_hi = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_0_T_2 = cat(pp_X2_0_hi, pp_X2_0_lo) @[Cat.scala 33:92]
    node _pp_X2_0_T_3 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 41:51]
    node pp_X2_0_lo_1 = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_0_T_4 = cat(_pp_X2_0_T_3, pp_X2_0_lo_1) @[Cat.scala 33:92]
    node _pp_X2_0_T_5 = mux(_pp_X2_0_T_1, _pp_X2_0_T_2, _pp_X2_0_T_4) @[pp_generator.scala 40:25]
    node _pp_X2_0_T_6 = asSInt(_pp_X2_0_T_5) @[pp_generator.scala 41:90]
    pp_X2[0] <= _pp_X2_0_T_6 @[pp_generator.scala 40:19]
    node _pp_set_0_T = bits(inputCtrl.Set0, 0, 0) @[pp_generator.scala 42:40]
    node _pp_set_0_T_1 = bits(_pp_set_0_T, 0, 0) @[pp_generator.scala 42:44]
    node _pp_set_0_T_2 = mux(_pp_set_0_T_1, asSInt(UInt<9>("h0")), pp_X2[0]) @[pp_generator.scala 42:25]
    pp_set[0] <= _pp_set_0_T_2 @[pp_generator.scala 42:19]
    node _pp_inv_0_T = bits(inputCtrl.inv, 0, 0) @[pp_generator.scala 43:39]
    node _pp_inv_0_T_1 = bits(_pp_inv_0_T, 0, 0) @[pp_generator.scala 43:43]
    node _pp_inv_0_T_2 = not(pp_set[0]) @[pp_generator.scala 43:51]
    node _pp_inv_0_T_3 = asSInt(_pp_inv_0_T_2) @[pp_generator.scala 43:51]
    node _pp_inv_0_T_4 = mux(_pp_inv_0_T_1, _pp_inv_0_T_3, pp_set[0]) @[pp_generator.scala 43:25]
    pp_inv[0] <= _pp_inv_0_T_4 @[pp_generator.scala 43:19]
    node _E_inv_0_T = bits(inputCtrl.Set0, 0, 0) @[pp_generator.scala 44:40]
    node _E_inv_0_T_1 = bits(_E_inv_0_T, 0, 0) @[pp_generator.scala 44:44]
    node _E_inv_0_T_2 = bits(inputCtrl.inv, 0, 0) @[pp_generator.scala 44:65]
    node _E_inv_0_T_3 = bits(_E_inv_0_T_2, 0, 0) @[pp_generator.scala 44:69]
    node _E_inv_0_T_4 = bits(inputCtrl.inv, 0, 0) @[pp_generator.scala 44:91]
    node _E_inv_0_T_5 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 44:117]
    node _E_inv_0_T_6 = xor(_E_inv_0_T_4, _E_inv_0_T_5) @[pp_generator.scala 44:94]
    node _E_inv_0_T_7 = bits(_E_inv_0_T_6, 0, 0) @[pp_generator.scala 44:131]
    node _E_inv_0_T_8 = mux(_E_inv_0_T_1, _E_inv_0_T_3, _E_inv_0_T_7) @[pp_generator.scala 44:25]
    E_inv[0] <= _E_inv_0_T_8 @[pp_generator.scala 44:19]
    node _E_0_T = not(E_inv[0]) @[pp_generator.scala 45:22]
    E[0] <= _E_0_T @[pp_generator.scala 45:19]
    node pp_temp_0_lo_lo = asUInt(pp_inv[0]) @[Cat.scala 33:92]
    node pp_temp_0_lo = cat(E_inv[0], pp_temp_0_lo_lo) @[Cat.scala 33:92]
    node pp_temp_0_hi_hi = cat(UInt<4>("h0"), E[0]) @[Cat.scala 33:92]
    node pp_temp_0_hi = cat(pp_temp_0_hi_hi, E_inv[0]) @[Cat.scala 33:92]
    node _pp_temp_0_T = cat(pp_temp_0_hi, pp_temp_0_lo) @[Cat.scala 33:92]
    node _pp_temp_0_T_1 = asSInt(_pp_temp_0_T) @[pp_generator.scala 51:115]
    pp_temp[0] <= _pp_temp_0_T_1 @[pp_generator.scala 51:28]
    node _pp_X2_1_T = bits(inputCtrl.X2, 1, 1) @[pp_generator.scala 40:38]
    node _pp_X2_1_T_1 = bits(_pp_X2_1_T, 0, 0) @[pp_generator.scala 40:42]
    node pp_X2_1_lo = asUInt(asSInt(UInt<1>("h0"))) @[Cat.scala 33:92]
    node pp_X2_1_hi = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_1_T_2 = cat(pp_X2_1_hi, pp_X2_1_lo) @[Cat.scala 33:92]
    node _pp_X2_1_T_3 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 41:51]
    node pp_X2_1_lo_1 = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_1_T_4 = cat(_pp_X2_1_T_3, pp_X2_1_lo_1) @[Cat.scala 33:92]
    node _pp_X2_1_T_5 = mux(_pp_X2_1_T_1, _pp_X2_1_T_2, _pp_X2_1_T_4) @[pp_generator.scala 40:25]
    node _pp_X2_1_T_6 = asSInt(_pp_X2_1_T_5) @[pp_generator.scala 41:90]
    pp_X2[1] <= _pp_X2_1_T_6 @[pp_generator.scala 40:19]
    node _pp_set_1_T = bits(inputCtrl.Set0, 1, 1) @[pp_generator.scala 42:40]
    node _pp_set_1_T_1 = bits(_pp_set_1_T, 0, 0) @[pp_generator.scala 42:44]
    node _pp_set_1_T_2 = mux(_pp_set_1_T_1, asSInt(UInt<9>("h0")), pp_X2[1]) @[pp_generator.scala 42:25]
    pp_set[1] <= _pp_set_1_T_2 @[pp_generator.scala 42:19]
    node _pp_inv_1_T = bits(inputCtrl.inv, 1, 1) @[pp_generator.scala 43:39]
    node _pp_inv_1_T_1 = bits(_pp_inv_1_T, 0, 0) @[pp_generator.scala 43:43]
    node _pp_inv_1_T_2 = not(pp_set[1]) @[pp_generator.scala 43:51]
    node _pp_inv_1_T_3 = asSInt(_pp_inv_1_T_2) @[pp_generator.scala 43:51]
    node _pp_inv_1_T_4 = mux(_pp_inv_1_T_1, _pp_inv_1_T_3, pp_set[1]) @[pp_generator.scala 43:25]
    pp_inv[1] <= _pp_inv_1_T_4 @[pp_generator.scala 43:19]
    node _E_inv_1_T = bits(inputCtrl.Set0, 1, 1) @[pp_generator.scala 44:40]
    node _E_inv_1_T_1 = bits(_E_inv_1_T, 0, 0) @[pp_generator.scala 44:44]
    node _E_inv_1_T_2 = bits(inputCtrl.inv, 1, 1) @[pp_generator.scala 44:65]
    node _E_inv_1_T_3 = bits(_E_inv_1_T_2, 0, 0) @[pp_generator.scala 44:69]
    node _E_inv_1_T_4 = bits(inputCtrl.inv, 1, 1) @[pp_generator.scala 44:91]
    node _E_inv_1_T_5 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 44:117]
    node _E_inv_1_T_6 = xor(_E_inv_1_T_4, _E_inv_1_T_5) @[pp_generator.scala 44:94]
    node _E_inv_1_T_7 = bits(_E_inv_1_T_6, 0, 0) @[pp_generator.scala 44:131]
    node _E_inv_1_T_8 = mux(_E_inv_1_T_1, _E_inv_1_T_3, _E_inv_1_T_7) @[pp_generator.scala 44:25]
    E_inv[1] <= _E_inv_1_T_8 @[pp_generator.scala 44:19]
    node _E_1_T = not(E_inv[1]) @[pp_generator.scala 45:22]
    E[1] <= _E_1_T @[pp_generator.scala 45:19]
    node pp_temp_1_lo_lo = asUInt(pp_inv[1]) @[Cat.scala 33:92]
    node pp_temp_1_lo = cat(E[1], pp_temp_1_lo_lo) @[Cat.scala 33:92]
    node pp_temp_1_hi = cat(UInt<5>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
    node _pp_temp_1_T = cat(pp_temp_1_hi, pp_temp_1_lo) @[Cat.scala 33:92]
    node _pp_temp_1_T_1 = asSInt(_pp_temp_1_T) @[pp_generator.scala 55:94]
    pp_temp[1] <= _pp_temp_1_T_1 @[pp_generator.scala 55:24]
    node _pp_X2_2_T = bits(inputCtrl.X2, 2, 2) @[pp_generator.scala 40:38]
    node _pp_X2_2_T_1 = bits(_pp_X2_2_T, 0, 0) @[pp_generator.scala 40:42]
    node pp_X2_2_lo = asUInt(asSInt(UInt<1>("h0"))) @[Cat.scala 33:92]
    node pp_X2_2_hi = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_2_T_2 = cat(pp_X2_2_hi, pp_X2_2_lo) @[Cat.scala 33:92]
    node _pp_X2_2_T_3 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 41:51]
    node pp_X2_2_lo_1 = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_2_T_4 = cat(_pp_X2_2_T_3, pp_X2_2_lo_1) @[Cat.scala 33:92]
    node _pp_X2_2_T_5 = mux(_pp_X2_2_T_1, _pp_X2_2_T_2, _pp_X2_2_T_4) @[pp_generator.scala 40:25]
    node _pp_X2_2_T_6 = asSInt(_pp_X2_2_T_5) @[pp_generator.scala 41:90]
    pp_X2[2] <= _pp_X2_2_T_6 @[pp_generator.scala 40:19]
    node _pp_set_2_T = bits(inputCtrl.Set0, 2, 2) @[pp_generator.scala 42:40]
    node _pp_set_2_T_1 = bits(_pp_set_2_T, 0, 0) @[pp_generator.scala 42:44]
    node _pp_set_2_T_2 = mux(_pp_set_2_T_1, asSInt(UInt<9>("h0")), pp_X2[2]) @[pp_generator.scala 42:25]
    pp_set[2] <= _pp_set_2_T_2 @[pp_generator.scala 42:19]
    node _pp_inv_2_T = bits(inputCtrl.inv, 2, 2) @[pp_generator.scala 43:39]
    node _pp_inv_2_T_1 = bits(_pp_inv_2_T, 0, 0) @[pp_generator.scala 43:43]
    node _pp_inv_2_T_2 = not(pp_set[2]) @[pp_generator.scala 43:51]
    node _pp_inv_2_T_3 = asSInt(_pp_inv_2_T_2) @[pp_generator.scala 43:51]
    node _pp_inv_2_T_4 = mux(_pp_inv_2_T_1, _pp_inv_2_T_3, pp_set[2]) @[pp_generator.scala 43:25]
    pp_inv[2] <= _pp_inv_2_T_4 @[pp_generator.scala 43:19]
    node _E_inv_2_T = bits(inputCtrl.Set0, 2, 2) @[pp_generator.scala 44:40]
    node _E_inv_2_T_1 = bits(_E_inv_2_T, 0, 0) @[pp_generator.scala 44:44]
    node _E_inv_2_T_2 = bits(inputCtrl.inv, 2, 2) @[pp_generator.scala 44:65]
    node _E_inv_2_T_3 = bits(_E_inv_2_T_2, 0, 0) @[pp_generator.scala 44:69]
    node _E_inv_2_T_4 = bits(inputCtrl.inv, 2, 2) @[pp_generator.scala 44:91]
    node _E_inv_2_T_5 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 44:117]
    node _E_inv_2_T_6 = xor(_E_inv_2_T_4, _E_inv_2_T_5) @[pp_generator.scala 44:94]
    node _E_inv_2_T_7 = bits(_E_inv_2_T_6, 0, 0) @[pp_generator.scala 44:131]
    node _E_inv_2_T_8 = mux(_E_inv_2_T_1, _E_inv_2_T_3, _E_inv_2_T_7) @[pp_generator.scala 44:25]
    E_inv[2] <= _E_inv_2_T_8 @[pp_generator.scala 44:19]
    node _E_2_T = not(E_inv[2]) @[pp_generator.scala 45:22]
    E[2] <= _E_2_T @[pp_generator.scala 45:19]
    node pp_temp_2_lo_lo = asUInt(pp_inv[2]) @[Cat.scala 33:92]
    node pp_temp_2_lo = cat(E[2], pp_temp_2_lo_lo) @[Cat.scala 33:92]
    node pp_temp_2_hi = cat(UInt<5>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
    node _pp_temp_2_T = cat(pp_temp_2_hi, pp_temp_2_lo) @[Cat.scala 33:92]
    node _pp_temp_2_T_1 = asSInt(_pp_temp_2_T) @[pp_generator.scala 55:94]
    pp_temp[2] <= _pp_temp_2_T_1 @[pp_generator.scala 55:24]
    node _pp_X2_3_T = bits(inputCtrl.X2, 3, 3) @[pp_generator.scala 40:38]
    node _pp_X2_3_T_1 = bits(_pp_X2_3_T, 0, 0) @[pp_generator.scala 40:42]
    node pp_X2_3_lo = asUInt(asSInt(UInt<1>("h0"))) @[Cat.scala 33:92]
    node pp_X2_3_hi = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_3_T_2 = cat(pp_X2_3_hi, pp_X2_3_lo) @[Cat.scala 33:92]
    node _pp_X2_3_T_3 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 41:51]
    node pp_X2_3_lo_1 = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_3_T_4 = cat(_pp_X2_3_T_3, pp_X2_3_lo_1) @[Cat.scala 33:92]
    node _pp_X2_3_T_5 = mux(_pp_X2_3_T_1, _pp_X2_3_T_2, _pp_X2_3_T_4) @[pp_generator.scala 40:25]
    node _pp_X2_3_T_6 = asSInt(_pp_X2_3_T_5) @[pp_generator.scala 41:90]
    pp_X2[3] <= _pp_X2_3_T_6 @[pp_generator.scala 40:19]
    node _pp_set_3_T = bits(inputCtrl.Set0, 3, 3) @[pp_generator.scala 42:40]
    node _pp_set_3_T_1 = bits(_pp_set_3_T, 0, 0) @[pp_generator.scala 42:44]
    node _pp_set_3_T_2 = mux(_pp_set_3_T_1, asSInt(UInt<9>("h0")), pp_X2[3]) @[pp_generator.scala 42:25]
    pp_set[3] <= _pp_set_3_T_2 @[pp_generator.scala 42:19]
    node _pp_inv_3_T = bits(inputCtrl.inv, 3, 3) @[pp_generator.scala 43:39]
    node _pp_inv_3_T_1 = bits(_pp_inv_3_T, 0, 0) @[pp_generator.scala 43:43]
    node _pp_inv_3_T_2 = not(pp_set[3]) @[pp_generator.scala 43:51]
    node _pp_inv_3_T_3 = asSInt(_pp_inv_3_T_2) @[pp_generator.scala 43:51]
    node _pp_inv_3_T_4 = mux(_pp_inv_3_T_1, _pp_inv_3_T_3, pp_set[3]) @[pp_generator.scala 43:25]
    pp_inv[3] <= _pp_inv_3_T_4 @[pp_generator.scala 43:19]
    node _E_inv_3_T = bits(inputCtrl.Set0, 3, 3) @[pp_generator.scala 44:40]
    node _E_inv_3_T_1 = bits(_E_inv_3_T, 0, 0) @[pp_generator.scala 44:44]
    node _E_inv_3_T_2 = bits(inputCtrl.inv, 3, 3) @[pp_generator.scala 44:65]
    node _E_inv_3_T_3 = bits(_E_inv_3_T_2, 0, 0) @[pp_generator.scala 44:69]
    node _E_inv_3_T_4 = bits(inputCtrl.inv, 3, 3) @[pp_generator.scala 44:91]
    node _E_inv_3_T_5 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 44:117]
    node _E_inv_3_T_6 = xor(_E_inv_3_T_4, _E_inv_3_T_5) @[pp_generator.scala 44:94]
    node _E_inv_3_T_7 = bits(_E_inv_3_T_6, 0, 0) @[pp_generator.scala 44:131]
    node _E_inv_3_T_8 = mux(_E_inv_3_T_1, _E_inv_3_T_3, _E_inv_3_T_7) @[pp_generator.scala 44:25]
    E_inv[3] <= _E_inv_3_T_8 @[pp_generator.scala 44:19]
    node _E_3_T = not(E_inv[3]) @[pp_generator.scala 45:22]
    E[3] <= _E_3_T @[pp_generator.scala 45:19]
    node pp_temp_3_lo_lo = asUInt(pp_inv[3]) @[Cat.scala 33:92]
    node pp_temp_3_lo = cat(E[3], pp_temp_3_lo_lo) @[Cat.scala 33:92]
    node pp_temp_3_hi = cat(UInt<5>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
    node _pp_temp_3_T = cat(pp_temp_3_hi, pp_temp_3_lo) @[Cat.scala 33:92]
    node _pp_temp_3_T_1 = asSInt(_pp_temp_3_T) @[pp_generator.scala 55:94]
    pp_temp[3] <= _pp_temp_3_T_1 @[pp_generator.scala 55:24]
    pp[0] <= pp_temp[0] @[pp_generator.scala 61:19]
    node _pp_1_T = bits(pp_temp[1], 13, 0) @[pp_generator.scala 63:36]
    node _pp_1_T_1 = bits(inputCtrl.inv, 0, 0) @[pp_generator.scala 63:78]
    node pp_1_hi = cat(_pp_1_T, UInt<1>("h0")) @[Cat.scala 33:92]
    node _pp_1_T_2 = cat(pp_1_hi, _pp_1_T_1) @[Cat.scala 33:92]
    node _pp_1_T_3 = asSInt(_pp_1_T_2) @[pp_generator.scala 63:85]
    pp[1] <= _pp_1_T_3 @[pp_generator.scala 63:19]
    node _pp_2_T = bits(pp_temp[2], 11, 0) @[pp_generator.scala 65:36]
    node _pp_2_T_1 = bits(inputCtrl.inv, 1, 1) @[pp_generator.scala 65:78]
    node pp_2_lo = cat(_pp_2_T_1, UInt<2>("h0")) @[Cat.scala 33:92]
    node pp_2_hi = cat(_pp_2_T, UInt<1>("h0")) @[Cat.scala 33:92]
    node _pp_2_T_2 = cat(pp_2_hi, pp_2_lo) @[Cat.scala 33:92]
    node _pp_2_T_3 = asSInt(_pp_2_T_2) @[pp_generator.scala 65:103]
    pp[2] <= _pp_2_T_3 @[pp_generator.scala 65:19]
    node _pp_3_T = bits(pp_temp[3], 9, 0) @[pp_generator.scala 65:36]
    node _pp_3_T_1 = bits(inputCtrl.inv, 2, 2) @[pp_generator.scala 65:78]
    node pp_3_lo = cat(_pp_3_T_1, UInt<4>("h0")) @[Cat.scala 33:92]
    node pp_3_hi = cat(_pp_3_T, UInt<1>("h0")) @[Cat.scala 33:92]
    node _pp_3_T_2 = cat(pp_3_hi, pp_3_lo) @[Cat.scala 33:92]
    node _pp_3_T_3 = asSInt(_pp_3_T_2) @[pp_generator.scala 65:103]
    pp[3] <= _pp_3_T_3 @[pp_generator.scala 65:19]
    node _sign_com_T = bits(inputCtrl.inv, 3, 3) @[pp_generator.scala 68:54]
    node sign_com_hi = cat(UInt<9>("h0"), _sign_com_T) @[Cat.scala 33:92]
    node _sign_com_T_1 = cat(sign_com_hi, UInt<6>("h0")) @[Cat.scala 33:92]
    node _sign_com_T_2 = asSInt(_sign_com_T_1) @[pp_generator.scala 68:97]
    sign_com <= _sign_com_T_2 @[pp_generator.scala 68:14]
    outputData.pp_out <= pp @[pp_generator.scala 70:25]
    outputData.sig_out <= sign_com @[pp_generator.scala 71:25]

  module RCA_4 :
    input clock : Clock
    input reset : Reset
    output input : { flip a_in : SInt<16>, flip b_in : SInt<16>, flip c_in : SInt<1>}
    output output : { S : SInt<16>, C : SInt<16>}

    wire g_comb : UInt<1>[16] @[rca.scala 22:22]
    wire p_comb : UInt<1>[16] @[rca.scala 23:22]
    wire s_comb : UInt<1>[16] @[rca.scala 24:22]
    wire c_comb : UInt<1>[17] @[rca.scala 25:22]
    node _c_comb_0_T = bits(input.c_in, 0, 0) @[rca.scala 27:29]
    c_comb[0] <= _c_comb_0_T @[rca.scala 27:15]
    node _g_comb_0_T = bits(input.a_in, 0, 0) @[rca.scala 30:35]
    node _g_comb_0_T_1 = bits(input.b_in, 0, 0) @[rca.scala 30:51]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[rca.scala 30:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[0] <= _g_comb_0_T_3 @[rca.scala 30:21]
    node _p_comb_0_T = bits(input.a_in, 0, 0) @[rca.scala 31:35]
    node _p_comb_0_T_1 = bits(input.b_in, 0, 0) @[rca.scala 31:51]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[rca.scala 31:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[0] <= _p_comb_0_T_3 @[rca.scala 31:21]
    node _s_comb_0_T = xor(p_comb[0], c_comb[0]) @[rca.scala 32:34]
    s_comb[0] <= _s_comb_0_T @[rca.scala 32:21]
    node _c_comb_1_T = and(c_comb[0], p_comb[0]) @[rca.scala 33:34]
    node _c_comb_1_T_1 = or(_c_comb_1_T, g_comb[0]) @[rca.scala 33:46]
    c_comb[1] <= _c_comb_1_T_1 @[rca.scala 33:21]
    node _g_comb_1_T = bits(input.a_in, 1, 1) @[rca.scala 30:35]
    node _g_comb_1_T_1 = bits(input.b_in, 1, 1) @[rca.scala 30:51]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[rca.scala 30:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[1] <= _g_comb_1_T_3 @[rca.scala 30:21]
    node _p_comb_1_T = bits(input.a_in, 1, 1) @[rca.scala 31:35]
    node _p_comb_1_T_1 = bits(input.b_in, 1, 1) @[rca.scala 31:51]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[rca.scala 31:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[1] <= _p_comb_1_T_3 @[rca.scala 31:21]
    node _s_comb_1_T = xor(p_comb[1], c_comb[1]) @[rca.scala 32:34]
    s_comb[1] <= _s_comb_1_T @[rca.scala 32:21]
    node _c_comb_2_T = and(c_comb[1], p_comb[1]) @[rca.scala 33:34]
    node _c_comb_2_T_1 = or(_c_comb_2_T, g_comb[1]) @[rca.scala 33:46]
    c_comb[2] <= _c_comb_2_T_1 @[rca.scala 33:21]
    node _g_comb_2_T = bits(input.a_in, 2, 2) @[rca.scala 30:35]
    node _g_comb_2_T_1 = bits(input.b_in, 2, 2) @[rca.scala 30:51]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[rca.scala 30:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[2] <= _g_comb_2_T_3 @[rca.scala 30:21]
    node _p_comb_2_T = bits(input.a_in, 2, 2) @[rca.scala 31:35]
    node _p_comb_2_T_1 = bits(input.b_in, 2, 2) @[rca.scala 31:51]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[rca.scala 31:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[2] <= _p_comb_2_T_3 @[rca.scala 31:21]
    node _s_comb_2_T = xor(p_comb[2], c_comb[2]) @[rca.scala 32:34]
    s_comb[2] <= _s_comb_2_T @[rca.scala 32:21]
    node _c_comb_3_T = and(c_comb[2], p_comb[2]) @[rca.scala 33:34]
    node _c_comb_3_T_1 = or(_c_comb_3_T, g_comb[2]) @[rca.scala 33:46]
    c_comb[3] <= _c_comb_3_T_1 @[rca.scala 33:21]
    node _g_comb_3_T = bits(input.a_in, 3, 3) @[rca.scala 30:35]
    node _g_comb_3_T_1 = bits(input.b_in, 3, 3) @[rca.scala 30:51]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[rca.scala 30:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[3] <= _g_comb_3_T_3 @[rca.scala 30:21]
    node _p_comb_3_T = bits(input.a_in, 3, 3) @[rca.scala 31:35]
    node _p_comb_3_T_1 = bits(input.b_in, 3, 3) @[rca.scala 31:51]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[rca.scala 31:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[3] <= _p_comb_3_T_3 @[rca.scala 31:21]
    node _s_comb_3_T = xor(p_comb[3], c_comb[3]) @[rca.scala 32:34]
    s_comb[3] <= _s_comb_3_T @[rca.scala 32:21]
    node _c_comb_4_T = and(c_comb[3], p_comb[3]) @[rca.scala 33:34]
    node _c_comb_4_T_1 = or(_c_comb_4_T, g_comb[3]) @[rca.scala 33:46]
    c_comb[4] <= _c_comb_4_T_1 @[rca.scala 33:21]
    node _g_comb_4_T = bits(input.a_in, 4, 4) @[rca.scala 30:35]
    node _g_comb_4_T_1 = bits(input.b_in, 4, 4) @[rca.scala 30:51]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[rca.scala 30:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[4] <= _g_comb_4_T_3 @[rca.scala 30:21]
    node _p_comb_4_T = bits(input.a_in, 4, 4) @[rca.scala 31:35]
    node _p_comb_4_T_1 = bits(input.b_in, 4, 4) @[rca.scala 31:51]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[rca.scala 31:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[4] <= _p_comb_4_T_3 @[rca.scala 31:21]
    node _s_comb_4_T = xor(p_comb[4], c_comb[4]) @[rca.scala 32:34]
    s_comb[4] <= _s_comb_4_T @[rca.scala 32:21]
    node _c_comb_5_T = and(c_comb[4], p_comb[4]) @[rca.scala 33:34]
    node _c_comb_5_T_1 = or(_c_comb_5_T, g_comb[4]) @[rca.scala 33:46]
    c_comb[5] <= _c_comb_5_T_1 @[rca.scala 33:21]
    node _g_comb_5_T = bits(input.a_in, 5, 5) @[rca.scala 30:35]
    node _g_comb_5_T_1 = bits(input.b_in, 5, 5) @[rca.scala 30:51]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[rca.scala 30:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[5] <= _g_comb_5_T_3 @[rca.scala 30:21]
    node _p_comb_5_T = bits(input.a_in, 5, 5) @[rca.scala 31:35]
    node _p_comb_5_T_1 = bits(input.b_in, 5, 5) @[rca.scala 31:51]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[rca.scala 31:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[5] <= _p_comb_5_T_3 @[rca.scala 31:21]
    node _s_comb_5_T = xor(p_comb[5], c_comb[5]) @[rca.scala 32:34]
    s_comb[5] <= _s_comb_5_T @[rca.scala 32:21]
    node _c_comb_6_T = and(c_comb[5], p_comb[5]) @[rca.scala 33:34]
    node _c_comb_6_T_1 = or(_c_comb_6_T, g_comb[5]) @[rca.scala 33:46]
    c_comb[6] <= _c_comb_6_T_1 @[rca.scala 33:21]
    node _g_comb_6_T = bits(input.a_in, 6, 6) @[rca.scala 30:35]
    node _g_comb_6_T_1 = bits(input.b_in, 6, 6) @[rca.scala 30:51]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[rca.scala 30:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[6] <= _g_comb_6_T_3 @[rca.scala 30:21]
    node _p_comb_6_T = bits(input.a_in, 6, 6) @[rca.scala 31:35]
    node _p_comb_6_T_1 = bits(input.b_in, 6, 6) @[rca.scala 31:51]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[rca.scala 31:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[6] <= _p_comb_6_T_3 @[rca.scala 31:21]
    node _s_comb_6_T = xor(p_comb[6], c_comb[6]) @[rca.scala 32:34]
    s_comb[6] <= _s_comb_6_T @[rca.scala 32:21]
    node _c_comb_7_T = and(c_comb[6], p_comb[6]) @[rca.scala 33:34]
    node _c_comb_7_T_1 = or(_c_comb_7_T, g_comb[6]) @[rca.scala 33:46]
    c_comb[7] <= _c_comb_7_T_1 @[rca.scala 33:21]
    node _g_comb_7_T = bits(input.a_in, 7, 7) @[rca.scala 30:35]
    node _g_comb_7_T_1 = bits(input.b_in, 7, 7) @[rca.scala 30:51]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[rca.scala 30:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[7] <= _g_comb_7_T_3 @[rca.scala 30:21]
    node _p_comb_7_T = bits(input.a_in, 7, 7) @[rca.scala 31:35]
    node _p_comb_7_T_1 = bits(input.b_in, 7, 7) @[rca.scala 31:51]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[rca.scala 31:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[7] <= _p_comb_7_T_3 @[rca.scala 31:21]
    node _s_comb_7_T = xor(p_comb[7], c_comb[7]) @[rca.scala 32:34]
    s_comb[7] <= _s_comb_7_T @[rca.scala 32:21]
    node _c_comb_8_T = and(c_comb[7], p_comb[7]) @[rca.scala 33:34]
    node _c_comb_8_T_1 = or(_c_comb_8_T, g_comb[7]) @[rca.scala 33:46]
    c_comb[8] <= _c_comb_8_T_1 @[rca.scala 33:21]
    node _g_comb_8_T = bits(input.a_in, 8, 8) @[rca.scala 30:35]
    node _g_comb_8_T_1 = bits(input.b_in, 8, 8) @[rca.scala 30:51]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[rca.scala 30:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[8] <= _g_comb_8_T_3 @[rca.scala 30:21]
    node _p_comb_8_T = bits(input.a_in, 8, 8) @[rca.scala 31:35]
    node _p_comb_8_T_1 = bits(input.b_in, 8, 8) @[rca.scala 31:51]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[rca.scala 31:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[8] <= _p_comb_8_T_3 @[rca.scala 31:21]
    node _s_comb_8_T = xor(p_comb[8], c_comb[8]) @[rca.scala 32:34]
    s_comb[8] <= _s_comb_8_T @[rca.scala 32:21]
    node _c_comb_9_T = and(c_comb[8], p_comb[8]) @[rca.scala 33:34]
    node _c_comb_9_T_1 = or(_c_comb_9_T, g_comb[8]) @[rca.scala 33:46]
    c_comb[9] <= _c_comb_9_T_1 @[rca.scala 33:21]
    node _g_comb_9_T = bits(input.a_in, 9, 9) @[rca.scala 30:35]
    node _g_comb_9_T_1 = bits(input.b_in, 9, 9) @[rca.scala 30:51]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[rca.scala 30:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[9] <= _g_comb_9_T_3 @[rca.scala 30:21]
    node _p_comb_9_T = bits(input.a_in, 9, 9) @[rca.scala 31:35]
    node _p_comb_9_T_1 = bits(input.b_in, 9, 9) @[rca.scala 31:51]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[rca.scala 31:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[9] <= _p_comb_9_T_3 @[rca.scala 31:21]
    node _s_comb_9_T = xor(p_comb[9], c_comb[9]) @[rca.scala 32:34]
    s_comb[9] <= _s_comb_9_T @[rca.scala 32:21]
    node _c_comb_10_T = and(c_comb[9], p_comb[9]) @[rca.scala 33:34]
    node _c_comb_10_T_1 = or(_c_comb_10_T, g_comb[9]) @[rca.scala 33:46]
    c_comb[10] <= _c_comb_10_T_1 @[rca.scala 33:21]
    node _g_comb_10_T = bits(input.a_in, 10, 10) @[rca.scala 30:35]
    node _g_comb_10_T_1 = bits(input.b_in, 10, 10) @[rca.scala 30:51]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[rca.scala 30:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[10] <= _g_comb_10_T_3 @[rca.scala 30:21]
    node _p_comb_10_T = bits(input.a_in, 10, 10) @[rca.scala 31:35]
    node _p_comb_10_T_1 = bits(input.b_in, 10, 10) @[rca.scala 31:51]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[rca.scala 31:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[10] <= _p_comb_10_T_3 @[rca.scala 31:21]
    node _s_comb_10_T = xor(p_comb[10], c_comb[10]) @[rca.scala 32:34]
    s_comb[10] <= _s_comb_10_T @[rca.scala 32:21]
    node _c_comb_11_T = and(c_comb[10], p_comb[10]) @[rca.scala 33:34]
    node _c_comb_11_T_1 = or(_c_comb_11_T, g_comb[10]) @[rca.scala 33:46]
    c_comb[11] <= _c_comb_11_T_1 @[rca.scala 33:21]
    node _g_comb_11_T = bits(input.a_in, 11, 11) @[rca.scala 30:35]
    node _g_comb_11_T_1 = bits(input.b_in, 11, 11) @[rca.scala 30:51]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[rca.scala 30:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[11] <= _g_comb_11_T_3 @[rca.scala 30:21]
    node _p_comb_11_T = bits(input.a_in, 11, 11) @[rca.scala 31:35]
    node _p_comb_11_T_1 = bits(input.b_in, 11, 11) @[rca.scala 31:51]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[rca.scala 31:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[11] <= _p_comb_11_T_3 @[rca.scala 31:21]
    node _s_comb_11_T = xor(p_comb[11], c_comb[11]) @[rca.scala 32:34]
    s_comb[11] <= _s_comb_11_T @[rca.scala 32:21]
    node _c_comb_12_T = and(c_comb[11], p_comb[11]) @[rca.scala 33:34]
    node _c_comb_12_T_1 = or(_c_comb_12_T, g_comb[11]) @[rca.scala 33:46]
    c_comb[12] <= _c_comb_12_T_1 @[rca.scala 33:21]
    node _g_comb_12_T = bits(input.a_in, 12, 12) @[rca.scala 30:35]
    node _g_comb_12_T_1 = bits(input.b_in, 12, 12) @[rca.scala 30:51]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[rca.scala 30:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[12] <= _g_comb_12_T_3 @[rca.scala 30:21]
    node _p_comb_12_T = bits(input.a_in, 12, 12) @[rca.scala 31:35]
    node _p_comb_12_T_1 = bits(input.b_in, 12, 12) @[rca.scala 31:51]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[rca.scala 31:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[12] <= _p_comb_12_T_3 @[rca.scala 31:21]
    node _s_comb_12_T = xor(p_comb[12], c_comb[12]) @[rca.scala 32:34]
    s_comb[12] <= _s_comb_12_T @[rca.scala 32:21]
    node _c_comb_13_T = and(c_comb[12], p_comb[12]) @[rca.scala 33:34]
    node _c_comb_13_T_1 = or(_c_comb_13_T, g_comb[12]) @[rca.scala 33:46]
    c_comb[13] <= _c_comb_13_T_1 @[rca.scala 33:21]
    node _g_comb_13_T = bits(input.a_in, 13, 13) @[rca.scala 30:35]
    node _g_comb_13_T_1 = bits(input.b_in, 13, 13) @[rca.scala 30:51]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[rca.scala 30:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[13] <= _g_comb_13_T_3 @[rca.scala 30:21]
    node _p_comb_13_T = bits(input.a_in, 13, 13) @[rca.scala 31:35]
    node _p_comb_13_T_1 = bits(input.b_in, 13, 13) @[rca.scala 31:51]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[rca.scala 31:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[13] <= _p_comb_13_T_3 @[rca.scala 31:21]
    node _s_comb_13_T = xor(p_comb[13], c_comb[13]) @[rca.scala 32:34]
    s_comb[13] <= _s_comb_13_T @[rca.scala 32:21]
    node _c_comb_14_T = and(c_comb[13], p_comb[13]) @[rca.scala 33:34]
    node _c_comb_14_T_1 = or(_c_comb_14_T, g_comb[13]) @[rca.scala 33:46]
    c_comb[14] <= _c_comb_14_T_1 @[rca.scala 33:21]
    node _g_comb_14_T = bits(input.a_in, 14, 14) @[rca.scala 30:35]
    node _g_comb_14_T_1 = bits(input.b_in, 14, 14) @[rca.scala 30:51]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[rca.scala 30:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[14] <= _g_comb_14_T_3 @[rca.scala 30:21]
    node _p_comb_14_T = bits(input.a_in, 14, 14) @[rca.scala 31:35]
    node _p_comb_14_T_1 = bits(input.b_in, 14, 14) @[rca.scala 31:51]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[rca.scala 31:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[14] <= _p_comb_14_T_3 @[rca.scala 31:21]
    node _s_comb_14_T = xor(p_comb[14], c_comb[14]) @[rca.scala 32:34]
    s_comb[14] <= _s_comb_14_T @[rca.scala 32:21]
    node _c_comb_15_T = and(c_comb[14], p_comb[14]) @[rca.scala 33:34]
    node _c_comb_15_T_1 = or(_c_comb_15_T, g_comb[14]) @[rca.scala 33:46]
    c_comb[15] <= _c_comb_15_T_1 @[rca.scala 33:21]
    node _g_comb_15_T = bits(input.a_in, 15, 15) @[rca.scala 30:35]
    node _g_comb_15_T_1 = bits(input.b_in, 15, 15) @[rca.scala 30:51]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[rca.scala 30:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[15] <= _g_comb_15_T_3 @[rca.scala 30:21]
    node _p_comb_15_T = bits(input.a_in, 15, 15) @[rca.scala 31:35]
    node _p_comb_15_T_1 = bits(input.b_in, 15, 15) @[rca.scala 31:51]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[rca.scala 31:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[15] <= _p_comb_15_T_3 @[rca.scala 31:21]
    node _s_comb_15_T = xor(p_comb[15], c_comb[15]) @[rca.scala 32:34]
    s_comb[15] <= _s_comb_15_T @[rca.scala 32:21]
    node _c_comb_16_T = and(c_comb[15], p_comb[15]) @[rca.scala 33:34]
    node _c_comb_16_T_1 = or(_c_comb_16_T, g_comb[15]) @[rca.scala 33:46]
    c_comb[16] <= _c_comb_16_T_1 @[rca.scala 33:21]
    node output_S_lo_lo_lo = cat(s_comb[1], s_comb[0]) @[rca.scala 36:24]
    node output_S_lo_lo_hi = cat(s_comb[3], s_comb[2]) @[rca.scala 36:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[rca.scala 36:24]
    node output_S_lo_hi_lo = cat(s_comb[5], s_comb[4]) @[rca.scala 36:24]
    node output_S_lo_hi_hi = cat(s_comb[7], s_comb[6]) @[rca.scala 36:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[rca.scala 36:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[rca.scala 36:24]
    node output_S_hi_lo_lo = cat(s_comb[9], s_comb[8]) @[rca.scala 36:24]
    node output_S_hi_lo_hi = cat(s_comb[11], s_comb[10]) @[rca.scala 36:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[rca.scala 36:24]
    node output_S_hi_hi_lo = cat(s_comb[13], s_comb[12]) @[rca.scala 36:24]
    node output_S_hi_hi_hi = cat(s_comb[15], s_comb[14]) @[rca.scala 36:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[rca.scala 36:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[rca.scala 36:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[rca.scala 36:24]
    node _output_S_T_1 = asSInt(_output_S_T) @[rca.scala 36:31]
    output.S <= _output_S_T_1 @[rca.scala 36:14]
    node _output_C_T = asSInt(c_comb[16]) @[rca.scala 37:40]
    output.C <= _output_C_T @[rca.scala 37:14]

  module pp_compressor3_2_6 :
    input clock : Clock
    input reset : Reset
    output input : { flip pp0_in : SInt<16>, flip pp1_in : SInt<16>, flip pp2_in : SInt<16>}
    output output : { S : SInt<16>, C : SInt<16>}

    wire g_comb : UInt<1>[16] @[pp_compressor3_2.scala 22:22]
    wire p_comb : UInt<1>[16] @[pp_compressor3_2.scala 23:22]
    wire s_comb : UInt<1>[16] @[pp_compressor3_2.scala 24:22]
    wire c_comb : UInt<1>[16] @[pp_compressor3_2.scala 25:22]
    node _g_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 28:35]
    node _g_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 28:53]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[0] <= _g_comb_0_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 29:35]
    node _p_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 29:53]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[0] <= _p_comb_0_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 30:46]
    node _s_comb_0_T_1 = bits(_s_comb_0_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_0_T_2 = xor(p_comb[0], _s_comb_0_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[0] <= _s_comb_0_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 31:34]
    node _c_comb_0_T_1 = bits(_c_comb_0_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_0_T_2 = and(_c_comb_0_T_1, p_comb[0]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_0_T_3 = or(_c_comb_0_T_2, g_comb[0]) @[pp_compressor3_2.scala 31:57]
    c_comb[0] <= _c_comb_0_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 28:35]
    node _g_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 28:53]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[1] <= _g_comb_1_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 29:35]
    node _p_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 29:53]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[1] <= _p_comb_1_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 30:46]
    node _s_comb_1_T_1 = bits(_s_comb_1_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_1_T_2 = xor(p_comb[1], _s_comb_1_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[1] <= _s_comb_1_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 31:34]
    node _c_comb_1_T_1 = bits(_c_comb_1_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_1_T_2 = and(_c_comb_1_T_1, p_comb[1]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_1_T_3 = or(_c_comb_1_T_2, g_comb[1]) @[pp_compressor3_2.scala 31:57]
    c_comb[1] <= _c_comb_1_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 28:35]
    node _g_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 28:53]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[2] <= _g_comb_2_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 29:35]
    node _p_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 29:53]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[2] <= _p_comb_2_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 30:46]
    node _s_comb_2_T_1 = bits(_s_comb_2_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_2_T_2 = xor(p_comb[2], _s_comb_2_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[2] <= _s_comb_2_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 31:34]
    node _c_comb_2_T_1 = bits(_c_comb_2_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_2_T_2 = and(_c_comb_2_T_1, p_comb[2]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_2_T_3 = or(_c_comb_2_T_2, g_comb[2]) @[pp_compressor3_2.scala 31:57]
    c_comb[2] <= _c_comb_2_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 28:35]
    node _g_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 28:53]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[3] <= _g_comb_3_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 29:35]
    node _p_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 29:53]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[3] <= _p_comb_3_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 30:46]
    node _s_comb_3_T_1 = bits(_s_comb_3_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_3_T_2 = xor(p_comb[3], _s_comb_3_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[3] <= _s_comb_3_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 31:34]
    node _c_comb_3_T_1 = bits(_c_comb_3_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_3_T_2 = and(_c_comb_3_T_1, p_comb[3]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_3_T_3 = or(_c_comb_3_T_2, g_comb[3]) @[pp_compressor3_2.scala 31:57]
    c_comb[3] <= _c_comb_3_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 28:35]
    node _g_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 28:53]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[4] <= _g_comb_4_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 29:35]
    node _p_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 29:53]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[4] <= _p_comb_4_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 30:46]
    node _s_comb_4_T_1 = bits(_s_comb_4_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_4_T_2 = xor(p_comb[4], _s_comb_4_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[4] <= _s_comb_4_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 31:34]
    node _c_comb_4_T_1 = bits(_c_comb_4_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_4_T_2 = and(_c_comb_4_T_1, p_comb[4]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_4_T_3 = or(_c_comb_4_T_2, g_comb[4]) @[pp_compressor3_2.scala 31:57]
    c_comb[4] <= _c_comb_4_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 28:35]
    node _g_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 28:53]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[5] <= _g_comb_5_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 29:35]
    node _p_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 29:53]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[5] <= _p_comb_5_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 30:46]
    node _s_comb_5_T_1 = bits(_s_comb_5_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_5_T_2 = xor(p_comb[5], _s_comb_5_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[5] <= _s_comb_5_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 31:34]
    node _c_comb_5_T_1 = bits(_c_comb_5_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_5_T_2 = and(_c_comb_5_T_1, p_comb[5]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_5_T_3 = or(_c_comb_5_T_2, g_comb[5]) @[pp_compressor3_2.scala 31:57]
    c_comb[5] <= _c_comb_5_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 28:35]
    node _g_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 28:53]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[6] <= _g_comb_6_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 29:35]
    node _p_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 29:53]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[6] <= _p_comb_6_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 30:46]
    node _s_comb_6_T_1 = bits(_s_comb_6_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_6_T_2 = xor(p_comb[6], _s_comb_6_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[6] <= _s_comb_6_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 31:34]
    node _c_comb_6_T_1 = bits(_c_comb_6_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_6_T_2 = and(_c_comb_6_T_1, p_comb[6]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_6_T_3 = or(_c_comb_6_T_2, g_comb[6]) @[pp_compressor3_2.scala 31:57]
    c_comb[6] <= _c_comb_6_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 28:35]
    node _g_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 28:53]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[7] <= _g_comb_7_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 29:35]
    node _p_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 29:53]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[7] <= _p_comb_7_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 30:46]
    node _s_comb_7_T_1 = bits(_s_comb_7_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_7_T_2 = xor(p_comb[7], _s_comb_7_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[7] <= _s_comb_7_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 31:34]
    node _c_comb_7_T_1 = bits(_c_comb_7_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_7_T_2 = and(_c_comb_7_T_1, p_comb[7]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_7_T_3 = or(_c_comb_7_T_2, g_comb[7]) @[pp_compressor3_2.scala 31:57]
    c_comb[7] <= _c_comb_7_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 28:35]
    node _g_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 28:53]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[8] <= _g_comb_8_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 29:35]
    node _p_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 29:53]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[8] <= _p_comb_8_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 30:46]
    node _s_comb_8_T_1 = bits(_s_comb_8_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_8_T_2 = xor(p_comb[8], _s_comb_8_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[8] <= _s_comb_8_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 31:34]
    node _c_comb_8_T_1 = bits(_c_comb_8_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_8_T_2 = and(_c_comb_8_T_1, p_comb[8]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_8_T_3 = or(_c_comb_8_T_2, g_comb[8]) @[pp_compressor3_2.scala 31:57]
    c_comb[8] <= _c_comb_8_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 28:35]
    node _g_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 28:53]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[9] <= _g_comb_9_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 29:35]
    node _p_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 29:53]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[9] <= _p_comb_9_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 30:46]
    node _s_comb_9_T_1 = bits(_s_comb_9_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_9_T_2 = xor(p_comb[9], _s_comb_9_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[9] <= _s_comb_9_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 31:34]
    node _c_comb_9_T_1 = bits(_c_comb_9_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_9_T_2 = and(_c_comb_9_T_1, p_comb[9]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_9_T_3 = or(_c_comb_9_T_2, g_comb[9]) @[pp_compressor3_2.scala 31:57]
    c_comb[9] <= _c_comb_9_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 28:35]
    node _g_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 28:53]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[10] <= _g_comb_10_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 29:35]
    node _p_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 29:53]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[10] <= _p_comb_10_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 30:46]
    node _s_comb_10_T_1 = bits(_s_comb_10_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_10_T_2 = xor(p_comb[10], _s_comb_10_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[10] <= _s_comb_10_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 31:34]
    node _c_comb_10_T_1 = bits(_c_comb_10_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_10_T_2 = and(_c_comb_10_T_1, p_comb[10]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_10_T_3 = or(_c_comb_10_T_2, g_comb[10]) @[pp_compressor3_2.scala 31:57]
    c_comb[10] <= _c_comb_10_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 28:35]
    node _g_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 28:53]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[11] <= _g_comb_11_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 29:35]
    node _p_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 29:53]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[11] <= _p_comb_11_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 30:46]
    node _s_comb_11_T_1 = bits(_s_comb_11_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_11_T_2 = xor(p_comb[11], _s_comb_11_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[11] <= _s_comb_11_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 31:34]
    node _c_comb_11_T_1 = bits(_c_comb_11_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_11_T_2 = and(_c_comb_11_T_1, p_comb[11]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_11_T_3 = or(_c_comb_11_T_2, g_comb[11]) @[pp_compressor3_2.scala 31:57]
    c_comb[11] <= _c_comb_11_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 28:35]
    node _g_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 28:53]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[12] <= _g_comb_12_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 29:35]
    node _p_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 29:53]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[12] <= _p_comb_12_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 30:46]
    node _s_comb_12_T_1 = bits(_s_comb_12_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_12_T_2 = xor(p_comb[12], _s_comb_12_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[12] <= _s_comb_12_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 31:34]
    node _c_comb_12_T_1 = bits(_c_comb_12_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_12_T_2 = and(_c_comb_12_T_1, p_comb[12]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_12_T_3 = or(_c_comb_12_T_2, g_comb[12]) @[pp_compressor3_2.scala 31:57]
    c_comb[12] <= _c_comb_12_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 28:35]
    node _g_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 28:53]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[13] <= _g_comb_13_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 29:35]
    node _p_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 29:53]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[13] <= _p_comb_13_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 30:46]
    node _s_comb_13_T_1 = bits(_s_comb_13_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_13_T_2 = xor(p_comb[13], _s_comb_13_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[13] <= _s_comb_13_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 31:34]
    node _c_comb_13_T_1 = bits(_c_comb_13_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_13_T_2 = and(_c_comb_13_T_1, p_comb[13]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_13_T_3 = or(_c_comb_13_T_2, g_comb[13]) @[pp_compressor3_2.scala 31:57]
    c_comb[13] <= _c_comb_13_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 28:35]
    node _g_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 28:53]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[14] <= _g_comb_14_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 29:35]
    node _p_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 29:53]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[14] <= _p_comb_14_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 30:46]
    node _s_comb_14_T_1 = bits(_s_comb_14_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_14_T_2 = xor(p_comb[14], _s_comb_14_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[14] <= _s_comb_14_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 31:34]
    node _c_comb_14_T_1 = bits(_c_comb_14_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_14_T_2 = and(_c_comb_14_T_1, p_comb[14]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_14_T_3 = or(_c_comb_14_T_2, g_comb[14]) @[pp_compressor3_2.scala 31:57]
    c_comb[14] <= _c_comb_14_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 28:35]
    node _g_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 28:53]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[15] <= _g_comb_15_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 29:35]
    node _p_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 29:53]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[15] <= _p_comb_15_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 30:46]
    node _s_comb_15_T_1 = bits(_s_comb_15_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_15_T_2 = xor(p_comb[15], _s_comb_15_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[15] <= _s_comb_15_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 31:34]
    node _c_comb_15_T_1 = bits(_c_comb_15_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_15_T_2 = and(_c_comb_15_T_1, p_comb[15]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_15_T_3 = or(_c_comb_15_T_2, g_comb[15]) @[pp_compressor3_2.scala 31:57]
    c_comb[15] <= _c_comb_15_T_3 @[pp_compressor3_2.scala 31:19]
    node output_S_lo_lo_lo = cat(s_comb[1], s_comb[0]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo_hi = cat(s_comb[3], s_comb[2]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_lo = cat(s_comb[5], s_comb[4]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_hi = cat(s_comb[7], s_comb[6]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_lo = cat(s_comb[9], s_comb[8]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_hi = cat(s_comb[11], s_comb[10]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_lo = cat(s_comb[13], s_comb[12]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_hi = cat(s_comb[15], s_comb[14]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T_1 = asSInt(_output_S_T) @[pp_compressor3_2.scala 34:31]
    output.S <= _output_S_T_1 @[pp_compressor3_2.scala 34:14]
    node output_C_lo_lo_lo = cat(c_comb[1], c_comb[0]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo_hi = cat(c_comb[3], c_comb[2]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo = cat(output_C_lo_lo_hi, output_C_lo_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_lo = cat(c_comb[5], c_comb[4]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_hi = cat(c_comb[7], c_comb[6]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi = cat(output_C_lo_hi_hi, output_C_lo_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo = cat(output_C_lo_hi, output_C_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_lo = cat(c_comb[9], c_comb[8]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_hi = cat(c_comb[11], c_comb[10]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo = cat(output_C_hi_lo_hi, output_C_hi_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_lo = cat(c_comb[13], c_comb[12]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_hi = cat(c_comb[15], c_comb[14]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi = cat(output_C_hi_hi_hi, output_C_hi_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi = cat(output_C_hi_hi, output_C_hi_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T = cat(output_C_hi, output_C_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T_1 = bits(_output_C_T, 14, 0) @[pp_compressor3_2.scala 35:36]
    node _output_C_T_2 = cat(_output_C_T_1, UInt<1>("h0")) @[Cat.scala 33:92]
    node _output_C_T_3 = asSInt(_output_C_T_2) @[pp_compressor3_2.scala 35:61]
    output.C <= _output_C_T_3 @[pp_compressor3_2.scala 35:14]

  module pp_compressor3_2_7 :
    input clock : Clock
    input reset : Reset
    output input : { flip pp0_in : SInt<16>, flip pp1_in : SInt<16>, flip pp2_in : SInt<16>}
    output output : { S : SInt<16>, C : SInt<16>}

    wire g_comb : UInt<1>[16] @[pp_compressor3_2.scala 22:22]
    wire p_comb : UInt<1>[16] @[pp_compressor3_2.scala 23:22]
    wire s_comb : UInt<1>[16] @[pp_compressor3_2.scala 24:22]
    wire c_comb : UInt<1>[16] @[pp_compressor3_2.scala 25:22]
    node _g_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 28:35]
    node _g_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 28:53]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[0] <= _g_comb_0_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 29:35]
    node _p_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 29:53]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[0] <= _p_comb_0_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 30:46]
    node _s_comb_0_T_1 = bits(_s_comb_0_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_0_T_2 = xor(p_comb[0], _s_comb_0_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[0] <= _s_comb_0_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 31:34]
    node _c_comb_0_T_1 = bits(_c_comb_0_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_0_T_2 = and(_c_comb_0_T_1, p_comb[0]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_0_T_3 = or(_c_comb_0_T_2, g_comb[0]) @[pp_compressor3_2.scala 31:57]
    c_comb[0] <= _c_comb_0_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 28:35]
    node _g_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 28:53]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[1] <= _g_comb_1_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 29:35]
    node _p_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 29:53]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[1] <= _p_comb_1_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 30:46]
    node _s_comb_1_T_1 = bits(_s_comb_1_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_1_T_2 = xor(p_comb[1], _s_comb_1_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[1] <= _s_comb_1_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 31:34]
    node _c_comb_1_T_1 = bits(_c_comb_1_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_1_T_2 = and(_c_comb_1_T_1, p_comb[1]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_1_T_3 = or(_c_comb_1_T_2, g_comb[1]) @[pp_compressor3_2.scala 31:57]
    c_comb[1] <= _c_comb_1_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 28:35]
    node _g_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 28:53]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[2] <= _g_comb_2_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 29:35]
    node _p_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 29:53]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[2] <= _p_comb_2_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 30:46]
    node _s_comb_2_T_1 = bits(_s_comb_2_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_2_T_2 = xor(p_comb[2], _s_comb_2_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[2] <= _s_comb_2_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 31:34]
    node _c_comb_2_T_1 = bits(_c_comb_2_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_2_T_2 = and(_c_comb_2_T_1, p_comb[2]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_2_T_3 = or(_c_comb_2_T_2, g_comb[2]) @[pp_compressor3_2.scala 31:57]
    c_comb[2] <= _c_comb_2_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 28:35]
    node _g_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 28:53]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[3] <= _g_comb_3_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 29:35]
    node _p_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 29:53]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[3] <= _p_comb_3_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 30:46]
    node _s_comb_3_T_1 = bits(_s_comb_3_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_3_T_2 = xor(p_comb[3], _s_comb_3_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[3] <= _s_comb_3_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 31:34]
    node _c_comb_3_T_1 = bits(_c_comb_3_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_3_T_2 = and(_c_comb_3_T_1, p_comb[3]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_3_T_3 = or(_c_comb_3_T_2, g_comb[3]) @[pp_compressor3_2.scala 31:57]
    c_comb[3] <= _c_comb_3_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 28:35]
    node _g_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 28:53]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[4] <= _g_comb_4_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 29:35]
    node _p_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 29:53]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[4] <= _p_comb_4_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 30:46]
    node _s_comb_4_T_1 = bits(_s_comb_4_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_4_T_2 = xor(p_comb[4], _s_comb_4_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[4] <= _s_comb_4_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 31:34]
    node _c_comb_4_T_1 = bits(_c_comb_4_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_4_T_2 = and(_c_comb_4_T_1, p_comb[4]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_4_T_3 = or(_c_comb_4_T_2, g_comb[4]) @[pp_compressor3_2.scala 31:57]
    c_comb[4] <= _c_comb_4_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 28:35]
    node _g_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 28:53]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[5] <= _g_comb_5_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 29:35]
    node _p_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 29:53]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[5] <= _p_comb_5_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 30:46]
    node _s_comb_5_T_1 = bits(_s_comb_5_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_5_T_2 = xor(p_comb[5], _s_comb_5_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[5] <= _s_comb_5_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 31:34]
    node _c_comb_5_T_1 = bits(_c_comb_5_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_5_T_2 = and(_c_comb_5_T_1, p_comb[5]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_5_T_3 = or(_c_comb_5_T_2, g_comb[5]) @[pp_compressor3_2.scala 31:57]
    c_comb[5] <= _c_comb_5_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 28:35]
    node _g_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 28:53]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[6] <= _g_comb_6_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 29:35]
    node _p_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 29:53]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[6] <= _p_comb_6_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 30:46]
    node _s_comb_6_T_1 = bits(_s_comb_6_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_6_T_2 = xor(p_comb[6], _s_comb_6_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[6] <= _s_comb_6_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 31:34]
    node _c_comb_6_T_1 = bits(_c_comb_6_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_6_T_2 = and(_c_comb_6_T_1, p_comb[6]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_6_T_3 = or(_c_comb_6_T_2, g_comb[6]) @[pp_compressor3_2.scala 31:57]
    c_comb[6] <= _c_comb_6_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 28:35]
    node _g_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 28:53]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[7] <= _g_comb_7_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 29:35]
    node _p_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 29:53]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[7] <= _p_comb_7_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 30:46]
    node _s_comb_7_T_1 = bits(_s_comb_7_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_7_T_2 = xor(p_comb[7], _s_comb_7_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[7] <= _s_comb_7_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 31:34]
    node _c_comb_7_T_1 = bits(_c_comb_7_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_7_T_2 = and(_c_comb_7_T_1, p_comb[7]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_7_T_3 = or(_c_comb_7_T_2, g_comb[7]) @[pp_compressor3_2.scala 31:57]
    c_comb[7] <= _c_comb_7_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 28:35]
    node _g_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 28:53]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[8] <= _g_comb_8_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 29:35]
    node _p_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 29:53]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[8] <= _p_comb_8_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 30:46]
    node _s_comb_8_T_1 = bits(_s_comb_8_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_8_T_2 = xor(p_comb[8], _s_comb_8_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[8] <= _s_comb_8_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 31:34]
    node _c_comb_8_T_1 = bits(_c_comb_8_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_8_T_2 = and(_c_comb_8_T_1, p_comb[8]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_8_T_3 = or(_c_comb_8_T_2, g_comb[8]) @[pp_compressor3_2.scala 31:57]
    c_comb[8] <= _c_comb_8_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 28:35]
    node _g_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 28:53]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[9] <= _g_comb_9_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 29:35]
    node _p_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 29:53]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[9] <= _p_comb_9_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 30:46]
    node _s_comb_9_T_1 = bits(_s_comb_9_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_9_T_2 = xor(p_comb[9], _s_comb_9_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[9] <= _s_comb_9_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 31:34]
    node _c_comb_9_T_1 = bits(_c_comb_9_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_9_T_2 = and(_c_comb_9_T_1, p_comb[9]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_9_T_3 = or(_c_comb_9_T_2, g_comb[9]) @[pp_compressor3_2.scala 31:57]
    c_comb[9] <= _c_comb_9_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 28:35]
    node _g_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 28:53]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[10] <= _g_comb_10_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 29:35]
    node _p_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 29:53]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[10] <= _p_comb_10_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 30:46]
    node _s_comb_10_T_1 = bits(_s_comb_10_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_10_T_2 = xor(p_comb[10], _s_comb_10_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[10] <= _s_comb_10_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 31:34]
    node _c_comb_10_T_1 = bits(_c_comb_10_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_10_T_2 = and(_c_comb_10_T_1, p_comb[10]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_10_T_3 = or(_c_comb_10_T_2, g_comb[10]) @[pp_compressor3_2.scala 31:57]
    c_comb[10] <= _c_comb_10_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 28:35]
    node _g_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 28:53]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[11] <= _g_comb_11_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 29:35]
    node _p_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 29:53]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[11] <= _p_comb_11_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 30:46]
    node _s_comb_11_T_1 = bits(_s_comb_11_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_11_T_2 = xor(p_comb[11], _s_comb_11_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[11] <= _s_comb_11_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 31:34]
    node _c_comb_11_T_1 = bits(_c_comb_11_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_11_T_2 = and(_c_comb_11_T_1, p_comb[11]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_11_T_3 = or(_c_comb_11_T_2, g_comb[11]) @[pp_compressor3_2.scala 31:57]
    c_comb[11] <= _c_comb_11_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 28:35]
    node _g_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 28:53]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[12] <= _g_comb_12_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 29:35]
    node _p_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 29:53]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[12] <= _p_comb_12_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 30:46]
    node _s_comb_12_T_1 = bits(_s_comb_12_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_12_T_2 = xor(p_comb[12], _s_comb_12_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[12] <= _s_comb_12_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 31:34]
    node _c_comb_12_T_1 = bits(_c_comb_12_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_12_T_2 = and(_c_comb_12_T_1, p_comb[12]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_12_T_3 = or(_c_comb_12_T_2, g_comb[12]) @[pp_compressor3_2.scala 31:57]
    c_comb[12] <= _c_comb_12_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 28:35]
    node _g_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 28:53]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[13] <= _g_comb_13_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 29:35]
    node _p_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 29:53]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[13] <= _p_comb_13_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 30:46]
    node _s_comb_13_T_1 = bits(_s_comb_13_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_13_T_2 = xor(p_comb[13], _s_comb_13_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[13] <= _s_comb_13_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 31:34]
    node _c_comb_13_T_1 = bits(_c_comb_13_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_13_T_2 = and(_c_comb_13_T_1, p_comb[13]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_13_T_3 = or(_c_comb_13_T_2, g_comb[13]) @[pp_compressor3_2.scala 31:57]
    c_comb[13] <= _c_comb_13_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 28:35]
    node _g_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 28:53]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[14] <= _g_comb_14_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 29:35]
    node _p_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 29:53]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[14] <= _p_comb_14_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 30:46]
    node _s_comb_14_T_1 = bits(_s_comb_14_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_14_T_2 = xor(p_comb[14], _s_comb_14_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[14] <= _s_comb_14_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 31:34]
    node _c_comb_14_T_1 = bits(_c_comb_14_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_14_T_2 = and(_c_comb_14_T_1, p_comb[14]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_14_T_3 = or(_c_comb_14_T_2, g_comb[14]) @[pp_compressor3_2.scala 31:57]
    c_comb[14] <= _c_comb_14_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 28:35]
    node _g_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 28:53]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[15] <= _g_comb_15_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 29:35]
    node _p_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 29:53]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[15] <= _p_comb_15_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 30:46]
    node _s_comb_15_T_1 = bits(_s_comb_15_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_15_T_2 = xor(p_comb[15], _s_comb_15_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[15] <= _s_comb_15_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 31:34]
    node _c_comb_15_T_1 = bits(_c_comb_15_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_15_T_2 = and(_c_comb_15_T_1, p_comb[15]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_15_T_3 = or(_c_comb_15_T_2, g_comb[15]) @[pp_compressor3_2.scala 31:57]
    c_comb[15] <= _c_comb_15_T_3 @[pp_compressor3_2.scala 31:19]
    node output_S_lo_lo_lo = cat(s_comb[1], s_comb[0]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo_hi = cat(s_comb[3], s_comb[2]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_lo = cat(s_comb[5], s_comb[4]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_hi = cat(s_comb[7], s_comb[6]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_lo = cat(s_comb[9], s_comb[8]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_hi = cat(s_comb[11], s_comb[10]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_lo = cat(s_comb[13], s_comb[12]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_hi = cat(s_comb[15], s_comb[14]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T_1 = asSInt(_output_S_T) @[pp_compressor3_2.scala 34:31]
    output.S <= _output_S_T_1 @[pp_compressor3_2.scala 34:14]
    node output_C_lo_lo_lo = cat(c_comb[1], c_comb[0]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo_hi = cat(c_comb[3], c_comb[2]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo = cat(output_C_lo_lo_hi, output_C_lo_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_lo = cat(c_comb[5], c_comb[4]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_hi = cat(c_comb[7], c_comb[6]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi = cat(output_C_lo_hi_hi, output_C_lo_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo = cat(output_C_lo_hi, output_C_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_lo = cat(c_comb[9], c_comb[8]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_hi = cat(c_comb[11], c_comb[10]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo = cat(output_C_hi_lo_hi, output_C_hi_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_lo = cat(c_comb[13], c_comb[12]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_hi = cat(c_comb[15], c_comb[14]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi = cat(output_C_hi_hi_hi, output_C_hi_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi = cat(output_C_hi_hi, output_C_hi_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T = cat(output_C_hi, output_C_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T_1 = bits(_output_C_T, 14, 0) @[pp_compressor3_2.scala 35:36]
    node _output_C_T_2 = cat(_output_C_T_1, UInt<1>("h0")) @[Cat.scala 33:92]
    node _output_C_T_3 = asSInt(_output_C_T_2) @[pp_compressor3_2.scala 35:61]
    output.C <= _output_C_T_3 @[pp_compressor3_2.scala 35:14]

  module pp_compressor3_2_8 :
    input clock : Clock
    input reset : Reset
    output input : { flip pp0_in : SInt<16>, flip pp1_in : SInt<16>, flip pp2_in : SInt<16>}
    output output : { S : SInt<16>, C : SInt<16>}

    wire g_comb : UInt<1>[16] @[pp_compressor3_2.scala 22:22]
    wire p_comb : UInt<1>[16] @[pp_compressor3_2.scala 23:22]
    wire s_comb : UInt<1>[16] @[pp_compressor3_2.scala 24:22]
    wire c_comb : UInt<1>[16] @[pp_compressor3_2.scala 25:22]
    node _g_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 28:35]
    node _g_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 28:53]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[0] <= _g_comb_0_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 29:35]
    node _p_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 29:53]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[0] <= _p_comb_0_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 30:46]
    node _s_comb_0_T_1 = bits(_s_comb_0_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_0_T_2 = xor(p_comb[0], _s_comb_0_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[0] <= _s_comb_0_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 31:34]
    node _c_comb_0_T_1 = bits(_c_comb_0_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_0_T_2 = and(_c_comb_0_T_1, p_comb[0]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_0_T_3 = or(_c_comb_0_T_2, g_comb[0]) @[pp_compressor3_2.scala 31:57]
    c_comb[0] <= _c_comb_0_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 28:35]
    node _g_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 28:53]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[1] <= _g_comb_1_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 29:35]
    node _p_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 29:53]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[1] <= _p_comb_1_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 30:46]
    node _s_comb_1_T_1 = bits(_s_comb_1_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_1_T_2 = xor(p_comb[1], _s_comb_1_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[1] <= _s_comb_1_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 31:34]
    node _c_comb_1_T_1 = bits(_c_comb_1_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_1_T_2 = and(_c_comb_1_T_1, p_comb[1]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_1_T_3 = or(_c_comb_1_T_2, g_comb[1]) @[pp_compressor3_2.scala 31:57]
    c_comb[1] <= _c_comb_1_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 28:35]
    node _g_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 28:53]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[2] <= _g_comb_2_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 29:35]
    node _p_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 29:53]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[2] <= _p_comb_2_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 30:46]
    node _s_comb_2_T_1 = bits(_s_comb_2_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_2_T_2 = xor(p_comb[2], _s_comb_2_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[2] <= _s_comb_2_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 31:34]
    node _c_comb_2_T_1 = bits(_c_comb_2_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_2_T_2 = and(_c_comb_2_T_1, p_comb[2]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_2_T_3 = or(_c_comb_2_T_2, g_comb[2]) @[pp_compressor3_2.scala 31:57]
    c_comb[2] <= _c_comb_2_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 28:35]
    node _g_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 28:53]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[3] <= _g_comb_3_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 29:35]
    node _p_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 29:53]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[3] <= _p_comb_3_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 30:46]
    node _s_comb_3_T_1 = bits(_s_comb_3_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_3_T_2 = xor(p_comb[3], _s_comb_3_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[3] <= _s_comb_3_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 31:34]
    node _c_comb_3_T_1 = bits(_c_comb_3_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_3_T_2 = and(_c_comb_3_T_1, p_comb[3]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_3_T_3 = or(_c_comb_3_T_2, g_comb[3]) @[pp_compressor3_2.scala 31:57]
    c_comb[3] <= _c_comb_3_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 28:35]
    node _g_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 28:53]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[4] <= _g_comb_4_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 29:35]
    node _p_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 29:53]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[4] <= _p_comb_4_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 30:46]
    node _s_comb_4_T_1 = bits(_s_comb_4_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_4_T_2 = xor(p_comb[4], _s_comb_4_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[4] <= _s_comb_4_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 31:34]
    node _c_comb_4_T_1 = bits(_c_comb_4_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_4_T_2 = and(_c_comb_4_T_1, p_comb[4]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_4_T_3 = or(_c_comb_4_T_2, g_comb[4]) @[pp_compressor3_2.scala 31:57]
    c_comb[4] <= _c_comb_4_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 28:35]
    node _g_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 28:53]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[5] <= _g_comb_5_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 29:35]
    node _p_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 29:53]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[5] <= _p_comb_5_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 30:46]
    node _s_comb_5_T_1 = bits(_s_comb_5_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_5_T_2 = xor(p_comb[5], _s_comb_5_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[5] <= _s_comb_5_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 31:34]
    node _c_comb_5_T_1 = bits(_c_comb_5_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_5_T_2 = and(_c_comb_5_T_1, p_comb[5]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_5_T_3 = or(_c_comb_5_T_2, g_comb[5]) @[pp_compressor3_2.scala 31:57]
    c_comb[5] <= _c_comb_5_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 28:35]
    node _g_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 28:53]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[6] <= _g_comb_6_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 29:35]
    node _p_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 29:53]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[6] <= _p_comb_6_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 30:46]
    node _s_comb_6_T_1 = bits(_s_comb_6_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_6_T_2 = xor(p_comb[6], _s_comb_6_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[6] <= _s_comb_6_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 31:34]
    node _c_comb_6_T_1 = bits(_c_comb_6_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_6_T_2 = and(_c_comb_6_T_1, p_comb[6]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_6_T_3 = or(_c_comb_6_T_2, g_comb[6]) @[pp_compressor3_2.scala 31:57]
    c_comb[6] <= _c_comb_6_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 28:35]
    node _g_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 28:53]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[7] <= _g_comb_7_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 29:35]
    node _p_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 29:53]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[7] <= _p_comb_7_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 30:46]
    node _s_comb_7_T_1 = bits(_s_comb_7_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_7_T_2 = xor(p_comb[7], _s_comb_7_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[7] <= _s_comb_7_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 31:34]
    node _c_comb_7_T_1 = bits(_c_comb_7_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_7_T_2 = and(_c_comb_7_T_1, p_comb[7]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_7_T_3 = or(_c_comb_7_T_2, g_comb[7]) @[pp_compressor3_2.scala 31:57]
    c_comb[7] <= _c_comb_7_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 28:35]
    node _g_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 28:53]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[8] <= _g_comb_8_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 29:35]
    node _p_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 29:53]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[8] <= _p_comb_8_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 30:46]
    node _s_comb_8_T_1 = bits(_s_comb_8_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_8_T_2 = xor(p_comb[8], _s_comb_8_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[8] <= _s_comb_8_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 31:34]
    node _c_comb_8_T_1 = bits(_c_comb_8_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_8_T_2 = and(_c_comb_8_T_1, p_comb[8]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_8_T_3 = or(_c_comb_8_T_2, g_comb[8]) @[pp_compressor3_2.scala 31:57]
    c_comb[8] <= _c_comb_8_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 28:35]
    node _g_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 28:53]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[9] <= _g_comb_9_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 29:35]
    node _p_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 29:53]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[9] <= _p_comb_9_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 30:46]
    node _s_comb_9_T_1 = bits(_s_comb_9_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_9_T_2 = xor(p_comb[9], _s_comb_9_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[9] <= _s_comb_9_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 31:34]
    node _c_comb_9_T_1 = bits(_c_comb_9_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_9_T_2 = and(_c_comb_9_T_1, p_comb[9]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_9_T_3 = or(_c_comb_9_T_2, g_comb[9]) @[pp_compressor3_2.scala 31:57]
    c_comb[9] <= _c_comb_9_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 28:35]
    node _g_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 28:53]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[10] <= _g_comb_10_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 29:35]
    node _p_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 29:53]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[10] <= _p_comb_10_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 30:46]
    node _s_comb_10_T_1 = bits(_s_comb_10_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_10_T_2 = xor(p_comb[10], _s_comb_10_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[10] <= _s_comb_10_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 31:34]
    node _c_comb_10_T_1 = bits(_c_comb_10_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_10_T_2 = and(_c_comb_10_T_1, p_comb[10]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_10_T_3 = or(_c_comb_10_T_2, g_comb[10]) @[pp_compressor3_2.scala 31:57]
    c_comb[10] <= _c_comb_10_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 28:35]
    node _g_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 28:53]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[11] <= _g_comb_11_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 29:35]
    node _p_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 29:53]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[11] <= _p_comb_11_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 30:46]
    node _s_comb_11_T_1 = bits(_s_comb_11_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_11_T_2 = xor(p_comb[11], _s_comb_11_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[11] <= _s_comb_11_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 31:34]
    node _c_comb_11_T_1 = bits(_c_comb_11_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_11_T_2 = and(_c_comb_11_T_1, p_comb[11]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_11_T_3 = or(_c_comb_11_T_2, g_comb[11]) @[pp_compressor3_2.scala 31:57]
    c_comb[11] <= _c_comb_11_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 28:35]
    node _g_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 28:53]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[12] <= _g_comb_12_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 29:35]
    node _p_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 29:53]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[12] <= _p_comb_12_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 30:46]
    node _s_comb_12_T_1 = bits(_s_comb_12_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_12_T_2 = xor(p_comb[12], _s_comb_12_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[12] <= _s_comb_12_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 31:34]
    node _c_comb_12_T_1 = bits(_c_comb_12_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_12_T_2 = and(_c_comb_12_T_1, p_comb[12]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_12_T_3 = or(_c_comb_12_T_2, g_comb[12]) @[pp_compressor3_2.scala 31:57]
    c_comb[12] <= _c_comb_12_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 28:35]
    node _g_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 28:53]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[13] <= _g_comb_13_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 29:35]
    node _p_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 29:53]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[13] <= _p_comb_13_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 30:46]
    node _s_comb_13_T_1 = bits(_s_comb_13_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_13_T_2 = xor(p_comb[13], _s_comb_13_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[13] <= _s_comb_13_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 31:34]
    node _c_comb_13_T_1 = bits(_c_comb_13_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_13_T_2 = and(_c_comb_13_T_1, p_comb[13]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_13_T_3 = or(_c_comb_13_T_2, g_comb[13]) @[pp_compressor3_2.scala 31:57]
    c_comb[13] <= _c_comb_13_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 28:35]
    node _g_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 28:53]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[14] <= _g_comb_14_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 29:35]
    node _p_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 29:53]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[14] <= _p_comb_14_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 30:46]
    node _s_comb_14_T_1 = bits(_s_comb_14_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_14_T_2 = xor(p_comb[14], _s_comb_14_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[14] <= _s_comb_14_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 31:34]
    node _c_comb_14_T_1 = bits(_c_comb_14_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_14_T_2 = and(_c_comb_14_T_1, p_comb[14]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_14_T_3 = or(_c_comb_14_T_2, g_comb[14]) @[pp_compressor3_2.scala 31:57]
    c_comb[14] <= _c_comb_14_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 28:35]
    node _g_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 28:53]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[15] <= _g_comb_15_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 29:35]
    node _p_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 29:53]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[15] <= _p_comb_15_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 30:46]
    node _s_comb_15_T_1 = bits(_s_comb_15_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_15_T_2 = xor(p_comb[15], _s_comb_15_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[15] <= _s_comb_15_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 31:34]
    node _c_comb_15_T_1 = bits(_c_comb_15_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_15_T_2 = and(_c_comb_15_T_1, p_comb[15]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_15_T_3 = or(_c_comb_15_T_2, g_comb[15]) @[pp_compressor3_2.scala 31:57]
    c_comb[15] <= _c_comb_15_T_3 @[pp_compressor3_2.scala 31:19]
    node output_S_lo_lo_lo = cat(s_comb[1], s_comb[0]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo_hi = cat(s_comb[3], s_comb[2]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_lo = cat(s_comb[5], s_comb[4]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_hi = cat(s_comb[7], s_comb[6]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_lo = cat(s_comb[9], s_comb[8]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_hi = cat(s_comb[11], s_comb[10]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_lo = cat(s_comb[13], s_comb[12]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_hi = cat(s_comb[15], s_comb[14]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T_1 = asSInt(_output_S_T) @[pp_compressor3_2.scala 34:31]
    output.S <= _output_S_T_1 @[pp_compressor3_2.scala 34:14]
    node output_C_lo_lo_lo = cat(c_comb[1], c_comb[0]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo_hi = cat(c_comb[3], c_comb[2]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo = cat(output_C_lo_lo_hi, output_C_lo_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_lo = cat(c_comb[5], c_comb[4]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_hi = cat(c_comb[7], c_comb[6]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi = cat(output_C_lo_hi_hi, output_C_lo_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo = cat(output_C_lo_hi, output_C_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_lo = cat(c_comb[9], c_comb[8]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_hi = cat(c_comb[11], c_comb[10]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo = cat(output_C_hi_lo_hi, output_C_hi_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_lo = cat(c_comb[13], c_comb[12]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_hi = cat(c_comb[15], c_comb[14]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi = cat(output_C_hi_hi_hi, output_C_hi_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi = cat(output_C_hi_hi, output_C_hi_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T = cat(output_C_hi, output_C_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T_1 = bits(_output_C_T, 14, 0) @[pp_compressor3_2.scala 35:36]
    node _output_C_T_2 = cat(_output_C_T_1, UInt<1>("h0")) @[Cat.scala 33:92]
    node _output_C_T_3 = asSInt(_output_C_T_2) @[pp_compressor3_2.scala 35:61]
    output.C <= _output_C_T_3 @[pp_compressor3_2.scala 35:14]

  module wallaceTree_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip data_i : SInt<16>[5], data_o : SInt<16>}

    inst rca of RCA_4 @[wallace_tree.scala 13:19]
    rca.clock <= clock
    rca.reset <= reset
    wire _rca_in_WIRE : SInt<16>[2] @[wallace_tree.scala 52:32]
    _rca_in_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 52:32]
    _rca_in_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 52:32]
    wire rca_in : SInt<16>[2]
    rca_in <= _rca_in_WIRE
    wire _l1_csa_in_WIRE : SInt<16>[3] @[wallace_tree.scala 55:36]
    _l1_csa_in_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 55:36]
    _l1_csa_in_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 55:36]
    _l1_csa_in_WIRE[2] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 55:36]
    wire l1_csa_in : SInt<16>[3]
    l1_csa_in <= _l1_csa_in_WIRE
    wire _l1_csa_os_WIRE : SInt<16>[1] @[wallace_tree.scala 56:36]
    _l1_csa_os_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 56:36]
    wire l1_csa_os : SInt<16>[1]
    l1_csa_os <= _l1_csa_os_WIRE
    wire _l1_csa_oc_WIRE : SInt<16>[1] @[wallace_tree.scala 57:36]
    _l1_csa_oc_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 57:36]
    wire l1_csa_oc : SInt<16>[1]
    l1_csa_oc <= _l1_csa_oc_WIRE
    wire _l1_csa_out_WIRE : SInt<16>[4] @[wallace_tree.scala 58:36]
    _l1_csa_out_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 58:36]
    _l1_csa_out_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 58:36]
    _l1_csa_out_WIRE[2] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 58:36]
    _l1_csa_out_WIRE[3] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 58:36]
    wire l1_csa_out : SInt<16>[4]
    l1_csa_out <= _l1_csa_out_WIRE
    inst layer1CSA_0 of pp_compressor3_2_6 @[wallace_tree.scala 59:44]
    layer1CSA_0.clock <= clock
    layer1CSA_0.reset <= reset
    l1_csa_in[0] <= io.data_i[0] @[wallace_tree.scala 61:43]
    l1_csa_in[1] <= io.data_i[1] @[wallace_tree.scala 61:43]
    l1_csa_in[2] <= io.data_i[2] @[wallace_tree.scala 61:43]
    layer1CSA_0.input.pp0_in <= l1_csa_in[0] @[wallace_tree.scala 63:31]
    layer1CSA_0.input.pp1_in <= l1_csa_in[1] @[wallace_tree.scala 64:31]
    layer1CSA_0.input.pp2_in <= l1_csa_in[2] @[wallace_tree.scala 65:31]
    l1_csa_os[0] <= layer1CSA_0.output.S @[wallace_tree.scala 66:31]
    l1_csa_oc[0] <= layer1CSA_0.output.C @[wallace_tree.scala 67:31]
    l1_csa_out[0] <= l1_csa_os[0] @[wallace_tree.scala 68:33]
    l1_csa_out[1] <= l1_csa_oc[0] @[wallace_tree.scala 69:35]
    l1_csa_out[3] <= io.data_i[4] @[wallace_tree.scala 73:32]
    l1_csa_out[2] <= io.data_i[3] @[wallace_tree.scala 73:32]
    wire _l2_csa_in_WIRE : SInt<16>[3] @[wallace_tree.scala 81:37]
    _l2_csa_in_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 81:37]
    _l2_csa_in_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 81:37]
    _l2_csa_in_WIRE[2] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 81:37]
    wire l2_csa_in : SInt<16>[3]
    l2_csa_in <= _l2_csa_in_WIRE
    wire _l2_csa_os_WIRE : SInt<16>[1] @[wallace_tree.scala 82:37]
    _l2_csa_os_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 82:37]
    wire l2_csa_os : SInt<16>[1]
    l2_csa_os <= _l2_csa_os_WIRE
    wire _l2_csa_oc_WIRE : SInt<16>[1] @[wallace_tree.scala 83:37]
    _l2_csa_oc_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 83:37]
    wire l2_csa_oc : SInt<16>[1]
    l2_csa_oc <= _l2_csa_oc_WIRE
    wire _l2_csa_out_WIRE : SInt<16>[3] @[wallace_tree.scala 84:38]
    _l2_csa_out_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 84:38]
    _l2_csa_out_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 84:38]
    _l2_csa_out_WIRE[2] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 84:38]
    wire l2_csa_out : SInt<16>[3]
    l2_csa_out <= _l2_csa_out_WIRE
    inst layer2CSA_0 of pp_compressor3_2_7 @[wallace_tree.scala 85:46]
    layer2CSA_0.clock <= clock
    layer2CSA_0.reset <= reset
    l2_csa_in[0] <= l1_csa_out[0] @[wallace_tree.scala 87:46]
    l2_csa_in[1] <= l1_csa_out[1] @[wallace_tree.scala 87:46]
    l2_csa_in[2] <= l1_csa_out[2] @[wallace_tree.scala 87:46]
    layer2CSA_0.input.pp0_in <= l2_csa_in[0] @[wallace_tree.scala 89:33]
    layer2CSA_0.input.pp1_in <= l2_csa_in[1] @[wallace_tree.scala 90:33]
    layer2CSA_0.input.pp2_in <= l2_csa_in[2] @[wallace_tree.scala 91:33]
    l2_csa_os[0] <= layer2CSA_0.output.S @[wallace_tree.scala 92:33]
    l2_csa_oc[0] <= layer2CSA_0.output.C @[wallace_tree.scala 93:33]
    l2_csa_out[0] <= l2_csa_os[0] @[wallace_tree.scala 94:35]
    l2_csa_out[1] <= l2_csa_oc[0] @[wallace_tree.scala 95:37]
    l2_csa_out[2] <= l1_csa_out[3] @[wallace_tree.scala 99:34]
    wire _l3_csa_in_WIRE : SInt<16>[3] @[wallace_tree.scala 107:39]
    _l3_csa_in_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 107:39]
    _l3_csa_in_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 107:39]
    _l3_csa_in_WIRE[2] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 107:39]
    wire l3_csa_in : SInt<16>[3]
    l3_csa_in <= _l3_csa_in_WIRE
    wire _l3_csa_os_WIRE : SInt<16>[1] @[wallace_tree.scala 108:39]
    _l3_csa_os_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 108:39]
    wire l3_csa_os : SInt<16>[1]
    l3_csa_os <= _l3_csa_os_WIRE
    wire _l3_csa_oc_WIRE : SInt<16>[1] @[wallace_tree.scala 109:39]
    _l3_csa_oc_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 109:39]
    wire l3_csa_oc : SInt<16>[1]
    l3_csa_oc <= _l3_csa_oc_WIRE
    wire _l3_csa_out_WIRE : SInt<16>[2] @[wallace_tree.scala 110:40]
    _l3_csa_out_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 110:40]
    _l3_csa_out_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 110:40]
    wire l3_csa_out : SInt<16>[2]
    l3_csa_out <= _l3_csa_out_WIRE
    inst layer3CSA_0 of pp_compressor3_2_8 @[wallace_tree.scala 111:48]
    layer3CSA_0.clock <= clock
    layer3CSA_0.reset <= reset
    l3_csa_in[0] <= l2_csa_out[0] @[wallace_tree.scala 113:48]
    l3_csa_in[1] <= l2_csa_out[1] @[wallace_tree.scala 113:48]
    l3_csa_in[2] <= l2_csa_out[2] @[wallace_tree.scala 113:48]
    layer3CSA_0.input.pp0_in <= l3_csa_in[0] @[wallace_tree.scala 115:35]
    layer3CSA_0.input.pp1_in <= l3_csa_in[1] @[wallace_tree.scala 116:35]
    layer3CSA_0.input.pp2_in <= l3_csa_in[2] @[wallace_tree.scala 117:35]
    l3_csa_os[0] <= layer3CSA_0.output.S @[wallace_tree.scala 118:22]
    l3_csa_oc[0] <= layer3CSA_0.output.C @[wallace_tree.scala 119:22]
    l3_csa_out[0] <= l3_csa_os[0] @[wallace_tree.scala 120:27]
    l3_csa_out[1] <= l3_csa_oc[0] @[wallace_tree.scala 121:31]
    rca_in <= l3_csa_out @[wallace_tree.scala 129:16]
    rca.input.a_in <= rca_in[0] @[wallace_tree.scala 250:18]
    rca.input.b_in <= rca_in[1] @[wallace_tree.scala 251:18]
    rca.input.c_in <= asSInt(UInt<1>("h0")) @[wallace_tree.scala 252:18]
    io.data_o <= rca.output.S @[wallace_tree.scala 253:18]

  module Multiplier_2 :
    input clock : Clock
    input reset : Reset
    output input : { flip multiplicand : SInt<8>, flip multiplier : SInt<8>}
    output output : { product : SInt<16>}

    inst booth2_encoder of booth2Encoder_2 @[multiplier.scala 21:34]
    booth2_encoder.clock <= clock
    booth2_encoder.reset <= reset
    inst pp_generator of ppGenerator_2 @[multiplier.scala 22:34]
    pp_generator.clock <= clock
    pp_generator.reset <= reset
    inst wallace_tree of wallaceTree_2 @[multiplier.scala 23:34]
    wallace_tree.clock <= clock
    wallace_tree.reset <= reset
    booth2_encoder.input.multiplier <= input.multiplier @[multiplier.scala 25:37]
    pp_generator.inputData.multiplicand <= input.multiplicand @[multiplier.scala 27:41]
    pp_generator.inputCtrl.X2 <= booth2_encoder.output.X2 @[multiplier.scala 28:41]
    pp_generator.inputCtrl.inv <= booth2_encoder.output.inv @[multiplier.scala 29:41]
    pp_generator.inputCtrl.Set0 <= booth2_encoder.output.set0 @[multiplier.scala 30:41]
    wallace_tree.io.data_i[0] <= pp_generator.outputData.pp_out[0] @[multiplier.scala 33:35]
    wallace_tree.io.data_i[1] <= pp_generator.outputData.pp_out[1] @[multiplier.scala 33:35]
    wallace_tree.io.data_i[2] <= pp_generator.outputData.pp_out[2] @[multiplier.scala 33:35]
    wallace_tree.io.data_i[3] <= pp_generator.outputData.pp_out[3] @[multiplier.scala 33:35]
    wallace_tree.io.data_i[4] <= pp_generator.outputData.sig_out @[multiplier.scala 35:40]
    output.product <= wallace_tree.io.data_o @[multiplier.scala 37:41]

  module RCA_5 :
    input clock : Clock
    input reset : Reset
    output input : { flip a_in : SInt<32>, flip b_in : SInt<32>, flip c_in : SInt<1>}
    output output : { S : SInt<32>, C : SInt<32>}

    wire g_comb : UInt<1>[32] @[rca.scala 22:22]
    wire p_comb : UInt<1>[32] @[rca.scala 23:22]
    wire s_comb : UInt<1>[32] @[rca.scala 24:22]
    wire c_comb : UInt<1>[33] @[rca.scala 25:22]
    node _c_comb_0_T = bits(input.c_in, 0, 0) @[rca.scala 27:29]
    c_comb[0] <= _c_comb_0_T @[rca.scala 27:15]
    node _g_comb_0_T = bits(input.a_in, 0, 0) @[rca.scala 30:35]
    node _g_comb_0_T_1 = bits(input.b_in, 0, 0) @[rca.scala 30:51]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[rca.scala 30:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[0] <= _g_comb_0_T_3 @[rca.scala 30:21]
    node _p_comb_0_T = bits(input.a_in, 0, 0) @[rca.scala 31:35]
    node _p_comb_0_T_1 = bits(input.b_in, 0, 0) @[rca.scala 31:51]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[rca.scala 31:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[0] <= _p_comb_0_T_3 @[rca.scala 31:21]
    node _s_comb_0_T = xor(p_comb[0], c_comb[0]) @[rca.scala 32:34]
    s_comb[0] <= _s_comb_0_T @[rca.scala 32:21]
    node _c_comb_1_T = and(c_comb[0], p_comb[0]) @[rca.scala 33:34]
    node _c_comb_1_T_1 = or(_c_comb_1_T, g_comb[0]) @[rca.scala 33:46]
    c_comb[1] <= _c_comb_1_T_1 @[rca.scala 33:21]
    node _g_comb_1_T = bits(input.a_in, 1, 1) @[rca.scala 30:35]
    node _g_comb_1_T_1 = bits(input.b_in, 1, 1) @[rca.scala 30:51]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[rca.scala 30:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[1] <= _g_comb_1_T_3 @[rca.scala 30:21]
    node _p_comb_1_T = bits(input.a_in, 1, 1) @[rca.scala 31:35]
    node _p_comb_1_T_1 = bits(input.b_in, 1, 1) @[rca.scala 31:51]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[rca.scala 31:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[1] <= _p_comb_1_T_3 @[rca.scala 31:21]
    node _s_comb_1_T = xor(p_comb[1], c_comb[1]) @[rca.scala 32:34]
    s_comb[1] <= _s_comb_1_T @[rca.scala 32:21]
    node _c_comb_2_T = and(c_comb[1], p_comb[1]) @[rca.scala 33:34]
    node _c_comb_2_T_1 = or(_c_comb_2_T, g_comb[1]) @[rca.scala 33:46]
    c_comb[2] <= _c_comb_2_T_1 @[rca.scala 33:21]
    node _g_comb_2_T = bits(input.a_in, 2, 2) @[rca.scala 30:35]
    node _g_comb_2_T_1 = bits(input.b_in, 2, 2) @[rca.scala 30:51]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[rca.scala 30:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[2] <= _g_comb_2_T_3 @[rca.scala 30:21]
    node _p_comb_2_T = bits(input.a_in, 2, 2) @[rca.scala 31:35]
    node _p_comb_2_T_1 = bits(input.b_in, 2, 2) @[rca.scala 31:51]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[rca.scala 31:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[2] <= _p_comb_2_T_3 @[rca.scala 31:21]
    node _s_comb_2_T = xor(p_comb[2], c_comb[2]) @[rca.scala 32:34]
    s_comb[2] <= _s_comb_2_T @[rca.scala 32:21]
    node _c_comb_3_T = and(c_comb[2], p_comb[2]) @[rca.scala 33:34]
    node _c_comb_3_T_1 = or(_c_comb_3_T, g_comb[2]) @[rca.scala 33:46]
    c_comb[3] <= _c_comb_3_T_1 @[rca.scala 33:21]
    node _g_comb_3_T = bits(input.a_in, 3, 3) @[rca.scala 30:35]
    node _g_comb_3_T_1 = bits(input.b_in, 3, 3) @[rca.scala 30:51]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[rca.scala 30:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[3] <= _g_comb_3_T_3 @[rca.scala 30:21]
    node _p_comb_3_T = bits(input.a_in, 3, 3) @[rca.scala 31:35]
    node _p_comb_3_T_1 = bits(input.b_in, 3, 3) @[rca.scala 31:51]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[rca.scala 31:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[3] <= _p_comb_3_T_3 @[rca.scala 31:21]
    node _s_comb_3_T = xor(p_comb[3], c_comb[3]) @[rca.scala 32:34]
    s_comb[3] <= _s_comb_3_T @[rca.scala 32:21]
    node _c_comb_4_T = and(c_comb[3], p_comb[3]) @[rca.scala 33:34]
    node _c_comb_4_T_1 = or(_c_comb_4_T, g_comb[3]) @[rca.scala 33:46]
    c_comb[4] <= _c_comb_4_T_1 @[rca.scala 33:21]
    node _g_comb_4_T = bits(input.a_in, 4, 4) @[rca.scala 30:35]
    node _g_comb_4_T_1 = bits(input.b_in, 4, 4) @[rca.scala 30:51]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[rca.scala 30:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[4] <= _g_comb_4_T_3 @[rca.scala 30:21]
    node _p_comb_4_T = bits(input.a_in, 4, 4) @[rca.scala 31:35]
    node _p_comb_4_T_1 = bits(input.b_in, 4, 4) @[rca.scala 31:51]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[rca.scala 31:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[4] <= _p_comb_4_T_3 @[rca.scala 31:21]
    node _s_comb_4_T = xor(p_comb[4], c_comb[4]) @[rca.scala 32:34]
    s_comb[4] <= _s_comb_4_T @[rca.scala 32:21]
    node _c_comb_5_T = and(c_comb[4], p_comb[4]) @[rca.scala 33:34]
    node _c_comb_5_T_1 = or(_c_comb_5_T, g_comb[4]) @[rca.scala 33:46]
    c_comb[5] <= _c_comb_5_T_1 @[rca.scala 33:21]
    node _g_comb_5_T = bits(input.a_in, 5, 5) @[rca.scala 30:35]
    node _g_comb_5_T_1 = bits(input.b_in, 5, 5) @[rca.scala 30:51]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[rca.scala 30:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[5] <= _g_comb_5_T_3 @[rca.scala 30:21]
    node _p_comb_5_T = bits(input.a_in, 5, 5) @[rca.scala 31:35]
    node _p_comb_5_T_1 = bits(input.b_in, 5, 5) @[rca.scala 31:51]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[rca.scala 31:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[5] <= _p_comb_5_T_3 @[rca.scala 31:21]
    node _s_comb_5_T = xor(p_comb[5], c_comb[5]) @[rca.scala 32:34]
    s_comb[5] <= _s_comb_5_T @[rca.scala 32:21]
    node _c_comb_6_T = and(c_comb[5], p_comb[5]) @[rca.scala 33:34]
    node _c_comb_6_T_1 = or(_c_comb_6_T, g_comb[5]) @[rca.scala 33:46]
    c_comb[6] <= _c_comb_6_T_1 @[rca.scala 33:21]
    node _g_comb_6_T = bits(input.a_in, 6, 6) @[rca.scala 30:35]
    node _g_comb_6_T_1 = bits(input.b_in, 6, 6) @[rca.scala 30:51]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[rca.scala 30:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[6] <= _g_comb_6_T_3 @[rca.scala 30:21]
    node _p_comb_6_T = bits(input.a_in, 6, 6) @[rca.scala 31:35]
    node _p_comb_6_T_1 = bits(input.b_in, 6, 6) @[rca.scala 31:51]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[rca.scala 31:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[6] <= _p_comb_6_T_3 @[rca.scala 31:21]
    node _s_comb_6_T = xor(p_comb[6], c_comb[6]) @[rca.scala 32:34]
    s_comb[6] <= _s_comb_6_T @[rca.scala 32:21]
    node _c_comb_7_T = and(c_comb[6], p_comb[6]) @[rca.scala 33:34]
    node _c_comb_7_T_1 = or(_c_comb_7_T, g_comb[6]) @[rca.scala 33:46]
    c_comb[7] <= _c_comb_7_T_1 @[rca.scala 33:21]
    node _g_comb_7_T = bits(input.a_in, 7, 7) @[rca.scala 30:35]
    node _g_comb_7_T_1 = bits(input.b_in, 7, 7) @[rca.scala 30:51]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[rca.scala 30:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[7] <= _g_comb_7_T_3 @[rca.scala 30:21]
    node _p_comb_7_T = bits(input.a_in, 7, 7) @[rca.scala 31:35]
    node _p_comb_7_T_1 = bits(input.b_in, 7, 7) @[rca.scala 31:51]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[rca.scala 31:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[7] <= _p_comb_7_T_3 @[rca.scala 31:21]
    node _s_comb_7_T = xor(p_comb[7], c_comb[7]) @[rca.scala 32:34]
    s_comb[7] <= _s_comb_7_T @[rca.scala 32:21]
    node _c_comb_8_T = and(c_comb[7], p_comb[7]) @[rca.scala 33:34]
    node _c_comb_8_T_1 = or(_c_comb_8_T, g_comb[7]) @[rca.scala 33:46]
    c_comb[8] <= _c_comb_8_T_1 @[rca.scala 33:21]
    node _g_comb_8_T = bits(input.a_in, 8, 8) @[rca.scala 30:35]
    node _g_comb_8_T_1 = bits(input.b_in, 8, 8) @[rca.scala 30:51]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[rca.scala 30:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[8] <= _g_comb_8_T_3 @[rca.scala 30:21]
    node _p_comb_8_T = bits(input.a_in, 8, 8) @[rca.scala 31:35]
    node _p_comb_8_T_1 = bits(input.b_in, 8, 8) @[rca.scala 31:51]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[rca.scala 31:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[8] <= _p_comb_8_T_3 @[rca.scala 31:21]
    node _s_comb_8_T = xor(p_comb[8], c_comb[8]) @[rca.scala 32:34]
    s_comb[8] <= _s_comb_8_T @[rca.scala 32:21]
    node _c_comb_9_T = and(c_comb[8], p_comb[8]) @[rca.scala 33:34]
    node _c_comb_9_T_1 = or(_c_comb_9_T, g_comb[8]) @[rca.scala 33:46]
    c_comb[9] <= _c_comb_9_T_1 @[rca.scala 33:21]
    node _g_comb_9_T = bits(input.a_in, 9, 9) @[rca.scala 30:35]
    node _g_comb_9_T_1 = bits(input.b_in, 9, 9) @[rca.scala 30:51]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[rca.scala 30:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[9] <= _g_comb_9_T_3 @[rca.scala 30:21]
    node _p_comb_9_T = bits(input.a_in, 9, 9) @[rca.scala 31:35]
    node _p_comb_9_T_1 = bits(input.b_in, 9, 9) @[rca.scala 31:51]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[rca.scala 31:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[9] <= _p_comb_9_T_3 @[rca.scala 31:21]
    node _s_comb_9_T = xor(p_comb[9], c_comb[9]) @[rca.scala 32:34]
    s_comb[9] <= _s_comb_9_T @[rca.scala 32:21]
    node _c_comb_10_T = and(c_comb[9], p_comb[9]) @[rca.scala 33:34]
    node _c_comb_10_T_1 = or(_c_comb_10_T, g_comb[9]) @[rca.scala 33:46]
    c_comb[10] <= _c_comb_10_T_1 @[rca.scala 33:21]
    node _g_comb_10_T = bits(input.a_in, 10, 10) @[rca.scala 30:35]
    node _g_comb_10_T_1 = bits(input.b_in, 10, 10) @[rca.scala 30:51]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[rca.scala 30:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[10] <= _g_comb_10_T_3 @[rca.scala 30:21]
    node _p_comb_10_T = bits(input.a_in, 10, 10) @[rca.scala 31:35]
    node _p_comb_10_T_1 = bits(input.b_in, 10, 10) @[rca.scala 31:51]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[rca.scala 31:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[10] <= _p_comb_10_T_3 @[rca.scala 31:21]
    node _s_comb_10_T = xor(p_comb[10], c_comb[10]) @[rca.scala 32:34]
    s_comb[10] <= _s_comb_10_T @[rca.scala 32:21]
    node _c_comb_11_T = and(c_comb[10], p_comb[10]) @[rca.scala 33:34]
    node _c_comb_11_T_1 = or(_c_comb_11_T, g_comb[10]) @[rca.scala 33:46]
    c_comb[11] <= _c_comb_11_T_1 @[rca.scala 33:21]
    node _g_comb_11_T = bits(input.a_in, 11, 11) @[rca.scala 30:35]
    node _g_comb_11_T_1 = bits(input.b_in, 11, 11) @[rca.scala 30:51]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[rca.scala 30:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[11] <= _g_comb_11_T_3 @[rca.scala 30:21]
    node _p_comb_11_T = bits(input.a_in, 11, 11) @[rca.scala 31:35]
    node _p_comb_11_T_1 = bits(input.b_in, 11, 11) @[rca.scala 31:51]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[rca.scala 31:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[11] <= _p_comb_11_T_3 @[rca.scala 31:21]
    node _s_comb_11_T = xor(p_comb[11], c_comb[11]) @[rca.scala 32:34]
    s_comb[11] <= _s_comb_11_T @[rca.scala 32:21]
    node _c_comb_12_T = and(c_comb[11], p_comb[11]) @[rca.scala 33:34]
    node _c_comb_12_T_1 = or(_c_comb_12_T, g_comb[11]) @[rca.scala 33:46]
    c_comb[12] <= _c_comb_12_T_1 @[rca.scala 33:21]
    node _g_comb_12_T = bits(input.a_in, 12, 12) @[rca.scala 30:35]
    node _g_comb_12_T_1 = bits(input.b_in, 12, 12) @[rca.scala 30:51]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[rca.scala 30:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[12] <= _g_comb_12_T_3 @[rca.scala 30:21]
    node _p_comb_12_T = bits(input.a_in, 12, 12) @[rca.scala 31:35]
    node _p_comb_12_T_1 = bits(input.b_in, 12, 12) @[rca.scala 31:51]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[rca.scala 31:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[12] <= _p_comb_12_T_3 @[rca.scala 31:21]
    node _s_comb_12_T = xor(p_comb[12], c_comb[12]) @[rca.scala 32:34]
    s_comb[12] <= _s_comb_12_T @[rca.scala 32:21]
    node _c_comb_13_T = and(c_comb[12], p_comb[12]) @[rca.scala 33:34]
    node _c_comb_13_T_1 = or(_c_comb_13_T, g_comb[12]) @[rca.scala 33:46]
    c_comb[13] <= _c_comb_13_T_1 @[rca.scala 33:21]
    node _g_comb_13_T = bits(input.a_in, 13, 13) @[rca.scala 30:35]
    node _g_comb_13_T_1 = bits(input.b_in, 13, 13) @[rca.scala 30:51]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[rca.scala 30:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[13] <= _g_comb_13_T_3 @[rca.scala 30:21]
    node _p_comb_13_T = bits(input.a_in, 13, 13) @[rca.scala 31:35]
    node _p_comb_13_T_1 = bits(input.b_in, 13, 13) @[rca.scala 31:51]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[rca.scala 31:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[13] <= _p_comb_13_T_3 @[rca.scala 31:21]
    node _s_comb_13_T = xor(p_comb[13], c_comb[13]) @[rca.scala 32:34]
    s_comb[13] <= _s_comb_13_T @[rca.scala 32:21]
    node _c_comb_14_T = and(c_comb[13], p_comb[13]) @[rca.scala 33:34]
    node _c_comb_14_T_1 = or(_c_comb_14_T, g_comb[13]) @[rca.scala 33:46]
    c_comb[14] <= _c_comb_14_T_1 @[rca.scala 33:21]
    node _g_comb_14_T = bits(input.a_in, 14, 14) @[rca.scala 30:35]
    node _g_comb_14_T_1 = bits(input.b_in, 14, 14) @[rca.scala 30:51]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[rca.scala 30:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[14] <= _g_comb_14_T_3 @[rca.scala 30:21]
    node _p_comb_14_T = bits(input.a_in, 14, 14) @[rca.scala 31:35]
    node _p_comb_14_T_1 = bits(input.b_in, 14, 14) @[rca.scala 31:51]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[rca.scala 31:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[14] <= _p_comb_14_T_3 @[rca.scala 31:21]
    node _s_comb_14_T = xor(p_comb[14], c_comb[14]) @[rca.scala 32:34]
    s_comb[14] <= _s_comb_14_T @[rca.scala 32:21]
    node _c_comb_15_T = and(c_comb[14], p_comb[14]) @[rca.scala 33:34]
    node _c_comb_15_T_1 = or(_c_comb_15_T, g_comb[14]) @[rca.scala 33:46]
    c_comb[15] <= _c_comb_15_T_1 @[rca.scala 33:21]
    node _g_comb_15_T = bits(input.a_in, 15, 15) @[rca.scala 30:35]
    node _g_comb_15_T_1 = bits(input.b_in, 15, 15) @[rca.scala 30:51]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[rca.scala 30:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[15] <= _g_comb_15_T_3 @[rca.scala 30:21]
    node _p_comb_15_T = bits(input.a_in, 15, 15) @[rca.scala 31:35]
    node _p_comb_15_T_1 = bits(input.b_in, 15, 15) @[rca.scala 31:51]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[rca.scala 31:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[15] <= _p_comb_15_T_3 @[rca.scala 31:21]
    node _s_comb_15_T = xor(p_comb[15], c_comb[15]) @[rca.scala 32:34]
    s_comb[15] <= _s_comb_15_T @[rca.scala 32:21]
    node _c_comb_16_T = and(c_comb[15], p_comb[15]) @[rca.scala 33:34]
    node _c_comb_16_T_1 = or(_c_comb_16_T, g_comb[15]) @[rca.scala 33:46]
    c_comb[16] <= _c_comb_16_T_1 @[rca.scala 33:21]
    node _g_comb_16_T = bits(input.a_in, 16, 16) @[rca.scala 30:35]
    node _g_comb_16_T_1 = bits(input.b_in, 16, 16) @[rca.scala 30:51]
    node _g_comb_16_T_2 = and(_g_comb_16_T, _g_comb_16_T_1) @[rca.scala 30:39]
    node _g_comb_16_T_3 = bits(_g_comb_16_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[16] <= _g_comb_16_T_3 @[rca.scala 30:21]
    node _p_comb_16_T = bits(input.a_in, 16, 16) @[rca.scala 31:35]
    node _p_comb_16_T_1 = bits(input.b_in, 16, 16) @[rca.scala 31:51]
    node _p_comb_16_T_2 = xor(_p_comb_16_T, _p_comb_16_T_1) @[rca.scala 31:39]
    node _p_comb_16_T_3 = bits(_p_comb_16_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[16] <= _p_comb_16_T_3 @[rca.scala 31:21]
    node _s_comb_16_T = xor(p_comb[16], c_comb[16]) @[rca.scala 32:34]
    s_comb[16] <= _s_comb_16_T @[rca.scala 32:21]
    node _c_comb_17_T = and(c_comb[16], p_comb[16]) @[rca.scala 33:34]
    node _c_comb_17_T_1 = or(_c_comb_17_T, g_comb[16]) @[rca.scala 33:46]
    c_comb[17] <= _c_comb_17_T_1 @[rca.scala 33:21]
    node _g_comb_17_T = bits(input.a_in, 17, 17) @[rca.scala 30:35]
    node _g_comb_17_T_1 = bits(input.b_in, 17, 17) @[rca.scala 30:51]
    node _g_comb_17_T_2 = and(_g_comb_17_T, _g_comb_17_T_1) @[rca.scala 30:39]
    node _g_comb_17_T_3 = bits(_g_comb_17_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[17] <= _g_comb_17_T_3 @[rca.scala 30:21]
    node _p_comb_17_T = bits(input.a_in, 17, 17) @[rca.scala 31:35]
    node _p_comb_17_T_1 = bits(input.b_in, 17, 17) @[rca.scala 31:51]
    node _p_comb_17_T_2 = xor(_p_comb_17_T, _p_comb_17_T_1) @[rca.scala 31:39]
    node _p_comb_17_T_3 = bits(_p_comb_17_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[17] <= _p_comb_17_T_3 @[rca.scala 31:21]
    node _s_comb_17_T = xor(p_comb[17], c_comb[17]) @[rca.scala 32:34]
    s_comb[17] <= _s_comb_17_T @[rca.scala 32:21]
    node _c_comb_18_T = and(c_comb[17], p_comb[17]) @[rca.scala 33:34]
    node _c_comb_18_T_1 = or(_c_comb_18_T, g_comb[17]) @[rca.scala 33:46]
    c_comb[18] <= _c_comb_18_T_1 @[rca.scala 33:21]
    node _g_comb_18_T = bits(input.a_in, 18, 18) @[rca.scala 30:35]
    node _g_comb_18_T_1 = bits(input.b_in, 18, 18) @[rca.scala 30:51]
    node _g_comb_18_T_2 = and(_g_comb_18_T, _g_comb_18_T_1) @[rca.scala 30:39]
    node _g_comb_18_T_3 = bits(_g_comb_18_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[18] <= _g_comb_18_T_3 @[rca.scala 30:21]
    node _p_comb_18_T = bits(input.a_in, 18, 18) @[rca.scala 31:35]
    node _p_comb_18_T_1 = bits(input.b_in, 18, 18) @[rca.scala 31:51]
    node _p_comb_18_T_2 = xor(_p_comb_18_T, _p_comb_18_T_1) @[rca.scala 31:39]
    node _p_comb_18_T_3 = bits(_p_comb_18_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[18] <= _p_comb_18_T_3 @[rca.scala 31:21]
    node _s_comb_18_T = xor(p_comb[18], c_comb[18]) @[rca.scala 32:34]
    s_comb[18] <= _s_comb_18_T @[rca.scala 32:21]
    node _c_comb_19_T = and(c_comb[18], p_comb[18]) @[rca.scala 33:34]
    node _c_comb_19_T_1 = or(_c_comb_19_T, g_comb[18]) @[rca.scala 33:46]
    c_comb[19] <= _c_comb_19_T_1 @[rca.scala 33:21]
    node _g_comb_19_T = bits(input.a_in, 19, 19) @[rca.scala 30:35]
    node _g_comb_19_T_1 = bits(input.b_in, 19, 19) @[rca.scala 30:51]
    node _g_comb_19_T_2 = and(_g_comb_19_T, _g_comb_19_T_1) @[rca.scala 30:39]
    node _g_comb_19_T_3 = bits(_g_comb_19_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[19] <= _g_comb_19_T_3 @[rca.scala 30:21]
    node _p_comb_19_T = bits(input.a_in, 19, 19) @[rca.scala 31:35]
    node _p_comb_19_T_1 = bits(input.b_in, 19, 19) @[rca.scala 31:51]
    node _p_comb_19_T_2 = xor(_p_comb_19_T, _p_comb_19_T_1) @[rca.scala 31:39]
    node _p_comb_19_T_3 = bits(_p_comb_19_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[19] <= _p_comb_19_T_3 @[rca.scala 31:21]
    node _s_comb_19_T = xor(p_comb[19], c_comb[19]) @[rca.scala 32:34]
    s_comb[19] <= _s_comb_19_T @[rca.scala 32:21]
    node _c_comb_20_T = and(c_comb[19], p_comb[19]) @[rca.scala 33:34]
    node _c_comb_20_T_1 = or(_c_comb_20_T, g_comb[19]) @[rca.scala 33:46]
    c_comb[20] <= _c_comb_20_T_1 @[rca.scala 33:21]
    node _g_comb_20_T = bits(input.a_in, 20, 20) @[rca.scala 30:35]
    node _g_comb_20_T_1 = bits(input.b_in, 20, 20) @[rca.scala 30:51]
    node _g_comb_20_T_2 = and(_g_comb_20_T, _g_comb_20_T_1) @[rca.scala 30:39]
    node _g_comb_20_T_3 = bits(_g_comb_20_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[20] <= _g_comb_20_T_3 @[rca.scala 30:21]
    node _p_comb_20_T = bits(input.a_in, 20, 20) @[rca.scala 31:35]
    node _p_comb_20_T_1 = bits(input.b_in, 20, 20) @[rca.scala 31:51]
    node _p_comb_20_T_2 = xor(_p_comb_20_T, _p_comb_20_T_1) @[rca.scala 31:39]
    node _p_comb_20_T_3 = bits(_p_comb_20_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[20] <= _p_comb_20_T_3 @[rca.scala 31:21]
    node _s_comb_20_T = xor(p_comb[20], c_comb[20]) @[rca.scala 32:34]
    s_comb[20] <= _s_comb_20_T @[rca.scala 32:21]
    node _c_comb_21_T = and(c_comb[20], p_comb[20]) @[rca.scala 33:34]
    node _c_comb_21_T_1 = or(_c_comb_21_T, g_comb[20]) @[rca.scala 33:46]
    c_comb[21] <= _c_comb_21_T_1 @[rca.scala 33:21]
    node _g_comb_21_T = bits(input.a_in, 21, 21) @[rca.scala 30:35]
    node _g_comb_21_T_1 = bits(input.b_in, 21, 21) @[rca.scala 30:51]
    node _g_comb_21_T_2 = and(_g_comb_21_T, _g_comb_21_T_1) @[rca.scala 30:39]
    node _g_comb_21_T_3 = bits(_g_comb_21_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[21] <= _g_comb_21_T_3 @[rca.scala 30:21]
    node _p_comb_21_T = bits(input.a_in, 21, 21) @[rca.scala 31:35]
    node _p_comb_21_T_1 = bits(input.b_in, 21, 21) @[rca.scala 31:51]
    node _p_comb_21_T_2 = xor(_p_comb_21_T, _p_comb_21_T_1) @[rca.scala 31:39]
    node _p_comb_21_T_3 = bits(_p_comb_21_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[21] <= _p_comb_21_T_3 @[rca.scala 31:21]
    node _s_comb_21_T = xor(p_comb[21], c_comb[21]) @[rca.scala 32:34]
    s_comb[21] <= _s_comb_21_T @[rca.scala 32:21]
    node _c_comb_22_T = and(c_comb[21], p_comb[21]) @[rca.scala 33:34]
    node _c_comb_22_T_1 = or(_c_comb_22_T, g_comb[21]) @[rca.scala 33:46]
    c_comb[22] <= _c_comb_22_T_1 @[rca.scala 33:21]
    node _g_comb_22_T = bits(input.a_in, 22, 22) @[rca.scala 30:35]
    node _g_comb_22_T_1 = bits(input.b_in, 22, 22) @[rca.scala 30:51]
    node _g_comb_22_T_2 = and(_g_comb_22_T, _g_comb_22_T_1) @[rca.scala 30:39]
    node _g_comb_22_T_3 = bits(_g_comb_22_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[22] <= _g_comb_22_T_3 @[rca.scala 30:21]
    node _p_comb_22_T = bits(input.a_in, 22, 22) @[rca.scala 31:35]
    node _p_comb_22_T_1 = bits(input.b_in, 22, 22) @[rca.scala 31:51]
    node _p_comb_22_T_2 = xor(_p_comb_22_T, _p_comb_22_T_1) @[rca.scala 31:39]
    node _p_comb_22_T_3 = bits(_p_comb_22_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[22] <= _p_comb_22_T_3 @[rca.scala 31:21]
    node _s_comb_22_T = xor(p_comb[22], c_comb[22]) @[rca.scala 32:34]
    s_comb[22] <= _s_comb_22_T @[rca.scala 32:21]
    node _c_comb_23_T = and(c_comb[22], p_comb[22]) @[rca.scala 33:34]
    node _c_comb_23_T_1 = or(_c_comb_23_T, g_comb[22]) @[rca.scala 33:46]
    c_comb[23] <= _c_comb_23_T_1 @[rca.scala 33:21]
    node _g_comb_23_T = bits(input.a_in, 23, 23) @[rca.scala 30:35]
    node _g_comb_23_T_1 = bits(input.b_in, 23, 23) @[rca.scala 30:51]
    node _g_comb_23_T_2 = and(_g_comb_23_T, _g_comb_23_T_1) @[rca.scala 30:39]
    node _g_comb_23_T_3 = bits(_g_comb_23_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[23] <= _g_comb_23_T_3 @[rca.scala 30:21]
    node _p_comb_23_T = bits(input.a_in, 23, 23) @[rca.scala 31:35]
    node _p_comb_23_T_1 = bits(input.b_in, 23, 23) @[rca.scala 31:51]
    node _p_comb_23_T_2 = xor(_p_comb_23_T, _p_comb_23_T_1) @[rca.scala 31:39]
    node _p_comb_23_T_3 = bits(_p_comb_23_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[23] <= _p_comb_23_T_3 @[rca.scala 31:21]
    node _s_comb_23_T = xor(p_comb[23], c_comb[23]) @[rca.scala 32:34]
    s_comb[23] <= _s_comb_23_T @[rca.scala 32:21]
    node _c_comb_24_T = and(c_comb[23], p_comb[23]) @[rca.scala 33:34]
    node _c_comb_24_T_1 = or(_c_comb_24_T, g_comb[23]) @[rca.scala 33:46]
    c_comb[24] <= _c_comb_24_T_1 @[rca.scala 33:21]
    node _g_comb_24_T = bits(input.a_in, 24, 24) @[rca.scala 30:35]
    node _g_comb_24_T_1 = bits(input.b_in, 24, 24) @[rca.scala 30:51]
    node _g_comb_24_T_2 = and(_g_comb_24_T, _g_comb_24_T_1) @[rca.scala 30:39]
    node _g_comb_24_T_3 = bits(_g_comb_24_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[24] <= _g_comb_24_T_3 @[rca.scala 30:21]
    node _p_comb_24_T = bits(input.a_in, 24, 24) @[rca.scala 31:35]
    node _p_comb_24_T_1 = bits(input.b_in, 24, 24) @[rca.scala 31:51]
    node _p_comb_24_T_2 = xor(_p_comb_24_T, _p_comb_24_T_1) @[rca.scala 31:39]
    node _p_comb_24_T_3 = bits(_p_comb_24_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[24] <= _p_comb_24_T_3 @[rca.scala 31:21]
    node _s_comb_24_T = xor(p_comb[24], c_comb[24]) @[rca.scala 32:34]
    s_comb[24] <= _s_comb_24_T @[rca.scala 32:21]
    node _c_comb_25_T = and(c_comb[24], p_comb[24]) @[rca.scala 33:34]
    node _c_comb_25_T_1 = or(_c_comb_25_T, g_comb[24]) @[rca.scala 33:46]
    c_comb[25] <= _c_comb_25_T_1 @[rca.scala 33:21]
    node _g_comb_25_T = bits(input.a_in, 25, 25) @[rca.scala 30:35]
    node _g_comb_25_T_1 = bits(input.b_in, 25, 25) @[rca.scala 30:51]
    node _g_comb_25_T_2 = and(_g_comb_25_T, _g_comb_25_T_1) @[rca.scala 30:39]
    node _g_comb_25_T_3 = bits(_g_comb_25_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[25] <= _g_comb_25_T_3 @[rca.scala 30:21]
    node _p_comb_25_T = bits(input.a_in, 25, 25) @[rca.scala 31:35]
    node _p_comb_25_T_1 = bits(input.b_in, 25, 25) @[rca.scala 31:51]
    node _p_comb_25_T_2 = xor(_p_comb_25_T, _p_comb_25_T_1) @[rca.scala 31:39]
    node _p_comb_25_T_3 = bits(_p_comb_25_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[25] <= _p_comb_25_T_3 @[rca.scala 31:21]
    node _s_comb_25_T = xor(p_comb[25], c_comb[25]) @[rca.scala 32:34]
    s_comb[25] <= _s_comb_25_T @[rca.scala 32:21]
    node _c_comb_26_T = and(c_comb[25], p_comb[25]) @[rca.scala 33:34]
    node _c_comb_26_T_1 = or(_c_comb_26_T, g_comb[25]) @[rca.scala 33:46]
    c_comb[26] <= _c_comb_26_T_1 @[rca.scala 33:21]
    node _g_comb_26_T = bits(input.a_in, 26, 26) @[rca.scala 30:35]
    node _g_comb_26_T_1 = bits(input.b_in, 26, 26) @[rca.scala 30:51]
    node _g_comb_26_T_2 = and(_g_comb_26_T, _g_comb_26_T_1) @[rca.scala 30:39]
    node _g_comb_26_T_3 = bits(_g_comb_26_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[26] <= _g_comb_26_T_3 @[rca.scala 30:21]
    node _p_comb_26_T = bits(input.a_in, 26, 26) @[rca.scala 31:35]
    node _p_comb_26_T_1 = bits(input.b_in, 26, 26) @[rca.scala 31:51]
    node _p_comb_26_T_2 = xor(_p_comb_26_T, _p_comb_26_T_1) @[rca.scala 31:39]
    node _p_comb_26_T_3 = bits(_p_comb_26_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[26] <= _p_comb_26_T_3 @[rca.scala 31:21]
    node _s_comb_26_T = xor(p_comb[26], c_comb[26]) @[rca.scala 32:34]
    s_comb[26] <= _s_comb_26_T @[rca.scala 32:21]
    node _c_comb_27_T = and(c_comb[26], p_comb[26]) @[rca.scala 33:34]
    node _c_comb_27_T_1 = or(_c_comb_27_T, g_comb[26]) @[rca.scala 33:46]
    c_comb[27] <= _c_comb_27_T_1 @[rca.scala 33:21]
    node _g_comb_27_T = bits(input.a_in, 27, 27) @[rca.scala 30:35]
    node _g_comb_27_T_1 = bits(input.b_in, 27, 27) @[rca.scala 30:51]
    node _g_comb_27_T_2 = and(_g_comb_27_T, _g_comb_27_T_1) @[rca.scala 30:39]
    node _g_comb_27_T_3 = bits(_g_comb_27_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[27] <= _g_comb_27_T_3 @[rca.scala 30:21]
    node _p_comb_27_T = bits(input.a_in, 27, 27) @[rca.scala 31:35]
    node _p_comb_27_T_1 = bits(input.b_in, 27, 27) @[rca.scala 31:51]
    node _p_comb_27_T_2 = xor(_p_comb_27_T, _p_comb_27_T_1) @[rca.scala 31:39]
    node _p_comb_27_T_3 = bits(_p_comb_27_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[27] <= _p_comb_27_T_3 @[rca.scala 31:21]
    node _s_comb_27_T = xor(p_comb[27], c_comb[27]) @[rca.scala 32:34]
    s_comb[27] <= _s_comb_27_T @[rca.scala 32:21]
    node _c_comb_28_T = and(c_comb[27], p_comb[27]) @[rca.scala 33:34]
    node _c_comb_28_T_1 = or(_c_comb_28_T, g_comb[27]) @[rca.scala 33:46]
    c_comb[28] <= _c_comb_28_T_1 @[rca.scala 33:21]
    node _g_comb_28_T = bits(input.a_in, 28, 28) @[rca.scala 30:35]
    node _g_comb_28_T_1 = bits(input.b_in, 28, 28) @[rca.scala 30:51]
    node _g_comb_28_T_2 = and(_g_comb_28_T, _g_comb_28_T_1) @[rca.scala 30:39]
    node _g_comb_28_T_3 = bits(_g_comb_28_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[28] <= _g_comb_28_T_3 @[rca.scala 30:21]
    node _p_comb_28_T = bits(input.a_in, 28, 28) @[rca.scala 31:35]
    node _p_comb_28_T_1 = bits(input.b_in, 28, 28) @[rca.scala 31:51]
    node _p_comb_28_T_2 = xor(_p_comb_28_T, _p_comb_28_T_1) @[rca.scala 31:39]
    node _p_comb_28_T_3 = bits(_p_comb_28_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[28] <= _p_comb_28_T_3 @[rca.scala 31:21]
    node _s_comb_28_T = xor(p_comb[28], c_comb[28]) @[rca.scala 32:34]
    s_comb[28] <= _s_comb_28_T @[rca.scala 32:21]
    node _c_comb_29_T = and(c_comb[28], p_comb[28]) @[rca.scala 33:34]
    node _c_comb_29_T_1 = or(_c_comb_29_T, g_comb[28]) @[rca.scala 33:46]
    c_comb[29] <= _c_comb_29_T_1 @[rca.scala 33:21]
    node _g_comb_29_T = bits(input.a_in, 29, 29) @[rca.scala 30:35]
    node _g_comb_29_T_1 = bits(input.b_in, 29, 29) @[rca.scala 30:51]
    node _g_comb_29_T_2 = and(_g_comb_29_T, _g_comb_29_T_1) @[rca.scala 30:39]
    node _g_comb_29_T_3 = bits(_g_comb_29_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[29] <= _g_comb_29_T_3 @[rca.scala 30:21]
    node _p_comb_29_T = bits(input.a_in, 29, 29) @[rca.scala 31:35]
    node _p_comb_29_T_1 = bits(input.b_in, 29, 29) @[rca.scala 31:51]
    node _p_comb_29_T_2 = xor(_p_comb_29_T, _p_comb_29_T_1) @[rca.scala 31:39]
    node _p_comb_29_T_3 = bits(_p_comb_29_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[29] <= _p_comb_29_T_3 @[rca.scala 31:21]
    node _s_comb_29_T = xor(p_comb[29], c_comb[29]) @[rca.scala 32:34]
    s_comb[29] <= _s_comb_29_T @[rca.scala 32:21]
    node _c_comb_30_T = and(c_comb[29], p_comb[29]) @[rca.scala 33:34]
    node _c_comb_30_T_1 = or(_c_comb_30_T, g_comb[29]) @[rca.scala 33:46]
    c_comb[30] <= _c_comb_30_T_1 @[rca.scala 33:21]
    node _g_comb_30_T = bits(input.a_in, 30, 30) @[rca.scala 30:35]
    node _g_comb_30_T_1 = bits(input.b_in, 30, 30) @[rca.scala 30:51]
    node _g_comb_30_T_2 = and(_g_comb_30_T, _g_comb_30_T_1) @[rca.scala 30:39]
    node _g_comb_30_T_3 = bits(_g_comb_30_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[30] <= _g_comb_30_T_3 @[rca.scala 30:21]
    node _p_comb_30_T = bits(input.a_in, 30, 30) @[rca.scala 31:35]
    node _p_comb_30_T_1 = bits(input.b_in, 30, 30) @[rca.scala 31:51]
    node _p_comb_30_T_2 = xor(_p_comb_30_T, _p_comb_30_T_1) @[rca.scala 31:39]
    node _p_comb_30_T_3 = bits(_p_comb_30_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[30] <= _p_comb_30_T_3 @[rca.scala 31:21]
    node _s_comb_30_T = xor(p_comb[30], c_comb[30]) @[rca.scala 32:34]
    s_comb[30] <= _s_comb_30_T @[rca.scala 32:21]
    node _c_comb_31_T = and(c_comb[30], p_comb[30]) @[rca.scala 33:34]
    node _c_comb_31_T_1 = or(_c_comb_31_T, g_comb[30]) @[rca.scala 33:46]
    c_comb[31] <= _c_comb_31_T_1 @[rca.scala 33:21]
    node _g_comb_31_T = bits(input.a_in, 31, 31) @[rca.scala 30:35]
    node _g_comb_31_T_1 = bits(input.b_in, 31, 31) @[rca.scala 30:51]
    node _g_comb_31_T_2 = and(_g_comb_31_T, _g_comb_31_T_1) @[rca.scala 30:39]
    node _g_comb_31_T_3 = bits(_g_comb_31_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[31] <= _g_comb_31_T_3 @[rca.scala 30:21]
    node _p_comb_31_T = bits(input.a_in, 31, 31) @[rca.scala 31:35]
    node _p_comb_31_T_1 = bits(input.b_in, 31, 31) @[rca.scala 31:51]
    node _p_comb_31_T_2 = xor(_p_comb_31_T, _p_comb_31_T_1) @[rca.scala 31:39]
    node _p_comb_31_T_3 = bits(_p_comb_31_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[31] <= _p_comb_31_T_3 @[rca.scala 31:21]
    node _s_comb_31_T = xor(p_comb[31], c_comb[31]) @[rca.scala 32:34]
    s_comb[31] <= _s_comb_31_T @[rca.scala 32:21]
    node _c_comb_32_T = and(c_comb[31], p_comb[31]) @[rca.scala 33:34]
    node _c_comb_32_T_1 = or(_c_comb_32_T, g_comb[31]) @[rca.scala 33:46]
    c_comb[32] <= _c_comb_32_T_1 @[rca.scala 33:21]
    node output_S_lo_lo_lo_lo = cat(s_comb[1], s_comb[0]) @[rca.scala 36:24]
    node output_S_lo_lo_lo_hi = cat(s_comb[3], s_comb[2]) @[rca.scala 36:24]
    node output_S_lo_lo_lo = cat(output_S_lo_lo_lo_hi, output_S_lo_lo_lo_lo) @[rca.scala 36:24]
    node output_S_lo_lo_hi_lo = cat(s_comb[5], s_comb[4]) @[rca.scala 36:24]
    node output_S_lo_lo_hi_hi = cat(s_comb[7], s_comb[6]) @[rca.scala 36:24]
    node output_S_lo_lo_hi = cat(output_S_lo_lo_hi_hi, output_S_lo_lo_hi_lo) @[rca.scala 36:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[rca.scala 36:24]
    node output_S_lo_hi_lo_lo = cat(s_comb[9], s_comb[8]) @[rca.scala 36:24]
    node output_S_lo_hi_lo_hi = cat(s_comb[11], s_comb[10]) @[rca.scala 36:24]
    node output_S_lo_hi_lo = cat(output_S_lo_hi_lo_hi, output_S_lo_hi_lo_lo) @[rca.scala 36:24]
    node output_S_lo_hi_hi_lo = cat(s_comb[13], s_comb[12]) @[rca.scala 36:24]
    node output_S_lo_hi_hi_hi = cat(s_comb[15], s_comb[14]) @[rca.scala 36:24]
    node output_S_lo_hi_hi = cat(output_S_lo_hi_hi_hi, output_S_lo_hi_hi_lo) @[rca.scala 36:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[rca.scala 36:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[rca.scala 36:24]
    node output_S_hi_lo_lo_lo = cat(s_comb[17], s_comb[16]) @[rca.scala 36:24]
    node output_S_hi_lo_lo_hi = cat(s_comb[19], s_comb[18]) @[rca.scala 36:24]
    node output_S_hi_lo_lo = cat(output_S_hi_lo_lo_hi, output_S_hi_lo_lo_lo) @[rca.scala 36:24]
    node output_S_hi_lo_hi_lo = cat(s_comb[21], s_comb[20]) @[rca.scala 36:24]
    node output_S_hi_lo_hi_hi = cat(s_comb[23], s_comb[22]) @[rca.scala 36:24]
    node output_S_hi_lo_hi = cat(output_S_hi_lo_hi_hi, output_S_hi_lo_hi_lo) @[rca.scala 36:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[rca.scala 36:24]
    node output_S_hi_hi_lo_lo = cat(s_comb[25], s_comb[24]) @[rca.scala 36:24]
    node output_S_hi_hi_lo_hi = cat(s_comb[27], s_comb[26]) @[rca.scala 36:24]
    node output_S_hi_hi_lo = cat(output_S_hi_hi_lo_hi, output_S_hi_hi_lo_lo) @[rca.scala 36:24]
    node output_S_hi_hi_hi_lo = cat(s_comb[29], s_comb[28]) @[rca.scala 36:24]
    node output_S_hi_hi_hi_hi = cat(s_comb[31], s_comb[30]) @[rca.scala 36:24]
    node output_S_hi_hi_hi = cat(output_S_hi_hi_hi_hi, output_S_hi_hi_hi_lo) @[rca.scala 36:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[rca.scala 36:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[rca.scala 36:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[rca.scala 36:24]
    node _output_S_T_1 = asSInt(_output_S_T) @[rca.scala 36:31]
    output.S <= _output_S_T_1 @[rca.scala 36:14]
    node _output_C_T = asSInt(c_comb[32]) @[rca.scala 37:40]
    output.C <= _output_C_T @[rca.scala 37:14]

  module MacUnit_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip in_a : SInt<8>, flip in_b : SInt<8>, flip in_c : SInt<32>, out_c : SInt<32>}

    inst mul of Multiplier_2 @[MacUnit.scala 15:19]
    mul.clock <= clock
    mul.reset <= reset
    inst rca of RCA_5 @[MacUnit.scala 16:19]
    rca.clock <= clock
    rca.reset <= reset
    mul.input.multiplicand <= io.in_a @[MacUnit.scala 18:26]
    mul.input.multiplier <= io.in_b @[MacUnit.scala 19:26]
    node _rca_input_a_in_T = bits(mul.output.product, 15, 15) @[MacUnit.scala 21:71]
    node _rca_input_a_in_T_1 = bits(_rca_input_a_in_T, 0, 0) @[Bitwise.scala 77:15]
    node _rca_input_a_in_T_2 = mux(_rca_input_a_in_T_1, UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
    node rca_input_a_in_lo = asUInt(mul.output.product) @[Cat.scala 33:92]
    node _rca_input_a_in_T_3 = cat(_rca_input_a_in_T_2, rca_input_a_in_lo) @[Cat.scala 33:92]
    node _rca_input_a_in_T_4 = asSInt(_rca_input_a_in_T_3) @[MacUnit.scala 21:108]
    rca.input.a_in <= _rca_input_a_in_T_4 @[MacUnit.scala 21:19]
    rca.input.b_in <= io.in_c @[MacUnit.scala 22:19]
    rca.input.c_in <= asSInt(UInt<32>("h0")) @[MacUnit.scala 23:19]
    io.out_c <= rca.output.S @[MacUnit.scala 24:19]

  module PE_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip in_control : { ctrl_sa_send_data : UInt<1>}, flip in_a : SInt<8>, flip in_b : SInt<8>, flip in_c : SInt<32>, out_control : { ctrl_sa_send_data : UInt<1>}, out_a : SInt<8>, out_b : SInt<8>, out_c : SInt<32>}

    reg a_reg : SInt<8>, clock with :
      reset => (reset, asSInt(UInt<8>("h0"))) @[PE.scala 24:22]
    reg b_reg : SInt<8>, clock with :
      reset => (reset, asSInt(UInt<8>("h0"))) @[PE.scala 25:22]
    reg c_reg : SInt<32>, clock with :
      reset => (reset, asSInt(UInt<32>("h0"))) @[PE.scala 26:22]
    inst mac of MacUnit_2 @[PE.scala 28:19]
    mac.clock <= clock
    mac.reset <= reset
    mac.io.in_a <= io.in_a @[PE.scala 29:15]
    mac.io.in_b <= io.in_b @[PE.scala 30:15]
    mac.io.in_c <= c_reg @[PE.scala 31:15]
    a_reg <= io.in_a @[PE.scala 33:9]
    b_reg <= io.in_b @[PE.scala 34:9]
    node _c_reg_T = mux(io.in_control.ctrl_sa_send_data, io.in_c, mac.io.out_c) @[PE.scala 36:15]
    c_reg <= _c_reg_T @[PE.scala 36:9]
    io.out_a <= a_reg @[PE.scala 38:12]
    io.out_b <= b_reg @[PE.scala 39:12]
    io.out_c <= c_reg @[PE.scala 40:12]
    io.out_control <= io.in_control @[PE.scala 42:18]

  module booth2Encoder_3 :
    input clock : Clock
    input reset : Reset
    output input : { flip multiplier : SInt<8>}
    output output : { X2 : UInt<4>, inv : UInt<4>, set0 : UInt<4>}

    wire multiplier2 : UInt<9> @[booth2_encoder.scala 22:27]
    wire bits : UInt<3>[4] @[booth2_encoder.scala 23:27]
    wire X2Bools : UInt<1>[4] @[booth2_encoder.scala 25:30]
    X2Bools[0] <= UInt<1>("h0") @[booth2_encoder.scala 25:30]
    X2Bools[1] <= UInt<1>("h0") @[booth2_encoder.scala 25:30]
    X2Bools[2] <= UInt<1>("h0") @[booth2_encoder.scala 25:30]
    X2Bools[3] <= UInt<1>("h0") @[booth2_encoder.scala 25:30]
    wire invBools : UInt<1>[4] @[booth2_encoder.scala 26:30]
    invBools[0] <= UInt<1>("h0") @[booth2_encoder.scala 26:30]
    invBools[1] <= UInt<1>("h0") @[booth2_encoder.scala 26:30]
    invBools[2] <= UInt<1>("h0") @[booth2_encoder.scala 26:30]
    invBools[3] <= UInt<1>("h0") @[booth2_encoder.scala 26:30]
    wire set0Bools : UInt<1>[4] @[booth2_encoder.scala 27:30]
    set0Bools[0] <= UInt<1>("h0") @[booth2_encoder.scala 27:30]
    set0Bools[1] <= UInt<1>("h0") @[booth2_encoder.scala 27:30]
    set0Bools[2] <= UInt<1>("h0") @[booth2_encoder.scala 27:30]
    set0Bools[3] <= UInt<1>("h0") @[booth2_encoder.scala 27:30]
    node multiplier2_hi = asUInt(input.multiplier) @[Cat.scala 33:92]
    node _multiplier2_T = cat(multiplier2_hi, UInt<1>("h0")) @[Cat.scala 33:92]
    multiplier2 <= _multiplier2_T @[booth2_encoder.scala 29:17]
    node _bits_0_T = bits(multiplier2, 2, 0) @[booth2_encoder.scala 32:31]
    bits[0] <= _bits_0_T @[booth2_encoder.scala 32:17]
    node _bits_1_T = bits(multiplier2, 4, 2) @[booth2_encoder.scala 32:31]
    bits[1] <= _bits_1_T @[booth2_encoder.scala 32:17]
    node _bits_2_T = bits(multiplier2, 6, 4) @[booth2_encoder.scala 32:31]
    bits[2] <= _bits_2_T @[booth2_encoder.scala 32:17]
    node _bits_3_T = bits(multiplier2, 8, 6) @[booth2_encoder.scala 32:31]
    bits[3] <= _bits_3_T @[booth2_encoder.scala 32:17]
    node _X2Bools_0_T = bits(bits[0], 0, 0) @[booth2_encoder.scala 36:35]
    node _X2Bools_0_T_1 = bits(bits[0], 1, 1) @[booth2_encoder.scala 36:46]
    node _X2Bools_0_T_2 = xor(_X2Bools_0_T, _X2Bools_0_T_1) @[booth2_encoder.scala 36:38]
    node _X2Bools_0_T_3 = not(_X2Bools_0_T_2) @[booth2_encoder.scala 36:26]
    node _X2Bools_0_T_4 = bits(_X2Bools_0_T_3, 0, 0) @[booth2_encoder.scala 36:52]
    X2Bools[0] <= _X2Bools_0_T_4 @[booth2_encoder.scala 36:22]
    node _invBools_0_T = bits(bits[0], 2, 2) @[booth2_encoder.scala 37:32]
    node _invBools_0_T_1 = bits(_invBools_0_T, 0, 0) @[booth2_encoder.scala 37:36]
    invBools[0] <= _invBools_0_T_1 @[booth2_encoder.scala 37:22]
    node _set0Bools_0_T = andr(bits[0]) @[booth2_encoder.scala 38:33]
    node _set0Bools_0_T_1 = not(bits[0]) @[booth2_encoder.scala 38:48]
    node _set0Bools_0_T_2 = andr(_set0Bools_0_T_1) @[booth2_encoder.scala 38:58]
    node _set0Bools_0_T_3 = bits(_set0Bools_0_T_2, 0, 0) @[booth2_encoder.scala 38:63]
    node _set0Bools_0_T_4 = or(_set0Bools_0_T, _set0Bools_0_T_3) @[booth2_encoder.scala 38:45]
    set0Bools[0] <= _set0Bools_0_T_4 @[booth2_encoder.scala 38:22]
    node _X2Bools_1_T = bits(bits[1], 0, 0) @[booth2_encoder.scala 36:35]
    node _X2Bools_1_T_1 = bits(bits[1], 1, 1) @[booth2_encoder.scala 36:46]
    node _X2Bools_1_T_2 = xor(_X2Bools_1_T, _X2Bools_1_T_1) @[booth2_encoder.scala 36:38]
    node _X2Bools_1_T_3 = not(_X2Bools_1_T_2) @[booth2_encoder.scala 36:26]
    node _X2Bools_1_T_4 = bits(_X2Bools_1_T_3, 0, 0) @[booth2_encoder.scala 36:52]
    X2Bools[1] <= _X2Bools_1_T_4 @[booth2_encoder.scala 36:22]
    node _invBools_1_T = bits(bits[1], 2, 2) @[booth2_encoder.scala 37:32]
    node _invBools_1_T_1 = bits(_invBools_1_T, 0, 0) @[booth2_encoder.scala 37:36]
    invBools[1] <= _invBools_1_T_1 @[booth2_encoder.scala 37:22]
    node _set0Bools_1_T = andr(bits[1]) @[booth2_encoder.scala 38:33]
    node _set0Bools_1_T_1 = not(bits[1]) @[booth2_encoder.scala 38:48]
    node _set0Bools_1_T_2 = andr(_set0Bools_1_T_1) @[booth2_encoder.scala 38:58]
    node _set0Bools_1_T_3 = bits(_set0Bools_1_T_2, 0, 0) @[booth2_encoder.scala 38:63]
    node _set0Bools_1_T_4 = or(_set0Bools_1_T, _set0Bools_1_T_3) @[booth2_encoder.scala 38:45]
    set0Bools[1] <= _set0Bools_1_T_4 @[booth2_encoder.scala 38:22]
    node _X2Bools_2_T = bits(bits[2], 0, 0) @[booth2_encoder.scala 36:35]
    node _X2Bools_2_T_1 = bits(bits[2], 1, 1) @[booth2_encoder.scala 36:46]
    node _X2Bools_2_T_2 = xor(_X2Bools_2_T, _X2Bools_2_T_1) @[booth2_encoder.scala 36:38]
    node _X2Bools_2_T_3 = not(_X2Bools_2_T_2) @[booth2_encoder.scala 36:26]
    node _X2Bools_2_T_4 = bits(_X2Bools_2_T_3, 0, 0) @[booth2_encoder.scala 36:52]
    X2Bools[2] <= _X2Bools_2_T_4 @[booth2_encoder.scala 36:22]
    node _invBools_2_T = bits(bits[2], 2, 2) @[booth2_encoder.scala 37:32]
    node _invBools_2_T_1 = bits(_invBools_2_T, 0, 0) @[booth2_encoder.scala 37:36]
    invBools[2] <= _invBools_2_T_1 @[booth2_encoder.scala 37:22]
    node _set0Bools_2_T = andr(bits[2]) @[booth2_encoder.scala 38:33]
    node _set0Bools_2_T_1 = not(bits[2]) @[booth2_encoder.scala 38:48]
    node _set0Bools_2_T_2 = andr(_set0Bools_2_T_1) @[booth2_encoder.scala 38:58]
    node _set0Bools_2_T_3 = bits(_set0Bools_2_T_2, 0, 0) @[booth2_encoder.scala 38:63]
    node _set0Bools_2_T_4 = or(_set0Bools_2_T, _set0Bools_2_T_3) @[booth2_encoder.scala 38:45]
    set0Bools[2] <= _set0Bools_2_T_4 @[booth2_encoder.scala 38:22]
    node _X2Bools_3_T = bits(bits[3], 0, 0) @[booth2_encoder.scala 36:35]
    node _X2Bools_3_T_1 = bits(bits[3], 1, 1) @[booth2_encoder.scala 36:46]
    node _X2Bools_3_T_2 = xor(_X2Bools_3_T, _X2Bools_3_T_1) @[booth2_encoder.scala 36:38]
    node _X2Bools_3_T_3 = not(_X2Bools_3_T_2) @[booth2_encoder.scala 36:26]
    node _X2Bools_3_T_4 = bits(_X2Bools_3_T_3, 0, 0) @[booth2_encoder.scala 36:52]
    X2Bools[3] <= _X2Bools_3_T_4 @[booth2_encoder.scala 36:22]
    node _invBools_3_T = bits(bits[3], 2, 2) @[booth2_encoder.scala 37:32]
    node _invBools_3_T_1 = bits(_invBools_3_T, 0, 0) @[booth2_encoder.scala 37:36]
    invBools[3] <= _invBools_3_T_1 @[booth2_encoder.scala 37:22]
    node _set0Bools_3_T = andr(bits[3]) @[booth2_encoder.scala 38:33]
    node _set0Bools_3_T_1 = not(bits[3]) @[booth2_encoder.scala 38:48]
    node _set0Bools_3_T_2 = andr(_set0Bools_3_T_1) @[booth2_encoder.scala 38:58]
    node _set0Bools_3_T_3 = bits(_set0Bools_3_T_2, 0, 0) @[booth2_encoder.scala 38:63]
    node _set0Bools_3_T_4 = or(_set0Bools_3_T, _set0Bools_3_T_3) @[booth2_encoder.scala 38:45]
    set0Bools[3] <= _set0Bools_3_T_4 @[booth2_encoder.scala 38:22]
    node output_X2_lo = cat(X2Bools[1], X2Bools[0]) @[booth2_encoder.scala 42:28]
    node output_X2_hi = cat(X2Bools[3], X2Bools[2]) @[booth2_encoder.scala 42:28]
    node _output_X2_T = cat(output_X2_hi, output_X2_lo) @[booth2_encoder.scala 42:28]
    output.X2 <= _output_X2_T @[booth2_encoder.scala 42:17]
    node output_inv_lo = cat(invBools[1], invBools[0]) @[booth2_encoder.scala 43:29]
    node output_inv_hi = cat(invBools[3], invBools[2]) @[booth2_encoder.scala 43:29]
    node _output_inv_T = cat(output_inv_hi, output_inv_lo) @[booth2_encoder.scala 43:29]
    output.inv <= _output_inv_T @[booth2_encoder.scala 43:17]
    node output_set0_lo = cat(set0Bools[1], set0Bools[0]) @[booth2_encoder.scala 44:30]
    node output_set0_hi = cat(set0Bools[3], set0Bools[2]) @[booth2_encoder.scala 44:30]
    node _output_set0_T = cat(output_set0_hi, output_set0_lo) @[booth2_encoder.scala 44:30]
    output.set0 <= _output_set0_T @[booth2_encoder.scala 44:17]

  module ppGenerator_3 :
    input clock : Clock
    input reset : Reset
    output inputData : { flip multiplicand : SInt<8>}
    output inputCtrl : { flip X2 : UInt<4>, flip inv : UInt<4>, flip Set0 : UInt<4>}
    output outputData : { pp_out : SInt<16>[4], sig_out : SInt<16>}

    wire E : UInt<1>[4] @[pp_generator.scala 28:26]
    wire E_inv : UInt<1>[4] @[pp_generator.scala 29:26]
    wire pp_X2 : SInt<9>[4] @[pp_generator.scala 31:26]
    wire pp_set : SInt<9>[4] @[pp_generator.scala 32:26]
    wire pp_inv : SInt<9>[4] @[pp_generator.scala 33:26]
    wire pp_temp : SInt<16>[4] @[pp_generator.scala 34:26]
    wire _pp_WIRE : SInt<16>[4] @[pp_generator.scala 36:37]
    _pp_WIRE[0] <= asSInt(UInt<16>("h0")) @[pp_generator.scala 36:37]
    _pp_WIRE[1] <= asSInt(UInt<16>("h0")) @[pp_generator.scala 36:37]
    _pp_WIRE[2] <= asSInt(UInt<16>("h0")) @[pp_generator.scala 36:37]
    _pp_WIRE[3] <= asSInt(UInt<16>("h0")) @[pp_generator.scala 36:37]
    reg pp : SInt<16>[4], clock with :
      reset => (reset, _pp_WIRE) @[pp_generator.scala 36:29]
    reg sign_com : SInt<16>, clock with :
      reset => (reset, asSInt(UInt<16>("h0"))) @[pp_generator.scala 37:29]
    node _pp_X2_0_T = bits(inputCtrl.X2, 0, 0) @[pp_generator.scala 40:38]
    node _pp_X2_0_T_1 = bits(_pp_X2_0_T, 0, 0) @[pp_generator.scala 40:42]
    node pp_X2_0_lo = asUInt(asSInt(UInt<1>("h0"))) @[Cat.scala 33:92]
    node pp_X2_0_hi = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_0_T_2 = cat(pp_X2_0_hi, pp_X2_0_lo) @[Cat.scala 33:92]
    node _pp_X2_0_T_3 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 41:51]
    node pp_X2_0_lo_1 = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_0_T_4 = cat(_pp_X2_0_T_3, pp_X2_0_lo_1) @[Cat.scala 33:92]
    node _pp_X2_0_T_5 = mux(_pp_X2_0_T_1, _pp_X2_0_T_2, _pp_X2_0_T_4) @[pp_generator.scala 40:25]
    node _pp_X2_0_T_6 = asSInt(_pp_X2_0_T_5) @[pp_generator.scala 41:90]
    pp_X2[0] <= _pp_X2_0_T_6 @[pp_generator.scala 40:19]
    node _pp_set_0_T = bits(inputCtrl.Set0, 0, 0) @[pp_generator.scala 42:40]
    node _pp_set_0_T_1 = bits(_pp_set_0_T, 0, 0) @[pp_generator.scala 42:44]
    node _pp_set_0_T_2 = mux(_pp_set_0_T_1, asSInt(UInt<9>("h0")), pp_X2[0]) @[pp_generator.scala 42:25]
    pp_set[0] <= _pp_set_0_T_2 @[pp_generator.scala 42:19]
    node _pp_inv_0_T = bits(inputCtrl.inv, 0, 0) @[pp_generator.scala 43:39]
    node _pp_inv_0_T_1 = bits(_pp_inv_0_T, 0, 0) @[pp_generator.scala 43:43]
    node _pp_inv_0_T_2 = not(pp_set[0]) @[pp_generator.scala 43:51]
    node _pp_inv_0_T_3 = asSInt(_pp_inv_0_T_2) @[pp_generator.scala 43:51]
    node _pp_inv_0_T_4 = mux(_pp_inv_0_T_1, _pp_inv_0_T_3, pp_set[0]) @[pp_generator.scala 43:25]
    pp_inv[0] <= _pp_inv_0_T_4 @[pp_generator.scala 43:19]
    node _E_inv_0_T = bits(inputCtrl.Set0, 0, 0) @[pp_generator.scala 44:40]
    node _E_inv_0_T_1 = bits(_E_inv_0_T, 0, 0) @[pp_generator.scala 44:44]
    node _E_inv_0_T_2 = bits(inputCtrl.inv, 0, 0) @[pp_generator.scala 44:65]
    node _E_inv_0_T_3 = bits(_E_inv_0_T_2, 0, 0) @[pp_generator.scala 44:69]
    node _E_inv_0_T_4 = bits(inputCtrl.inv, 0, 0) @[pp_generator.scala 44:91]
    node _E_inv_0_T_5 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 44:117]
    node _E_inv_0_T_6 = xor(_E_inv_0_T_4, _E_inv_0_T_5) @[pp_generator.scala 44:94]
    node _E_inv_0_T_7 = bits(_E_inv_0_T_6, 0, 0) @[pp_generator.scala 44:131]
    node _E_inv_0_T_8 = mux(_E_inv_0_T_1, _E_inv_0_T_3, _E_inv_0_T_7) @[pp_generator.scala 44:25]
    E_inv[0] <= _E_inv_0_T_8 @[pp_generator.scala 44:19]
    node _E_0_T = not(E_inv[0]) @[pp_generator.scala 45:22]
    E[0] <= _E_0_T @[pp_generator.scala 45:19]
    node pp_temp_0_lo_lo = asUInt(pp_inv[0]) @[Cat.scala 33:92]
    node pp_temp_0_lo = cat(E_inv[0], pp_temp_0_lo_lo) @[Cat.scala 33:92]
    node pp_temp_0_hi_hi = cat(UInt<4>("h0"), E[0]) @[Cat.scala 33:92]
    node pp_temp_0_hi = cat(pp_temp_0_hi_hi, E_inv[0]) @[Cat.scala 33:92]
    node _pp_temp_0_T = cat(pp_temp_0_hi, pp_temp_0_lo) @[Cat.scala 33:92]
    node _pp_temp_0_T_1 = asSInt(_pp_temp_0_T) @[pp_generator.scala 51:115]
    pp_temp[0] <= _pp_temp_0_T_1 @[pp_generator.scala 51:28]
    node _pp_X2_1_T = bits(inputCtrl.X2, 1, 1) @[pp_generator.scala 40:38]
    node _pp_X2_1_T_1 = bits(_pp_X2_1_T, 0, 0) @[pp_generator.scala 40:42]
    node pp_X2_1_lo = asUInt(asSInt(UInt<1>("h0"))) @[Cat.scala 33:92]
    node pp_X2_1_hi = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_1_T_2 = cat(pp_X2_1_hi, pp_X2_1_lo) @[Cat.scala 33:92]
    node _pp_X2_1_T_3 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 41:51]
    node pp_X2_1_lo_1 = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_1_T_4 = cat(_pp_X2_1_T_3, pp_X2_1_lo_1) @[Cat.scala 33:92]
    node _pp_X2_1_T_5 = mux(_pp_X2_1_T_1, _pp_X2_1_T_2, _pp_X2_1_T_4) @[pp_generator.scala 40:25]
    node _pp_X2_1_T_6 = asSInt(_pp_X2_1_T_5) @[pp_generator.scala 41:90]
    pp_X2[1] <= _pp_X2_1_T_6 @[pp_generator.scala 40:19]
    node _pp_set_1_T = bits(inputCtrl.Set0, 1, 1) @[pp_generator.scala 42:40]
    node _pp_set_1_T_1 = bits(_pp_set_1_T, 0, 0) @[pp_generator.scala 42:44]
    node _pp_set_1_T_2 = mux(_pp_set_1_T_1, asSInt(UInt<9>("h0")), pp_X2[1]) @[pp_generator.scala 42:25]
    pp_set[1] <= _pp_set_1_T_2 @[pp_generator.scala 42:19]
    node _pp_inv_1_T = bits(inputCtrl.inv, 1, 1) @[pp_generator.scala 43:39]
    node _pp_inv_1_T_1 = bits(_pp_inv_1_T, 0, 0) @[pp_generator.scala 43:43]
    node _pp_inv_1_T_2 = not(pp_set[1]) @[pp_generator.scala 43:51]
    node _pp_inv_1_T_3 = asSInt(_pp_inv_1_T_2) @[pp_generator.scala 43:51]
    node _pp_inv_1_T_4 = mux(_pp_inv_1_T_1, _pp_inv_1_T_3, pp_set[1]) @[pp_generator.scala 43:25]
    pp_inv[1] <= _pp_inv_1_T_4 @[pp_generator.scala 43:19]
    node _E_inv_1_T = bits(inputCtrl.Set0, 1, 1) @[pp_generator.scala 44:40]
    node _E_inv_1_T_1 = bits(_E_inv_1_T, 0, 0) @[pp_generator.scala 44:44]
    node _E_inv_1_T_2 = bits(inputCtrl.inv, 1, 1) @[pp_generator.scala 44:65]
    node _E_inv_1_T_3 = bits(_E_inv_1_T_2, 0, 0) @[pp_generator.scala 44:69]
    node _E_inv_1_T_4 = bits(inputCtrl.inv, 1, 1) @[pp_generator.scala 44:91]
    node _E_inv_1_T_5 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 44:117]
    node _E_inv_1_T_6 = xor(_E_inv_1_T_4, _E_inv_1_T_5) @[pp_generator.scala 44:94]
    node _E_inv_1_T_7 = bits(_E_inv_1_T_6, 0, 0) @[pp_generator.scala 44:131]
    node _E_inv_1_T_8 = mux(_E_inv_1_T_1, _E_inv_1_T_3, _E_inv_1_T_7) @[pp_generator.scala 44:25]
    E_inv[1] <= _E_inv_1_T_8 @[pp_generator.scala 44:19]
    node _E_1_T = not(E_inv[1]) @[pp_generator.scala 45:22]
    E[1] <= _E_1_T @[pp_generator.scala 45:19]
    node pp_temp_1_lo_lo = asUInt(pp_inv[1]) @[Cat.scala 33:92]
    node pp_temp_1_lo = cat(E[1], pp_temp_1_lo_lo) @[Cat.scala 33:92]
    node pp_temp_1_hi = cat(UInt<5>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
    node _pp_temp_1_T = cat(pp_temp_1_hi, pp_temp_1_lo) @[Cat.scala 33:92]
    node _pp_temp_1_T_1 = asSInt(_pp_temp_1_T) @[pp_generator.scala 55:94]
    pp_temp[1] <= _pp_temp_1_T_1 @[pp_generator.scala 55:24]
    node _pp_X2_2_T = bits(inputCtrl.X2, 2, 2) @[pp_generator.scala 40:38]
    node _pp_X2_2_T_1 = bits(_pp_X2_2_T, 0, 0) @[pp_generator.scala 40:42]
    node pp_X2_2_lo = asUInt(asSInt(UInt<1>("h0"))) @[Cat.scala 33:92]
    node pp_X2_2_hi = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_2_T_2 = cat(pp_X2_2_hi, pp_X2_2_lo) @[Cat.scala 33:92]
    node _pp_X2_2_T_3 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 41:51]
    node pp_X2_2_lo_1 = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_2_T_4 = cat(_pp_X2_2_T_3, pp_X2_2_lo_1) @[Cat.scala 33:92]
    node _pp_X2_2_T_5 = mux(_pp_X2_2_T_1, _pp_X2_2_T_2, _pp_X2_2_T_4) @[pp_generator.scala 40:25]
    node _pp_X2_2_T_6 = asSInt(_pp_X2_2_T_5) @[pp_generator.scala 41:90]
    pp_X2[2] <= _pp_X2_2_T_6 @[pp_generator.scala 40:19]
    node _pp_set_2_T = bits(inputCtrl.Set0, 2, 2) @[pp_generator.scala 42:40]
    node _pp_set_2_T_1 = bits(_pp_set_2_T, 0, 0) @[pp_generator.scala 42:44]
    node _pp_set_2_T_2 = mux(_pp_set_2_T_1, asSInt(UInt<9>("h0")), pp_X2[2]) @[pp_generator.scala 42:25]
    pp_set[2] <= _pp_set_2_T_2 @[pp_generator.scala 42:19]
    node _pp_inv_2_T = bits(inputCtrl.inv, 2, 2) @[pp_generator.scala 43:39]
    node _pp_inv_2_T_1 = bits(_pp_inv_2_T, 0, 0) @[pp_generator.scala 43:43]
    node _pp_inv_2_T_2 = not(pp_set[2]) @[pp_generator.scala 43:51]
    node _pp_inv_2_T_3 = asSInt(_pp_inv_2_T_2) @[pp_generator.scala 43:51]
    node _pp_inv_2_T_4 = mux(_pp_inv_2_T_1, _pp_inv_2_T_3, pp_set[2]) @[pp_generator.scala 43:25]
    pp_inv[2] <= _pp_inv_2_T_4 @[pp_generator.scala 43:19]
    node _E_inv_2_T = bits(inputCtrl.Set0, 2, 2) @[pp_generator.scala 44:40]
    node _E_inv_2_T_1 = bits(_E_inv_2_T, 0, 0) @[pp_generator.scala 44:44]
    node _E_inv_2_T_2 = bits(inputCtrl.inv, 2, 2) @[pp_generator.scala 44:65]
    node _E_inv_2_T_3 = bits(_E_inv_2_T_2, 0, 0) @[pp_generator.scala 44:69]
    node _E_inv_2_T_4 = bits(inputCtrl.inv, 2, 2) @[pp_generator.scala 44:91]
    node _E_inv_2_T_5 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 44:117]
    node _E_inv_2_T_6 = xor(_E_inv_2_T_4, _E_inv_2_T_5) @[pp_generator.scala 44:94]
    node _E_inv_2_T_7 = bits(_E_inv_2_T_6, 0, 0) @[pp_generator.scala 44:131]
    node _E_inv_2_T_8 = mux(_E_inv_2_T_1, _E_inv_2_T_3, _E_inv_2_T_7) @[pp_generator.scala 44:25]
    E_inv[2] <= _E_inv_2_T_8 @[pp_generator.scala 44:19]
    node _E_2_T = not(E_inv[2]) @[pp_generator.scala 45:22]
    E[2] <= _E_2_T @[pp_generator.scala 45:19]
    node pp_temp_2_lo_lo = asUInt(pp_inv[2]) @[Cat.scala 33:92]
    node pp_temp_2_lo = cat(E[2], pp_temp_2_lo_lo) @[Cat.scala 33:92]
    node pp_temp_2_hi = cat(UInt<5>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
    node _pp_temp_2_T = cat(pp_temp_2_hi, pp_temp_2_lo) @[Cat.scala 33:92]
    node _pp_temp_2_T_1 = asSInt(_pp_temp_2_T) @[pp_generator.scala 55:94]
    pp_temp[2] <= _pp_temp_2_T_1 @[pp_generator.scala 55:24]
    node _pp_X2_3_T = bits(inputCtrl.X2, 3, 3) @[pp_generator.scala 40:38]
    node _pp_X2_3_T_1 = bits(_pp_X2_3_T, 0, 0) @[pp_generator.scala 40:42]
    node pp_X2_3_lo = asUInt(asSInt(UInt<1>("h0"))) @[Cat.scala 33:92]
    node pp_X2_3_hi = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_3_T_2 = cat(pp_X2_3_hi, pp_X2_3_lo) @[Cat.scala 33:92]
    node _pp_X2_3_T_3 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 41:51]
    node pp_X2_3_lo_1 = asUInt(inputData.multiplicand) @[Cat.scala 33:92]
    node _pp_X2_3_T_4 = cat(_pp_X2_3_T_3, pp_X2_3_lo_1) @[Cat.scala 33:92]
    node _pp_X2_3_T_5 = mux(_pp_X2_3_T_1, _pp_X2_3_T_2, _pp_X2_3_T_4) @[pp_generator.scala 40:25]
    node _pp_X2_3_T_6 = asSInt(_pp_X2_3_T_5) @[pp_generator.scala 41:90]
    pp_X2[3] <= _pp_X2_3_T_6 @[pp_generator.scala 40:19]
    node _pp_set_3_T = bits(inputCtrl.Set0, 3, 3) @[pp_generator.scala 42:40]
    node _pp_set_3_T_1 = bits(_pp_set_3_T, 0, 0) @[pp_generator.scala 42:44]
    node _pp_set_3_T_2 = mux(_pp_set_3_T_1, asSInt(UInt<9>("h0")), pp_X2[3]) @[pp_generator.scala 42:25]
    pp_set[3] <= _pp_set_3_T_2 @[pp_generator.scala 42:19]
    node _pp_inv_3_T = bits(inputCtrl.inv, 3, 3) @[pp_generator.scala 43:39]
    node _pp_inv_3_T_1 = bits(_pp_inv_3_T, 0, 0) @[pp_generator.scala 43:43]
    node _pp_inv_3_T_2 = not(pp_set[3]) @[pp_generator.scala 43:51]
    node _pp_inv_3_T_3 = asSInt(_pp_inv_3_T_2) @[pp_generator.scala 43:51]
    node _pp_inv_3_T_4 = mux(_pp_inv_3_T_1, _pp_inv_3_T_3, pp_set[3]) @[pp_generator.scala 43:25]
    pp_inv[3] <= _pp_inv_3_T_4 @[pp_generator.scala 43:19]
    node _E_inv_3_T = bits(inputCtrl.Set0, 3, 3) @[pp_generator.scala 44:40]
    node _E_inv_3_T_1 = bits(_E_inv_3_T, 0, 0) @[pp_generator.scala 44:44]
    node _E_inv_3_T_2 = bits(inputCtrl.inv, 3, 3) @[pp_generator.scala 44:65]
    node _E_inv_3_T_3 = bits(_E_inv_3_T_2, 0, 0) @[pp_generator.scala 44:69]
    node _E_inv_3_T_4 = bits(inputCtrl.inv, 3, 3) @[pp_generator.scala 44:91]
    node _E_inv_3_T_5 = bits(inputData.multiplicand, 7, 7) @[pp_generator.scala 44:117]
    node _E_inv_3_T_6 = xor(_E_inv_3_T_4, _E_inv_3_T_5) @[pp_generator.scala 44:94]
    node _E_inv_3_T_7 = bits(_E_inv_3_T_6, 0, 0) @[pp_generator.scala 44:131]
    node _E_inv_3_T_8 = mux(_E_inv_3_T_1, _E_inv_3_T_3, _E_inv_3_T_7) @[pp_generator.scala 44:25]
    E_inv[3] <= _E_inv_3_T_8 @[pp_generator.scala 44:19]
    node _E_3_T = not(E_inv[3]) @[pp_generator.scala 45:22]
    E[3] <= _E_3_T @[pp_generator.scala 45:19]
    node pp_temp_3_lo_lo = asUInt(pp_inv[3]) @[Cat.scala 33:92]
    node pp_temp_3_lo = cat(E[3], pp_temp_3_lo_lo) @[Cat.scala 33:92]
    node pp_temp_3_hi = cat(UInt<5>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
    node _pp_temp_3_T = cat(pp_temp_3_hi, pp_temp_3_lo) @[Cat.scala 33:92]
    node _pp_temp_3_T_1 = asSInt(_pp_temp_3_T) @[pp_generator.scala 55:94]
    pp_temp[3] <= _pp_temp_3_T_1 @[pp_generator.scala 55:24]
    pp[0] <= pp_temp[0] @[pp_generator.scala 61:19]
    node _pp_1_T = bits(pp_temp[1], 13, 0) @[pp_generator.scala 63:36]
    node _pp_1_T_1 = bits(inputCtrl.inv, 0, 0) @[pp_generator.scala 63:78]
    node pp_1_hi = cat(_pp_1_T, UInt<1>("h0")) @[Cat.scala 33:92]
    node _pp_1_T_2 = cat(pp_1_hi, _pp_1_T_1) @[Cat.scala 33:92]
    node _pp_1_T_3 = asSInt(_pp_1_T_2) @[pp_generator.scala 63:85]
    pp[1] <= _pp_1_T_3 @[pp_generator.scala 63:19]
    node _pp_2_T = bits(pp_temp[2], 11, 0) @[pp_generator.scala 65:36]
    node _pp_2_T_1 = bits(inputCtrl.inv, 1, 1) @[pp_generator.scala 65:78]
    node pp_2_lo = cat(_pp_2_T_1, UInt<2>("h0")) @[Cat.scala 33:92]
    node pp_2_hi = cat(_pp_2_T, UInt<1>("h0")) @[Cat.scala 33:92]
    node _pp_2_T_2 = cat(pp_2_hi, pp_2_lo) @[Cat.scala 33:92]
    node _pp_2_T_3 = asSInt(_pp_2_T_2) @[pp_generator.scala 65:103]
    pp[2] <= _pp_2_T_3 @[pp_generator.scala 65:19]
    node _pp_3_T = bits(pp_temp[3], 9, 0) @[pp_generator.scala 65:36]
    node _pp_3_T_1 = bits(inputCtrl.inv, 2, 2) @[pp_generator.scala 65:78]
    node pp_3_lo = cat(_pp_3_T_1, UInt<4>("h0")) @[Cat.scala 33:92]
    node pp_3_hi = cat(_pp_3_T, UInt<1>("h0")) @[Cat.scala 33:92]
    node _pp_3_T_2 = cat(pp_3_hi, pp_3_lo) @[Cat.scala 33:92]
    node _pp_3_T_3 = asSInt(_pp_3_T_2) @[pp_generator.scala 65:103]
    pp[3] <= _pp_3_T_3 @[pp_generator.scala 65:19]
    node _sign_com_T = bits(inputCtrl.inv, 3, 3) @[pp_generator.scala 68:54]
    node sign_com_hi = cat(UInt<9>("h0"), _sign_com_T) @[Cat.scala 33:92]
    node _sign_com_T_1 = cat(sign_com_hi, UInt<6>("h0")) @[Cat.scala 33:92]
    node _sign_com_T_2 = asSInt(_sign_com_T_1) @[pp_generator.scala 68:97]
    sign_com <= _sign_com_T_2 @[pp_generator.scala 68:14]
    outputData.pp_out <= pp @[pp_generator.scala 70:25]
    outputData.sig_out <= sign_com @[pp_generator.scala 71:25]

  module RCA_6 :
    input clock : Clock
    input reset : Reset
    output input : { flip a_in : SInt<16>, flip b_in : SInt<16>, flip c_in : SInt<1>}
    output output : { S : SInt<16>, C : SInt<16>}

    wire g_comb : UInt<1>[16] @[rca.scala 22:22]
    wire p_comb : UInt<1>[16] @[rca.scala 23:22]
    wire s_comb : UInt<1>[16] @[rca.scala 24:22]
    wire c_comb : UInt<1>[17] @[rca.scala 25:22]
    node _c_comb_0_T = bits(input.c_in, 0, 0) @[rca.scala 27:29]
    c_comb[0] <= _c_comb_0_T @[rca.scala 27:15]
    node _g_comb_0_T = bits(input.a_in, 0, 0) @[rca.scala 30:35]
    node _g_comb_0_T_1 = bits(input.b_in, 0, 0) @[rca.scala 30:51]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[rca.scala 30:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[0] <= _g_comb_0_T_3 @[rca.scala 30:21]
    node _p_comb_0_T = bits(input.a_in, 0, 0) @[rca.scala 31:35]
    node _p_comb_0_T_1 = bits(input.b_in, 0, 0) @[rca.scala 31:51]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[rca.scala 31:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[0] <= _p_comb_0_T_3 @[rca.scala 31:21]
    node _s_comb_0_T = xor(p_comb[0], c_comb[0]) @[rca.scala 32:34]
    s_comb[0] <= _s_comb_0_T @[rca.scala 32:21]
    node _c_comb_1_T = and(c_comb[0], p_comb[0]) @[rca.scala 33:34]
    node _c_comb_1_T_1 = or(_c_comb_1_T, g_comb[0]) @[rca.scala 33:46]
    c_comb[1] <= _c_comb_1_T_1 @[rca.scala 33:21]
    node _g_comb_1_T = bits(input.a_in, 1, 1) @[rca.scala 30:35]
    node _g_comb_1_T_1 = bits(input.b_in, 1, 1) @[rca.scala 30:51]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[rca.scala 30:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[1] <= _g_comb_1_T_3 @[rca.scala 30:21]
    node _p_comb_1_T = bits(input.a_in, 1, 1) @[rca.scala 31:35]
    node _p_comb_1_T_1 = bits(input.b_in, 1, 1) @[rca.scala 31:51]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[rca.scala 31:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[1] <= _p_comb_1_T_3 @[rca.scala 31:21]
    node _s_comb_1_T = xor(p_comb[1], c_comb[1]) @[rca.scala 32:34]
    s_comb[1] <= _s_comb_1_T @[rca.scala 32:21]
    node _c_comb_2_T = and(c_comb[1], p_comb[1]) @[rca.scala 33:34]
    node _c_comb_2_T_1 = or(_c_comb_2_T, g_comb[1]) @[rca.scala 33:46]
    c_comb[2] <= _c_comb_2_T_1 @[rca.scala 33:21]
    node _g_comb_2_T = bits(input.a_in, 2, 2) @[rca.scala 30:35]
    node _g_comb_2_T_1 = bits(input.b_in, 2, 2) @[rca.scala 30:51]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[rca.scala 30:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[2] <= _g_comb_2_T_3 @[rca.scala 30:21]
    node _p_comb_2_T = bits(input.a_in, 2, 2) @[rca.scala 31:35]
    node _p_comb_2_T_1 = bits(input.b_in, 2, 2) @[rca.scala 31:51]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[rca.scala 31:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[2] <= _p_comb_2_T_3 @[rca.scala 31:21]
    node _s_comb_2_T = xor(p_comb[2], c_comb[2]) @[rca.scala 32:34]
    s_comb[2] <= _s_comb_2_T @[rca.scala 32:21]
    node _c_comb_3_T = and(c_comb[2], p_comb[2]) @[rca.scala 33:34]
    node _c_comb_3_T_1 = or(_c_comb_3_T, g_comb[2]) @[rca.scala 33:46]
    c_comb[3] <= _c_comb_3_T_1 @[rca.scala 33:21]
    node _g_comb_3_T = bits(input.a_in, 3, 3) @[rca.scala 30:35]
    node _g_comb_3_T_1 = bits(input.b_in, 3, 3) @[rca.scala 30:51]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[rca.scala 30:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[3] <= _g_comb_3_T_3 @[rca.scala 30:21]
    node _p_comb_3_T = bits(input.a_in, 3, 3) @[rca.scala 31:35]
    node _p_comb_3_T_1 = bits(input.b_in, 3, 3) @[rca.scala 31:51]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[rca.scala 31:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[3] <= _p_comb_3_T_3 @[rca.scala 31:21]
    node _s_comb_3_T = xor(p_comb[3], c_comb[3]) @[rca.scala 32:34]
    s_comb[3] <= _s_comb_3_T @[rca.scala 32:21]
    node _c_comb_4_T = and(c_comb[3], p_comb[3]) @[rca.scala 33:34]
    node _c_comb_4_T_1 = or(_c_comb_4_T, g_comb[3]) @[rca.scala 33:46]
    c_comb[4] <= _c_comb_4_T_1 @[rca.scala 33:21]
    node _g_comb_4_T = bits(input.a_in, 4, 4) @[rca.scala 30:35]
    node _g_comb_4_T_1 = bits(input.b_in, 4, 4) @[rca.scala 30:51]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[rca.scala 30:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[4] <= _g_comb_4_T_3 @[rca.scala 30:21]
    node _p_comb_4_T = bits(input.a_in, 4, 4) @[rca.scala 31:35]
    node _p_comb_4_T_1 = bits(input.b_in, 4, 4) @[rca.scala 31:51]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[rca.scala 31:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[4] <= _p_comb_4_T_3 @[rca.scala 31:21]
    node _s_comb_4_T = xor(p_comb[4], c_comb[4]) @[rca.scala 32:34]
    s_comb[4] <= _s_comb_4_T @[rca.scala 32:21]
    node _c_comb_5_T = and(c_comb[4], p_comb[4]) @[rca.scala 33:34]
    node _c_comb_5_T_1 = or(_c_comb_5_T, g_comb[4]) @[rca.scala 33:46]
    c_comb[5] <= _c_comb_5_T_1 @[rca.scala 33:21]
    node _g_comb_5_T = bits(input.a_in, 5, 5) @[rca.scala 30:35]
    node _g_comb_5_T_1 = bits(input.b_in, 5, 5) @[rca.scala 30:51]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[rca.scala 30:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[5] <= _g_comb_5_T_3 @[rca.scala 30:21]
    node _p_comb_5_T = bits(input.a_in, 5, 5) @[rca.scala 31:35]
    node _p_comb_5_T_1 = bits(input.b_in, 5, 5) @[rca.scala 31:51]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[rca.scala 31:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[5] <= _p_comb_5_T_3 @[rca.scala 31:21]
    node _s_comb_5_T = xor(p_comb[5], c_comb[5]) @[rca.scala 32:34]
    s_comb[5] <= _s_comb_5_T @[rca.scala 32:21]
    node _c_comb_6_T = and(c_comb[5], p_comb[5]) @[rca.scala 33:34]
    node _c_comb_6_T_1 = or(_c_comb_6_T, g_comb[5]) @[rca.scala 33:46]
    c_comb[6] <= _c_comb_6_T_1 @[rca.scala 33:21]
    node _g_comb_6_T = bits(input.a_in, 6, 6) @[rca.scala 30:35]
    node _g_comb_6_T_1 = bits(input.b_in, 6, 6) @[rca.scala 30:51]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[rca.scala 30:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[6] <= _g_comb_6_T_3 @[rca.scala 30:21]
    node _p_comb_6_T = bits(input.a_in, 6, 6) @[rca.scala 31:35]
    node _p_comb_6_T_1 = bits(input.b_in, 6, 6) @[rca.scala 31:51]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[rca.scala 31:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[6] <= _p_comb_6_T_3 @[rca.scala 31:21]
    node _s_comb_6_T = xor(p_comb[6], c_comb[6]) @[rca.scala 32:34]
    s_comb[6] <= _s_comb_6_T @[rca.scala 32:21]
    node _c_comb_7_T = and(c_comb[6], p_comb[6]) @[rca.scala 33:34]
    node _c_comb_7_T_1 = or(_c_comb_7_T, g_comb[6]) @[rca.scala 33:46]
    c_comb[7] <= _c_comb_7_T_1 @[rca.scala 33:21]
    node _g_comb_7_T = bits(input.a_in, 7, 7) @[rca.scala 30:35]
    node _g_comb_7_T_1 = bits(input.b_in, 7, 7) @[rca.scala 30:51]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[rca.scala 30:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[7] <= _g_comb_7_T_3 @[rca.scala 30:21]
    node _p_comb_7_T = bits(input.a_in, 7, 7) @[rca.scala 31:35]
    node _p_comb_7_T_1 = bits(input.b_in, 7, 7) @[rca.scala 31:51]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[rca.scala 31:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[7] <= _p_comb_7_T_3 @[rca.scala 31:21]
    node _s_comb_7_T = xor(p_comb[7], c_comb[7]) @[rca.scala 32:34]
    s_comb[7] <= _s_comb_7_T @[rca.scala 32:21]
    node _c_comb_8_T = and(c_comb[7], p_comb[7]) @[rca.scala 33:34]
    node _c_comb_8_T_1 = or(_c_comb_8_T, g_comb[7]) @[rca.scala 33:46]
    c_comb[8] <= _c_comb_8_T_1 @[rca.scala 33:21]
    node _g_comb_8_T = bits(input.a_in, 8, 8) @[rca.scala 30:35]
    node _g_comb_8_T_1 = bits(input.b_in, 8, 8) @[rca.scala 30:51]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[rca.scala 30:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[8] <= _g_comb_8_T_3 @[rca.scala 30:21]
    node _p_comb_8_T = bits(input.a_in, 8, 8) @[rca.scala 31:35]
    node _p_comb_8_T_1 = bits(input.b_in, 8, 8) @[rca.scala 31:51]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[rca.scala 31:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[8] <= _p_comb_8_T_3 @[rca.scala 31:21]
    node _s_comb_8_T = xor(p_comb[8], c_comb[8]) @[rca.scala 32:34]
    s_comb[8] <= _s_comb_8_T @[rca.scala 32:21]
    node _c_comb_9_T = and(c_comb[8], p_comb[8]) @[rca.scala 33:34]
    node _c_comb_9_T_1 = or(_c_comb_9_T, g_comb[8]) @[rca.scala 33:46]
    c_comb[9] <= _c_comb_9_T_1 @[rca.scala 33:21]
    node _g_comb_9_T = bits(input.a_in, 9, 9) @[rca.scala 30:35]
    node _g_comb_9_T_1 = bits(input.b_in, 9, 9) @[rca.scala 30:51]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[rca.scala 30:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[9] <= _g_comb_9_T_3 @[rca.scala 30:21]
    node _p_comb_9_T = bits(input.a_in, 9, 9) @[rca.scala 31:35]
    node _p_comb_9_T_1 = bits(input.b_in, 9, 9) @[rca.scala 31:51]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[rca.scala 31:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[9] <= _p_comb_9_T_3 @[rca.scala 31:21]
    node _s_comb_9_T = xor(p_comb[9], c_comb[9]) @[rca.scala 32:34]
    s_comb[9] <= _s_comb_9_T @[rca.scala 32:21]
    node _c_comb_10_T = and(c_comb[9], p_comb[9]) @[rca.scala 33:34]
    node _c_comb_10_T_1 = or(_c_comb_10_T, g_comb[9]) @[rca.scala 33:46]
    c_comb[10] <= _c_comb_10_T_1 @[rca.scala 33:21]
    node _g_comb_10_T = bits(input.a_in, 10, 10) @[rca.scala 30:35]
    node _g_comb_10_T_1 = bits(input.b_in, 10, 10) @[rca.scala 30:51]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[rca.scala 30:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[10] <= _g_comb_10_T_3 @[rca.scala 30:21]
    node _p_comb_10_T = bits(input.a_in, 10, 10) @[rca.scala 31:35]
    node _p_comb_10_T_1 = bits(input.b_in, 10, 10) @[rca.scala 31:51]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[rca.scala 31:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[10] <= _p_comb_10_T_3 @[rca.scala 31:21]
    node _s_comb_10_T = xor(p_comb[10], c_comb[10]) @[rca.scala 32:34]
    s_comb[10] <= _s_comb_10_T @[rca.scala 32:21]
    node _c_comb_11_T = and(c_comb[10], p_comb[10]) @[rca.scala 33:34]
    node _c_comb_11_T_1 = or(_c_comb_11_T, g_comb[10]) @[rca.scala 33:46]
    c_comb[11] <= _c_comb_11_T_1 @[rca.scala 33:21]
    node _g_comb_11_T = bits(input.a_in, 11, 11) @[rca.scala 30:35]
    node _g_comb_11_T_1 = bits(input.b_in, 11, 11) @[rca.scala 30:51]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[rca.scala 30:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[11] <= _g_comb_11_T_3 @[rca.scala 30:21]
    node _p_comb_11_T = bits(input.a_in, 11, 11) @[rca.scala 31:35]
    node _p_comb_11_T_1 = bits(input.b_in, 11, 11) @[rca.scala 31:51]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[rca.scala 31:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[11] <= _p_comb_11_T_3 @[rca.scala 31:21]
    node _s_comb_11_T = xor(p_comb[11], c_comb[11]) @[rca.scala 32:34]
    s_comb[11] <= _s_comb_11_T @[rca.scala 32:21]
    node _c_comb_12_T = and(c_comb[11], p_comb[11]) @[rca.scala 33:34]
    node _c_comb_12_T_1 = or(_c_comb_12_T, g_comb[11]) @[rca.scala 33:46]
    c_comb[12] <= _c_comb_12_T_1 @[rca.scala 33:21]
    node _g_comb_12_T = bits(input.a_in, 12, 12) @[rca.scala 30:35]
    node _g_comb_12_T_1 = bits(input.b_in, 12, 12) @[rca.scala 30:51]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[rca.scala 30:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[12] <= _g_comb_12_T_3 @[rca.scala 30:21]
    node _p_comb_12_T = bits(input.a_in, 12, 12) @[rca.scala 31:35]
    node _p_comb_12_T_1 = bits(input.b_in, 12, 12) @[rca.scala 31:51]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[rca.scala 31:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[12] <= _p_comb_12_T_3 @[rca.scala 31:21]
    node _s_comb_12_T = xor(p_comb[12], c_comb[12]) @[rca.scala 32:34]
    s_comb[12] <= _s_comb_12_T @[rca.scala 32:21]
    node _c_comb_13_T = and(c_comb[12], p_comb[12]) @[rca.scala 33:34]
    node _c_comb_13_T_1 = or(_c_comb_13_T, g_comb[12]) @[rca.scala 33:46]
    c_comb[13] <= _c_comb_13_T_1 @[rca.scala 33:21]
    node _g_comb_13_T = bits(input.a_in, 13, 13) @[rca.scala 30:35]
    node _g_comb_13_T_1 = bits(input.b_in, 13, 13) @[rca.scala 30:51]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[rca.scala 30:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[13] <= _g_comb_13_T_3 @[rca.scala 30:21]
    node _p_comb_13_T = bits(input.a_in, 13, 13) @[rca.scala 31:35]
    node _p_comb_13_T_1 = bits(input.b_in, 13, 13) @[rca.scala 31:51]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[rca.scala 31:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[13] <= _p_comb_13_T_3 @[rca.scala 31:21]
    node _s_comb_13_T = xor(p_comb[13], c_comb[13]) @[rca.scala 32:34]
    s_comb[13] <= _s_comb_13_T @[rca.scala 32:21]
    node _c_comb_14_T = and(c_comb[13], p_comb[13]) @[rca.scala 33:34]
    node _c_comb_14_T_1 = or(_c_comb_14_T, g_comb[13]) @[rca.scala 33:46]
    c_comb[14] <= _c_comb_14_T_1 @[rca.scala 33:21]
    node _g_comb_14_T = bits(input.a_in, 14, 14) @[rca.scala 30:35]
    node _g_comb_14_T_1 = bits(input.b_in, 14, 14) @[rca.scala 30:51]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[rca.scala 30:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[14] <= _g_comb_14_T_3 @[rca.scala 30:21]
    node _p_comb_14_T = bits(input.a_in, 14, 14) @[rca.scala 31:35]
    node _p_comb_14_T_1 = bits(input.b_in, 14, 14) @[rca.scala 31:51]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[rca.scala 31:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[14] <= _p_comb_14_T_3 @[rca.scala 31:21]
    node _s_comb_14_T = xor(p_comb[14], c_comb[14]) @[rca.scala 32:34]
    s_comb[14] <= _s_comb_14_T @[rca.scala 32:21]
    node _c_comb_15_T = and(c_comb[14], p_comb[14]) @[rca.scala 33:34]
    node _c_comb_15_T_1 = or(_c_comb_15_T, g_comb[14]) @[rca.scala 33:46]
    c_comb[15] <= _c_comb_15_T_1 @[rca.scala 33:21]
    node _g_comb_15_T = bits(input.a_in, 15, 15) @[rca.scala 30:35]
    node _g_comb_15_T_1 = bits(input.b_in, 15, 15) @[rca.scala 30:51]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[rca.scala 30:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[15] <= _g_comb_15_T_3 @[rca.scala 30:21]
    node _p_comb_15_T = bits(input.a_in, 15, 15) @[rca.scala 31:35]
    node _p_comb_15_T_1 = bits(input.b_in, 15, 15) @[rca.scala 31:51]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[rca.scala 31:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[15] <= _p_comb_15_T_3 @[rca.scala 31:21]
    node _s_comb_15_T = xor(p_comb[15], c_comb[15]) @[rca.scala 32:34]
    s_comb[15] <= _s_comb_15_T @[rca.scala 32:21]
    node _c_comb_16_T = and(c_comb[15], p_comb[15]) @[rca.scala 33:34]
    node _c_comb_16_T_1 = or(_c_comb_16_T, g_comb[15]) @[rca.scala 33:46]
    c_comb[16] <= _c_comb_16_T_1 @[rca.scala 33:21]
    node output_S_lo_lo_lo = cat(s_comb[1], s_comb[0]) @[rca.scala 36:24]
    node output_S_lo_lo_hi = cat(s_comb[3], s_comb[2]) @[rca.scala 36:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[rca.scala 36:24]
    node output_S_lo_hi_lo = cat(s_comb[5], s_comb[4]) @[rca.scala 36:24]
    node output_S_lo_hi_hi = cat(s_comb[7], s_comb[6]) @[rca.scala 36:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[rca.scala 36:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[rca.scala 36:24]
    node output_S_hi_lo_lo = cat(s_comb[9], s_comb[8]) @[rca.scala 36:24]
    node output_S_hi_lo_hi = cat(s_comb[11], s_comb[10]) @[rca.scala 36:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[rca.scala 36:24]
    node output_S_hi_hi_lo = cat(s_comb[13], s_comb[12]) @[rca.scala 36:24]
    node output_S_hi_hi_hi = cat(s_comb[15], s_comb[14]) @[rca.scala 36:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[rca.scala 36:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[rca.scala 36:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[rca.scala 36:24]
    node _output_S_T_1 = asSInt(_output_S_T) @[rca.scala 36:31]
    output.S <= _output_S_T_1 @[rca.scala 36:14]
    node _output_C_T = asSInt(c_comb[16]) @[rca.scala 37:40]
    output.C <= _output_C_T @[rca.scala 37:14]

  module pp_compressor3_2_9 :
    input clock : Clock
    input reset : Reset
    output input : { flip pp0_in : SInt<16>, flip pp1_in : SInt<16>, flip pp2_in : SInt<16>}
    output output : { S : SInt<16>, C : SInt<16>}

    wire g_comb : UInt<1>[16] @[pp_compressor3_2.scala 22:22]
    wire p_comb : UInt<1>[16] @[pp_compressor3_2.scala 23:22]
    wire s_comb : UInt<1>[16] @[pp_compressor3_2.scala 24:22]
    wire c_comb : UInt<1>[16] @[pp_compressor3_2.scala 25:22]
    node _g_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 28:35]
    node _g_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 28:53]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[0] <= _g_comb_0_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 29:35]
    node _p_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 29:53]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[0] <= _p_comb_0_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 30:46]
    node _s_comb_0_T_1 = bits(_s_comb_0_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_0_T_2 = xor(p_comb[0], _s_comb_0_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[0] <= _s_comb_0_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 31:34]
    node _c_comb_0_T_1 = bits(_c_comb_0_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_0_T_2 = and(_c_comb_0_T_1, p_comb[0]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_0_T_3 = or(_c_comb_0_T_2, g_comb[0]) @[pp_compressor3_2.scala 31:57]
    c_comb[0] <= _c_comb_0_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 28:35]
    node _g_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 28:53]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[1] <= _g_comb_1_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 29:35]
    node _p_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 29:53]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[1] <= _p_comb_1_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 30:46]
    node _s_comb_1_T_1 = bits(_s_comb_1_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_1_T_2 = xor(p_comb[1], _s_comb_1_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[1] <= _s_comb_1_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 31:34]
    node _c_comb_1_T_1 = bits(_c_comb_1_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_1_T_2 = and(_c_comb_1_T_1, p_comb[1]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_1_T_3 = or(_c_comb_1_T_2, g_comb[1]) @[pp_compressor3_2.scala 31:57]
    c_comb[1] <= _c_comb_1_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 28:35]
    node _g_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 28:53]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[2] <= _g_comb_2_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 29:35]
    node _p_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 29:53]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[2] <= _p_comb_2_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 30:46]
    node _s_comb_2_T_1 = bits(_s_comb_2_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_2_T_2 = xor(p_comb[2], _s_comb_2_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[2] <= _s_comb_2_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 31:34]
    node _c_comb_2_T_1 = bits(_c_comb_2_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_2_T_2 = and(_c_comb_2_T_1, p_comb[2]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_2_T_3 = or(_c_comb_2_T_2, g_comb[2]) @[pp_compressor3_2.scala 31:57]
    c_comb[2] <= _c_comb_2_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 28:35]
    node _g_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 28:53]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[3] <= _g_comb_3_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 29:35]
    node _p_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 29:53]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[3] <= _p_comb_3_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 30:46]
    node _s_comb_3_T_1 = bits(_s_comb_3_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_3_T_2 = xor(p_comb[3], _s_comb_3_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[3] <= _s_comb_3_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 31:34]
    node _c_comb_3_T_1 = bits(_c_comb_3_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_3_T_2 = and(_c_comb_3_T_1, p_comb[3]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_3_T_3 = or(_c_comb_3_T_2, g_comb[3]) @[pp_compressor3_2.scala 31:57]
    c_comb[3] <= _c_comb_3_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 28:35]
    node _g_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 28:53]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[4] <= _g_comb_4_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 29:35]
    node _p_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 29:53]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[4] <= _p_comb_4_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 30:46]
    node _s_comb_4_T_1 = bits(_s_comb_4_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_4_T_2 = xor(p_comb[4], _s_comb_4_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[4] <= _s_comb_4_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 31:34]
    node _c_comb_4_T_1 = bits(_c_comb_4_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_4_T_2 = and(_c_comb_4_T_1, p_comb[4]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_4_T_3 = or(_c_comb_4_T_2, g_comb[4]) @[pp_compressor3_2.scala 31:57]
    c_comb[4] <= _c_comb_4_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 28:35]
    node _g_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 28:53]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[5] <= _g_comb_5_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 29:35]
    node _p_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 29:53]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[5] <= _p_comb_5_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 30:46]
    node _s_comb_5_T_1 = bits(_s_comb_5_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_5_T_2 = xor(p_comb[5], _s_comb_5_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[5] <= _s_comb_5_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 31:34]
    node _c_comb_5_T_1 = bits(_c_comb_5_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_5_T_2 = and(_c_comb_5_T_1, p_comb[5]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_5_T_3 = or(_c_comb_5_T_2, g_comb[5]) @[pp_compressor3_2.scala 31:57]
    c_comb[5] <= _c_comb_5_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 28:35]
    node _g_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 28:53]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[6] <= _g_comb_6_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 29:35]
    node _p_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 29:53]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[6] <= _p_comb_6_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 30:46]
    node _s_comb_6_T_1 = bits(_s_comb_6_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_6_T_2 = xor(p_comb[6], _s_comb_6_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[6] <= _s_comb_6_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 31:34]
    node _c_comb_6_T_1 = bits(_c_comb_6_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_6_T_2 = and(_c_comb_6_T_1, p_comb[6]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_6_T_3 = or(_c_comb_6_T_2, g_comb[6]) @[pp_compressor3_2.scala 31:57]
    c_comb[6] <= _c_comb_6_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 28:35]
    node _g_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 28:53]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[7] <= _g_comb_7_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 29:35]
    node _p_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 29:53]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[7] <= _p_comb_7_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 30:46]
    node _s_comb_7_T_1 = bits(_s_comb_7_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_7_T_2 = xor(p_comb[7], _s_comb_7_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[7] <= _s_comb_7_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 31:34]
    node _c_comb_7_T_1 = bits(_c_comb_7_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_7_T_2 = and(_c_comb_7_T_1, p_comb[7]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_7_T_3 = or(_c_comb_7_T_2, g_comb[7]) @[pp_compressor3_2.scala 31:57]
    c_comb[7] <= _c_comb_7_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 28:35]
    node _g_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 28:53]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[8] <= _g_comb_8_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 29:35]
    node _p_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 29:53]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[8] <= _p_comb_8_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 30:46]
    node _s_comb_8_T_1 = bits(_s_comb_8_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_8_T_2 = xor(p_comb[8], _s_comb_8_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[8] <= _s_comb_8_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 31:34]
    node _c_comb_8_T_1 = bits(_c_comb_8_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_8_T_2 = and(_c_comb_8_T_1, p_comb[8]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_8_T_3 = or(_c_comb_8_T_2, g_comb[8]) @[pp_compressor3_2.scala 31:57]
    c_comb[8] <= _c_comb_8_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 28:35]
    node _g_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 28:53]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[9] <= _g_comb_9_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 29:35]
    node _p_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 29:53]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[9] <= _p_comb_9_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 30:46]
    node _s_comb_9_T_1 = bits(_s_comb_9_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_9_T_2 = xor(p_comb[9], _s_comb_9_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[9] <= _s_comb_9_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 31:34]
    node _c_comb_9_T_1 = bits(_c_comb_9_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_9_T_2 = and(_c_comb_9_T_1, p_comb[9]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_9_T_3 = or(_c_comb_9_T_2, g_comb[9]) @[pp_compressor3_2.scala 31:57]
    c_comb[9] <= _c_comb_9_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 28:35]
    node _g_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 28:53]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[10] <= _g_comb_10_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 29:35]
    node _p_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 29:53]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[10] <= _p_comb_10_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 30:46]
    node _s_comb_10_T_1 = bits(_s_comb_10_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_10_T_2 = xor(p_comb[10], _s_comb_10_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[10] <= _s_comb_10_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 31:34]
    node _c_comb_10_T_1 = bits(_c_comb_10_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_10_T_2 = and(_c_comb_10_T_1, p_comb[10]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_10_T_3 = or(_c_comb_10_T_2, g_comb[10]) @[pp_compressor3_2.scala 31:57]
    c_comb[10] <= _c_comb_10_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 28:35]
    node _g_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 28:53]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[11] <= _g_comb_11_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 29:35]
    node _p_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 29:53]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[11] <= _p_comb_11_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 30:46]
    node _s_comb_11_T_1 = bits(_s_comb_11_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_11_T_2 = xor(p_comb[11], _s_comb_11_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[11] <= _s_comb_11_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 31:34]
    node _c_comb_11_T_1 = bits(_c_comb_11_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_11_T_2 = and(_c_comb_11_T_1, p_comb[11]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_11_T_3 = or(_c_comb_11_T_2, g_comb[11]) @[pp_compressor3_2.scala 31:57]
    c_comb[11] <= _c_comb_11_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 28:35]
    node _g_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 28:53]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[12] <= _g_comb_12_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 29:35]
    node _p_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 29:53]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[12] <= _p_comb_12_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 30:46]
    node _s_comb_12_T_1 = bits(_s_comb_12_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_12_T_2 = xor(p_comb[12], _s_comb_12_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[12] <= _s_comb_12_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 31:34]
    node _c_comb_12_T_1 = bits(_c_comb_12_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_12_T_2 = and(_c_comb_12_T_1, p_comb[12]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_12_T_3 = or(_c_comb_12_T_2, g_comb[12]) @[pp_compressor3_2.scala 31:57]
    c_comb[12] <= _c_comb_12_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 28:35]
    node _g_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 28:53]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[13] <= _g_comb_13_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 29:35]
    node _p_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 29:53]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[13] <= _p_comb_13_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 30:46]
    node _s_comb_13_T_1 = bits(_s_comb_13_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_13_T_2 = xor(p_comb[13], _s_comb_13_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[13] <= _s_comb_13_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 31:34]
    node _c_comb_13_T_1 = bits(_c_comb_13_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_13_T_2 = and(_c_comb_13_T_1, p_comb[13]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_13_T_3 = or(_c_comb_13_T_2, g_comb[13]) @[pp_compressor3_2.scala 31:57]
    c_comb[13] <= _c_comb_13_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 28:35]
    node _g_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 28:53]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[14] <= _g_comb_14_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 29:35]
    node _p_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 29:53]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[14] <= _p_comb_14_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 30:46]
    node _s_comb_14_T_1 = bits(_s_comb_14_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_14_T_2 = xor(p_comb[14], _s_comb_14_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[14] <= _s_comb_14_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 31:34]
    node _c_comb_14_T_1 = bits(_c_comb_14_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_14_T_2 = and(_c_comb_14_T_1, p_comb[14]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_14_T_3 = or(_c_comb_14_T_2, g_comb[14]) @[pp_compressor3_2.scala 31:57]
    c_comb[14] <= _c_comb_14_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 28:35]
    node _g_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 28:53]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[15] <= _g_comb_15_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 29:35]
    node _p_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 29:53]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[15] <= _p_comb_15_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 30:46]
    node _s_comb_15_T_1 = bits(_s_comb_15_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_15_T_2 = xor(p_comb[15], _s_comb_15_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[15] <= _s_comb_15_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 31:34]
    node _c_comb_15_T_1 = bits(_c_comb_15_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_15_T_2 = and(_c_comb_15_T_1, p_comb[15]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_15_T_3 = or(_c_comb_15_T_2, g_comb[15]) @[pp_compressor3_2.scala 31:57]
    c_comb[15] <= _c_comb_15_T_3 @[pp_compressor3_2.scala 31:19]
    node output_S_lo_lo_lo = cat(s_comb[1], s_comb[0]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo_hi = cat(s_comb[3], s_comb[2]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_lo = cat(s_comb[5], s_comb[4]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_hi = cat(s_comb[7], s_comb[6]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_lo = cat(s_comb[9], s_comb[8]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_hi = cat(s_comb[11], s_comb[10]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_lo = cat(s_comb[13], s_comb[12]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_hi = cat(s_comb[15], s_comb[14]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T_1 = asSInt(_output_S_T) @[pp_compressor3_2.scala 34:31]
    output.S <= _output_S_T_1 @[pp_compressor3_2.scala 34:14]
    node output_C_lo_lo_lo = cat(c_comb[1], c_comb[0]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo_hi = cat(c_comb[3], c_comb[2]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo = cat(output_C_lo_lo_hi, output_C_lo_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_lo = cat(c_comb[5], c_comb[4]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_hi = cat(c_comb[7], c_comb[6]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi = cat(output_C_lo_hi_hi, output_C_lo_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo = cat(output_C_lo_hi, output_C_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_lo = cat(c_comb[9], c_comb[8]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_hi = cat(c_comb[11], c_comb[10]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo = cat(output_C_hi_lo_hi, output_C_hi_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_lo = cat(c_comb[13], c_comb[12]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_hi = cat(c_comb[15], c_comb[14]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi = cat(output_C_hi_hi_hi, output_C_hi_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi = cat(output_C_hi_hi, output_C_hi_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T = cat(output_C_hi, output_C_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T_1 = bits(_output_C_T, 14, 0) @[pp_compressor3_2.scala 35:36]
    node _output_C_T_2 = cat(_output_C_T_1, UInt<1>("h0")) @[Cat.scala 33:92]
    node _output_C_T_3 = asSInt(_output_C_T_2) @[pp_compressor3_2.scala 35:61]
    output.C <= _output_C_T_3 @[pp_compressor3_2.scala 35:14]

  module pp_compressor3_2_10 :
    input clock : Clock
    input reset : Reset
    output input : { flip pp0_in : SInt<16>, flip pp1_in : SInt<16>, flip pp2_in : SInt<16>}
    output output : { S : SInt<16>, C : SInt<16>}

    wire g_comb : UInt<1>[16] @[pp_compressor3_2.scala 22:22]
    wire p_comb : UInt<1>[16] @[pp_compressor3_2.scala 23:22]
    wire s_comb : UInt<1>[16] @[pp_compressor3_2.scala 24:22]
    wire c_comb : UInt<1>[16] @[pp_compressor3_2.scala 25:22]
    node _g_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 28:35]
    node _g_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 28:53]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[0] <= _g_comb_0_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 29:35]
    node _p_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 29:53]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[0] <= _p_comb_0_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 30:46]
    node _s_comb_0_T_1 = bits(_s_comb_0_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_0_T_2 = xor(p_comb[0], _s_comb_0_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[0] <= _s_comb_0_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 31:34]
    node _c_comb_0_T_1 = bits(_c_comb_0_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_0_T_2 = and(_c_comb_0_T_1, p_comb[0]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_0_T_3 = or(_c_comb_0_T_2, g_comb[0]) @[pp_compressor3_2.scala 31:57]
    c_comb[0] <= _c_comb_0_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 28:35]
    node _g_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 28:53]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[1] <= _g_comb_1_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 29:35]
    node _p_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 29:53]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[1] <= _p_comb_1_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 30:46]
    node _s_comb_1_T_1 = bits(_s_comb_1_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_1_T_2 = xor(p_comb[1], _s_comb_1_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[1] <= _s_comb_1_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 31:34]
    node _c_comb_1_T_1 = bits(_c_comb_1_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_1_T_2 = and(_c_comb_1_T_1, p_comb[1]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_1_T_3 = or(_c_comb_1_T_2, g_comb[1]) @[pp_compressor3_2.scala 31:57]
    c_comb[1] <= _c_comb_1_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 28:35]
    node _g_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 28:53]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[2] <= _g_comb_2_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 29:35]
    node _p_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 29:53]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[2] <= _p_comb_2_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 30:46]
    node _s_comb_2_T_1 = bits(_s_comb_2_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_2_T_2 = xor(p_comb[2], _s_comb_2_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[2] <= _s_comb_2_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 31:34]
    node _c_comb_2_T_1 = bits(_c_comb_2_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_2_T_2 = and(_c_comb_2_T_1, p_comb[2]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_2_T_3 = or(_c_comb_2_T_2, g_comb[2]) @[pp_compressor3_2.scala 31:57]
    c_comb[2] <= _c_comb_2_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 28:35]
    node _g_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 28:53]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[3] <= _g_comb_3_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 29:35]
    node _p_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 29:53]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[3] <= _p_comb_3_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 30:46]
    node _s_comb_3_T_1 = bits(_s_comb_3_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_3_T_2 = xor(p_comb[3], _s_comb_3_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[3] <= _s_comb_3_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 31:34]
    node _c_comb_3_T_1 = bits(_c_comb_3_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_3_T_2 = and(_c_comb_3_T_1, p_comb[3]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_3_T_3 = or(_c_comb_3_T_2, g_comb[3]) @[pp_compressor3_2.scala 31:57]
    c_comb[3] <= _c_comb_3_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 28:35]
    node _g_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 28:53]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[4] <= _g_comb_4_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 29:35]
    node _p_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 29:53]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[4] <= _p_comb_4_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 30:46]
    node _s_comb_4_T_1 = bits(_s_comb_4_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_4_T_2 = xor(p_comb[4], _s_comb_4_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[4] <= _s_comb_4_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 31:34]
    node _c_comb_4_T_1 = bits(_c_comb_4_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_4_T_2 = and(_c_comb_4_T_1, p_comb[4]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_4_T_3 = or(_c_comb_4_T_2, g_comb[4]) @[pp_compressor3_2.scala 31:57]
    c_comb[4] <= _c_comb_4_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 28:35]
    node _g_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 28:53]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[5] <= _g_comb_5_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 29:35]
    node _p_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 29:53]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[5] <= _p_comb_5_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 30:46]
    node _s_comb_5_T_1 = bits(_s_comb_5_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_5_T_2 = xor(p_comb[5], _s_comb_5_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[5] <= _s_comb_5_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 31:34]
    node _c_comb_5_T_1 = bits(_c_comb_5_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_5_T_2 = and(_c_comb_5_T_1, p_comb[5]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_5_T_3 = or(_c_comb_5_T_2, g_comb[5]) @[pp_compressor3_2.scala 31:57]
    c_comb[5] <= _c_comb_5_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 28:35]
    node _g_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 28:53]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[6] <= _g_comb_6_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 29:35]
    node _p_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 29:53]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[6] <= _p_comb_6_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 30:46]
    node _s_comb_6_T_1 = bits(_s_comb_6_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_6_T_2 = xor(p_comb[6], _s_comb_6_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[6] <= _s_comb_6_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 31:34]
    node _c_comb_6_T_1 = bits(_c_comb_6_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_6_T_2 = and(_c_comb_6_T_1, p_comb[6]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_6_T_3 = or(_c_comb_6_T_2, g_comb[6]) @[pp_compressor3_2.scala 31:57]
    c_comb[6] <= _c_comb_6_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 28:35]
    node _g_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 28:53]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[7] <= _g_comb_7_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 29:35]
    node _p_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 29:53]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[7] <= _p_comb_7_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 30:46]
    node _s_comb_7_T_1 = bits(_s_comb_7_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_7_T_2 = xor(p_comb[7], _s_comb_7_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[7] <= _s_comb_7_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 31:34]
    node _c_comb_7_T_1 = bits(_c_comb_7_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_7_T_2 = and(_c_comb_7_T_1, p_comb[7]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_7_T_3 = or(_c_comb_7_T_2, g_comb[7]) @[pp_compressor3_2.scala 31:57]
    c_comb[7] <= _c_comb_7_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 28:35]
    node _g_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 28:53]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[8] <= _g_comb_8_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 29:35]
    node _p_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 29:53]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[8] <= _p_comb_8_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 30:46]
    node _s_comb_8_T_1 = bits(_s_comb_8_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_8_T_2 = xor(p_comb[8], _s_comb_8_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[8] <= _s_comb_8_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 31:34]
    node _c_comb_8_T_1 = bits(_c_comb_8_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_8_T_2 = and(_c_comb_8_T_1, p_comb[8]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_8_T_3 = or(_c_comb_8_T_2, g_comb[8]) @[pp_compressor3_2.scala 31:57]
    c_comb[8] <= _c_comb_8_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 28:35]
    node _g_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 28:53]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[9] <= _g_comb_9_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 29:35]
    node _p_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 29:53]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[9] <= _p_comb_9_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 30:46]
    node _s_comb_9_T_1 = bits(_s_comb_9_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_9_T_2 = xor(p_comb[9], _s_comb_9_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[9] <= _s_comb_9_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 31:34]
    node _c_comb_9_T_1 = bits(_c_comb_9_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_9_T_2 = and(_c_comb_9_T_1, p_comb[9]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_9_T_3 = or(_c_comb_9_T_2, g_comb[9]) @[pp_compressor3_2.scala 31:57]
    c_comb[9] <= _c_comb_9_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 28:35]
    node _g_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 28:53]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[10] <= _g_comb_10_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 29:35]
    node _p_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 29:53]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[10] <= _p_comb_10_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 30:46]
    node _s_comb_10_T_1 = bits(_s_comb_10_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_10_T_2 = xor(p_comb[10], _s_comb_10_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[10] <= _s_comb_10_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 31:34]
    node _c_comb_10_T_1 = bits(_c_comb_10_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_10_T_2 = and(_c_comb_10_T_1, p_comb[10]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_10_T_3 = or(_c_comb_10_T_2, g_comb[10]) @[pp_compressor3_2.scala 31:57]
    c_comb[10] <= _c_comb_10_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 28:35]
    node _g_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 28:53]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[11] <= _g_comb_11_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 29:35]
    node _p_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 29:53]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[11] <= _p_comb_11_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 30:46]
    node _s_comb_11_T_1 = bits(_s_comb_11_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_11_T_2 = xor(p_comb[11], _s_comb_11_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[11] <= _s_comb_11_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 31:34]
    node _c_comb_11_T_1 = bits(_c_comb_11_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_11_T_2 = and(_c_comb_11_T_1, p_comb[11]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_11_T_3 = or(_c_comb_11_T_2, g_comb[11]) @[pp_compressor3_2.scala 31:57]
    c_comb[11] <= _c_comb_11_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 28:35]
    node _g_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 28:53]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[12] <= _g_comb_12_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 29:35]
    node _p_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 29:53]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[12] <= _p_comb_12_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 30:46]
    node _s_comb_12_T_1 = bits(_s_comb_12_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_12_T_2 = xor(p_comb[12], _s_comb_12_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[12] <= _s_comb_12_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 31:34]
    node _c_comb_12_T_1 = bits(_c_comb_12_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_12_T_2 = and(_c_comb_12_T_1, p_comb[12]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_12_T_3 = or(_c_comb_12_T_2, g_comb[12]) @[pp_compressor3_2.scala 31:57]
    c_comb[12] <= _c_comb_12_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 28:35]
    node _g_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 28:53]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[13] <= _g_comb_13_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 29:35]
    node _p_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 29:53]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[13] <= _p_comb_13_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 30:46]
    node _s_comb_13_T_1 = bits(_s_comb_13_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_13_T_2 = xor(p_comb[13], _s_comb_13_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[13] <= _s_comb_13_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 31:34]
    node _c_comb_13_T_1 = bits(_c_comb_13_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_13_T_2 = and(_c_comb_13_T_1, p_comb[13]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_13_T_3 = or(_c_comb_13_T_2, g_comb[13]) @[pp_compressor3_2.scala 31:57]
    c_comb[13] <= _c_comb_13_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 28:35]
    node _g_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 28:53]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[14] <= _g_comb_14_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 29:35]
    node _p_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 29:53]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[14] <= _p_comb_14_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 30:46]
    node _s_comb_14_T_1 = bits(_s_comb_14_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_14_T_2 = xor(p_comb[14], _s_comb_14_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[14] <= _s_comb_14_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 31:34]
    node _c_comb_14_T_1 = bits(_c_comb_14_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_14_T_2 = and(_c_comb_14_T_1, p_comb[14]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_14_T_3 = or(_c_comb_14_T_2, g_comb[14]) @[pp_compressor3_2.scala 31:57]
    c_comb[14] <= _c_comb_14_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 28:35]
    node _g_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 28:53]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[15] <= _g_comb_15_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 29:35]
    node _p_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 29:53]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[15] <= _p_comb_15_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 30:46]
    node _s_comb_15_T_1 = bits(_s_comb_15_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_15_T_2 = xor(p_comb[15], _s_comb_15_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[15] <= _s_comb_15_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 31:34]
    node _c_comb_15_T_1 = bits(_c_comb_15_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_15_T_2 = and(_c_comb_15_T_1, p_comb[15]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_15_T_3 = or(_c_comb_15_T_2, g_comb[15]) @[pp_compressor3_2.scala 31:57]
    c_comb[15] <= _c_comb_15_T_3 @[pp_compressor3_2.scala 31:19]
    node output_S_lo_lo_lo = cat(s_comb[1], s_comb[0]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo_hi = cat(s_comb[3], s_comb[2]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_lo = cat(s_comb[5], s_comb[4]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_hi = cat(s_comb[7], s_comb[6]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_lo = cat(s_comb[9], s_comb[8]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_hi = cat(s_comb[11], s_comb[10]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_lo = cat(s_comb[13], s_comb[12]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_hi = cat(s_comb[15], s_comb[14]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T_1 = asSInt(_output_S_T) @[pp_compressor3_2.scala 34:31]
    output.S <= _output_S_T_1 @[pp_compressor3_2.scala 34:14]
    node output_C_lo_lo_lo = cat(c_comb[1], c_comb[0]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo_hi = cat(c_comb[3], c_comb[2]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo = cat(output_C_lo_lo_hi, output_C_lo_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_lo = cat(c_comb[5], c_comb[4]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_hi = cat(c_comb[7], c_comb[6]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi = cat(output_C_lo_hi_hi, output_C_lo_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo = cat(output_C_lo_hi, output_C_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_lo = cat(c_comb[9], c_comb[8]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_hi = cat(c_comb[11], c_comb[10]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo = cat(output_C_hi_lo_hi, output_C_hi_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_lo = cat(c_comb[13], c_comb[12]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_hi = cat(c_comb[15], c_comb[14]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi = cat(output_C_hi_hi_hi, output_C_hi_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi = cat(output_C_hi_hi, output_C_hi_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T = cat(output_C_hi, output_C_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T_1 = bits(_output_C_T, 14, 0) @[pp_compressor3_2.scala 35:36]
    node _output_C_T_2 = cat(_output_C_T_1, UInt<1>("h0")) @[Cat.scala 33:92]
    node _output_C_T_3 = asSInt(_output_C_T_2) @[pp_compressor3_2.scala 35:61]
    output.C <= _output_C_T_3 @[pp_compressor3_2.scala 35:14]

  module pp_compressor3_2_11 :
    input clock : Clock
    input reset : Reset
    output input : { flip pp0_in : SInt<16>, flip pp1_in : SInt<16>, flip pp2_in : SInt<16>}
    output output : { S : SInt<16>, C : SInt<16>}

    wire g_comb : UInt<1>[16] @[pp_compressor3_2.scala 22:22]
    wire p_comb : UInt<1>[16] @[pp_compressor3_2.scala 23:22]
    wire s_comb : UInt<1>[16] @[pp_compressor3_2.scala 24:22]
    wire c_comb : UInt<1>[16] @[pp_compressor3_2.scala 25:22]
    node _g_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 28:35]
    node _g_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 28:53]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[0] <= _g_comb_0_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_0_T = bits(input.pp0_in, 0, 0) @[pp_compressor3_2.scala 29:35]
    node _p_comb_0_T_1 = bits(input.pp1_in, 0, 0) @[pp_compressor3_2.scala 29:53]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[0] <= _p_comb_0_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 30:46]
    node _s_comb_0_T_1 = bits(_s_comb_0_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_0_T_2 = xor(p_comb[0], _s_comb_0_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[0] <= _s_comb_0_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_0_T = bits(input.pp2_in, 0, 0) @[pp_compressor3_2.scala 31:34]
    node _c_comb_0_T_1 = bits(_c_comb_0_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_0_T_2 = and(_c_comb_0_T_1, p_comb[0]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_0_T_3 = or(_c_comb_0_T_2, g_comb[0]) @[pp_compressor3_2.scala 31:57]
    c_comb[0] <= _c_comb_0_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 28:35]
    node _g_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 28:53]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[1] <= _g_comb_1_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_1_T = bits(input.pp0_in, 1, 1) @[pp_compressor3_2.scala 29:35]
    node _p_comb_1_T_1 = bits(input.pp1_in, 1, 1) @[pp_compressor3_2.scala 29:53]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[1] <= _p_comb_1_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 30:46]
    node _s_comb_1_T_1 = bits(_s_comb_1_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_1_T_2 = xor(p_comb[1], _s_comb_1_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[1] <= _s_comb_1_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_1_T = bits(input.pp2_in, 1, 1) @[pp_compressor3_2.scala 31:34]
    node _c_comb_1_T_1 = bits(_c_comb_1_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_1_T_2 = and(_c_comb_1_T_1, p_comb[1]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_1_T_3 = or(_c_comb_1_T_2, g_comb[1]) @[pp_compressor3_2.scala 31:57]
    c_comb[1] <= _c_comb_1_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 28:35]
    node _g_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 28:53]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[2] <= _g_comb_2_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_2_T = bits(input.pp0_in, 2, 2) @[pp_compressor3_2.scala 29:35]
    node _p_comb_2_T_1 = bits(input.pp1_in, 2, 2) @[pp_compressor3_2.scala 29:53]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[2] <= _p_comb_2_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 30:46]
    node _s_comb_2_T_1 = bits(_s_comb_2_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_2_T_2 = xor(p_comb[2], _s_comb_2_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[2] <= _s_comb_2_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_2_T = bits(input.pp2_in, 2, 2) @[pp_compressor3_2.scala 31:34]
    node _c_comb_2_T_1 = bits(_c_comb_2_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_2_T_2 = and(_c_comb_2_T_1, p_comb[2]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_2_T_3 = or(_c_comb_2_T_2, g_comb[2]) @[pp_compressor3_2.scala 31:57]
    c_comb[2] <= _c_comb_2_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 28:35]
    node _g_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 28:53]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[3] <= _g_comb_3_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_3_T = bits(input.pp0_in, 3, 3) @[pp_compressor3_2.scala 29:35]
    node _p_comb_3_T_1 = bits(input.pp1_in, 3, 3) @[pp_compressor3_2.scala 29:53]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[3] <= _p_comb_3_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 30:46]
    node _s_comb_3_T_1 = bits(_s_comb_3_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_3_T_2 = xor(p_comb[3], _s_comb_3_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[3] <= _s_comb_3_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_3_T = bits(input.pp2_in, 3, 3) @[pp_compressor3_2.scala 31:34]
    node _c_comb_3_T_1 = bits(_c_comb_3_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_3_T_2 = and(_c_comb_3_T_1, p_comb[3]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_3_T_3 = or(_c_comb_3_T_2, g_comb[3]) @[pp_compressor3_2.scala 31:57]
    c_comb[3] <= _c_comb_3_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 28:35]
    node _g_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 28:53]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[4] <= _g_comb_4_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_4_T = bits(input.pp0_in, 4, 4) @[pp_compressor3_2.scala 29:35]
    node _p_comb_4_T_1 = bits(input.pp1_in, 4, 4) @[pp_compressor3_2.scala 29:53]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[4] <= _p_comb_4_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 30:46]
    node _s_comb_4_T_1 = bits(_s_comb_4_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_4_T_2 = xor(p_comb[4], _s_comb_4_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[4] <= _s_comb_4_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_4_T = bits(input.pp2_in, 4, 4) @[pp_compressor3_2.scala 31:34]
    node _c_comb_4_T_1 = bits(_c_comb_4_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_4_T_2 = and(_c_comb_4_T_1, p_comb[4]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_4_T_3 = or(_c_comb_4_T_2, g_comb[4]) @[pp_compressor3_2.scala 31:57]
    c_comb[4] <= _c_comb_4_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 28:35]
    node _g_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 28:53]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[5] <= _g_comb_5_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_5_T = bits(input.pp0_in, 5, 5) @[pp_compressor3_2.scala 29:35]
    node _p_comb_5_T_1 = bits(input.pp1_in, 5, 5) @[pp_compressor3_2.scala 29:53]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[5] <= _p_comb_5_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 30:46]
    node _s_comb_5_T_1 = bits(_s_comb_5_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_5_T_2 = xor(p_comb[5], _s_comb_5_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[5] <= _s_comb_5_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_5_T = bits(input.pp2_in, 5, 5) @[pp_compressor3_2.scala 31:34]
    node _c_comb_5_T_1 = bits(_c_comb_5_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_5_T_2 = and(_c_comb_5_T_1, p_comb[5]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_5_T_3 = or(_c_comb_5_T_2, g_comb[5]) @[pp_compressor3_2.scala 31:57]
    c_comb[5] <= _c_comb_5_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 28:35]
    node _g_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 28:53]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[6] <= _g_comb_6_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_6_T = bits(input.pp0_in, 6, 6) @[pp_compressor3_2.scala 29:35]
    node _p_comb_6_T_1 = bits(input.pp1_in, 6, 6) @[pp_compressor3_2.scala 29:53]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[6] <= _p_comb_6_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 30:46]
    node _s_comb_6_T_1 = bits(_s_comb_6_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_6_T_2 = xor(p_comb[6], _s_comb_6_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[6] <= _s_comb_6_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_6_T = bits(input.pp2_in, 6, 6) @[pp_compressor3_2.scala 31:34]
    node _c_comb_6_T_1 = bits(_c_comb_6_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_6_T_2 = and(_c_comb_6_T_1, p_comb[6]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_6_T_3 = or(_c_comb_6_T_2, g_comb[6]) @[pp_compressor3_2.scala 31:57]
    c_comb[6] <= _c_comb_6_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 28:35]
    node _g_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 28:53]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[7] <= _g_comb_7_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_7_T = bits(input.pp0_in, 7, 7) @[pp_compressor3_2.scala 29:35]
    node _p_comb_7_T_1 = bits(input.pp1_in, 7, 7) @[pp_compressor3_2.scala 29:53]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[7] <= _p_comb_7_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 30:46]
    node _s_comb_7_T_1 = bits(_s_comb_7_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_7_T_2 = xor(p_comb[7], _s_comb_7_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[7] <= _s_comb_7_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_7_T = bits(input.pp2_in, 7, 7) @[pp_compressor3_2.scala 31:34]
    node _c_comb_7_T_1 = bits(_c_comb_7_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_7_T_2 = and(_c_comb_7_T_1, p_comb[7]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_7_T_3 = or(_c_comb_7_T_2, g_comb[7]) @[pp_compressor3_2.scala 31:57]
    c_comb[7] <= _c_comb_7_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 28:35]
    node _g_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 28:53]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[8] <= _g_comb_8_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_8_T = bits(input.pp0_in, 8, 8) @[pp_compressor3_2.scala 29:35]
    node _p_comb_8_T_1 = bits(input.pp1_in, 8, 8) @[pp_compressor3_2.scala 29:53]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[8] <= _p_comb_8_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 30:46]
    node _s_comb_8_T_1 = bits(_s_comb_8_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_8_T_2 = xor(p_comb[8], _s_comb_8_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[8] <= _s_comb_8_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_8_T = bits(input.pp2_in, 8, 8) @[pp_compressor3_2.scala 31:34]
    node _c_comb_8_T_1 = bits(_c_comb_8_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_8_T_2 = and(_c_comb_8_T_1, p_comb[8]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_8_T_3 = or(_c_comb_8_T_2, g_comb[8]) @[pp_compressor3_2.scala 31:57]
    c_comb[8] <= _c_comb_8_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 28:35]
    node _g_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 28:53]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[9] <= _g_comb_9_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_9_T = bits(input.pp0_in, 9, 9) @[pp_compressor3_2.scala 29:35]
    node _p_comb_9_T_1 = bits(input.pp1_in, 9, 9) @[pp_compressor3_2.scala 29:53]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[9] <= _p_comb_9_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 30:46]
    node _s_comb_9_T_1 = bits(_s_comb_9_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_9_T_2 = xor(p_comb[9], _s_comb_9_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[9] <= _s_comb_9_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_9_T = bits(input.pp2_in, 9, 9) @[pp_compressor3_2.scala 31:34]
    node _c_comb_9_T_1 = bits(_c_comb_9_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_9_T_2 = and(_c_comb_9_T_1, p_comb[9]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_9_T_3 = or(_c_comb_9_T_2, g_comb[9]) @[pp_compressor3_2.scala 31:57]
    c_comb[9] <= _c_comb_9_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 28:35]
    node _g_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 28:53]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[10] <= _g_comb_10_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_10_T = bits(input.pp0_in, 10, 10) @[pp_compressor3_2.scala 29:35]
    node _p_comb_10_T_1 = bits(input.pp1_in, 10, 10) @[pp_compressor3_2.scala 29:53]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[10] <= _p_comb_10_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 30:46]
    node _s_comb_10_T_1 = bits(_s_comb_10_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_10_T_2 = xor(p_comb[10], _s_comb_10_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[10] <= _s_comb_10_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_10_T = bits(input.pp2_in, 10, 10) @[pp_compressor3_2.scala 31:34]
    node _c_comb_10_T_1 = bits(_c_comb_10_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_10_T_2 = and(_c_comb_10_T_1, p_comb[10]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_10_T_3 = or(_c_comb_10_T_2, g_comb[10]) @[pp_compressor3_2.scala 31:57]
    c_comb[10] <= _c_comb_10_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 28:35]
    node _g_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 28:53]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[11] <= _g_comb_11_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_11_T = bits(input.pp0_in, 11, 11) @[pp_compressor3_2.scala 29:35]
    node _p_comb_11_T_1 = bits(input.pp1_in, 11, 11) @[pp_compressor3_2.scala 29:53]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[11] <= _p_comb_11_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 30:46]
    node _s_comb_11_T_1 = bits(_s_comb_11_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_11_T_2 = xor(p_comb[11], _s_comb_11_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[11] <= _s_comb_11_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_11_T = bits(input.pp2_in, 11, 11) @[pp_compressor3_2.scala 31:34]
    node _c_comb_11_T_1 = bits(_c_comb_11_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_11_T_2 = and(_c_comb_11_T_1, p_comb[11]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_11_T_3 = or(_c_comb_11_T_2, g_comb[11]) @[pp_compressor3_2.scala 31:57]
    c_comb[11] <= _c_comb_11_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 28:35]
    node _g_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 28:53]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[12] <= _g_comb_12_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_12_T = bits(input.pp0_in, 12, 12) @[pp_compressor3_2.scala 29:35]
    node _p_comb_12_T_1 = bits(input.pp1_in, 12, 12) @[pp_compressor3_2.scala 29:53]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[12] <= _p_comb_12_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 30:46]
    node _s_comb_12_T_1 = bits(_s_comb_12_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_12_T_2 = xor(p_comb[12], _s_comb_12_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[12] <= _s_comb_12_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_12_T = bits(input.pp2_in, 12, 12) @[pp_compressor3_2.scala 31:34]
    node _c_comb_12_T_1 = bits(_c_comb_12_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_12_T_2 = and(_c_comb_12_T_1, p_comb[12]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_12_T_3 = or(_c_comb_12_T_2, g_comb[12]) @[pp_compressor3_2.scala 31:57]
    c_comb[12] <= _c_comb_12_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 28:35]
    node _g_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 28:53]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[13] <= _g_comb_13_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_13_T = bits(input.pp0_in, 13, 13) @[pp_compressor3_2.scala 29:35]
    node _p_comb_13_T_1 = bits(input.pp1_in, 13, 13) @[pp_compressor3_2.scala 29:53]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[13] <= _p_comb_13_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 30:46]
    node _s_comb_13_T_1 = bits(_s_comb_13_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_13_T_2 = xor(p_comb[13], _s_comb_13_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[13] <= _s_comb_13_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_13_T = bits(input.pp2_in, 13, 13) @[pp_compressor3_2.scala 31:34]
    node _c_comb_13_T_1 = bits(_c_comb_13_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_13_T_2 = and(_c_comb_13_T_1, p_comb[13]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_13_T_3 = or(_c_comb_13_T_2, g_comb[13]) @[pp_compressor3_2.scala 31:57]
    c_comb[13] <= _c_comb_13_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 28:35]
    node _g_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 28:53]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[14] <= _g_comb_14_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_14_T = bits(input.pp0_in, 14, 14) @[pp_compressor3_2.scala 29:35]
    node _p_comb_14_T_1 = bits(input.pp1_in, 14, 14) @[pp_compressor3_2.scala 29:53]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[14] <= _p_comb_14_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 30:46]
    node _s_comb_14_T_1 = bits(_s_comb_14_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_14_T_2 = xor(p_comb[14], _s_comb_14_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[14] <= _s_comb_14_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_14_T = bits(input.pp2_in, 14, 14) @[pp_compressor3_2.scala 31:34]
    node _c_comb_14_T_1 = bits(_c_comb_14_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_14_T_2 = and(_c_comb_14_T_1, p_comb[14]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_14_T_3 = or(_c_comb_14_T_2, g_comb[14]) @[pp_compressor3_2.scala 31:57]
    c_comb[14] <= _c_comb_14_T_3 @[pp_compressor3_2.scala 31:19]
    node _g_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 28:35]
    node _g_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 28:53]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    g_comb[15] <= _g_comb_15_T_3 @[pp_compressor3_2.scala 28:19]
    node _p_comb_15_T = bits(input.pp0_in, 15, 15) @[pp_compressor3_2.scala 29:35]
    node _p_comb_15_T_1 = bits(input.pp1_in, 15, 15) @[pp_compressor3_2.scala 29:53]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    p_comb[15] <= _p_comb_15_T_3 @[pp_compressor3_2.scala 29:19]
    node _s_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 30:46]
    node _s_comb_15_T_1 = bits(_s_comb_15_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node _s_comb_15_T_2 = xor(p_comb[15], _s_comb_15_T_1) @[pp_compressor3_2.scala 30:32]
    s_comb[15] <= _s_comb_15_T_2 @[pp_compressor3_2.scala 30:19]
    node _c_comb_15_T = bits(input.pp2_in, 15, 15) @[pp_compressor3_2.scala 31:34]
    node _c_comb_15_T_1 = bits(_c_comb_15_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_15_T_2 = and(_c_comb_15_T_1, p_comb[15]) @[pp_compressor3_2.scala 31:45]
    node _c_comb_15_T_3 = or(_c_comb_15_T_2, g_comb[15]) @[pp_compressor3_2.scala 31:57]
    c_comb[15] <= _c_comb_15_T_3 @[pp_compressor3_2.scala 31:19]
    node output_S_lo_lo_lo = cat(s_comb[1], s_comb[0]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo_hi = cat(s_comb[3], s_comb[2]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_lo = cat(s_comb[5], s_comb[4]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi_hi = cat(s_comb[7], s_comb[6]) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_lo = cat(s_comb[9], s_comb[8]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo_hi = cat(s_comb[11], s_comb[10]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_lo = cat(s_comb[13], s_comb[12]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi_hi = cat(s_comb[15], s_comb[14]) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T_1 = asSInt(_output_S_T) @[pp_compressor3_2.scala 34:31]
    output.S <= _output_S_T_1 @[pp_compressor3_2.scala 34:14]
    node output_C_lo_lo_lo = cat(c_comb[1], c_comb[0]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo_hi = cat(c_comb[3], c_comb[2]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo = cat(output_C_lo_lo_hi, output_C_lo_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_lo = cat(c_comb[5], c_comb[4]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi_hi = cat(c_comb[7], c_comb[6]) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi = cat(output_C_lo_hi_hi, output_C_lo_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo = cat(output_C_lo_hi, output_C_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_lo = cat(c_comb[9], c_comb[8]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo_hi = cat(c_comb[11], c_comb[10]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo = cat(output_C_hi_lo_hi, output_C_hi_lo_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_lo = cat(c_comb[13], c_comb[12]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi_hi = cat(c_comb[15], c_comb[14]) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi = cat(output_C_hi_hi_hi, output_C_hi_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi = cat(output_C_hi_hi, output_C_hi_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T = cat(output_C_hi, output_C_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T_1 = bits(_output_C_T, 14, 0) @[pp_compressor3_2.scala 35:36]
    node _output_C_T_2 = cat(_output_C_T_1, UInt<1>("h0")) @[Cat.scala 33:92]
    node _output_C_T_3 = asSInt(_output_C_T_2) @[pp_compressor3_2.scala 35:61]
    output.C <= _output_C_T_3 @[pp_compressor3_2.scala 35:14]

  module wallaceTree_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip data_i : SInt<16>[5], data_o : SInt<16>}

    inst rca of RCA_6 @[wallace_tree.scala 13:19]
    rca.clock <= clock
    rca.reset <= reset
    wire _rca_in_WIRE : SInt<16>[2] @[wallace_tree.scala 52:32]
    _rca_in_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 52:32]
    _rca_in_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 52:32]
    wire rca_in : SInt<16>[2]
    rca_in <= _rca_in_WIRE
    wire _l1_csa_in_WIRE : SInt<16>[3] @[wallace_tree.scala 55:36]
    _l1_csa_in_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 55:36]
    _l1_csa_in_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 55:36]
    _l1_csa_in_WIRE[2] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 55:36]
    wire l1_csa_in : SInt<16>[3]
    l1_csa_in <= _l1_csa_in_WIRE
    wire _l1_csa_os_WIRE : SInt<16>[1] @[wallace_tree.scala 56:36]
    _l1_csa_os_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 56:36]
    wire l1_csa_os : SInt<16>[1]
    l1_csa_os <= _l1_csa_os_WIRE
    wire _l1_csa_oc_WIRE : SInt<16>[1] @[wallace_tree.scala 57:36]
    _l1_csa_oc_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 57:36]
    wire l1_csa_oc : SInt<16>[1]
    l1_csa_oc <= _l1_csa_oc_WIRE
    wire _l1_csa_out_WIRE : SInt<16>[4] @[wallace_tree.scala 58:36]
    _l1_csa_out_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 58:36]
    _l1_csa_out_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 58:36]
    _l1_csa_out_WIRE[2] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 58:36]
    _l1_csa_out_WIRE[3] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 58:36]
    wire l1_csa_out : SInt<16>[4]
    l1_csa_out <= _l1_csa_out_WIRE
    inst layer1CSA_0 of pp_compressor3_2_9 @[wallace_tree.scala 59:44]
    layer1CSA_0.clock <= clock
    layer1CSA_0.reset <= reset
    l1_csa_in[0] <= io.data_i[0] @[wallace_tree.scala 61:43]
    l1_csa_in[1] <= io.data_i[1] @[wallace_tree.scala 61:43]
    l1_csa_in[2] <= io.data_i[2] @[wallace_tree.scala 61:43]
    layer1CSA_0.input.pp0_in <= l1_csa_in[0] @[wallace_tree.scala 63:31]
    layer1CSA_0.input.pp1_in <= l1_csa_in[1] @[wallace_tree.scala 64:31]
    layer1CSA_0.input.pp2_in <= l1_csa_in[2] @[wallace_tree.scala 65:31]
    l1_csa_os[0] <= layer1CSA_0.output.S @[wallace_tree.scala 66:31]
    l1_csa_oc[0] <= layer1CSA_0.output.C @[wallace_tree.scala 67:31]
    l1_csa_out[0] <= l1_csa_os[0] @[wallace_tree.scala 68:33]
    l1_csa_out[1] <= l1_csa_oc[0] @[wallace_tree.scala 69:35]
    l1_csa_out[3] <= io.data_i[4] @[wallace_tree.scala 73:32]
    l1_csa_out[2] <= io.data_i[3] @[wallace_tree.scala 73:32]
    wire _l2_csa_in_WIRE : SInt<16>[3] @[wallace_tree.scala 81:37]
    _l2_csa_in_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 81:37]
    _l2_csa_in_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 81:37]
    _l2_csa_in_WIRE[2] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 81:37]
    wire l2_csa_in : SInt<16>[3]
    l2_csa_in <= _l2_csa_in_WIRE
    wire _l2_csa_os_WIRE : SInt<16>[1] @[wallace_tree.scala 82:37]
    _l2_csa_os_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 82:37]
    wire l2_csa_os : SInt<16>[1]
    l2_csa_os <= _l2_csa_os_WIRE
    wire _l2_csa_oc_WIRE : SInt<16>[1] @[wallace_tree.scala 83:37]
    _l2_csa_oc_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 83:37]
    wire l2_csa_oc : SInt<16>[1]
    l2_csa_oc <= _l2_csa_oc_WIRE
    wire _l2_csa_out_WIRE : SInt<16>[3] @[wallace_tree.scala 84:38]
    _l2_csa_out_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 84:38]
    _l2_csa_out_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 84:38]
    _l2_csa_out_WIRE[2] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 84:38]
    wire l2_csa_out : SInt<16>[3]
    l2_csa_out <= _l2_csa_out_WIRE
    inst layer2CSA_0 of pp_compressor3_2_10 @[wallace_tree.scala 85:46]
    layer2CSA_0.clock <= clock
    layer2CSA_0.reset <= reset
    l2_csa_in[0] <= l1_csa_out[0] @[wallace_tree.scala 87:46]
    l2_csa_in[1] <= l1_csa_out[1] @[wallace_tree.scala 87:46]
    l2_csa_in[2] <= l1_csa_out[2] @[wallace_tree.scala 87:46]
    layer2CSA_0.input.pp0_in <= l2_csa_in[0] @[wallace_tree.scala 89:33]
    layer2CSA_0.input.pp1_in <= l2_csa_in[1] @[wallace_tree.scala 90:33]
    layer2CSA_0.input.pp2_in <= l2_csa_in[2] @[wallace_tree.scala 91:33]
    l2_csa_os[0] <= layer2CSA_0.output.S @[wallace_tree.scala 92:33]
    l2_csa_oc[0] <= layer2CSA_0.output.C @[wallace_tree.scala 93:33]
    l2_csa_out[0] <= l2_csa_os[0] @[wallace_tree.scala 94:35]
    l2_csa_out[1] <= l2_csa_oc[0] @[wallace_tree.scala 95:37]
    l2_csa_out[2] <= l1_csa_out[3] @[wallace_tree.scala 99:34]
    wire _l3_csa_in_WIRE : SInt<16>[3] @[wallace_tree.scala 107:39]
    _l3_csa_in_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 107:39]
    _l3_csa_in_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 107:39]
    _l3_csa_in_WIRE[2] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 107:39]
    wire l3_csa_in : SInt<16>[3]
    l3_csa_in <= _l3_csa_in_WIRE
    wire _l3_csa_os_WIRE : SInt<16>[1] @[wallace_tree.scala 108:39]
    _l3_csa_os_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 108:39]
    wire l3_csa_os : SInt<16>[1]
    l3_csa_os <= _l3_csa_os_WIRE
    wire _l3_csa_oc_WIRE : SInt<16>[1] @[wallace_tree.scala 109:39]
    _l3_csa_oc_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 109:39]
    wire l3_csa_oc : SInt<16>[1]
    l3_csa_oc <= _l3_csa_oc_WIRE
    wire _l3_csa_out_WIRE : SInt<16>[2] @[wallace_tree.scala 110:40]
    _l3_csa_out_WIRE[0] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 110:40]
    _l3_csa_out_WIRE[1] <= asSInt(UInt<16>("h0")) @[wallace_tree.scala 110:40]
    wire l3_csa_out : SInt<16>[2]
    l3_csa_out <= _l3_csa_out_WIRE
    inst layer3CSA_0 of pp_compressor3_2_11 @[wallace_tree.scala 111:48]
    layer3CSA_0.clock <= clock
    layer3CSA_0.reset <= reset
    l3_csa_in[0] <= l2_csa_out[0] @[wallace_tree.scala 113:48]
    l3_csa_in[1] <= l2_csa_out[1] @[wallace_tree.scala 113:48]
    l3_csa_in[2] <= l2_csa_out[2] @[wallace_tree.scala 113:48]
    layer3CSA_0.input.pp0_in <= l3_csa_in[0] @[wallace_tree.scala 115:35]
    layer3CSA_0.input.pp1_in <= l3_csa_in[1] @[wallace_tree.scala 116:35]
    layer3CSA_0.input.pp2_in <= l3_csa_in[2] @[wallace_tree.scala 117:35]
    l3_csa_os[0] <= layer3CSA_0.output.S @[wallace_tree.scala 118:22]
    l3_csa_oc[0] <= layer3CSA_0.output.C @[wallace_tree.scala 119:22]
    l3_csa_out[0] <= l3_csa_os[0] @[wallace_tree.scala 120:27]
    l3_csa_out[1] <= l3_csa_oc[0] @[wallace_tree.scala 121:31]
    rca_in <= l3_csa_out @[wallace_tree.scala 129:16]
    rca.input.a_in <= rca_in[0] @[wallace_tree.scala 250:18]
    rca.input.b_in <= rca_in[1] @[wallace_tree.scala 251:18]
    rca.input.c_in <= asSInt(UInt<1>("h0")) @[wallace_tree.scala 252:18]
    io.data_o <= rca.output.S @[wallace_tree.scala 253:18]

  module Multiplier_3 :
    input clock : Clock
    input reset : Reset
    output input : { flip multiplicand : SInt<8>, flip multiplier : SInt<8>}
    output output : { product : SInt<16>}

    inst booth2_encoder of booth2Encoder_3 @[multiplier.scala 21:34]
    booth2_encoder.clock <= clock
    booth2_encoder.reset <= reset
    inst pp_generator of ppGenerator_3 @[multiplier.scala 22:34]
    pp_generator.clock <= clock
    pp_generator.reset <= reset
    inst wallace_tree of wallaceTree_3 @[multiplier.scala 23:34]
    wallace_tree.clock <= clock
    wallace_tree.reset <= reset
    booth2_encoder.input.multiplier <= input.multiplier @[multiplier.scala 25:37]
    pp_generator.inputData.multiplicand <= input.multiplicand @[multiplier.scala 27:41]
    pp_generator.inputCtrl.X2 <= booth2_encoder.output.X2 @[multiplier.scala 28:41]
    pp_generator.inputCtrl.inv <= booth2_encoder.output.inv @[multiplier.scala 29:41]
    pp_generator.inputCtrl.Set0 <= booth2_encoder.output.set0 @[multiplier.scala 30:41]
    wallace_tree.io.data_i[0] <= pp_generator.outputData.pp_out[0] @[multiplier.scala 33:35]
    wallace_tree.io.data_i[1] <= pp_generator.outputData.pp_out[1] @[multiplier.scala 33:35]
    wallace_tree.io.data_i[2] <= pp_generator.outputData.pp_out[2] @[multiplier.scala 33:35]
    wallace_tree.io.data_i[3] <= pp_generator.outputData.pp_out[3] @[multiplier.scala 33:35]
    wallace_tree.io.data_i[4] <= pp_generator.outputData.sig_out @[multiplier.scala 35:40]
    output.product <= wallace_tree.io.data_o @[multiplier.scala 37:41]

  module RCA_7 :
    input clock : Clock
    input reset : Reset
    output input : { flip a_in : SInt<32>, flip b_in : SInt<32>, flip c_in : SInt<1>}
    output output : { S : SInt<32>, C : SInt<32>}

    wire g_comb : UInt<1>[32] @[rca.scala 22:22]
    wire p_comb : UInt<1>[32] @[rca.scala 23:22]
    wire s_comb : UInt<1>[32] @[rca.scala 24:22]
    wire c_comb : UInt<1>[33] @[rca.scala 25:22]
    node _c_comb_0_T = bits(input.c_in, 0, 0) @[rca.scala 27:29]
    c_comb[0] <= _c_comb_0_T @[rca.scala 27:15]
    node _g_comb_0_T = bits(input.a_in, 0, 0) @[rca.scala 30:35]
    node _g_comb_0_T_1 = bits(input.b_in, 0, 0) @[rca.scala 30:51]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[rca.scala 30:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[0] <= _g_comb_0_T_3 @[rca.scala 30:21]
    node _p_comb_0_T = bits(input.a_in, 0, 0) @[rca.scala 31:35]
    node _p_comb_0_T_1 = bits(input.b_in, 0, 0) @[rca.scala 31:51]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[rca.scala 31:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[0] <= _p_comb_0_T_3 @[rca.scala 31:21]
    node _s_comb_0_T = xor(p_comb[0], c_comb[0]) @[rca.scala 32:34]
    s_comb[0] <= _s_comb_0_T @[rca.scala 32:21]
    node _c_comb_1_T = and(c_comb[0], p_comb[0]) @[rca.scala 33:34]
    node _c_comb_1_T_1 = or(_c_comb_1_T, g_comb[0]) @[rca.scala 33:46]
    c_comb[1] <= _c_comb_1_T_1 @[rca.scala 33:21]
    node _g_comb_1_T = bits(input.a_in, 1, 1) @[rca.scala 30:35]
    node _g_comb_1_T_1 = bits(input.b_in, 1, 1) @[rca.scala 30:51]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[rca.scala 30:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[1] <= _g_comb_1_T_3 @[rca.scala 30:21]
    node _p_comb_1_T = bits(input.a_in, 1, 1) @[rca.scala 31:35]
    node _p_comb_1_T_1 = bits(input.b_in, 1, 1) @[rca.scala 31:51]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[rca.scala 31:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[1] <= _p_comb_1_T_3 @[rca.scala 31:21]
    node _s_comb_1_T = xor(p_comb[1], c_comb[1]) @[rca.scala 32:34]
    s_comb[1] <= _s_comb_1_T @[rca.scala 32:21]
    node _c_comb_2_T = and(c_comb[1], p_comb[1]) @[rca.scala 33:34]
    node _c_comb_2_T_1 = or(_c_comb_2_T, g_comb[1]) @[rca.scala 33:46]
    c_comb[2] <= _c_comb_2_T_1 @[rca.scala 33:21]
    node _g_comb_2_T = bits(input.a_in, 2, 2) @[rca.scala 30:35]
    node _g_comb_2_T_1 = bits(input.b_in, 2, 2) @[rca.scala 30:51]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[rca.scala 30:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[2] <= _g_comb_2_T_3 @[rca.scala 30:21]
    node _p_comb_2_T = bits(input.a_in, 2, 2) @[rca.scala 31:35]
    node _p_comb_2_T_1 = bits(input.b_in, 2, 2) @[rca.scala 31:51]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[rca.scala 31:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[2] <= _p_comb_2_T_3 @[rca.scala 31:21]
    node _s_comb_2_T = xor(p_comb[2], c_comb[2]) @[rca.scala 32:34]
    s_comb[2] <= _s_comb_2_T @[rca.scala 32:21]
    node _c_comb_3_T = and(c_comb[2], p_comb[2]) @[rca.scala 33:34]
    node _c_comb_3_T_1 = or(_c_comb_3_T, g_comb[2]) @[rca.scala 33:46]
    c_comb[3] <= _c_comb_3_T_1 @[rca.scala 33:21]
    node _g_comb_3_T = bits(input.a_in, 3, 3) @[rca.scala 30:35]
    node _g_comb_3_T_1 = bits(input.b_in, 3, 3) @[rca.scala 30:51]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[rca.scala 30:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[3] <= _g_comb_3_T_3 @[rca.scala 30:21]
    node _p_comb_3_T = bits(input.a_in, 3, 3) @[rca.scala 31:35]
    node _p_comb_3_T_1 = bits(input.b_in, 3, 3) @[rca.scala 31:51]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[rca.scala 31:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[3] <= _p_comb_3_T_3 @[rca.scala 31:21]
    node _s_comb_3_T = xor(p_comb[3], c_comb[3]) @[rca.scala 32:34]
    s_comb[3] <= _s_comb_3_T @[rca.scala 32:21]
    node _c_comb_4_T = and(c_comb[3], p_comb[3]) @[rca.scala 33:34]
    node _c_comb_4_T_1 = or(_c_comb_4_T, g_comb[3]) @[rca.scala 33:46]
    c_comb[4] <= _c_comb_4_T_1 @[rca.scala 33:21]
    node _g_comb_4_T = bits(input.a_in, 4, 4) @[rca.scala 30:35]
    node _g_comb_4_T_1 = bits(input.b_in, 4, 4) @[rca.scala 30:51]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[rca.scala 30:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[4] <= _g_comb_4_T_3 @[rca.scala 30:21]
    node _p_comb_4_T = bits(input.a_in, 4, 4) @[rca.scala 31:35]
    node _p_comb_4_T_1 = bits(input.b_in, 4, 4) @[rca.scala 31:51]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[rca.scala 31:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[4] <= _p_comb_4_T_3 @[rca.scala 31:21]
    node _s_comb_4_T = xor(p_comb[4], c_comb[4]) @[rca.scala 32:34]
    s_comb[4] <= _s_comb_4_T @[rca.scala 32:21]
    node _c_comb_5_T = and(c_comb[4], p_comb[4]) @[rca.scala 33:34]
    node _c_comb_5_T_1 = or(_c_comb_5_T, g_comb[4]) @[rca.scala 33:46]
    c_comb[5] <= _c_comb_5_T_1 @[rca.scala 33:21]
    node _g_comb_5_T = bits(input.a_in, 5, 5) @[rca.scala 30:35]
    node _g_comb_5_T_1 = bits(input.b_in, 5, 5) @[rca.scala 30:51]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[rca.scala 30:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[5] <= _g_comb_5_T_3 @[rca.scala 30:21]
    node _p_comb_5_T = bits(input.a_in, 5, 5) @[rca.scala 31:35]
    node _p_comb_5_T_1 = bits(input.b_in, 5, 5) @[rca.scala 31:51]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[rca.scala 31:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[5] <= _p_comb_5_T_3 @[rca.scala 31:21]
    node _s_comb_5_T = xor(p_comb[5], c_comb[5]) @[rca.scala 32:34]
    s_comb[5] <= _s_comb_5_T @[rca.scala 32:21]
    node _c_comb_6_T = and(c_comb[5], p_comb[5]) @[rca.scala 33:34]
    node _c_comb_6_T_1 = or(_c_comb_6_T, g_comb[5]) @[rca.scala 33:46]
    c_comb[6] <= _c_comb_6_T_1 @[rca.scala 33:21]
    node _g_comb_6_T = bits(input.a_in, 6, 6) @[rca.scala 30:35]
    node _g_comb_6_T_1 = bits(input.b_in, 6, 6) @[rca.scala 30:51]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[rca.scala 30:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[6] <= _g_comb_6_T_3 @[rca.scala 30:21]
    node _p_comb_6_T = bits(input.a_in, 6, 6) @[rca.scala 31:35]
    node _p_comb_6_T_1 = bits(input.b_in, 6, 6) @[rca.scala 31:51]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[rca.scala 31:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[6] <= _p_comb_6_T_3 @[rca.scala 31:21]
    node _s_comb_6_T = xor(p_comb[6], c_comb[6]) @[rca.scala 32:34]
    s_comb[6] <= _s_comb_6_T @[rca.scala 32:21]
    node _c_comb_7_T = and(c_comb[6], p_comb[6]) @[rca.scala 33:34]
    node _c_comb_7_T_1 = or(_c_comb_7_T, g_comb[6]) @[rca.scala 33:46]
    c_comb[7] <= _c_comb_7_T_1 @[rca.scala 33:21]
    node _g_comb_7_T = bits(input.a_in, 7, 7) @[rca.scala 30:35]
    node _g_comb_7_T_1 = bits(input.b_in, 7, 7) @[rca.scala 30:51]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[rca.scala 30:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[7] <= _g_comb_7_T_3 @[rca.scala 30:21]
    node _p_comb_7_T = bits(input.a_in, 7, 7) @[rca.scala 31:35]
    node _p_comb_7_T_1 = bits(input.b_in, 7, 7) @[rca.scala 31:51]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[rca.scala 31:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[7] <= _p_comb_7_T_3 @[rca.scala 31:21]
    node _s_comb_7_T = xor(p_comb[7], c_comb[7]) @[rca.scala 32:34]
    s_comb[7] <= _s_comb_7_T @[rca.scala 32:21]
    node _c_comb_8_T = and(c_comb[7], p_comb[7]) @[rca.scala 33:34]
    node _c_comb_8_T_1 = or(_c_comb_8_T, g_comb[7]) @[rca.scala 33:46]
    c_comb[8] <= _c_comb_8_T_1 @[rca.scala 33:21]
    node _g_comb_8_T = bits(input.a_in, 8, 8) @[rca.scala 30:35]
    node _g_comb_8_T_1 = bits(input.b_in, 8, 8) @[rca.scala 30:51]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[rca.scala 30:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[8] <= _g_comb_8_T_3 @[rca.scala 30:21]
    node _p_comb_8_T = bits(input.a_in, 8, 8) @[rca.scala 31:35]
    node _p_comb_8_T_1 = bits(input.b_in, 8, 8) @[rca.scala 31:51]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[rca.scala 31:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[8] <= _p_comb_8_T_3 @[rca.scala 31:21]
    node _s_comb_8_T = xor(p_comb[8], c_comb[8]) @[rca.scala 32:34]
    s_comb[8] <= _s_comb_8_T @[rca.scala 32:21]
    node _c_comb_9_T = and(c_comb[8], p_comb[8]) @[rca.scala 33:34]
    node _c_comb_9_T_1 = or(_c_comb_9_T, g_comb[8]) @[rca.scala 33:46]
    c_comb[9] <= _c_comb_9_T_1 @[rca.scala 33:21]
    node _g_comb_9_T = bits(input.a_in, 9, 9) @[rca.scala 30:35]
    node _g_comb_9_T_1 = bits(input.b_in, 9, 9) @[rca.scala 30:51]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[rca.scala 30:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[9] <= _g_comb_9_T_3 @[rca.scala 30:21]
    node _p_comb_9_T = bits(input.a_in, 9, 9) @[rca.scala 31:35]
    node _p_comb_9_T_1 = bits(input.b_in, 9, 9) @[rca.scala 31:51]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[rca.scala 31:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[9] <= _p_comb_9_T_3 @[rca.scala 31:21]
    node _s_comb_9_T = xor(p_comb[9], c_comb[9]) @[rca.scala 32:34]
    s_comb[9] <= _s_comb_9_T @[rca.scala 32:21]
    node _c_comb_10_T = and(c_comb[9], p_comb[9]) @[rca.scala 33:34]
    node _c_comb_10_T_1 = or(_c_comb_10_T, g_comb[9]) @[rca.scala 33:46]
    c_comb[10] <= _c_comb_10_T_1 @[rca.scala 33:21]
    node _g_comb_10_T = bits(input.a_in, 10, 10) @[rca.scala 30:35]
    node _g_comb_10_T_1 = bits(input.b_in, 10, 10) @[rca.scala 30:51]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[rca.scala 30:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[10] <= _g_comb_10_T_3 @[rca.scala 30:21]
    node _p_comb_10_T = bits(input.a_in, 10, 10) @[rca.scala 31:35]
    node _p_comb_10_T_1 = bits(input.b_in, 10, 10) @[rca.scala 31:51]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[rca.scala 31:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[10] <= _p_comb_10_T_3 @[rca.scala 31:21]
    node _s_comb_10_T = xor(p_comb[10], c_comb[10]) @[rca.scala 32:34]
    s_comb[10] <= _s_comb_10_T @[rca.scala 32:21]
    node _c_comb_11_T = and(c_comb[10], p_comb[10]) @[rca.scala 33:34]
    node _c_comb_11_T_1 = or(_c_comb_11_T, g_comb[10]) @[rca.scala 33:46]
    c_comb[11] <= _c_comb_11_T_1 @[rca.scala 33:21]
    node _g_comb_11_T = bits(input.a_in, 11, 11) @[rca.scala 30:35]
    node _g_comb_11_T_1 = bits(input.b_in, 11, 11) @[rca.scala 30:51]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[rca.scala 30:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[11] <= _g_comb_11_T_3 @[rca.scala 30:21]
    node _p_comb_11_T = bits(input.a_in, 11, 11) @[rca.scala 31:35]
    node _p_comb_11_T_1 = bits(input.b_in, 11, 11) @[rca.scala 31:51]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[rca.scala 31:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[11] <= _p_comb_11_T_3 @[rca.scala 31:21]
    node _s_comb_11_T = xor(p_comb[11], c_comb[11]) @[rca.scala 32:34]
    s_comb[11] <= _s_comb_11_T @[rca.scala 32:21]
    node _c_comb_12_T = and(c_comb[11], p_comb[11]) @[rca.scala 33:34]
    node _c_comb_12_T_1 = or(_c_comb_12_T, g_comb[11]) @[rca.scala 33:46]
    c_comb[12] <= _c_comb_12_T_1 @[rca.scala 33:21]
    node _g_comb_12_T = bits(input.a_in, 12, 12) @[rca.scala 30:35]
    node _g_comb_12_T_1 = bits(input.b_in, 12, 12) @[rca.scala 30:51]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[rca.scala 30:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[12] <= _g_comb_12_T_3 @[rca.scala 30:21]
    node _p_comb_12_T = bits(input.a_in, 12, 12) @[rca.scala 31:35]
    node _p_comb_12_T_1 = bits(input.b_in, 12, 12) @[rca.scala 31:51]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[rca.scala 31:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[12] <= _p_comb_12_T_3 @[rca.scala 31:21]
    node _s_comb_12_T = xor(p_comb[12], c_comb[12]) @[rca.scala 32:34]
    s_comb[12] <= _s_comb_12_T @[rca.scala 32:21]
    node _c_comb_13_T = and(c_comb[12], p_comb[12]) @[rca.scala 33:34]
    node _c_comb_13_T_1 = or(_c_comb_13_T, g_comb[12]) @[rca.scala 33:46]
    c_comb[13] <= _c_comb_13_T_1 @[rca.scala 33:21]
    node _g_comb_13_T = bits(input.a_in, 13, 13) @[rca.scala 30:35]
    node _g_comb_13_T_1 = bits(input.b_in, 13, 13) @[rca.scala 30:51]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[rca.scala 30:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[13] <= _g_comb_13_T_3 @[rca.scala 30:21]
    node _p_comb_13_T = bits(input.a_in, 13, 13) @[rca.scala 31:35]
    node _p_comb_13_T_1 = bits(input.b_in, 13, 13) @[rca.scala 31:51]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[rca.scala 31:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[13] <= _p_comb_13_T_3 @[rca.scala 31:21]
    node _s_comb_13_T = xor(p_comb[13], c_comb[13]) @[rca.scala 32:34]
    s_comb[13] <= _s_comb_13_T @[rca.scala 32:21]
    node _c_comb_14_T = and(c_comb[13], p_comb[13]) @[rca.scala 33:34]
    node _c_comb_14_T_1 = or(_c_comb_14_T, g_comb[13]) @[rca.scala 33:46]
    c_comb[14] <= _c_comb_14_T_1 @[rca.scala 33:21]
    node _g_comb_14_T = bits(input.a_in, 14, 14) @[rca.scala 30:35]
    node _g_comb_14_T_1 = bits(input.b_in, 14, 14) @[rca.scala 30:51]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[rca.scala 30:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[14] <= _g_comb_14_T_3 @[rca.scala 30:21]
    node _p_comb_14_T = bits(input.a_in, 14, 14) @[rca.scala 31:35]
    node _p_comb_14_T_1 = bits(input.b_in, 14, 14) @[rca.scala 31:51]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[rca.scala 31:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[14] <= _p_comb_14_T_3 @[rca.scala 31:21]
    node _s_comb_14_T = xor(p_comb[14], c_comb[14]) @[rca.scala 32:34]
    s_comb[14] <= _s_comb_14_T @[rca.scala 32:21]
    node _c_comb_15_T = and(c_comb[14], p_comb[14]) @[rca.scala 33:34]
    node _c_comb_15_T_1 = or(_c_comb_15_T, g_comb[14]) @[rca.scala 33:46]
    c_comb[15] <= _c_comb_15_T_1 @[rca.scala 33:21]
    node _g_comb_15_T = bits(input.a_in, 15, 15) @[rca.scala 30:35]
    node _g_comb_15_T_1 = bits(input.b_in, 15, 15) @[rca.scala 30:51]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[rca.scala 30:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[15] <= _g_comb_15_T_3 @[rca.scala 30:21]
    node _p_comb_15_T = bits(input.a_in, 15, 15) @[rca.scala 31:35]
    node _p_comb_15_T_1 = bits(input.b_in, 15, 15) @[rca.scala 31:51]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[rca.scala 31:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[15] <= _p_comb_15_T_3 @[rca.scala 31:21]
    node _s_comb_15_T = xor(p_comb[15], c_comb[15]) @[rca.scala 32:34]
    s_comb[15] <= _s_comb_15_T @[rca.scala 32:21]
    node _c_comb_16_T = and(c_comb[15], p_comb[15]) @[rca.scala 33:34]
    node _c_comb_16_T_1 = or(_c_comb_16_T, g_comb[15]) @[rca.scala 33:46]
    c_comb[16] <= _c_comb_16_T_1 @[rca.scala 33:21]
    node _g_comb_16_T = bits(input.a_in, 16, 16) @[rca.scala 30:35]
    node _g_comb_16_T_1 = bits(input.b_in, 16, 16) @[rca.scala 30:51]
    node _g_comb_16_T_2 = and(_g_comb_16_T, _g_comb_16_T_1) @[rca.scala 30:39]
    node _g_comb_16_T_3 = bits(_g_comb_16_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[16] <= _g_comb_16_T_3 @[rca.scala 30:21]
    node _p_comb_16_T = bits(input.a_in, 16, 16) @[rca.scala 31:35]
    node _p_comb_16_T_1 = bits(input.b_in, 16, 16) @[rca.scala 31:51]
    node _p_comb_16_T_2 = xor(_p_comb_16_T, _p_comb_16_T_1) @[rca.scala 31:39]
    node _p_comb_16_T_3 = bits(_p_comb_16_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[16] <= _p_comb_16_T_3 @[rca.scala 31:21]
    node _s_comb_16_T = xor(p_comb[16], c_comb[16]) @[rca.scala 32:34]
    s_comb[16] <= _s_comb_16_T @[rca.scala 32:21]
    node _c_comb_17_T = and(c_comb[16], p_comb[16]) @[rca.scala 33:34]
    node _c_comb_17_T_1 = or(_c_comb_17_T, g_comb[16]) @[rca.scala 33:46]
    c_comb[17] <= _c_comb_17_T_1 @[rca.scala 33:21]
    node _g_comb_17_T = bits(input.a_in, 17, 17) @[rca.scala 30:35]
    node _g_comb_17_T_1 = bits(input.b_in, 17, 17) @[rca.scala 30:51]
    node _g_comb_17_T_2 = and(_g_comb_17_T, _g_comb_17_T_1) @[rca.scala 30:39]
    node _g_comb_17_T_3 = bits(_g_comb_17_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[17] <= _g_comb_17_T_3 @[rca.scala 30:21]
    node _p_comb_17_T = bits(input.a_in, 17, 17) @[rca.scala 31:35]
    node _p_comb_17_T_1 = bits(input.b_in, 17, 17) @[rca.scala 31:51]
    node _p_comb_17_T_2 = xor(_p_comb_17_T, _p_comb_17_T_1) @[rca.scala 31:39]
    node _p_comb_17_T_3 = bits(_p_comb_17_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[17] <= _p_comb_17_T_3 @[rca.scala 31:21]
    node _s_comb_17_T = xor(p_comb[17], c_comb[17]) @[rca.scala 32:34]
    s_comb[17] <= _s_comb_17_T @[rca.scala 32:21]
    node _c_comb_18_T = and(c_comb[17], p_comb[17]) @[rca.scala 33:34]
    node _c_comb_18_T_1 = or(_c_comb_18_T, g_comb[17]) @[rca.scala 33:46]
    c_comb[18] <= _c_comb_18_T_1 @[rca.scala 33:21]
    node _g_comb_18_T = bits(input.a_in, 18, 18) @[rca.scala 30:35]
    node _g_comb_18_T_1 = bits(input.b_in, 18, 18) @[rca.scala 30:51]
    node _g_comb_18_T_2 = and(_g_comb_18_T, _g_comb_18_T_1) @[rca.scala 30:39]
    node _g_comb_18_T_3 = bits(_g_comb_18_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[18] <= _g_comb_18_T_3 @[rca.scala 30:21]
    node _p_comb_18_T = bits(input.a_in, 18, 18) @[rca.scala 31:35]
    node _p_comb_18_T_1 = bits(input.b_in, 18, 18) @[rca.scala 31:51]
    node _p_comb_18_T_2 = xor(_p_comb_18_T, _p_comb_18_T_1) @[rca.scala 31:39]
    node _p_comb_18_T_3 = bits(_p_comb_18_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[18] <= _p_comb_18_T_3 @[rca.scala 31:21]
    node _s_comb_18_T = xor(p_comb[18], c_comb[18]) @[rca.scala 32:34]
    s_comb[18] <= _s_comb_18_T @[rca.scala 32:21]
    node _c_comb_19_T = and(c_comb[18], p_comb[18]) @[rca.scala 33:34]
    node _c_comb_19_T_1 = or(_c_comb_19_T, g_comb[18]) @[rca.scala 33:46]
    c_comb[19] <= _c_comb_19_T_1 @[rca.scala 33:21]
    node _g_comb_19_T = bits(input.a_in, 19, 19) @[rca.scala 30:35]
    node _g_comb_19_T_1 = bits(input.b_in, 19, 19) @[rca.scala 30:51]
    node _g_comb_19_T_2 = and(_g_comb_19_T, _g_comb_19_T_1) @[rca.scala 30:39]
    node _g_comb_19_T_3 = bits(_g_comb_19_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[19] <= _g_comb_19_T_3 @[rca.scala 30:21]
    node _p_comb_19_T = bits(input.a_in, 19, 19) @[rca.scala 31:35]
    node _p_comb_19_T_1 = bits(input.b_in, 19, 19) @[rca.scala 31:51]
    node _p_comb_19_T_2 = xor(_p_comb_19_T, _p_comb_19_T_1) @[rca.scala 31:39]
    node _p_comb_19_T_3 = bits(_p_comb_19_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[19] <= _p_comb_19_T_3 @[rca.scala 31:21]
    node _s_comb_19_T = xor(p_comb[19], c_comb[19]) @[rca.scala 32:34]
    s_comb[19] <= _s_comb_19_T @[rca.scala 32:21]
    node _c_comb_20_T = and(c_comb[19], p_comb[19]) @[rca.scala 33:34]
    node _c_comb_20_T_1 = or(_c_comb_20_T, g_comb[19]) @[rca.scala 33:46]
    c_comb[20] <= _c_comb_20_T_1 @[rca.scala 33:21]
    node _g_comb_20_T = bits(input.a_in, 20, 20) @[rca.scala 30:35]
    node _g_comb_20_T_1 = bits(input.b_in, 20, 20) @[rca.scala 30:51]
    node _g_comb_20_T_2 = and(_g_comb_20_T, _g_comb_20_T_1) @[rca.scala 30:39]
    node _g_comb_20_T_3 = bits(_g_comb_20_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[20] <= _g_comb_20_T_3 @[rca.scala 30:21]
    node _p_comb_20_T = bits(input.a_in, 20, 20) @[rca.scala 31:35]
    node _p_comb_20_T_1 = bits(input.b_in, 20, 20) @[rca.scala 31:51]
    node _p_comb_20_T_2 = xor(_p_comb_20_T, _p_comb_20_T_1) @[rca.scala 31:39]
    node _p_comb_20_T_3 = bits(_p_comb_20_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[20] <= _p_comb_20_T_3 @[rca.scala 31:21]
    node _s_comb_20_T = xor(p_comb[20], c_comb[20]) @[rca.scala 32:34]
    s_comb[20] <= _s_comb_20_T @[rca.scala 32:21]
    node _c_comb_21_T = and(c_comb[20], p_comb[20]) @[rca.scala 33:34]
    node _c_comb_21_T_1 = or(_c_comb_21_T, g_comb[20]) @[rca.scala 33:46]
    c_comb[21] <= _c_comb_21_T_1 @[rca.scala 33:21]
    node _g_comb_21_T = bits(input.a_in, 21, 21) @[rca.scala 30:35]
    node _g_comb_21_T_1 = bits(input.b_in, 21, 21) @[rca.scala 30:51]
    node _g_comb_21_T_2 = and(_g_comb_21_T, _g_comb_21_T_1) @[rca.scala 30:39]
    node _g_comb_21_T_3 = bits(_g_comb_21_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[21] <= _g_comb_21_T_3 @[rca.scala 30:21]
    node _p_comb_21_T = bits(input.a_in, 21, 21) @[rca.scala 31:35]
    node _p_comb_21_T_1 = bits(input.b_in, 21, 21) @[rca.scala 31:51]
    node _p_comb_21_T_2 = xor(_p_comb_21_T, _p_comb_21_T_1) @[rca.scala 31:39]
    node _p_comb_21_T_3 = bits(_p_comb_21_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[21] <= _p_comb_21_T_3 @[rca.scala 31:21]
    node _s_comb_21_T = xor(p_comb[21], c_comb[21]) @[rca.scala 32:34]
    s_comb[21] <= _s_comb_21_T @[rca.scala 32:21]
    node _c_comb_22_T = and(c_comb[21], p_comb[21]) @[rca.scala 33:34]
    node _c_comb_22_T_1 = or(_c_comb_22_T, g_comb[21]) @[rca.scala 33:46]
    c_comb[22] <= _c_comb_22_T_1 @[rca.scala 33:21]
    node _g_comb_22_T = bits(input.a_in, 22, 22) @[rca.scala 30:35]
    node _g_comb_22_T_1 = bits(input.b_in, 22, 22) @[rca.scala 30:51]
    node _g_comb_22_T_2 = and(_g_comb_22_T, _g_comb_22_T_1) @[rca.scala 30:39]
    node _g_comb_22_T_3 = bits(_g_comb_22_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[22] <= _g_comb_22_T_3 @[rca.scala 30:21]
    node _p_comb_22_T = bits(input.a_in, 22, 22) @[rca.scala 31:35]
    node _p_comb_22_T_1 = bits(input.b_in, 22, 22) @[rca.scala 31:51]
    node _p_comb_22_T_2 = xor(_p_comb_22_T, _p_comb_22_T_1) @[rca.scala 31:39]
    node _p_comb_22_T_3 = bits(_p_comb_22_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[22] <= _p_comb_22_T_3 @[rca.scala 31:21]
    node _s_comb_22_T = xor(p_comb[22], c_comb[22]) @[rca.scala 32:34]
    s_comb[22] <= _s_comb_22_T @[rca.scala 32:21]
    node _c_comb_23_T = and(c_comb[22], p_comb[22]) @[rca.scala 33:34]
    node _c_comb_23_T_1 = or(_c_comb_23_T, g_comb[22]) @[rca.scala 33:46]
    c_comb[23] <= _c_comb_23_T_1 @[rca.scala 33:21]
    node _g_comb_23_T = bits(input.a_in, 23, 23) @[rca.scala 30:35]
    node _g_comb_23_T_1 = bits(input.b_in, 23, 23) @[rca.scala 30:51]
    node _g_comb_23_T_2 = and(_g_comb_23_T, _g_comb_23_T_1) @[rca.scala 30:39]
    node _g_comb_23_T_3 = bits(_g_comb_23_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[23] <= _g_comb_23_T_3 @[rca.scala 30:21]
    node _p_comb_23_T = bits(input.a_in, 23, 23) @[rca.scala 31:35]
    node _p_comb_23_T_1 = bits(input.b_in, 23, 23) @[rca.scala 31:51]
    node _p_comb_23_T_2 = xor(_p_comb_23_T, _p_comb_23_T_1) @[rca.scala 31:39]
    node _p_comb_23_T_3 = bits(_p_comb_23_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[23] <= _p_comb_23_T_3 @[rca.scala 31:21]
    node _s_comb_23_T = xor(p_comb[23], c_comb[23]) @[rca.scala 32:34]
    s_comb[23] <= _s_comb_23_T @[rca.scala 32:21]
    node _c_comb_24_T = and(c_comb[23], p_comb[23]) @[rca.scala 33:34]
    node _c_comb_24_T_1 = or(_c_comb_24_T, g_comb[23]) @[rca.scala 33:46]
    c_comb[24] <= _c_comb_24_T_1 @[rca.scala 33:21]
    node _g_comb_24_T = bits(input.a_in, 24, 24) @[rca.scala 30:35]
    node _g_comb_24_T_1 = bits(input.b_in, 24, 24) @[rca.scala 30:51]
    node _g_comb_24_T_2 = and(_g_comb_24_T, _g_comb_24_T_1) @[rca.scala 30:39]
    node _g_comb_24_T_3 = bits(_g_comb_24_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[24] <= _g_comb_24_T_3 @[rca.scala 30:21]
    node _p_comb_24_T = bits(input.a_in, 24, 24) @[rca.scala 31:35]
    node _p_comb_24_T_1 = bits(input.b_in, 24, 24) @[rca.scala 31:51]
    node _p_comb_24_T_2 = xor(_p_comb_24_T, _p_comb_24_T_1) @[rca.scala 31:39]
    node _p_comb_24_T_3 = bits(_p_comb_24_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[24] <= _p_comb_24_T_3 @[rca.scala 31:21]
    node _s_comb_24_T = xor(p_comb[24], c_comb[24]) @[rca.scala 32:34]
    s_comb[24] <= _s_comb_24_T @[rca.scala 32:21]
    node _c_comb_25_T = and(c_comb[24], p_comb[24]) @[rca.scala 33:34]
    node _c_comb_25_T_1 = or(_c_comb_25_T, g_comb[24]) @[rca.scala 33:46]
    c_comb[25] <= _c_comb_25_T_1 @[rca.scala 33:21]
    node _g_comb_25_T = bits(input.a_in, 25, 25) @[rca.scala 30:35]
    node _g_comb_25_T_1 = bits(input.b_in, 25, 25) @[rca.scala 30:51]
    node _g_comb_25_T_2 = and(_g_comb_25_T, _g_comb_25_T_1) @[rca.scala 30:39]
    node _g_comb_25_T_3 = bits(_g_comb_25_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[25] <= _g_comb_25_T_3 @[rca.scala 30:21]
    node _p_comb_25_T = bits(input.a_in, 25, 25) @[rca.scala 31:35]
    node _p_comb_25_T_1 = bits(input.b_in, 25, 25) @[rca.scala 31:51]
    node _p_comb_25_T_2 = xor(_p_comb_25_T, _p_comb_25_T_1) @[rca.scala 31:39]
    node _p_comb_25_T_3 = bits(_p_comb_25_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[25] <= _p_comb_25_T_3 @[rca.scala 31:21]
    node _s_comb_25_T = xor(p_comb[25], c_comb[25]) @[rca.scala 32:34]
    s_comb[25] <= _s_comb_25_T @[rca.scala 32:21]
    node _c_comb_26_T = and(c_comb[25], p_comb[25]) @[rca.scala 33:34]
    node _c_comb_26_T_1 = or(_c_comb_26_T, g_comb[25]) @[rca.scala 33:46]
    c_comb[26] <= _c_comb_26_T_1 @[rca.scala 33:21]
    node _g_comb_26_T = bits(input.a_in, 26, 26) @[rca.scala 30:35]
    node _g_comb_26_T_1 = bits(input.b_in, 26, 26) @[rca.scala 30:51]
    node _g_comb_26_T_2 = and(_g_comb_26_T, _g_comb_26_T_1) @[rca.scala 30:39]
    node _g_comb_26_T_3 = bits(_g_comb_26_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[26] <= _g_comb_26_T_3 @[rca.scala 30:21]
    node _p_comb_26_T = bits(input.a_in, 26, 26) @[rca.scala 31:35]
    node _p_comb_26_T_1 = bits(input.b_in, 26, 26) @[rca.scala 31:51]
    node _p_comb_26_T_2 = xor(_p_comb_26_T, _p_comb_26_T_1) @[rca.scala 31:39]
    node _p_comb_26_T_3 = bits(_p_comb_26_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[26] <= _p_comb_26_T_3 @[rca.scala 31:21]
    node _s_comb_26_T = xor(p_comb[26], c_comb[26]) @[rca.scala 32:34]
    s_comb[26] <= _s_comb_26_T @[rca.scala 32:21]
    node _c_comb_27_T = and(c_comb[26], p_comb[26]) @[rca.scala 33:34]
    node _c_comb_27_T_1 = or(_c_comb_27_T, g_comb[26]) @[rca.scala 33:46]
    c_comb[27] <= _c_comb_27_T_1 @[rca.scala 33:21]
    node _g_comb_27_T = bits(input.a_in, 27, 27) @[rca.scala 30:35]
    node _g_comb_27_T_1 = bits(input.b_in, 27, 27) @[rca.scala 30:51]
    node _g_comb_27_T_2 = and(_g_comb_27_T, _g_comb_27_T_1) @[rca.scala 30:39]
    node _g_comb_27_T_3 = bits(_g_comb_27_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[27] <= _g_comb_27_T_3 @[rca.scala 30:21]
    node _p_comb_27_T = bits(input.a_in, 27, 27) @[rca.scala 31:35]
    node _p_comb_27_T_1 = bits(input.b_in, 27, 27) @[rca.scala 31:51]
    node _p_comb_27_T_2 = xor(_p_comb_27_T, _p_comb_27_T_1) @[rca.scala 31:39]
    node _p_comb_27_T_3 = bits(_p_comb_27_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[27] <= _p_comb_27_T_3 @[rca.scala 31:21]
    node _s_comb_27_T = xor(p_comb[27], c_comb[27]) @[rca.scala 32:34]
    s_comb[27] <= _s_comb_27_T @[rca.scala 32:21]
    node _c_comb_28_T = and(c_comb[27], p_comb[27]) @[rca.scala 33:34]
    node _c_comb_28_T_1 = or(_c_comb_28_T, g_comb[27]) @[rca.scala 33:46]
    c_comb[28] <= _c_comb_28_T_1 @[rca.scala 33:21]
    node _g_comb_28_T = bits(input.a_in, 28, 28) @[rca.scala 30:35]
    node _g_comb_28_T_1 = bits(input.b_in, 28, 28) @[rca.scala 30:51]
    node _g_comb_28_T_2 = and(_g_comb_28_T, _g_comb_28_T_1) @[rca.scala 30:39]
    node _g_comb_28_T_3 = bits(_g_comb_28_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[28] <= _g_comb_28_T_3 @[rca.scala 30:21]
    node _p_comb_28_T = bits(input.a_in, 28, 28) @[rca.scala 31:35]
    node _p_comb_28_T_1 = bits(input.b_in, 28, 28) @[rca.scala 31:51]
    node _p_comb_28_T_2 = xor(_p_comb_28_T, _p_comb_28_T_1) @[rca.scala 31:39]
    node _p_comb_28_T_3 = bits(_p_comb_28_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[28] <= _p_comb_28_T_3 @[rca.scala 31:21]
    node _s_comb_28_T = xor(p_comb[28], c_comb[28]) @[rca.scala 32:34]
    s_comb[28] <= _s_comb_28_T @[rca.scala 32:21]
    node _c_comb_29_T = and(c_comb[28], p_comb[28]) @[rca.scala 33:34]
    node _c_comb_29_T_1 = or(_c_comb_29_T, g_comb[28]) @[rca.scala 33:46]
    c_comb[29] <= _c_comb_29_T_1 @[rca.scala 33:21]
    node _g_comb_29_T = bits(input.a_in, 29, 29) @[rca.scala 30:35]
    node _g_comb_29_T_1 = bits(input.b_in, 29, 29) @[rca.scala 30:51]
    node _g_comb_29_T_2 = and(_g_comb_29_T, _g_comb_29_T_1) @[rca.scala 30:39]
    node _g_comb_29_T_3 = bits(_g_comb_29_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[29] <= _g_comb_29_T_3 @[rca.scala 30:21]
    node _p_comb_29_T = bits(input.a_in, 29, 29) @[rca.scala 31:35]
    node _p_comb_29_T_1 = bits(input.b_in, 29, 29) @[rca.scala 31:51]
    node _p_comb_29_T_2 = xor(_p_comb_29_T, _p_comb_29_T_1) @[rca.scala 31:39]
    node _p_comb_29_T_3 = bits(_p_comb_29_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[29] <= _p_comb_29_T_3 @[rca.scala 31:21]
    node _s_comb_29_T = xor(p_comb[29], c_comb[29]) @[rca.scala 32:34]
    s_comb[29] <= _s_comb_29_T @[rca.scala 32:21]
    node _c_comb_30_T = and(c_comb[29], p_comb[29]) @[rca.scala 33:34]
    node _c_comb_30_T_1 = or(_c_comb_30_T, g_comb[29]) @[rca.scala 33:46]
    c_comb[30] <= _c_comb_30_T_1 @[rca.scala 33:21]
    node _g_comb_30_T = bits(input.a_in, 30, 30) @[rca.scala 30:35]
    node _g_comb_30_T_1 = bits(input.b_in, 30, 30) @[rca.scala 30:51]
    node _g_comb_30_T_2 = and(_g_comb_30_T, _g_comb_30_T_1) @[rca.scala 30:39]
    node _g_comb_30_T_3 = bits(_g_comb_30_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[30] <= _g_comb_30_T_3 @[rca.scala 30:21]
    node _p_comb_30_T = bits(input.a_in, 30, 30) @[rca.scala 31:35]
    node _p_comb_30_T_1 = bits(input.b_in, 30, 30) @[rca.scala 31:51]
    node _p_comb_30_T_2 = xor(_p_comb_30_T, _p_comb_30_T_1) @[rca.scala 31:39]
    node _p_comb_30_T_3 = bits(_p_comb_30_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[30] <= _p_comb_30_T_3 @[rca.scala 31:21]
    node _s_comb_30_T = xor(p_comb[30], c_comb[30]) @[rca.scala 32:34]
    s_comb[30] <= _s_comb_30_T @[rca.scala 32:21]
    node _c_comb_31_T = and(c_comb[30], p_comb[30]) @[rca.scala 33:34]
    node _c_comb_31_T_1 = or(_c_comb_31_T, g_comb[30]) @[rca.scala 33:46]
    c_comb[31] <= _c_comb_31_T_1 @[rca.scala 33:21]
    node _g_comb_31_T = bits(input.a_in, 31, 31) @[rca.scala 30:35]
    node _g_comb_31_T_1 = bits(input.b_in, 31, 31) @[rca.scala 30:51]
    node _g_comb_31_T_2 = and(_g_comb_31_T, _g_comb_31_T_1) @[rca.scala 30:39]
    node _g_comb_31_T_3 = bits(_g_comb_31_T_2, 0, 0) @[rca.scala 30:56]
    g_comb[31] <= _g_comb_31_T_3 @[rca.scala 30:21]
    node _p_comb_31_T = bits(input.a_in, 31, 31) @[rca.scala 31:35]
    node _p_comb_31_T_1 = bits(input.b_in, 31, 31) @[rca.scala 31:51]
    node _p_comb_31_T_2 = xor(_p_comb_31_T, _p_comb_31_T_1) @[rca.scala 31:39]
    node _p_comb_31_T_3 = bits(_p_comb_31_T_2, 0, 0) @[rca.scala 31:56]
    p_comb[31] <= _p_comb_31_T_3 @[rca.scala 31:21]
    node _s_comb_31_T = xor(p_comb[31], c_comb[31]) @[rca.scala 32:34]
    s_comb[31] <= _s_comb_31_T @[rca.scala 32:21]
    node _c_comb_32_T = and(c_comb[31], p_comb[31]) @[rca.scala 33:34]
    node _c_comb_32_T_1 = or(_c_comb_32_T, g_comb[31]) @[rca.scala 33:46]
    c_comb[32] <= _c_comb_32_T_1 @[rca.scala 33:21]
    node output_S_lo_lo_lo_lo = cat(s_comb[1], s_comb[0]) @[rca.scala 36:24]
    node output_S_lo_lo_lo_hi = cat(s_comb[3], s_comb[2]) @[rca.scala 36:24]
    node output_S_lo_lo_lo = cat(output_S_lo_lo_lo_hi, output_S_lo_lo_lo_lo) @[rca.scala 36:24]
    node output_S_lo_lo_hi_lo = cat(s_comb[5], s_comb[4]) @[rca.scala 36:24]
    node output_S_lo_lo_hi_hi = cat(s_comb[7], s_comb[6]) @[rca.scala 36:24]
    node output_S_lo_lo_hi = cat(output_S_lo_lo_hi_hi, output_S_lo_lo_hi_lo) @[rca.scala 36:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[rca.scala 36:24]
    node output_S_lo_hi_lo_lo = cat(s_comb[9], s_comb[8]) @[rca.scala 36:24]
    node output_S_lo_hi_lo_hi = cat(s_comb[11], s_comb[10]) @[rca.scala 36:24]
    node output_S_lo_hi_lo = cat(output_S_lo_hi_lo_hi, output_S_lo_hi_lo_lo) @[rca.scala 36:24]
    node output_S_lo_hi_hi_lo = cat(s_comb[13], s_comb[12]) @[rca.scala 36:24]
    node output_S_lo_hi_hi_hi = cat(s_comb[15], s_comb[14]) @[rca.scala 36:24]
    node output_S_lo_hi_hi = cat(output_S_lo_hi_hi_hi, output_S_lo_hi_hi_lo) @[rca.scala 36:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[rca.scala 36:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[rca.scala 36:24]
    node output_S_hi_lo_lo_lo = cat(s_comb[17], s_comb[16]) @[rca.scala 36:24]
    node output_S_hi_lo_lo_hi = cat(s_comb[19], s_comb[18]) @[rca.scala 36:24]
    node output_S_hi_lo_lo = cat(output_S_hi_lo_lo_hi, output_S_hi_lo_lo_lo) @[rca.scala 36:24]
    node output_S_hi_lo_hi_lo = cat(s_comb[21], s_comb[20]) @[rca.scala 36:24]
    node output_S_hi_lo_hi_hi = cat(s_comb[23], s_comb[22]) @[rca.scala 36:24]
    node output_S_hi_lo_hi = cat(output_S_hi_lo_hi_hi, output_S_hi_lo_hi_lo) @[rca.scala 36:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[rca.scala 36:24]
    node output_S_hi_hi_lo_lo = cat(s_comb[25], s_comb[24]) @[rca.scala 36:24]
    node output_S_hi_hi_lo_hi = cat(s_comb[27], s_comb[26]) @[rca.scala 36:24]
    node output_S_hi_hi_lo = cat(output_S_hi_hi_lo_hi, output_S_hi_hi_lo_lo) @[rca.scala 36:24]
    node output_S_hi_hi_hi_lo = cat(s_comb[29], s_comb[28]) @[rca.scala 36:24]
    node output_S_hi_hi_hi_hi = cat(s_comb[31], s_comb[30]) @[rca.scala 36:24]
    node output_S_hi_hi_hi = cat(output_S_hi_hi_hi_hi, output_S_hi_hi_hi_lo) @[rca.scala 36:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[rca.scala 36:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[rca.scala 36:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[rca.scala 36:24]
    node _output_S_T_1 = asSInt(_output_S_T) @[rca.scala 36:31]
    output.S <= _output_S_T_1 @[rca.scala 36:14]
    node _output_C_T = asSInt(c_comb[32]) @[rca.scala 37:40]
    output.C <= _output_C_T @[rca.scala 37:14]

  module MacUnit_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip in_a : SInt<8>, flip in_b : SInt<8>, flip in_c : SInt<32>, out_c : SInt<32>}

    inst mul of Multiplier_3 @[MacUnit.scala 15:19]
    mul.clock <= clock
    mul.reset <= reset
    inst rca of RCA_7 @[MacUnit.scala 16:19]
    rca.clock <= clock
    rca.reset <= reset
    mul.input.multiplicand <= io.in_a @[MacUnit.scala 18:26]
    mul.input.multiplier <= io.in_b @[MacUnit.scala 19:26]
    node _rca_input_a_in_T = bits(mul.output.product, 15, 15) @[MacUnit.scala 21:71]
    node _rca_input_a_in_T_1 = bits(_rca_input_a_in_T, 0, 0) @[Bitwise.scala 77:15]
    node _rca_input_a_in_T_2 = mux(_rca_input_a_in_T_1, UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
    node rca_input_a_in_lo = asUInt(mul.output.product) @[Cat.scala 33:92]
    node _rca_input_a_in_T_3 = cat(_rca_input_a_in_T_2, rca_input_a_in_lo) @[Cat.scala 33:92]
    node _rca_input_a_in_T_4 = asSInt(_rca_input_a_in_T_3) @[MacUnit.scala 21:108]
    rca.input.a_in <= _rca_input_a_in_T_4 @[MacUnit.scala 21:19]
    rca.input.b_in <= io.in_c @[MacUnit.scala 22:19]
    rca.input.c_in <= asSInt(UInt<32>("h0")) @[MacUnit.scala 23:19]
    io.out_c <= rca.output.S @[MacUnit.scala 24:19]

  module PE_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip in_control : { ctrl_sa_send_data : UInt<1>}, flip in_a : SInt<8>, flip in_b : SInt<8>, flip in_c : SInt<32>, out_control : { ctrl_sa_send_data : UInt<1>}, out_a : SInt<8>, out_b : SInt<8>, out_c : SInt<32>}

    reg a_reg : SInt<8>, clock with :
      reset => (reset, asSInt(UInt<8>("h0"))) @[PE.scala 24:22]
    reg b_reg : SInt<8>, clock with :
      reset => (reset, asSInt(UInt<8>("h0"))) @[PE.scala 25:22]
    reg c_reg : SInt<32>, clock with :
      reset => (reset, asSInt(UInt<32>("h0"))) @[PE.scala 26:22]
    inst mac of MacUnit_3 @[PE.scala 28:19]
    mac.clock <= clock
    mac.reset <= reset
    mac.io.in_a <= io.in_a @[PE.scala 29:15]
    mac.io.in_b <= io.in_b @[PE.scala 30:15]
    mac.io.in_c <= c_reg @[PE.scala 31:15]
    a_reg <= io.in_a @[PE.scala 33:9]
    b_reg <= io.in_b @[PE.scala 34:9]
    node _c_reg_T = mux(io.in_control.ctrl_sa_send_data, io.in_c, mac.io.out_c) @[PE.scala 36:15]
    c_reg <= _c_reg_T @[PE.scala 36:9]
    io.out_a <= a_reg @[PE.scala 38:12]
    io.out_b <= b_reg @[PE.scala 39:12]
    io.out_c <= c_reg @[PE.scala 40:12]
    io.out_control <= io.in_control @[PE.scala 42:18]

  module SystolicArray :
    input clock : Clock
    input reset : Reset
    output io : { flip in_control : { ctrl_sa_send_data : UInt<1>}[2], flip in_a : SInt<8>[2], flip in_b : SInt<8>[2], flip in_c : SInt<32>[2], out_control : { ctrl_sa_send_data : UInt<1>}[2], out_a : SInt<8>[2], out_b : SInt<8>[2], out_c : SInt<32>[2]}

    inst sa_0_0 of PE @[SystolicArray.scala 22:45]
    sa_0_0.clock <= clock
    sa_0_0.reset <= reset
    inst sa_0_1 of PE_1 @[SystolicArray.scala 22:45]
    sa_0_1.clock <= clock
    sa_0_1.reset <= reset
    inst sa_1_0 of PE_2 @[SystolicArray.scala 22:45]
    sa_1_0.clock <= clock
    sa_1_0.reset <= reset
    inst sa_1_1 of PE_3 @[SystolicArray.scala 22:45]
    sa_1_1.clock <= clock
    sa_1_1.reset <= reset
    sa_0_0.io.in_a <= io.in_a[0] @[SystolicArray.scala 28:20]
    sa_0_1.io.in_a <= sa_0_0.io.out_a @[SystolicArray.scala 28:20]
    sa_1_0.io.in_a <= io.in_a[1] @[SystolicArray.scala 28:20]
    sa_1_1.io.in_a <= sa_1_0.io.out_a @[SystolicArray.scala 28:20]
    sa_0_0.io.in_b <= io.in_b[0] @[SystolicArray.scala 36:20]
    sa_1_0.io.in_b <= sa_0_0.io.out_b @[SystolicArray.scala 36:20]
    sa_0_1.io.in_b <= io.in_b[1] @[SystolicArray.scala 36:20]
    sa_1_1.io.in_b <= sa_0_1.io.out_b @[SystolicArray.scala 36:20]
    sa_0_0.io.in_c <= io.in_c[0] @[SystolicArray.scala 44:20]
    sa_1_0.io.in_c <= sa_0_0.io.out_c @[SystolicArray.scala 44:20]
    sa_0_1.io.in_c <= io.in_c[1] @[SystolicArray.scala 44:20]
    sa_1_1.io.in_c <= sa_0_1.io.out_c @[SystolicArray.scala 44:20]
    sa_0_0.io.in_control.ctrl_sa_send_data <= io.in_control[0].ctrl_sa_send_data @[SystolicArray.scala 53:26]
    sa_1_0.io.in_control.ctrl_sa_send_data <= sa_0_0.io.out_control.ctrl_sa_send_data @[SystolicArray.scala 53:26]
    sa_0_1.io.in_control.ctrl_sa_send_data <= io.in_control[1].ctrl_sa_send_data @[SystolicArray.scala 53:26]
    sa_1_1.io.in_control.ctrl_sa_send_data <= sa_0_1.io.out_control.ctrl_sa_send_data @[SystolicArray.scala 53:26]
    io.out_b[0] <= sa_1_0.io.out_b @[SystolicArray.scala 59:17]
    io.out_c[0] <= sa_1_0.io.out_c @[SystolicArray.scala 60:17]
    io.out_control[0] <= sa_1_0.io.out_control @[SystolicArray.scala 61:23]
    io.out_b[1] <= sa_1_1.io.out_b @[SystolicArray.scala 59:17]
    io.out_c[1] <= sa_1_1.io.out_c @[SystolicArray.scala 60:17]
    io.out_control[1] <= sa_1_1.io.out_control @[SystolicArray.scala 61:23]
    io.out_a[0] <= sa_0_1.io.out_a @[SystolicArray.scala 65:17]
    io.out_a[1] <= sa_1_1.io.out_a @[SystolicArray.scala 65:17]

  module GlobalCounter :
    input clock : Clock
    input reset : Reset
    output io : { flip start : UInt<1>, tick : UInt<1>}

    reg count : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Controller.scala 13:22]
    node tick = eq(count, UInt<4>("hb")) @[Controller.scala 14:20]
    reg enable : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Controller.scala 16:23]
    when io.start : @[Controller.scala 17:18]
      enable <= UInt<1>("h1") @[Controller.scala 18:12]
    else :
      when tick : @[Controller.scala 19:20]
        enable <= UInt<1>("h0") @[Controller.scala 20:12]
    when enable : @[Controller.scala 23:16]
      node _T = neq(count, UInt<4>("hb")) @[Controller.scala 24:16]
      when _T : @[Controller.scala 24:37]
        node _count_T = add(count, UInt<1>("h1")) @[Controller.scala 25:22]
        node _count_T_1 = tail(_count_T, 1) @[Controller.scala 25:22]
        count <= _count_T_1 @[Controller.scala 25:13]
      else :
        count <= UInt<1>("h0") @[Controller.scala 27:13]
    io.tick <= tick @[Controller.scala 31:11]

  module GlobalCounter_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip start : UInt<1>, tick : UInt<1>}

    reg count : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Controller.scala 13:22]
    node tick = eq(count, UInt<1>("h1")) @[Controller.scala 14:20]
    reg enable : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Controller.scala 16:23]
    when io.start : @[Controller.scala 17:18]
      enable <= UInt<1>("h1") @[Controller.scala 18:12]
    else :
      when tick : @[Controller.scala 19:20]
        enable <= UInt<1>("h0") @[Controller.scala 20:12]
    when enable : @[Controller.scala 23:16]
      node _T = neq(count, UInt<1>("h1")) @[Controller.scala 24:16]
      when _T : @[Controller.scala 24:37]
        node _count_T = add(count, UInt<1>("h1")) @[Controller.scala 25:22]
        node _count_T_1 = tail(_count_T, 1) @[Controller.scala 25:22]
        count <= _count_T_1 @[Controller.scala 25:13]
      else :
        count <= UInt<1>("h0") @[Controller.scala 27:13]
    io.tick <= tick @[Controller.scala 31:11]

  module Controller :
    input clock : Clock
    input reset : Reset
    output io : { flip ibh_data_in_done : UInt<1>, flip ibv_data_in_done : UInt<1>, flip ob_empty : UInt<1>, ctrl_ib_data_out : UInt<1>, ctrl_ob_data_in : UInt<1>, ctrl_sa_send_data : UInt<1>, ctrl_sa_isIdle : UInt<1>}

    wire ctrl_ib_data_out : UInt<1>
    ctrl_ib_data_out <= UInt<1>("h0")
    reg delay_ctrl_ib_data_out : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Controller.scala 48:39]
    wire ctrl_ib_data_out_edge : UInt<1>
    ctrl_ib_data_out_edge <= UInt<1>("h0")
    delay_ctrl_ib_data_out <= ctrl_ib_data_out @[Controller.scala 50:26]
    node _ctrl_ib_data_out_edge_T = eq(delay_ctrl_ib_data_out, UInt<1>("h0")) @[Controller.scala 51:28]
    node _ctrl_ib_data_out_edge_T_1 = and(_ctrl_ib_data_out_edge_T, ctrl_ib_data_out) @[Controller.scala 51:52]
    ctrl_ib_data_out_edge <= _ctrl_ib_data_out_edge_T_1 @[Controller.scala 51:25]
    io.ctrl_ib_data_out <= ctrl_ib_data_out_edge @[Controller.scala 52:23]
    reg cal_done : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Controller.scala 54:25]
    reg out_done : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Controller.scala 55:25]
    wire cal_gc_start : UInt<1>
    cal_gc_start <= UInt<1>("h0")
    reg isStall : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Controller.scala 58:24]
    inst cal_gc of GlobalCounter @[Controller.scala 61:28]
    cal_gc.clock <= clock
    cal_gc.reset <= reset
    cal_gc.io.start <= cal_gc_start @[Controller.scala 62:19]
    when cal_gc.io.tick : @[Controller.scala 63:24]
      cal_done <= UInt<1>("h1") @[Controller.scala 64:14]
    inst out_gc of GlobalCounter_1 @[Controller.scala 68:28]
    out_gc.clock <= clock
    out_gc.reset <= reset
    node _out_gc_io_start_T = and(cal_gc.io.tick, io.ob_empty) @[Controller.scala 69:37]
    node _out_gc_io_start_T_1 = and(isStall, io.ob_empty) @[Controller.scala 69:61]
    node _out_gc_io_start_T_2 = or(_out_gc_io_start_T, _out_gc_io_start_T_1) @[Controller.scala 69:51]
    out_gc.io.start <= _out_gc_io_start_T_2 @[Controller.scala 69:19]
    when out_gc.io.tick : @[Controller.scala 70:24]
      out_done <= UInt<1>("h1") @[Controller.scala 71:14]
    node _io_ctrl_ob_data_in_T = eq(out_done, UInt<1>("h0")) @[Controller.scala 74:36]
    node _io_ctrl_ob_data_in_T_1 = and(cal_done, _io_ctrl_ob_data_in_T) @[Controller.scala 74:34]
    node _io_ctrl_ob_data_in_T_2 = eq(isStall, UInt<1>("h0")) @[Controller.scala 74:48]
    node _io_ctrl_ob_data_in_T_3 = and(_io_ctrl_ob_data_in_T_1, _io_ctrl_ob_data_in_T_2) @[Controller.scala 74:46]
    io.ctrl_ob_data_in <= _io_ctrl_ob_data_in_T_3 @[Controller.scala 74:22]
    node _io_ctrl_sa_send_data_T = eq(out_done, UInt<1>("h0")) @[Controller.scala 75:38]
    node _io_ctrl_sa_send_data_T_1 = and(cal_done, _io_ctrl_sa_send_data_T) @[Controller.scala 75:36]
    node _io_ctrl_sa_send_data_T_2 = eq(isStall, UInt<1>("h0")) @[Controller.scala 75:50]
    node _io_ctrl_sa_send_data_T_3 = and(_io_ctrl_sa_send_data_T_1, _io_ctrl_sa_send_data_T_2) @[Controller.scala 75:48]
    io.ctrl_sa_send_data <= _io_ctrl_sa_send_data_T_3 @[Controller.scala 75:24]
    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Controller.scala 83:22]
    node _T = eq(state, UInt<2>("h0")) @[Controller.scala 85:14]
    when _T : @[Controller.scala 85:24]
      node _T_1 = and(io.ibh_data_in_done, io.ibv_data_in_done) @[Controller.scala 86:30]
      node _T_2 = eq(isStall, UInt<1>("h0")) @[Controller.scala 86:56]
      node _T_3 = and(_T_1, _T_2) @[Controller.scala 86:53]
      when _T_3 : @[Controller.scala 86:66]
        state <= UInt<2>("h1") @[Controller.scala 87:13]
        isStall <= UInt<1>("h0") @[Controller.scala 88:15]
        ctrl_ib_data_out <= UInt<1>("h1") @[Controller.scala 89:24]
        cal_gc_start <= UInt<1>("h1") @[Controller.scala 90:20]
    else :
      node _T_4 = eq(state, UInt<2>("h1")) @[Controller.scala 92:20]
      when _T_4 : @[Controller.scala 92:33]
        node _T_5 = and(cal_done, io.ob_empty) @[Controller.scala 93:19]
        when _T_5 : @[Controller.scala 93:35]
          state <= UInt<2>("h3") @[Controller.scala 94:13]
        else :
          node _T_6 = eq(io.ob_empty, UInt<1>("h0")) @[Controller.scala 95:34]
          node _T_7 = and(cal_gc.io.tick, _T_6) @[Controller.scala 95:31]
          when _T_7 : @[Controller.scala 95:48]
            state <= UInt<2>("h2") @[Controller.scala 96:13]
            isStall <= UInt<1>("h1") @[Controller.scala 97:15]
      else :
        node _T_8 = eq(state, UInt<2>("h2")) @[Controller.scala 99:20]
        when _T_8 : @[Controller.scala 99:31]
          when io.ob_empty : @[Controller.scala 100:23]
            state <= UInt<2>("h3") @[Controller.scala 101:13]
            isStall <= UInt<1>("h0") @[Controller.scala 102:15]
        else :
          node _T_9 = eq(state, UInt<2>("h3")) @[Controller.scala 104:20]
          when _T_9 : @[Controller.scala 104:32]
            when out_done : @[Controller.scala 105:20]
              state <= UInt<2>("h0") @[Controller.scala 106:13]
              cal_done <= UInt<1>("h0") @[Controller.scala 107:16]
              out_done <= UInt<1>("h0") @[Controller.scala 108:16]
    node _io_ctrl_sa_isIdle_T = eq(state, UInt<2>("h0")) @[Controller.scala 112:30]
    io.ctrl_sa_isIdle <= _io_ctrl_sa_isIdle_T @[Controller.scala 112:21]

  module MultiWritePortFIFO :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : UInt<1>, flip deq : UInt<1>, flip enqData : SInt<8>[8], deqData : SInt<8>, full : UInt<1>, empty : UInt<1>}

    wire _mem_WIRE : SInt<8>[8] @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[0] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[1] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[2] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[3] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[4] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[5] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[6] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[7] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    reg mem : SInt<8>[8], clock with :
      reset => (reset, _mem_WIRE) @[MultiPortFIFO.scala 16:20]
    reg readPtr : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[MultiPortFIFO.scala 18:24]
    reg writePtr : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[MultiPortFIFO.scala 19:25]
    wire isFull : UInt<1>
    isFull <= UInt<1>("h0")
    wire isEmpty : UInt<1>
    isEmpty <= UInt<1>("h0")
    wire deqData : SInt<8>
    deqData <= asSInt(UInt<8>("h0"))
    node _isEmpty_T = eq(readPtr, writePtr) @[MultiPortFIFO.scala 25:22]
    isEmpty <= _isEmpty_T @[MultiPortFIFO.scala 25:11]
    node _isFull_T = bits(writePtr, 3, 3) @[MultiPortFIFO.scala 26:38]
    node _isFull_T_1 = not(_isFull_T) @[MultiPortFIFO.scala 26:29]
    node _isFull_T_2 = bits(writePtr, 2, 0) @[MultiPortFIFO.scala 26:60]
    node _isFull_T_3 = cat(_isFull_T_1, _isFull_T_2) @[Cat.scala 33:92]
    node _isFull_T_4 = eq(readPtr, _isFull_T_3) @[MultiPortFIFO.scala 26:21]
    isFull <= _isFull_T_4 @[MultiPortFIFO.scala 26:10]
    node _T = eq(isFull, UInt<1>("h0")) @[MultiPortFIFO.scala 28:18]
    node _T_1 = and(io.enq, _T) @[MultiPortFIFO.scala 28:15]
    when _T_1 : @[MultiPortFIFO.scala 28:27]
      mem <= io.enqData @[MultiPortFIFO.scala 29:9]
      node _writePtr_T = add(writePtr, UInt<4>("h8")) @[MultiPortFIFO.scala 30:26]
      node _writePtr_T_1 = tail(_writePtr_T, 1) @[MultiPortFIFO.scala 30:26]
      writePtr <= _writePtr_T_1 @[MultiPortFIFO.scala 30:14]
    node _T_2 = eq(isEmpty, UInt<1>("h0")) @[MultiPortFIFO.scala 33:18]
    node _T_3 = and(io.deq, _T_2) @[MultiPortFIFO.scala 33:15]
    when _T_3 : @[MultiPortFIFO.scala 33:28]
      node _readPtr_T = add(readPtr, UInt<1>("h1")) @[MultiPortFIFO.scala 34:24]
      node _readPtr_T_1 = tail(_readPtr_T, 1) @[MultiPortFIFO.scala 34:24]
      readPtr <= _readPtr_T_1 @[MultiPortFIFO.scala 34:13]
      node _deqData_T = bits(readPtr, 2, 0)
      deqData <= mem[_deqData_T] @[MultiPortFIFO.scala 35:13]
    io.deqData <= deqData @[MultiPortFIFO.scala 38:14]
    io.full <= isFull @[MultiPortFIFO.scala 39:11]
    io.empty <= isEmpty @[MultiPortFIFO.scala 40:12]

  module MultiWritePortFIFO_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : UInt<1>, flip deq : UInt<1>, flip enqData : SInt<8>[8], deqData : SInt<8>, full : UInt<1>, empty : UInt<1>}

    wire _mem_WIRE : SInt<8>[8] @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[0] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[1] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[2] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[3] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[4] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[5] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[6] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[7] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    reg mem : SInt<8>[8], clock with :
      reset => (reset, _mem_WIRE) @[MultiPortFIFO.scala 16:20]
    reg readPtr : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[MultiPortFIFO.scala 18:24]
    reg writePtr : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[MultiPortFIFO.scala 19:25]
    wire isFull : UInt<1>
    isFull <= UInt<1>("h0")
    wire isEmpty : UInt<1>
    isEmpty <= UInt<1>("h0")
    wire deqData : SInt<8>
    deqData <= asSInt(UInt<8>("h0"))
    node _isEmpty_T = eq(readPtr, writePtr) @[MultiPortFIFO.scala 25:22]
    isEmpty <= _isEmpty_T @[MultiPortFIFO.scala 25:11]
    node _isFull_T = bits(writePtr, 3, 3) @[MultiPortFIFO.scala 26:38]
    node _isFull_T_1 = not(_isFull_T) @[MultiPortFIFO.scala 26:29]
    node _isFull_T_2 = bits(writePtr, 2, 0) @[MultiPortFIFO.scala 26:60]
    node _isFull_T_3 = cat(_isFull_T_1, _isFull_T_2) @[Cat.scala 33:92]
    node _isFull_T_4 = eq(readPtr, _isFull_T_3) @[MultiPortFIFO.scala 26:21]
    isFull <= _isFull_T_4 @[MultiPortFIFO.scala 26:10]
    node _T = eq(isFull, UInt<1>("h0")) @[MultiPortFIFO.scala 28:18]
    node _T_1 = and(io.enq, _T) @[MultiPortFIFO.scala 28:15]
    when _T_1 : @[MultiPortFIFO.scala 28:27]
      mem <= io.enqData @[MultiPortFIFO.scala 29:9]
      node _writePtr_T = add(writePtr, UInt<4>("h8")) @[MultiPortFIFO.scala 30:26]
      node _writePtr_T_1 = tail(_writePtr_T, 1) @[MultiPortFIFO.scala 30:26]
      writePtr <= _writePtr_T_1 @[MultiPortFIFO.scala 30:14]
    node _T_2 = eq(isEmpty, UInt<1>("h0")) @[MultiPortFIFO.scala 33:18]
    node _T_3 = and(io.deq, _T_2) @[MultiPortFIFO.scala 33:15]
    when _T_3 : @[MultiPortFIFO.scala 33:28]
      node _readPtr_T = add(readPtr, UInt<1>("h1")) @[MultiPortFIFO.scala 34:24]
      node _readPtr_T_1 = tail(_readPtr_T, 1) @[MultiPortFIFO.scala 34:24]
      readPtr <= _readPtr_T_1 @[MultiPortFIFO.scala 34:13]
      node _deqData_T = bits(readPtr, 2, 0)
      deqData <= mem[_deqData_T] @[MultiPortFIFO.scala 35:13]
    io.deqData <= deqData @[MultiPortFIFO.scala 38:14]
    io.full <= isFull @[MultiPortFIFO.scala 39:11]
    io.empty <= isEmpty @[MultiPortFIFO.scala 40:12]

  module InputBuffer :
    input clock : Clock
    input reset : Reset
    output io : { flip ctrl_ib_data_out : UInt<1>, flip data_in : { flip ready : UInt<1>, valid : UInt<1>, bits : SInt<8>[8][2]}, data_out : SInt<8>[2], ib_data_in_done : UInt<1>}

    inst data_queue_0 of MultiWritePortFIFO @[InputBuffer.scala 16:46]
    data_queue_0.clock <= clock
    data_queue_0.reset <= reset
    inst data_queue_1 of MultiWritePortFIFO_1 @[InputBuffer.scala 16:46]
    data_queue_1.clock <= clock
    data_queue_1.reset <= reset
    reg delay_count : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), delay_count) @[InputBuffer.scala 19:24]
    wire ib_data_in_done : UInt<1>
    ib_data_in_done <= UInt<1>("h0")
    io.ib_data_in_done <= ib_data_in_done @[InputBuffer.scala 22:22]
    wire allFull : UInt<1>
    allFull <= UInt<1>("h0")
    wire allEmpty : UInt<1>
    allEmpty <= UInt<1>("h0")
    node _allFull_T = and(data_queue_0.io.full, data_queue_1.io.full) @[InputBuffer.scala 26:49]
    allFull <= _allFull_T @[InputBuffer.scala 26:11]
    node _allEmpty_T = and(data_queue_0.io.empty, data_queue_1.io.empty) @[InputBuffer.scala 27:51]
    allEmpty <= _allEmpty_T @[InputBuffer.scala 27:12]
    reg state : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[InputBuffer.scala 30:22]
    node _data_queue_0_io_enq_T = and(io.data_in.ready, io.data_in.valid) @[Decoupled.scala 52:35]
    data_queue_0.io.enq <= _data_queue_0_io_enq_T @[InputBuffer.scala 33:26]
    node _data_queue_0_io_deq_T = eq(state, UInt<1>("h1")) @[InputBuffer.scala 34:35]
    node _data_queue_0_io_deq_T_1 = eq(delay_count[0], UInt<1>("h0")) @[InputBuffer.scala 34:66]
    node _data_queue_0_io_deq_T_2 = and(_data_queue_0_io_deq_T, _data_queue_0_io_deq_T_1) @[InputBuffer.scala 34:48]
    node _data_queue_0_io_deq_T_3 = eq(data_queue_0.io.empty, UInt<1>("h0")) @[InputBuffer.scala 34:77]
    node _data_queue_0_io_deq_T_4 = and(_data_queue_0_io_deq_T_2, _data_queue_0_io_deq_T_3) @[InputBuffer.scala 34:74]
    data_queue_0.io.deq <= _data_queue_0_io_deq_T_4 @[InputBuffer.scala 34:26]
    data_queue_0.io.enqData <= io.data_in.bits[0] @[InputBuffer.scala 35:30]
    io.data_out[0] <= data_queue_0.io.deqData @[InputBuffer.scala 36:20]
    node _data_queue_1_io_enq_T = and(io.data_in.ready, io.data_in.valid) @[Decoupled.scala 52:35]
    data_queue_1.io.enq <= _data_queue_1_io_enq_T @[InputBuffer.scala 33:26]
    node _data_queue_1_io_deq_T = eq(state, UInt<1>("h1")) @[InputBuffer.scala 34:35]
    node _data_queue_1_io_deq_T_1 = eq(delay_count[1], UInt<1>("h0")) @[InputBuffer.scala 34:66]
    node _data_queue_1_io_deq_T_2 = and(_data_queue_1_io_deq_T, _data_queue_1_io_deq_T_1) @[InputBuffer.scala 34:48]
    node _data_queue_1_io_deq_T_3 = eq(data_queue_1.io.empty, UInt<1>("h0")) @[InputBuffer.scala 34:77]
    node _data_queue_1_io_deq_T_4 = and(_data_queue_1_io_deq_T_2, _data_queue_1_io_deq_T_3) @[InputBuffer.scala 34:74]
    data_queue_1.io.deq <= _data_queue_1_io_deq_T_4 @[InputBuffer.scala 34:26]
    data_queue_1.io.enqData <= io.data_in.bits[1] @[InputBuffer.scala 35:30]
    io.data_out[1] <= data_queue_1.io.deqData @[InputBuffer.scala 36:20]
    node _io_data_in_ready_T = eq(state, UInt<1>("h0")) @[InputBuffer.scala 38:29]
    io.data_in.ready <= _io_data_in_ready_T @[InputBuffer.scala 38:20]
    node _T = eq(state, UInt<1>("h0")) @[InputBuffer.scala 40:14]
    when _T : @[InputBuffer.scala 40:27]
      when allFull : @[InputBuffer.scala 41:19]
        ib_data_in_done <= UInt<1>("h1") @[InputBuffer.scala 42:23]
        node _state_T = mux(io.ctrl_ib_data_out, UInt<1>("h1"), UInt<1>("h0")) @[InputBuffer.scala 43:19]
        state <= _state_T @[InputBuffer.scala 43:13]
      delay_count[0] <= UInt<1>("h0") @[InputBuffer.scala 46:22]
      delay_count[1] <= UInt<1>("h1") @[InputBuffer.scala 46:22]
    else :
      node _T_1 = eq(state, UInt<1>("h1")) @[InputBuffer.scala 48:20]
      when _T_1 : @[InputBuffer.scala 48:34]
        when allEmpty : @[InputBuffer.scala 49:20]
          state <= UInt<1>("h0") @[InputBuffer.scala 50:13]
        node _delay_count_0_T = neq(delay_count[0], UInt<1>("h0")) @[InputBuffer.scala 53:44]
        node _delay_count_0_T_1 = sub(delay_count[0], UInt<1>("h1")) @[InputBuffer.scala 53:68]
        node _delay_count_0_T_2 = tail(_delay_count_0_T_1, 1) @[InputBuffer.scala 53:68]
        node _delay_count_0_T_3 = mux(_delay_count_0_T, _delay_count_0_T_2, UInt<1>("h0")) @[InputBuffer.scala 53:28]
        delay_count[0] <= _delay_count_0_T_3 @[InputBuffer.scala 53:22]
        node _delay_count_1_T = neq(delay_count[1], UInt<1>("h0")) @[InputBuffer.scala 53:44]
        node _delay_count_1_T_1 = sub(delay_count[1], UInt<1>("h1")) @[InputBuffer.scala 53:68]
        node _delay_count_1_T_2 = tail(_delay_count_1_T_1, 1) @[InputBuffer.scala 53:68]
        node _delay_count_1_T_3 = mux(_delay_count_1_T, _delay_count_1_T_2, UInt<1>("h0")) @[InputBuffer.scala 53:28]
        delay_count[1] <= _delay_count_1_T_3 @[InputBuffer.scala 53:22]

  module MultiWritePortFIFO_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : UInt<1>, flip deq : UInt<1>, flip enqData : SInt<8>[8], deqData : SInt<8>, full : UInt<1>, empty : UInt<1>}

    wire _mem_WIRE : SInt<8>[8] @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[0] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[1] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[2] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[3] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[4] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[5] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[6] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[7] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    reg mem : SInt<8>[8], clock with :
      reset => (reset, _mem_WIRE) @[MultiPortFIFO.scala 16:20]
    reg readPtr : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[MultiPortFIFO.scala 18:24]
    reg writePtr : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[MultiPortFIFO.scala 19:25]
    wire isFull : UInt<1>
    isFull <= UInt<1>("h0")
    wire isEmpty : UInt<1>
    isEmpty <= UInt<1>("h0")
    wire deqData : SInt<8>
    deqData <= asSInt(UInt<8>("h0"))
    node _isEmpty_T = eq(readPtr, writePtr) @[MultiPortFIFO.scala 25:22]
    isEmpty <= _isEmpty_T @[MultiPortFIFO.scala 25:11]
    node _isFull_T = bits(writePtr, 3, 3) @[MultiPortFIFO.scala 26:38]
    node _isFull_T_1 = not(_isFull_T) @[MultiPortFIFO.scala 26:29]
    node _isFull_T_2 = bits(writePtr, 2, 0) @[MultiPortFIFO.scala 26:60]
    node _isFull_T_3 = cat(_isFull_T_1, _isFull_T_2) @[Cat.scala 33:92]
    node _isFull_T_4 = eq(readPtr, _isFull_T_3) @[MultiPortFIFO.scala 26:21]
    isFull <= _isFull_T_4 @[MultiPortFIFO.scala 26:10]
    node _T = eq(isFull, UInt<1>("h0")) @[MultiPortFIFO.scala 28:18]
    node _T_1 = and(io.enq, _T) @[MultiPortFIFO.scala 28:15]
    when _T_1 : @[MultiPortFIFO.scala 28:27]
      mem <= io.enqData @[MultiPortFIFO.scala 29:9]
      node _writePtr_T = add(writePtr, UInt<4>("h8")) @[MultiPortFIFO.scala 30:26]
      node _writePtr_T_1 = tail(_writePtr_T, 1) @[MultiPortFIFO.scala 30:26]
      writePtr <= _writePtr_T_1 @[MultiPortFIFO.scala 30:14]
    node _T_2 = eq(isEmpty, UInt<1>("h0")) @[MultiPortFIFO.scala 33:18]
    node _T_3 = and(io.deq, _T_2) @[MultiPortFIFO.scala 33:15]
    when _T_3 : @[MultiPortFIFO.scala 33:28]
      node _readPtr_T = add(readPtr, UInt<1>("h1")) @[MultiPortFIFO.scala 34:24]
      node _readPtr_T_1 = tail(_readPtr_T, 1) @[MultiPortFIFO.scala 34:24]
      readPtr <= _readPtr_T_1 @[MultiPortFIFO.scala 34:13]
      node _deqData_T = bits(readPtr, 2, 0)
      deqData <= mem[_deqData_T] @[MultiPortFIFO.scala 35:13]
    io.deqData <= deqData @[MultiPortFIFO.scala 38:14]
    io.full <= isFull @[MultiPortFIFO.scala 39:11]
    io.empty <= isEmpty @[MultiPortFIFO.scala 40:12]

  module MultiWritePortFIFO_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : UInt<1>, flip deq : UInt<1>, flip enqData : SInt<8>[8], deqData : SInt<8>, full : UInt<1>, empty : UInt<1>}

    wire _mem_WIRE : SInt<8>[8] @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[0] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[1] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[2] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[3] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[4] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[5] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[6] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    _mem_WIRE[7] <= asSInt(UInt<8>("h0")) @[MultiPortFIFO.scala 16:28]
    reg mem : SInt<8>[8], clock with :
      reset => (reset, _mem_WIRE) @[MultiPortFIFO.scala 16:20]
    reg readPtr : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[MultiPortFIFO.scala 18:24]
    reg writePtr : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[MultiPortFIFO.scala 19:25]
    wire isFull : UInt<1>
    isFull <= UInt<1>("h0")
    wire isEmpty : UInt<1>
    isEmpty <= UInt<1>("h0")
    wire deqData : SInt<8>
    deqData <= asSInt(UInt<8>("h0"))
    node _isEmpty_T = eq(readPtr, writePtr) @[MultiPortFIFO.scala 25:22]
    isEmpty <= _isEmpty_T @[MultiPortFIFO.scala 25:11]
    node _isFull_T = bits(writePtr, 3, 3) @[MultiPortFIFO.scala 26:38]
    node _isFull_T_1 = not(_isFull_T) @[MultiPortFIFO.scala 26:29]
    node _isFull_T_2 = bits(writePtr, 2, 0) @[MultiPortFIFO.scala 26:60]
    node _isFull_T_3 = cat(_isFull_T_1, _isFull_T_2) @[Cat.scala 33:92]
    node _isFull_T_4 = eq(readPtr, _isFull_T_3) @[MultiPortFIFO.scala 26:21]
    isFull <= _isFull_T_4 @[MultiPortFIFO.scala 26:10]
    node _T = eq(isFull, UInt<1>("h0")) @[MultiPortFIFO.scala 28:18]
    node _T_1 = and(io.enq, _T) @[MultiPortFIFO.scala 28:15]
    when _T_1 : @[MultiPortFIFO.scala 28:27]
      mem <= io.enqData @[MultiPortFIFO.scala 29:9]
      node _writePtr_T = add(writePtr, UInt<4>("h8")) @[MultiPortFIFO.scala 30:26]
      node _writePtr_T_1 = tail(_writePtr_T, 1) @[MultiPortFIFO.scala 30:26]
      writePtr <= _writePtr_T_1 @[MultiPortFIFO.scala 30:14]
    node _T_2 = eq(isEmpty, UInt<1>("h0")) @[MultiPortFIFO.scala 33:18]
    node _T_3 = and(io.deq, _T_2) @[MultiPortFIFO.scala 33:15]
    when _T_3 : @[MultiPortFIFO.scala 33:28]
      node _readPtr_T = add(readPtr, UInt<1>("h1")) @[MultiPortFIFO.scala 34:24]
      node _readPtr_T_1 = tail(_readPtr_T, 1) @[MultiPortFIFO.scala 34:24]
      readPtr <= _readPtr_T_1 @[MultiPortFIFO.scala 34:13]
      node _deqData_T = bits(readPtr, 2, 0)
      deqData <= mem[_deqData_T] @[MultiPortFIFO.scala 35:13]
    io.deqData <= deqData @[MultiPortFIFO.scala 38:14]
    io.full <= isFull @[MultiPortFIFO.scala 39:11]
    io.empty <= isEmpty @[MultiPortFIFO.scala 40:12]

  module InputBuffer_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip ctrl_ib_data_out : UInt<1>, flip data_in : { flip ready : UInt<1>, valid : UInt<1>, bits : SInt<8>[8][2]}, data_out : SInt<8>[2], ib_data_in_done : UInt<1>}

    inst data_queue_0 of MultiWritePortFIFO_2 @[InputBuffer.scala 16:46]
    data_queue_0.clock <= clock
    data_queue_0.reset <= reset
    inst data_queue_1 of MultiWritePortFIFO_3 @[InputBuffer.scala 16:46]
    data_queue_1.clock <= clock
    data_queue_1.reset <= reset
    reg delay_count : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), delay_count) @[InputBuffer.scala 19:24]
    wire ib_data_in_done : UInt<1>
    ib_data_in_done <= UInt<1>("h0")
    io.ib_data_in_done <= ib_data_in_done @[InputBuffer.scala 22:22]
    wire allFull : UInt<1>
    allFull <= UInt<1>("h0")
    wire allEmpty : UInt<1>
    allEmpty <= UInt<1>("h0")
    node _allFull_T = and(data_queue_0.io.full, data_queue_1.io.full) @[InputBuffer.scala 26:49]
    allFull <= _allFull_T @[InputBuffer.scala 26:11]
    node _allEmpty_T = and(data_queue_0.io.empty, data_queue_1.io.empty) @[InputBuffer.scala 27:51]
    allEmpty <= _allEmpty_T @[InputBuffer.scala 27:12]
    reg state : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[InputBuffer.scala 30:22]
    node _data_queue_0_io_enq_T = and(io.data_in.ready, io.data_in.valid) @[Decoupled.scala 52:35]
    data_queue_0.io.enq <= _data_queue_0_io_enq_T @[InputBuffer.scala 33:26]
    node _data_queue_0_io_deq_T = eq(state, UInt<1>("h1")) @[InputBuffer.scala 34:35]
    node _data_queue_0_io_deq_T_1 = eq(delay_count[0], UInt<1>("h0")) @[InputBuffer.scala 34:66]
    node _data_queue_0_io_deq_T_2 = and(_data_queue_0_io_deq_T, _data_queue_0_io_deq_T_1) @[InputBuffer.scala 34:48]
    node _data_queue_0_io_deq_T_3 = eq(data_queue_0.io.empty, UInt<1>("h0")) @[InputBuffer.scala 34:77]
    node _data_queue_0_io_deq_T_4 = and(_data_queue_0_io_deq_T_2, _data_queue_0_io_deq_T_3) @[InputBuffer.scala 34:74]
    data_queue_0.io.deq <= _data_queue_0_io_deq_T_4 @[InputBuffer.scala 34:26]
    data_queue_0.io.enqData <= io.data_in.bits[0] @[InputBuffer.scala 35:30]
    io.data_out[0] <= data_queue_0.io.deqData @[InputBuffer.scala 36:20]
    node _data_queue_1_io_enq_T = and(io.data_in.ready, io.data_in.valid) @[Decoupled.scala 52:35]
    data_queue_1.io.enq <= _data_queue_1_io_enq_T @[InputBuffer.scala 33:26]
    node _data_queue_1_io_deq_T = eq(state, UInt<1>("h1")) @[InputBuffer.scala 34:35]
    node _data_queue_1_io_deq_T_1 = eq(delay_count[1], UInt<1>("h0")) @[InputBuffer.scala 34:66]
    node _data_queue_1_io_deq_T_2 = and(_data_queue_1_io_deq_T, _data_queue_1_io_deq_T_1) @[InputBuffer.scala 34:48]
    node _data_queue_1_io_deq_T_3 = eq(data_queue_1.io.empty, UInt<1>("h0")) @[InputBuffer.scala 34:77]
    node _data_queue_1_io_deq_T_4 = and(_data_queue_1_io_deq_T_2, _data_queue_1_io_deq_T_3) @[InputBuffer.scala 34:74]
    data_queue_1.io.deq <= _data_queue_1_io_deq_T_4 @[InputBuffer.scala 34:26]
    data_queue_1.io.enqData <= io.data_in.bits[1] @[InputBuffer.scala 35:30]
    io.data_out[1] <= data_queue_1.io.deqData @[InputBuffer.scala 36:20]
    node _io_data_in_ready_T = eq(state, UInt<1>("h0")) @[InputBuffer.scala 38:29]
    io.data_in.ready <= _io_data_in_ready_T @[InputBuffer.scala 38:20]
    node _T = eq(state, UInt<1>("h0")) @[InputBuffer.scala 40:14]
    when _T : @[InputBuffer.scala 40:27]
      when allFull : @[InputBuffer.scala 41:19]
        ib_data_in_done <= UInt<1>("h1") @[InputBuffer.scala 42:23]
        node _state_T = mux(io.ctrl_ib_data_out, UInt<1>("h1"), UInt<1>("h0")) @[InputBuffer.scala 43:19]
        state <= _state_T @[InputBuffer.scala 43:13]
      delay_count[0] <= UInt<1>("h0") @[InputBuffer.scala 46:22]
      delay_count[1] <= UInt<1>("h1") @[InputBuffer.scala 46:22]
    else :
      node _T_1 = eq(state, UInt<1>("h1")) @[InputBuffer.scala 48:20]
      when _T_1 : @[InputBuffer.scala 48:34]
        when allEmpty : @[InputBuffer.scala 49:20]
          state <= UInt<1>("h0") @[InputBuffer.scala 50:13]
        node _delay_count_0_T = neq(delay_count[0], UInt<1>("h0")) @[InputBuffer.scala 53:44]
        node _delay_count_0_T_1 = sub(delay_count[0], UInt<1>("h1")) @[InputBuffer.scala 53:68]
        node _delay_count_0_T_2 = tail(_delay_count_0_T_1, 1) @[InputBuffer.scala 53:68]
        node _delay_count_0_T_3 = mux(_delay_count_0_T, _delay_count_0_T_2, UInt<1>("h0")) @[InputBuffer.scala 53:28]
        delay_count[0] <= _delay_count_0_T_3 @[InputBuffer.scala 53:22]
        node _delay_count_1_T = neq(delay_count[1], UInt<1>("h0")) @[InputBuffer.scala 53:44]
        node _delay_count_1_T_1 = sub(delay_count[1], UInt<1>("h1")) @[InputBuffer.scala 53:68]
        node _delay_count_1_T_2 = tail(_delay_count_1_T_1, 1) @[InputBuffer.scala 53:68]
        node _delay_count_1_T_3 = mux(_delay_count_1_T, _delay_count_1_T_2, UInt<1>("h0")) @[InputBuffer.scala 53:28]
        delay_count[1] <= _delay_count_1_T_3 @[InputBuffer.scala 53:22]

  module MultiReadPortFIFO :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : UInt<1>, flip deq : UInt<1>, flip enqData : SInt<32>, deqData : SInt<32>[2], full : UInt<1>, empty : UInt<1>}

    wire _mem_WIRE : SInt<32>[2] @[MultiPortFIFO.scala 54:28]
    _mem_WIRE[0] <= asSInt(UInt<32>("h0")) @[MultiPortFIFO.scala 54:28]
    _mem_WIRE[1] <= asSInt(UInt<32>("h0")) @[MultiPortFIFO.scala 54:28]
    reg mem : SInt<32>[2], clock with :
      reset => (reset, _mem_WIRE) @[MultiPortFIFO.scala 54:20]
    reg readPtr : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[MultiPortFIFO.scala 56:24]
    reg writePtr : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[MultiPortFIFO.scala 57:25]
    wire isFull : UInt<1>
    isFull <= UInt<1>("h0")
    wire isEmpty : UInt<1>
    isEmpty <= UInt<1>("h0")
    wire _deqData_WIRE : SInt<32>[2] @[MultiPortFIFO.scala 61:33]
    _deqData_WIRE[0] <= asSInt(UInt<32>("h0")) @[MultiPortFIFO.scala 61:33]
    _deqData_WIRE[1] <= asSInt(UInt<32>("h0")) @[MultiPortFIFO.scala 61:33]
    wire deqData : SInt<32>[2]
    deqData <= _deqData_WIRE
    node _isEmpty_T = eq(readPtr, writePtr) @[MultiPortFIFO.scala 63:22]
    isEmpty <= _isEmpty_T @[MultiPortFIFO.scala 63:11]
    node _isFull_T = bits(writePtr, 1, 1) @[MultiPortFIFO.scala 64:38]
    node _isFull_T_1 = not(_isFull_T) @[MultiPortFIFO.scala 64:29]
    node _isFull_T_2 = bits(writePtr, 0, 0) @[MultiPortFIFO.scala 64:60]
    node _isFull_T_3 = cat(_isFull_T_1, _isFull_T_2) @[Cat.scala 33:92]
    node _isFull_T_4 = eq(readPtr, _isFull_T_3) @[MultiPortFIFO.scala 64:21]
    isFull <= _isFull_T_4 @[MultiPortFIFO.scala 64:10]
    node _T = eq(isFull, UInt<1>("h0")) @[MultiPortFIFO.scala 66:18]
    node _T_1 = and(io.enq, _T) @[MultiPortFIFO.scala 66:15]
    when _T_1 : @[MultiPortFIFO.scala 66:27]
      node _T_2 = bits(writePtr, 0, 0)
      mem[_T_2] <= io.enqData @[MultiPortFIFO.scala 67:19]
      node _writePtr_T = add(writePtr, UInt<1>("h1")) @[MultiPortFIFO.scala 68:26]
      node _writePtr_T_1 = tail(_writePtr_T, 1) @[MultiPortFIFO.scala 68:26]
      writePtr <= _writePtr_T_1 @[MultiPortFIFO.scala 68:14]
    node _T_3 = and(io.deq, isFull) @[MultiPortFIFO.scala 71:15]
    when _T_3 : @[MultiPortFIFO.scala 71:26]
      node _readPtr_T = add(readPtr, UInt<2>("h2")) @[MultiPortFIFO.scala 72:24]
      node _readPtr_T_1 = tail(_readPtr_T, 1) @[MultiPortFIFO.scala 72:24]
      readPtr <= _readPtr_T_1 @[MultiPortFIFO.scala 72:13]
      deqData <= mem @[MultiPortFIFO.scala 73:13]
    io.deqData <= deqData @[MultiPortFIFO.scala 76:14]
    io.full <= isFull @[MultiPortFIFO.scala 77:11]
    io.empty <= isEmpty @[MultiPortFIFO.scala 78:12]

  module MultiReadPortFIFO_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : UInt<1>, flip deq : UInt<1>, flip enqData : SInt<32>, deqData : SInt<32>[2], full : UInt<1>, empty : UInt<1>}

    wire _mem_WIRE : SInt<32>[2] @[MultiPortFIFO.scala 54:28]
    _mem_WIRE[0] <= asSInt(UInt<32>("h0")) @[MultiPortFIFO.scala 54:28]
    _mem_WIRE[1] <= asSInt(UInt<32>("h0")) @[MultiPortFIFO.scala 54:28]
    reg mem : SInt<32>[2], clock with :
      reset => (reset, _mem_WIRE) @[MultiPortFIFO.scala 54:20]
    reg readPtr : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[MultiPortFIFO.scala 56:24]
    reg writePtr : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[MultiPortFIFO.scala 57:25]
    wire isFull : UInt<1>
    isFull <= UInt<1>("h0")
    wire isEmpty : UInt<1>
    isEmpty <= UInt<1>("h0")
    wire _deqData_WIRE : SInt<32>[2] @[MultiPortFIFO.scala 61:33]
    _deqData_WIRE[0] <= asSInt(UInt<32>("h0")) @[MultiPortFIFO.scala 61:33]
    _deqData_WIRE[1] <= asSInt(UInt<32>("h0")) @[MultiPortFIFO.scala 61:33]
    wire deqData : SInt<32>[2]
    deqData <= _deqData_WIRE
    node _isEmpty_T = eq(readPtr, writePtr) @[MultiPortFIFO.scala 63:22]
    isEmpty <= _isEmpty_T @[MultiPortFIFO.scala 63:11]
    node _isFull_T = bits(writePtr, 1, 1) @[MultiPortFIFO.scala 64:38]
    node _isFull_T_1 = not(_isFull_T) @[MultiPortFIFO.scala 64:29]
    node _isFull_T_2 = bits(writePtr, 0, 0) @[MultiPortFIFO.scala 64:60]
    node _isFull_T_3 = cat(_isFull_T_1, _isFull_T_2) @[Cat.scala 33:92]
    node _isFull_T_4 = eq(readPtr, _isFull_T_3) @[MultiPortFIFO.scala 64:21]
    isFull <= _isFull_T_4 @[MultiPortFIFO.scala 64:10]
    node _T = eq(isFull, UInt<1>("h0")) @[MultiPortFIFO.scala 66:18]
    node _T_1 = and(io.enq, _T) @[MultiPortFIFO.scala 66:15]
    when _T_1 : @[MultiPortFIFO.scala 66:27]
      node _T_2 = bits(writePtr, 0, 0)
      mem[_T_2] <= io.enqData @[MultiPortFIFO.scala 67:19]
      node _writePtr_T = add(writePtr, UInt<1>("h1")) @[MultiPortFIFO.scala 68:26]
      node _writePtr_T_1 = tail(_writePtr_T, 1) @[MultiPortFIFO.scala 68:26]
      writePtr <= _writePtr_T_1 @[MultiPortFIFO.scala 68:14]
    node _T_3 = and(io.deq, isFull) @[MultiPortFIFO.scala 71:15]
    when _T_3 : @[MultiPortFIFO.scala 71:26]
      node _readPtr_T = add(readPtr, UInt<2>("h2")) @[MultiPortFIFO.scala 72:24]
      node _readPtr_T_1 = tail(_readPtr_T, 1) @[MultiPortFIFO.scala 72:24]
      readPtr <= _readPtr_T_1 @[MultiPortFIFO.scala 72:13]
      deqData <= mem @[MultiPortFIFO.scala 73:13]
    io.deqData <= deqData @[MultiPortFIFO.scala 76:14]
    io.full <= isFull @[MultiPortFIFO.scala 77:11]
    io.empty <= isEmpty @[MultiPortFIFO.scala 78:12]

  module OutputBuffer :
    input clock : Clock
    input reset : Reset
    output io : { flip ctrl_ob_data_in : UInt<1>, flip data_in : SInt<32>[2], data_out : { flip ready : UInt<1>, valid : UInt<1>, bits : SInt<32>[2][2]}, ob_empty : UInt<1>}

    inst data_queue_0 of MultiReadPortFIFO @[OutputBuffer.scala 16:46]
    data_queue_0.clock <= clock
    data_queue_0.reset <= reset
    inst data_queue_1 of MultiReadPortFIFO_1 @[OutputBuffer.scala 16:46]
    data_queue_1.clock <= clock
    data_queue_1.reset <= reset
    wire allEmpty : UInt<1>
    allEmpty <= UInt<1>("h0")
    node _allEmpty_T = and(data_queue_0.io.empty, data_queue_1.io.empty) @[OutputBuffer.scala 19:51]
    allEmpty <= _allEmpty_T @[OutputBuffer.scala 19:12]
    wire allFull : UInt<1>
    allFull <= UInt<1>("h0")
    node _allFull_T = and(data_queue_0.io.full, data_queue_1.io.full) @[OutputBuffer.scala 22:49]
    allFull <= _allFull_T @[OutputBuffer.scala 22:11]
    data_queue_0.io.enq <= io.ctrl_ob_data_in @[OutputBuffer.scala 25:26]
    node _data_queue_0_io_deq_T = and(io.data_out.ready, io.data_out.valid) @[Decoupled.scala 52:35]
    data_queue_0.io.deq <= _data_queue_0_io_deq_T @[OutputBuffer.scala 30:28]
    data_queue_0.io.enqData <= io.data_in[0] @[OutputBuffer.scala 32:30]
    io.data_out.bits[0] <= data_queue_0.io.deqData @[OutputBuffer.scala 33:25]
    data_queue_1.io.enq <= io.ctrl_ob_data_in @[OutputBuffer.scala 25:26]
    node _data_queue_1_io_deq_T = and(io.data_out.ready, io.data_out.valid) @[Decoupled.scala 52:35]
    data_queue_1.io.deq <= _data_queue_1_io_deq_T @[OutputBuffer.scala 30:28]
    data_queue_1.io.enqData <= io.data_in[1] @[OutputBuffer.scala 32:30]
    io.data_out.bits[1] <= data_queue_1.io.deqData @[OutputBuffer.scala 33:25]
    io.data_out.valid <= allFull @[OutputBuffer.scala 36:21]
    io.ob_empty <= allEmpty @[OutputBuffer.scala 37:15]

  module top_R :
    input clock : Clock
    input reset : UInt<1>
    output io : { tpuIO : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { in_a : SInt<8>[8][2], in_b : SInt<8>[8][2], in_c : SInt<32>[2]}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { out_c : SInt<32>[2][2]}}}}

    inst sa of SystolicArray @[top.scala 34:18]
    sa.clock <= clock
    sa.reset <= reset
    inst controller of Controller @[top.scala 35:26]
    controller.clock <= clock
    controller.reset <= reset
    inst inBuffer_h of InputBuffer @[top.scala 36:28]
    inBuffer_h.clock <= clock
    inBuffer_h.reset <= reset
    inst inBuffer_v of InputBuffer_1 @[top.scala 37:27]
    inBuffer_v.clock <= clock
    inBuffer_v.reset <= reset
    inst outBuffer of OutputBuffer @[top.scala 38:26]
    outBuffer.clock <= clock
    outBuffer.reset <= reset
    inBuffer_h.io.data_in.valid <= io.tpuIO.in.valid @[top.scala 40:31]
    inBuffer_h.io.data_in.bits[0][0] <= io.tpuIO.in.bits.in_a[0][0] @[top.scala 41:30]
    inBuffer_h.io.data_in.bits[0][1] <= io.tpuIO.in.bits.in_a[0][1] @[top.scala 41:30]
    inBuffer_h.io.data_in.bits[0][2] <= io.tpuIO.in.bits.in_a[0][2] @[top.scala 41:30]
    inBuffer_h.io.data_in.bits[0][3] <= io.tpuIO.in.bits.in_a[0][3] @[top.scala 41:30]
    inBuffer_h.io.data_in.bits[0][4] <= io.tpuIO.in.bits.in_a[0][4] @[top.scala 41:30]
    inBuffer_h.io.data_in.bits[0][5] <= io.tpuIO.in.bits.in_a[0][5] @[top.scala 41:30]
    inBuffer_h.io.data_in.bits[0][6] <= io.tpuIO.in.bits.in_a[0][6] @[top.scala 41:30]
    inBuffer_h.io.data_in.bits[0][7] <= io.tpuIO.in.bits.in_a[0][7] @[top.scala 41:30]
    inBuffer_h.io.data_in.bits[1][0] <= io.tpuIO.in.bits.in_a[1][0] @[top.scala 41:30]
    inBuffer_h.io.data_in.bits[1][1] <= io.tpuIO.in.bits.in_a[1][1] @[top.scala 41:30]
    inBuffer_h.io.data_in.bits[1][2] <= io.tpuIO.in.bits.in_a[1][2] @[top.scala 41:30]
    inBuffer_h.io.data_in.bits[1][3] <= io.tpuIO.in.bits.in_a[1][3] @[top.scala 41:30]
    inBuffer_h.io.data_in.bits[1][4] <= io.tpuIO.in.bits.in_a[1][4] @[top.scala 41:30]
    inBuffer_h.io.data_in.bits[1][5] <= io.tpuIO.in.bits.in_a[1][5] @[top.scala 41:30]
    inBuffer_h.io.data_in.bits[1][6] <= io.tpuIO.in.bits.in_a[1][6] @[top.scala 41:30]
    inBuffer_h.io.data_in.bits[1][7] <= io.tpuIO.in.bits.in_a[1][7] @[top.scala 41:30]
    inBuffer_h.io.ctrl_ib_data_out <= controller.io.ctrl_ib_data_out @[top.scala 42:34]
    inBuffer_v.io.data_in.valid <= io.tpuIO.in.valid @[top.scala 44:31]
    inBuffer_v.io.data_in.bits[0][0] <= io.tpuIO.in.bits.in_b[0][0] @[top.scala 45:30]
    inBuffer_v.io.data_in.bits[0][1] <= io.tpuIO.in.bits.in_b[0][1] @[top.scala 45:30]
    inBuffer_v.io.data_in.bits[0][2] <= io.tpuIO.in.bits.in_b[0][2] @[top.scala 45:30]
    inBuffer_v.io.data_in.bits[0][3] <= io.tpuIO.in.bits.in_b[0][3] @[top.scala 45:30]
    inBuffer_v.io.data_in.bits[0][4] <= io.tpuIO.in.bits.in_b[0][4] @[top.scala 45:30]
    inBuffer_v.io.data_in.bits[0][5] <= io.tpuIO.in.bits.in_b[0][5] @[top.scala 45:30]
    inBuffer_v.io.data_in.bits[0][6] <= io.tpuIO.in.bits.in_b[0][6] @[top.scala 45:30]
    inBuffer_v.io.data_in.bits[0][7] <= io.tpuIO.in.bits.in_b[0][7] @[top.scala 45:30]
    inBuffer_v.io.data_in.bits[1][0] <= io.tpuIO.in.bits.in_b[1][0] @[top.scala 45:30]
    inBuffer_v.io.data_in.bits[1][1] <= io.tpuIO.in.bits.in_b[1][1] @[top.scala 45:30]
    inBuffer_v.io.data_in.bits[1][2] <= io.tpuIO.in.bits.in_b[1][2] @[top.scala 45:30]
    inBuffer_v.io.data_in.bits[1][3] <= io.tpuIO.in.bits.in_b[1][3] @[top.scala 45:30]
    inBuffer_v.io.data_in.bits[1][4] <= io.tpuIO.in.bits.in_b[1][4] @[top.scala 45:30]
    inBuffer_v.io.data_in.bits[1][5] <= io.tpuIO.in.bits.in_b[1][5] @[top.scala 45:30]
    inBuffer_v.io.data_in.bits[1][6] <= io.tpuIO.in.bits.in_b[1][6] @[top.scala 45:30]
    inBuffer_v.io.data_in.bits[1][7] <= io.tpuIO.in.bits.in_b[1][7] @[top.scala 45:30]
    inBuffer_v.io.ctrl_ib_data_out <= controller.io.ctrl_ib_data_out @[top.scala 46:34]
    node _io_tpuIO_in_ready_T = and(inBuffer_h.io.data_in.ready, inBuffer_v.io.data_in.ready) @[top.scala 47:52]
    node _io_tpuIO_in_ready_T_1 = and(_io_tpuIO_in_ready_T, outBuffer.io.ob_empty) @[top.scala 47:83]
    node _io_tpuIO_in_ready_T_2 = and(_io_tpuIO_in_ready_T_1, controller.io.ctrl_sa_isIdle) @[top.scala 47:108]
    io.tpuIO.in.ready <= _io_tpuIO_in_ready_T_2 @[top.scala 47:21]
    io.tpuIO.out.valid <= outBuffer.io.data_out.valid @[top.scala 49:22]
    io.tpuIO.out.bits.out_c <= outBuffer.io.data_out.bits @[top.scala 50:27]
    outBuffer.io.data_out.ready <= io.tpuIO.out.ready @[top.scala 51:31]
    outBuffer.io.ctrl_ob_data_in <= controller.io.ctrl_ob_data_in @[top.scala 52:32]
    sa.io.in_a[0] <= inBuffer_h.io.data_out[0] @[top.scala 54:14]
    sa.io.in_a[1] <= inBuffer_h.io.data_out[1] @[top.scala 54:14]
    sa.io.in_b[0] <= inBuffer_v.io.data_out[0] @[top.scala 55:14]
    sa.io.in_b[1] <= inBuffer_v.io.data_out[1] @[top.scala 55:14]
    sa.io.in_c[0] <= io.tpuIO.in.bits.in_c[0] @[top.scala 56:14]
    sa.io.in_c[1] <= io.tpuIO.in.bits.in_c[1] @[top.scala 56:14]
    outBuffer.io.data_in[0] <= sa.io.out_c[0] @[top.scala 57:24]
    outBuffer.io.data_in[1] <= sa.io.out_c[1] @[top.scala 57:24]
    sa.io.in_control[0].ctrl_sa_send_data <= controller.io.ctrl_sa_send_data @[top.scala 58:48]
    sa.io.in_control[1].ctrl_sa_send_data <= controller.io.ctrl_sa_send_data @[top.scala 58:48]
    controller.io.ibh_data_in_done <= inBuffer_h.io.ib_data_in_done @[top.scala 60:34]
    controller.io.ibv_data_in_done <= inBuffer_v.io.ib_data_in_done @[top.scala 61:34]
    controller.io.ob_empty <= outBuffer.io.ob_empty @[top.scala 62:26]

