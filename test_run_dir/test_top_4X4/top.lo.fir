circuit top :
  module booth2Encoder :
    input clock : Clock
    input reset : UInt<1>
    input input_multiplier : UInt<8>
    output output_X2 : UInt<4>
    output output_inv : UInt<4>
    output output_set0 : UInt<4>

    node _multiplier2_T = cat(input_multiplier, UInt<1>("h0")) @[Cat.scala 33:92]
    node multiplier2 = _multiplier2_T @[booth2_encoder.scala 22:27 29:17]
    node _bits_0_T = bits(multiplier2, 2, 0) @[booth2_encoder.scala 32:31]
    node _bits_1_T = bits(multiplier2, 4, 2) @[booth2_encoder.scala 32:31]
    node _bits_2_T = bits(multiplier2, 6, 4) @[booth2_encoder.scala 32:31]
    node _bits_3_T = bits(multiplier2, 8, 6) @[booth2_encoder.scala 32:31]
    node bits_0 = _bits_0_T @[booth2_encoder.scala 23:27 32:17]
    node _X2Bools_0_T = bits(bits_0, 0, 0) @[booth2_encoder.scala 36:35]
    node _X2Bools_0_T_1 = bits(bits_0, 1, 1) @[booth2_encoder.scala 36:46]
    node _X2Bools_0_T_2 = xor(_X2Bools_0_T, _X2Bools_0_T_1) @[booth2_encoder.scala 36:38]
    node _X2Bools_0_T_3 = not(_X2Bools_0_T_2) @[booth2_encoder.scala 36:26]
    node _X2Bools_0_T_4 = bits(_X2Bools_0_T_3, 0, 0) @[booth2_encoder.scala 36:52]
    node _invBools_0_T = bits(bits_0, 2, 2) @[booth2_encoder.scala 37:32]
    node _invBools_0_T_1 = bits(_invBools_0_T, 0, 0) @[booth2_encoder.scala 37:36]
    node _set0Bools_0_T = andr(bits_0) @[booth2_encoder.scala 38:33]
    node _set0Bools_0_T_1 = not(bits_0) @[booth2_encoder.scala 38:48]
    node _set0Bools_0_T_2 = andr(_set0Bools_0_T_1) @[booth2_encoder.scala 38:58]
    node _set0Bools_0_T_3 = bits(_set0Bools_0_T_2, 0, 0) @[booth2_encoder.scala 38:63]
    node _set0Bools_0_T_4 = or(_set0Bools_0_T, _set0Bools_0_T_3) @[booth2_encoder.scala 38:45]
    node bits_1 = _bits_1_T @[booth2_encoder.scala 23:27 32:17]
    node _X2Bools_1_T = bits(bits_1, 0, 0) @[booth2_encoder.scala 36:35]
    node _X2Bools_1_T_1 = bits(bits_1, 1, 1) @[booth2_encoder.scala 36:46]
    node _X2Bools_1_T_2 = xor(_X2Bools_1_T, _X2Bools_1_T_1) @[booth2_encoder.scala 36:38]
    node _X2Bools_1_T_3 = not(_X2Bools_1_T_2) @[booth2_encoder.scala 36:26]
    node _X2Bools_1_T_4 = bits(_X2Bools_1_T_3, 0, 0) @[booth2_encoder.scala 36:52]
    node _invBools_1_T = bits(bits_1, 2, 2) @[booth2_encoder.scala 37:32]
    node _invBools_1_T_1 = bits(_invBools_1_T, 0, 0) @[booth2_encoder.scala 37:36]
    node _set0Bools_1_T = andr(bits_1) @[booth2_encoder.scala 38:33]
    node _set0Bools_1_T_1 = not(bits_1) @[booth2_encoder.scala 38:48]
    node _set0Bools_1_T_2 = andr(_set0Bools_1_T_1) @[booth2_encoder.scala 38:58]
    node _set0Bools_1_T_3 = bits(_set0Bools_1_T_2, 0, 0) @[booth2_encoder.scala 38:63]
    node _set0Bools_1_T_4 = or(_set0Bools_1_T, _set0Bools_1_T_3) @[booth2_encoder.scala 38:45]
    node bits_2 = _bits_2_T @[booth2_encoder.scala 23:27 32:17]
    node _X2Bools_2_T = bits(bits_2, 0, 0) @[booth2_encoder.scala 36:35]
    node _X2Bools_2_T_1 = bits(bits_2, 1, 1) @[booth2_encoder.scala 36:46]
    node _X2Bools_2_T_2 = xor(_X2Bools_2_T, _X2Bools_2_T_1) @[booth2_encoder.scala 36:38]
    node _X2Bools_2_T_3 = not(_X2Bools_2_T_2) @[booth2_encoder.scala 36:26]
    node _X2Bools_2_T_4 = bits(_X2Bools_2_T_3, 0, 0) @[booth2_encoder.scala 36:52]
    node _invBools_2_T = bits(bits_2, 2, 2) @[booth2_encoder.scala 37:32]
    node _invBools_2_T_1 = bits(_invBools_2_T, 0, 0) @[booth2_encoder.scala 37:36]
    node _set0Bools_2_T = andr(bits_2) @[booth2_encoder.scala 38:33]
    node _set0Bools_2_T_1 = not(bits_2) @[booth2_encoder.scala 38:48]
    node _set0Bools_2_T_2 = andr(_set0Bools_2_T_1) @[booth2_encoder.scala 38:58]
    node _set0Bools_2_T_3 = bits(_set0Bools_2_T_2, 0, 0) @[booth2_encoder.scala 38:63]
    node _set0Bools_2_T_4 = or(_set0Bools_2_T, _set0Bools_2_T_3) @[booth2_encoder.scala 38:45]
    node bits_3 = _bits_3_T @[booth2_encoder.scala 23:27 32:17]
    node _X2Bools_3_T = bits(bits_3, 0, 0) @[booth2_encoder.scala 36:35]
    node _X2Bools_3_T_1 = bits(bits_3, 1, 1) @[booth2_encoder.scala 36:46]
    node _X2Bools_3_T_2 = xor(_X2Bools_3_T, _X2Bools_3_T_1) @[booth2_encoder.scala 36:38]
    node _X2Bools_3_T_3 = not(_X2Bools_3_T_2) @[booth2_encoder.scala 36:26]
    node _X2Bools_3_T_4 = bits(_X2Bools_3_T_3, 0, 0) @[booth2_encoder.scala 36:52]
    node _invBools_3_T = bits(bits_3, 2, 2) @[booth2_encoder.scala 37:32]
    node _invBools_3_T_1 = bits(_invBools_3_T, 0, 0) @[booth2_encoder.scala 37:36]
    node _set0Bools_3_T = andr(bits_3) @[booth2_encoder.scala 38:33]
    node _set0Bools_3_T_1 = not(bits_3) @[booth2_encoder.scala 38:48]
    node _set0Bools_3_T_2 = andr(_set0Bools_3_T_1) @[booth2_encoder.scala 38:58]
    node _set0Bools_3_T_3 = bits(_set0Bools_3_T_2, 0, 0) @[booth2_encoder.scala 38:63]
    node _set0Bools_3_T_4 = or(_set0Bools_3_T, _set0Bools_3_T_3) @[booth2_encoder.scala 38:45]
    node X2Bools_1 = _X2Bools_1_T_4 @[booth2_encoder.scala 25:30 36:22]
    node X2Bools_0 = _X2Bools_0_T_4 @[booth2_encoder.scala 25:30 36:22]
    node output_X2_lo = cat(X2Bools_1, X2Bools_0) @[booth2_encoder.scala 42:28]
    node X2Bools_3 = _X2Bools_3_T_4 @[booth2_encoder.scala 25:30 36:22]
    node X2Bools_2 = _X2Bools_2_T_4 @[booth2_encoder.scala 25:30 36:22]
    node output_X2_hi = cat(X2Bools_3, X2Bools_2) @[booth2_encoder.scala 42:28]
    node _output_X2_T = cat(output_X2_hi, output_X2_lo) @[booth2_encoder.scala 42:28]
    node invBools_1 = _invBools_1_T_1 @[booth2_encoder.scala 26:30 37:22]
    node invBools_0 = _invBools_0_T_1 @[booth2_encoder.scala 26:30 37:22]
    node output_inv_lo = cat(invBools_1, invBools_0) @[booth2_encoder.scala 43:29]
    node invBools_3 = _invBools_3_T_1 @[booth2_encoder.scala 26:30 37:22]
    node invBools_2 = _invBools_2_T_1 @[booth2_encoder.scala 26:30 37:22]
    node output_inv_hi = cat(invBools_3, invBools_2) @[booth2_encoder.scala 43:29]
    node _output_inv_T = cat(output_inv_hi, output_inv_lo) @[booth2_encoder.scala 43:29]
    node set0Bools_1 = _set0Bools_1_T_4 @[booth2_encoder.scala 27:30 38:22]
    node set0Bools_0 = _set0Bools_0_T_4 @[booth2_encoder.scala 27:30 38:22]
    node output_set0_lo = cat(set0Bools_1, set0Bools_0) @[booth2_encoder.scala 44:30]
    node set0Bools_3 = _set0Bools_3_T_4 @[booth2_encoder.scala 27:30 38:22]
    node set0Bools_2 = _set0Bools_2_T_4 @[booth2_encoder.scala 27:30 38:22]
    node output_set0_hi = cat(set0Bools_3, set0Bools_2) @[booth2_encoder.scala 44:30]
    node _output_set0_T = cat(output_set0_hi, output_set0_lo) @[booth2_encoder.scala 44:30]
    output_X2 <= _output_X2_T @[booth2_encoder.scala 42:17]
    output_inv <= _output_inv_T @[booth2_encoder.scala 43:17]
    output_set0 <= _output_set0_T @[booth2_encoder.scala 44:17]

  module ppGenerator :
    input clock : Clock
    input reset : UInt<1>
    input inputData_multiplicand : UInt<8>
    input inputCtrl_X2 : UInt<4>
    input inputCtrl_inv : UInt<4>
    input inputCtrl_Set0 : UInt<4>
    output outputData_pp0_out : UInt<16>
    output outputData_pp1_out : UInt<16>
    output outputData_pp2_out : UInt<16>
    output outputData_pp3_out : UInt<16>
    output outputData_sig_out : UInt<16>

    reg pp0 : UInt<16>, clock with :
      reset => (UInt<1>("h0"), pp0) @[pp_generator.scala 39:29]
    reg pp1 : UInt<16>, clock with :
      reset => (UInt<1>("h0"), pp1) @[pp_generator.scala 40:29]
    reg pp2 : UInt<16>, clock with :
      reset => (UInt<1>("h0"), pp2) @[pp_generator.scala 41:29]
    reg pp3 : UInt<16>, clock with :
      reset => (UInt<1>("h0"), pp3) @[pp_generator.scala 42:29]
    reg sign_com : UInt<16>, clock with :
      reset => (UInt<1>("h0"), sign_com) @[pp_generator.scala 43:29]
    node _pp_X2_0_T = bits(inputCtrl_X2, 0, 0) @[pp_generator.scala 46:38]
    node _pp_X2_0_T_1 = cat(inputData_multiplicand, UInt<1>("h0")) @[Cat.scala 33:92]
    node _pp_X2_0_T_2 = bits(inputData_multiplicand, 7, 7) @[pp_generator.scala 47:51]
    node _pp_X2_0_T_3 = cat(_pp_X2_0_T_2, inputData_multiplicand) @[Cat.scala 33:92]
    node _pp_X2_0_T_4 = mux(_pp_X2_0_T, _pp_X2_0_T_1, _pp_X2_0_T_3) @[pp_generator.scala 46:25]
    node _pp_set_0_T = bits(inputCtrl_Set0, 0, 0) @[pp_generator.scala 48:40]
    node pp_X2_0 = _pp_X2_0_T_4 @[pp_generator.scala 34:26 46:19]
    node _pp_set_0_T_1 = mux(_pp_set_0_T, UInt<9>("h0"), pp_X2_0) @[pp_generator.scala 48:25]
    node _pp_inv_0_T = bits(inputCtrl_inv, 0, 0) @[pp_generator.scala 49:39]
    node pp_set_0 = _pp_set_0_T_1 @[pp_generator.scala 35:26 48:19]
    node _pp_inv_0_T_1 = not(pp_set_0) @[pp_generator.scala 49:44]
    node _pp_inv_0_T_2 = mux(_pp_inv_0_T, _pp_inv_0_T_1, pp_set_0) @[pp_generator.scala 49:25]
    node _E_inv_0_T = bits(inputCtrl_Set0, 0, 0) @[pp_generator.scala 50:40]
    node _E_inv_0_T_1 = bits(inputCtrl_inv, 0, 0) @[pp_generator.scala 50:58]
    node _E_inv_0_T_2 = bits(_E_inv_0_T_1, 0, 0) @[pp_generator.scala 50:62]
    node _E_inv_0_T_3 = bits(inputCtrl_inv, 0, 0) @[pp_generator.scala 50:84]
    node _E_inv_0_T_4 = bits(inputData_multiplicand, 7, 7) @[pp_generator.scala 50:110]
    node _E_inv_0_T_5 = xor(_E_inv_0_T_3, _E_inv_0_T_4) @[pp_generator.scala 50:87]
    node _E_inv_0_T_6 = bits(_E_inv_0_T_5, 0, 0) @[pp_generator.scala 50:124]
    node _E_inv_0_T_7 = mux(_E_inv_0_T, _E_inv_0_T_2, _E_inv_0_T_6) @[pp_generator.scala 50:25]
    node E_inv_0 = _E_inv_0_T_7 @[pp_generator.scala 32:26 50:19]
    node _E_0_T = not(E_inv_0) @[pp_generator.scala 51:22]
    node pp_inv_0 = _pp_inv_0_T_2 @[pp_generator.scala 36:26 49:19]
    node pp_temp_0_lo = cat(E_inv_0, pp_inv_0) @[Cat.scala 33:92]
    node E_0 = _E_0_T @[pp_generator.scala 31:26 51:19]
    node pp_temp_0_hi_hi = cat(UInt<4>("h0"), E_0) @[Cat.scala 33:92]
    node pp_temp_0_hi = cat(pp_temp_0_hi_hi, E_inv_0) @[Cat.scala 33:92]
    node _pp_temp_0_T = cat(pp_temp_0_hi, pp_temp_0_lo) @[Cat.scala 33:92]
    node _pp_X2_1_T = bits(inputCtrl_X2, 1, 1) @[pp_generator.scala 46:38]
    node _pp_X2_1_T_1 = cat(inputData_multiplicand, UInt<1>("h0")) @[Cat.scala 33:92]
    node _pp_X2_1_T_2 = bits(inputData_multiplicand, 7, 7) @[pp_generator.scala 47:51]
    node _pp_X2_1_T_3 = cat(_pp_X2_1_T_2, inputData_multiplicand) @[Cat.scala 33:92]
    node _pp_X2_1_T_4 = mux(_pp_X2_1_T, _pp_X2_1_T_1, _pp_X2_1_T_3) @[pp_generator.scala 46:25]
    node _pp_set_1_T = bits(inputCtrl_Set0, 1, 1) @[pp_generator.scala 48:40]
    node pp_X2_1 = _pp_X2_1_T_4 @[pp_generator.scala 34:26 46:19]
    node _pp_set_1_T_1 = mux(_pp_set_1_T, UInt<9>("h0"), pp_X2_1) @[pp_generator.scala 48:25]
    node _pp_inv_1_T = bits(inputCtrl_inv, 1, 1) @[pp_generator.scala 49:39]
    node pp_set_1 = _pp_set_1_T_1 @[pp_generator.scala 35:26 48:19]
    node _pp_inv_1_T_1 = not(pp_set_1) @[pp_generator.scala 49:44]
    node _pp_inv_1_T_2 = mux(_pp_inv_1_T, _pp_inv_1_T_1, pp_set_1) @[pp_generator.scala 49:25]
    node _E_inv_1_T = bits(inputCtrl_Set0, 1, 1) @[pp_generator.scala 50:40]
    node _E_inv_1_T_1 = bits(inputCtrl_inv, 1, 1) @[pp_generator.scala 50:58]
    node _E_inv_1_T_2 = bits(_E_inv_1_T_1, 0, 0) @[pp_generator.scala 50:62]
    node _E_inv_1_T_3 = bits(inputCtrl_inv, 1, 1) @[pp_generator.scala 50:84]
    node _E_inv_1_T_4 = bits(inputData_multiplicand, 7, 7) @[pp_generator.scala 50:110]
    node _E_inv_1_T_5 = xor(_E_inv_1_T_3, _E_inv_1_T_4) @[pp_generator.scala 50:87]
    node _E_inv_1_T_6 = bits(_E_inv_1_T_5, 0, 0) @[pp_generator.scala 50:124]
    node _E_inv_1_T_7 = mux(_E_inv_1_T, _E_inv_1_T_2, _E_inv_1_T_6) @[pp_generator.scala 50:25]
    node E_inv_1 = _E_inv_1_T_7 @[pp_generator.scala 32:26 50:19]
    node _E_1_T = not(E_inv_1) @[pp_generator.scala 51:22]
    node E_1 = _E_1_T @[pp_generator.scala 31:26 51:19]
    node pp_inv_1 = _pp_inv_1_T_2 @[pp_generator.scala 36:26 49:19]
    node pp_temp_1_lo = cat(E_1, pp_inv_1) @[Cat.scala 33:92]
    node pp_temp_1_hi = cat(UInt<5>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
    node _pp_temp_1_T = cat(pp_temp_1_hi, pp_temp_1_lo) @[Cat.scala 33:92]
    node _pp_X2_2_T = bits(inputCtrl_X2, 2, 2) @[pp_generator.scala 46:38]
    node _pp_X2_2_T_1 = cat(inputData_multiplicand, UInt<1>("h0")) @[Cat.scala 33:92]
    node _pp_X2_2_T_2 = bits(inputData_multiplicand, 7, 7) @[pp_generator.scala 47:51]
    node _pp_X2_2_T_3 = cat(_pp_X2_2_T_2, inputData_multiplicand) @[Cat.scala 33:92]
    node _pp_X2_2_T_4 = mux(_pp_X2_2_T, _pp_X2_2_T_1, _pp_X2_2_T_3) @[pp_generator.scala 46:25]
    node _pp_set_2_T = bits(inputCtrl_Set0, 2, 2) @[pp_generator.scala 48:40]
    node pp_X2_2 = _pp_X2_2_T_4 @[pp_generator.scala 34:26 46:19]
    node _pp_set_2_T_1 = mux(_pp_set_2_T, UInt<9>("h0"), pp_X2_2) @[pp_generator.scala 48:25]
    node _pp_inv_2_T = bits(inputCtrl_inv, 2, 2) @[pp_generator.scala 49:39]
    node pp_set_2 = _pp_set_2_T_1 @[pp_generator.scala 35:26 48:19]
    node _pp_inv_2_T_1 = not(pp_set_2) @[pp_generator.scala 49:44]
    node _pp_inv_2_T_2 = mux(_pp_inv_2_T, _pp_inv_2_T_1, pp_set_2) @[pp_generator.scala 49:25]
    node _E_inv_2_T = bits(inputCtrl_Set0, 2, 2) @[pp_generator.scala 50:40]
    node _E_inv_2_T_1 = bits(inputCtrl_inv, 2, 2) @[pp_generator.scala 50:58]
    node _E_inv_2_T_2 = bits(_E_inv_2_T_1, 0, 0) @[pp_generator.scala 50:62]
    node _E_inv_2_T_3 = bits(inputCtrl_inv, 2, 2) @[pp_generator.scala 50:84]
    node _E_inv_2_T_4 = bits(inputData_multiplicand, 7, 7) @[pp_generator.scala 50:110]
    node _E_inv_2_T_5 = xor(_E_inv_2_T_3, _E_inv_2_T_4) @[pp_generator.scala 50:87]
    node _E_inv_2_T_6 = bits(_E_inv_2_T_5, 0, 0) @[pp_generator.scala 50:124]
    node _E_inv_2_T_7 = mux(_E_inv_2_T, _E_inv_2_T_2, _E_inv_2_T_6) @[pp_generator.scala 50:25]
    node E_inv_2 = _E_inv_2_T_7 @[pp_generator.scala 32:26 50:19]
    node _E_2_T = not(E_inv_2) @[pp_generator.scala 51:22]
    node E_2 = _E_2_T @[pp_generator.scala 31:26 51:19]
    node pp_inv_2 = _pp_inv_2_T_2 @[pp_generator.scala 36:26 49:19]
    node pp_temp_2_lo = cat(E_2, pp_inv_2) @[Cat.scala 33:92]
    node pp_temp_2_hi = cat(UInt<5>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
    node _pp_temp_2_T = cat(pp_temp_2_hi, pp_temp_2_lo) @[Cat.scala 33:92]
    node _pp_X2_3_T = bits(inputCtrl_X2, 3, 3) @[pp_generator.scala 46:38]
    node _pp_X2_3_T_1 = cat(inputData_multiplicand, UInt<1>("h0")) @[Cat.scala 33:92]
    node _pp_X2_3_T_2 = bits(inputData_multiplicand, 7, 7) @[pp_generator.scala 47:51]
    node _pp_X2_3_T_3 = cat(_pp_X2_3_T_2, inputData_multiplicand) @[Cat.scala 33:92]
    node _pp_X2_3_T_4 = mux(_pp_X2_3_T, _pp_X2_3_T_1, _pp_X2_3_T_3) @[pp_generator.scala 46:25]
    node _pp_set_3_T = bits(inputCtrl_Set0, 3, 3) @[pp_generator.scala 48:40]
    node pp_X2_3 = _pp_X2_3_T_4 @[pp_generator.scala 34:26 46:19]
    node _pp_set_3_T_1 = mux(_pp_set_3_T, UInt<9>("h0"), pp_X2_3) @[pp_generator.scala 48:25]
    node _pp_inv_3_T = bits(inputCtrl_inv, 3, 3) @[pp_generator.scala 49:39]
    node pp_set_3 = _pp_set_3_T_1 @[pp_generator.scala 35:26 48:19]
    node _pp_inv_3_T_1 = not(pp_set_3) @[pp_generator.scala 49:44]
    node _pp_inv_3_T_2 = mux(_pp_inv_3_T, _pp_inv_3_T_1, pp_set_3) @[pp_generator.scala 49:25]
    node _E_inv_3_T = bits(inputCtrl_Set0, 3, 3) @[pp_generator.scala 50:40]
    node _E_inv_3_T_1 = bits(inputCtrl_inv, 3, 3) @[pp_generator.scala 50:58]
    node _E_inv_3_T_2 = bits(_E_inv_3_T_1, 0, 0) @[pp_generator.scala 50:62]
    node _E_inv_3_T_3 = bits(inputCtrl_inv, 3, 3) @[pp_generator.scala 50:84]
    node _E_inv_3_T_4 = bits(inputData_multiplicand, 7, 7) @[pp_generator.scala 50:110]
    node _E_inv_3_T_5 = xor(_E_inv_3_T_3, _E_inv_3_T_4) @[pp_generator.scala 50:87]
    node _E_inv_3_T_6 = bits(_E_inv_3_T_5, 0, 0) @[pp_generator.scala 50:124]
    node _E_inv_3_T_7 = mux(_E_inv_3_T, _E_inv_3_T_2, _E_inv_3_T_6) @[pp_generator.scala 50:25]
    node E_inv_3 = _E_inv_3_T_7 @[pp_generator.scala 32:26 50:19]
    node _E_3_T = not(E_inv_3) @[pp_generator.scala 51:22]
    node E_3 = _E_3_T @[pp_generator.scala 31:26 51:19]
    node pp_inv_3 = _pp_inv_3_T_2 @[pp_generator.scala 36:26 49:19]
    node pp_temp_3_lo = cat(E_3, pp_inv_3) @[Cat.scala 33:92]
    node pp_temp_3_hi = cat(UInt<5>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
    node _pp_temp_3_T = cat(pp_temp_3_hi, pp_temp_3_lo) @[Cat.scala 33:92]
    node pp_temp_1 = _pp_temp_1_T @[pp_generator.scala 37:26 57:24]
    node _pp1_T = bits(pp_temp_1, 13, 0) @[pp_generator.scala 62:31]
    node _pp1_T_1 = bits(inputCtrl_inv, 0, 0) @[pp_generator.scala 62:69]
    node pp1_hi = cat(_pp1_T, UInt<1>("h0")) @[Cat.scala 33:92]
    node _pp1_T_2 = cat(pp1_hi, _pp1_T_1) @[Cat.scala 33:92]
    node pp_temp_2 = _pp_temp_2_T @[pp_generator.scala 37:26 57:24]
    node _pp2_T = bits(pp_temp_2, 11, 0) @[pp_generator.scala 63:31]
    node _pp2_T_1 = bits(inputCtrl_inv, 1, 1) @[pp_generator.scala 63:69]
    node pp2_lo = cat(_pp2_T_1, UInt<2>("h0")) @[Cat.scala 33:92]
    node pp2_hi = cat(_pp2_T, UInt<1>("h0")) @[Cat.scala 33:92]
    node _pp2_T_2 = cat(pp2_hi, pp2_lo) @[Cat.scala 33:92]
    node pp_temp_3 = _pp_temp_3_T @[pp_generator.scala 37:26 57:24]
    node _pp3_T = bits(pp_temp_3, 9, 0) @[pp_generator.scala 64:31]
    node _pp3_T_1 = bits(inputCtrl_inv, 2, 2) @[pp_generator.scala 64:69]
    node pp3_lo = cat(_pp3_T_1, UInt<4>("h0")) @[Cat.scala 33:92]
    node pp3_hi = cat(_pp3_T, UInt<1>("h0")) @[Cat.scala 33:92]
    node _pp3_T_2 = cat(pp3_hi, pp3_lo) @[Cat.scala 33:92]
    node _sign_com_T = bits(inputCtrl_inv, 3, 3) @[pp_generator.scala 65:54]
    node sign_com_hi = cat(UInt<9>("h0"), _sign_com_T) @[Cat.scala 33:92]
    node _sign_com_T_1 = cat(sign_com_hi, UInt<6>("h0")) @[Cat.scala 33:92]
    node pp_temp_0 = _pp_temp_0_T @[pp_generator.scala 37:26 54:24]
    outputData_pp0_out <= pp0 @[pp_generator.scala 67:25]
    outputData_pp1_out <= pp1 @[pp_generator.scala 68:25]
    outputData_pp2_out <= pp2 @[pp_generator.scala 69:25]
    outputData_pp3_out <= pp3 @[pp_generator.scala 70:25]
    outputData_sig_out <= sign_com @[pp_generator.scala 71:25]
    pp0 <= mux(reset, UInt<16>("h0"), pp_temp_0) @[pp_generator.scala 39:{29,29} 61:14]
    pp1 <= mux(reset, UInt<16>("h0"), _pp1_T_2) @[pp_generator.scala 40:{29,29} 62:14]
    pp2 <= mux(reset, UInt<16>("h0"), _pp2_T_2) @[pp_generator.scala 41:{29,29} 63:14]
    pp3 <= mux(reset, UInt<16>("h0"), _pp3_T_2) @[pp_generator.scala 42:{29,29} 64:14]
    sign_com <= mux(reset, UInt<16>("h0"), _sign_com_T_1) @[pp_generator.scala 43:{29,29} 65:14]

  module CSA4_2 :
    input clock : Clock
    input reset : UInt<1>
    input input_i1 : UInt<1>
    input input_i2 : UInt<1>
    input input_i3 : UInt<1>
    input input_i4 : UInt<1>
    input input_cin : UInt<1>
    output output_S : UInt<1>
    output output_C : UInt<1>
    output output_cout : UInt<1>

    node _output_S_T = xor(input_i1, input_i2) @[pp_compressor4_2.scala 38:29]
    node _output_S_T_1 = xor(_output_S_T, input_i3) @[pp_compressor4_2.scala 38:40]
    node _output_S_T_2 = xor(_output_S_T_1, input_i4) @[pp_compressor4_2.scala 38:51]
    node _output_S_T_3 = xor(_output_S_T_2, input_cin) @[pp_compressor4_2.scala 38:62]
    node _output_C_T = xor(input_i1, input_i2) @[pp_compressor4_2.scala 39:43]
    node _output_C_T_1 = xor(_output_C_T, input_i3) @[pp_compressor4_2.scala 39:54]
    node _output_C_T_2 = xor(_output_C_T_1, input_i4) @[pp_compressor4_2.scala 39:65]
    node _output_C_T_3 = not(_output_C_T_2) @[pp_compressor4_2.scala 39:32]
    node _output_C_T_4 = and(input_i1, _output_C_T_3) @[pp_compressor4_2.scala 39:30]
    node _output_C_T_5 = xor(input_i1, input_i2) @[pp_compressor4_2.scala 40:43]
    node _output_C_T_6 = xor(_output_C_T_5, input_i3) @[pp_compressor4_2.scala 40:54]
    node _output_C_T_7 = xor(_output_C_T_6, input_i4) @[pp_compressor4_2.scala 40:65]
    node _output_C_T_8 = and(input_cin, _output_C_T_7) @[pp_compressor4_2.scala 40:31]
    node _output_C_T_9 = or(_output_C_T_4, _output_C_T_8) @[pp_compressor4_2.scala 39:78]
    node _output_cout_T = and(input_i4, input_i3) @[pp_compressor4_2.scala 41:30]
    node _output_cout_T_1 = and(input_i3, input_i2) @[pp_compressor4_2.scala 41:54]
    node _output_cout_T_2 = or(_output_cout_T, _output_cout_T_1) @[pp_compressor4_2.scala 41:42]
    node _output_cout_T_3 = and(input_i4, input_i2) @[pp_compressor4_2.scala 41:78]
    node _output_cout_T_4 = or(_output_cout_T_2, _output_cout_T_3) @[pp_compressor4_2.scala 41:66]
    output_S <= _output_S_T_3 @[pp_compressor4_2.scala 38:17]
    output_C <= _output_C_T_9 @[pp_compressor4_2.scala 39:17]
    output_cout <= _output_cout_T_4 @[pp_compressor4_2.scala 41:17]

  module pp_compressor4_2 :
    input clock : Clock
    input reset : UInt<1>
    input input_pp0_in : UInt<16>
    input input_pp1_in : UInt<16>
    input input_pp2_in : UInt<16>
    input input_pp3_in : UInt<16>
    output output_C : UInt<16>
    output output_S : UInt<16>

    inst csa4_2 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_1 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_2 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_3 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_4 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_5 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_6 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_7 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_8 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_9 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_10 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_11 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_12 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_13 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_14 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    inst csa4_2_15 of CSA4_2 @[pp_compressor4_2.scala 56:28]
    node _csa4_2_input_i1_T = bits(input_pp0_in, 0, 0) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T = bits(input_pp1_in, 0, 0) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T = bits(input_pp2_in, 0, 0) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T = bits(input_pp3_in, 0, 0) @[pp_compressor4_2.scala 60:41]
    node _s_comb_0_T = bits(csa4_2.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_0_T = bits(csa4_2.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_1_T = bits(csa4_2.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_1 = bits(input_pp0_in, 1, 1) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_1 = bits(input_pp1_in, 1, 1) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_1 = bits(input_pp2_in, 1, 1) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_1 = bits(input_pp3_in, 1, 1) @[pp_compressor4_2.scala 60:41]
    node _s_comb_1_T = bits(csa4_2_1.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_1_T = bits(csa4_2_1.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_2_T = bits(csa4_2_1.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_2 = bits(input_pp0_in, 2, 2) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_2 = bits(input_pp1_in, 2, 2) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_2 = bits(input_pp2_in, 2, 2) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_2 = bits(input_pp3_in, 2, 2) @[pp_compressor4_2.scala 60:41]
    node _s_comb_2_T = bits(csa4_2_2.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_2_T = bits(csa4_2_2.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_3_T = bits(csa4_2_2.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_3 = bits(input_pp0_in, 3, 3) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_3 = bits(input_pp1_in, 3, 3) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_3 = bits(input_pp2_in, 3, 3) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_3 = bits(input_pp3_in, 3, 3) @[pp_compressor4_2.scala 60:41]
    node _s_comb_3_T = bits(csa4_2_3.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_3_T = bits(csa4_2_3.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_4_T = bits(csa4_2_3.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_4 = bits(input_pp0_in, 4, 4) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_4 = bits(input_pp1_in, 4, 4) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_4 = bits(input_pp2_in, 4, 4) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_4 = bits(input_pp3_in, 4, 4) @[pp_compressor4_2.scala 60:41]
    node _s_comb_4_T = bits(csa4_2_4.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_4_T = bits(csa4_2_4.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_5_T = bits(csa4_2_4.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_5 = bits(input_pp0_in, 5, 5) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_5 = bits(input_pp1_in, 5, 5) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_5 = bits(input_pp2_in, 5, 5) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_5 = bits(input_pp3_in, 5, 5) @[pp_compressor4_2.scala 60:41]
    node _s_comb_5_T = bits(csa4_2_5.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_5_T = bits(csa4_2_5.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_6_T = bits(csa4_2_5.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_6 = bits(input_pp0_in, 6, 6) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_6 = bits(input_pp1_in, 6, 6) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_6 = bits(input_pp2_in, 6, 6) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_6 = bits(input_pp3_in, 6, 6) @[pp_compressor4_2.scala 60:41]
    node _s_comb_6_T = bits(csa4_2_6.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_6_T = bits(csa4_2_6.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_7_T = bits(csa4_2_6.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_7 = bits(input_pp0_in, 7, 7) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_7 = bits(input_pp1_in, 7, 7) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_7 = bits(input_pp2_in, 7, 7) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_7 = bits(input_pp3_in, 7, 7) @[pp_compressor4_2.scala 60:41]
    node _s_comb_7_T = bits(csa4_2_7.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_7_T = bits(csa4_2_7.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_8_T = bits(csa4_2_7.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_8 = bits(input_pp0_in, 8, 8) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_8 = bits(input_pp1_in, 8, 8) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_8 = bits(input_pp2_in, 8, 8) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_8 = bits(input_pp3_in, 8, 8) @[pp_compressor4_2.scala 60:41]
    node _s_comb_8_T = bits(csa4_2_8.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_8_T = bits(csa4_2_8.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_9_T = bits(csa4_2_8.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_9 = bits(input_pp0_in, 9, 9) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_9 = bits(input_pp1_in, 9, 9) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_9 = bits(input_pp2_in, 9, 9) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_9 = bits(input_pp3_in, 9, 9) @[pp_compressor4_2.scala 60:41]
    node _s_comb_9_T = bits(csa4_2_9.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_9_T = bits(csa4_2_9.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_10_T = bits(csa4_2_9.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_10 = bits(input_pp0_in, 10, 10) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_10 = bits(input_pp1_in, 10, 10) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_10 = bits(input_pp2_in, 10, 10) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_10 = bits(input_pp3_in, 10, 10) @[pp_compressor4_2.scala 60:41]
    node _s_comb_10_T = bits(csa4_2_10.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_10_T = bits(csa4_2_10.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_11_T = bits(csa4_2_10.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_11 = bits(input_pp0_in, 11, 11) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_11 = bits(input_pp1_in, 11, 11) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_11 = bits(input_pp2_in, 11, 11) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_11 = bits(input_pp3_in, 11, 11) @[pp_compressor4_2.scala 60:41]
    node _s_comb_11_T = bits(csa4_2_11.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_11_T = bits(csa4_2_11.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_12_T = bits(csa4_2_11.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_12 = bits(input_pp0_in, 12, 12) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_12 = bits(input_pp1_in, 12, 12) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_12 = bits(input_pp2_in, 12, 12) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_12 = bits(input_pp3_in, 12, 12) @[pp_compressor4_2.scala 60:41]
    node _s_comb_12_T = bits(csa4_2_12.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_12_T = bits(csa4_2_12.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_13_T = bits(csa4_2_12.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_13 = bits(input_pp0_in, 13, 13) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_13 = bits(input_pp1_in, 13, 13) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_13 = bits(input_pp2_in, 13, 13) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_13 = bits(input_pp3_in, 13, 13) @[pp_compressor4_2.scala 60:41]
    node _s_comb_13_T = bits(csa4_2_13.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_13_T = bits(csa4_2_13.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_14_T = bits(csa4_2_13.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_14 = bits(input_pp0_in, 14, 14) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_14 = bits(input_pp1_in, 14, 14) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_14 = bits(input_pp2_in, 14, 14) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_14 = bits(input_pp3_in, 14, 14) @[pp_compressor4_2.scala 60:41]
    node _s_comb_14_T = bits(csa4_2_14.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_14_T = bits(csa4_2_14.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_15_T = bits(csa4_2_14.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node _csa4_2_input_i1_T_15 = bits(input_pp0_in, 15, 15) @[pp_compressor4_2.scala 57:41]
    node _csa4_2_input_i2_T_15 = bits(input_pp1_in, 15, 15) @[pp_compressor4_2.scala 58:41]
    node _csa4_2_input_i3_T_15 = bits(input_pp2_in, 15, 15) @[pp_compressor4_2.scala 59:41]
    node _csa4_2_input_i4_T_15 = bits(input_pp3_in, 15, 15) @[pp_compressor4_2.scala 60:41]
    node _s_comb_15_T = bits(csa4_2_15.output_S, 0, 0) @[pp_compressor4_2.scala 63:45]
    node _c_comb_15_T = bits(csa4_2_15.output_C, 0, 0) @[pp_compressor4_2.scala 64:45]
    node _c_temp_16_T = bits(csa4_2_15.output_cout, 0, 0) @[pp_compressor4_2.scala 65:48]
    node s_comb_1 = _s_comb_1_T @[pp_compressor4_2.scala 51:26 63:26]
    node s_comb_0 = _s_comb_0_T @[pp_compressor4_2.scala 51:26 63:26]
    node output_S_lo_lo_lo = cat(s_comb_1, s_comb_0) @[pp_compressor4_2.scala 68:26]
    node s_comb_3 = _s_comb_3_T @[pp_compressor4_2.scala 51:26 63:26]
    node s_comb_2 = _s_comb_2_T @[pp_compressor4_2.scala 51:26 63:26]
    node output_S_lo_lo_hi = cat(s_comb_3, s_comb_2) @[pp_compressor4_2.scala 68:26]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[pp_compressor4_2.scala 68:26]
    node s_comb_5 = _s_comb_5_T @[pp_compressor4_2.scala 51:26 63:26]
    node s_comb_4 = _s_comb_4_T @[pp_compressor4_2.scala 51:26 63:26]
    node output_S_lo_hi_lo = cat(s_comb_5, s_comb_4) @[pp_compressor4_2.scala 68:26]
    node s_comb_7 = _s_comb_7_T @[pp_compressor4_2.scala 51:26 63:26]
    node s_comb_6 = _s_comb_6_T @[pp_compressor4_2.scala 51:26 63:26]
    node output_S_lo_hi_hi = cat(s_comb_7, s_comb_6) @[pp_compressor4_2.scala 68:26]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[pp_compressor4_2.scala 68:26]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[pp_compressor4_2.scala 68:26]
    node s_comb_9 = _s_comb_9_T @[pp_compressor4_2.scala 51:26 63:26]
    node s_comb_8 = _s_comb_8_T @[pp_compressor4_2.scala 51:26 63:26]
    node output_S_hi_lo_lo = cat(s_comb_9, s_comb_8) @[pp_compressor4_2.scala 68:26]
    node s_comb_11 = _s_comb_11_T @[pp_compressor4_2.scala 51:26 63:26]
    node s_comb_10 = _s_comb_10_T @[pp_compressor4_2.scala 51:26 63:26]
    node output_S_hi_lo_hi = cat(s_comb_11, s_comb_10) @[pp_compressor4_2.scala 68:26]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[pp_compressor4_2.scala 68:26]
    node s_comb_13 = _s_comb_13_T @[pp_compressor4_2.scala 51:26 63:26]
    node s_comb_12 = _s_comb_12_T @[pp_compressor4_2.scala 51:26 63:26]
    node output_S_hi_hi_lo = cat(s_comb_13, s_comb_12) @[pp_compressor4_2.scala 68:26]
    node s_comb_15 = _s_comb_15_T @[pp_compressor4_2.scala 51:26 63:26]
    node s_comb_14 = _s_comb_14_T @[pp_compressor4_2.scala 51:26 63:26]
    node output_S_hi_hi_hi = cat(s_comb_15, s_comb_14) @[pp_compressor4_2.scala 68:26]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[pp_compressor4_2.scala 68:26]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[pp_compressor4_2.scala 68:26]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[pp_compressor4_2.scala 68:26]
    node c_comb_1 = _c_comb_1_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_0 = _c_comb_0_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_int_lo_lo_lo = cat(c_comb_1, c_comb_0) @[pp_compressor4_2.scala 69:26]
    node c_comb_3 = _c_comb_3_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_2 = _c_comb_2_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_int_lo_lo_hi = cat(c_comb_3, c_comb_2) @[pp_compressor4_2.scala 69:26]
    node c_comb_int_lo_lo = cat(c_comb_int_lo_lo_hi, c_comb_int_lo_lo_lo) @[pp_compressor4_2.scala 69:26]
    node c_comb_5 = _c_comb_5_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_4 = _c_comb_4_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_int_lo_hi_lo = cat(c_comb_5, c_comb_4) @[pp_compressor4_2.scala 69:26]
    node c_comb_7 = _c_comb_7_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_6 = _c_comb_6_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_int_lo_hi_hi = cat(c_comb_7, c_comb_6) @[pp_compressor4_2.scala 69:26]
    node c_comb_int_lo_hi = cat(c_comb_int_lo_hi_hi, c_comb_int_lo_hi_lo) @[pp_compressor4_2.scala 69:26]
    node c_comb_int_lo = cat(c_comb_int_lo_hi, c_comb_int_lo_lo) @[pp_compressor4_2.scala 69:26]
    node c_comb_9 = _c_comb_9_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_8 = _c_comb_8_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_int_hi_lo_lo = cat(c_comb_9, c_comb_8) @[pp_compressor4_2.scala 69:26]
    node c_comb_11 = _c_comb_11_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_10 = _c_comb_10_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_int_hi_lo_hi = cat(c_comb_11, c_comb_10) @[pp_compressor4_2.scala 69:26]
    node c_comb_int_hi_lo = cat(c_comb_int_hi_lo_hi, c_comb_int_hi_lo_lo) @[pp_compressor4_2.scala 69:26]
    node c_comb_13 = _c_comb_13_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_12 = _c_comb_12_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_int_hi_hi_lo = cat(c_comb_13, c_comb_12) @[pp_compressor4_2.scala 69:26]
    node c_comb_15 = _c_comb_15_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_14 = _c_comb_14_T @[pp_compressor4_2.scala 52:26 64:26]
    node c_comb_int_hi_hi_hi = cat(c_comb_15, c_comb_14) @[pp_compressor4_2.scala 69:26]
    node c_comb_int_hi_hi = cat(c_comb_int_hi_hi_hi, c_comb_int_hi_hi_lo) @[pp_compressor4_2.scala 69:26]
    node c_comb_int_hi = cat(c_comb_int_hi_hi, c_comb_int_hi_lo) @[pp_compressor4_2.scala 69:26]
    node _c_comb_int_T = cat(c_comb_int_hi, c_comb_int_lo) @[pp_compressor4_2.scala 69:26]
    node c_comb_int = _c_comb_int_T @[pp_compressor4_2.scala 53:26 69:16]
    node _output_C_T = bits(c_comb_int, 14, 0) @[pp_compressor4_2.scala 70:33]
    node _output_C_T_1 = cat(_output_C_T, UInt<1>("h0")) @[Cat.scala 33:92]
    node c_temp_0 = UInt<1>("h0") @[pp_compressor4_2.scala 48:22 49:15]
    node c_temp_1 = _c_temp_1_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_2 = _c_temp_2_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_3 = _c_temp_3_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_4 = _c_temp_4_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_5 = _c_temp_5_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_6 = _c_temp_6_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_7 = _c_temp_7_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_8 = _c_temp_8_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_9 = _c_temp_9_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_10 = _c_temp_10_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_11 = _c_temp_11_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_12 = _c_temp_12_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_13 = _c_temp_13_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_14 = _c_temp_14_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_15 = _c_temp_15_T @[pp_compressor4_2.scala 48:22 65:26]
    node c_temp_16 = _c_temp_16_T @[pp_compressor4_2.scala 48:22 65:26]
    output_C <= _output_C_T_1 @[pp_compressor4_2.scala 70:16]
    output_S <= _output_S_T @[pp_compressor4_2.scala 68:16]
    csa4_2.clock <= clock
    csa4_2.reset <= reset
    csa4_2.input_i1 <= _csa4_2_input_i1_T @[pp_compressor4_2.scala 57:26]
    csa4_2.input_i2 <= _csa4_2_input_i2_T @[pp_compressor4_2.scala 58:26]
    csa4_2.input_i3 <= _csa4_2_input_i3_T @[pp_compressor4_2.scala 59:26]
    csa4_2.input_i4 <= _csa4_2_input_i4_T @[pp_compressor4_2.scala 60:26]
    csa4_2.input_cin <= c_temp_0 @[pp_compressor4_2.scala 61:26]
    csa4_2_1.clock <= clock
    csa4_2_1.reset <= reset
    csa4_2_1.input_i1 <= _csa4_2_input_i1_T_1 @[pp_compressor4_2.scala 57:26]
    csa4_2_1.input_i2 <= _csa4_2_input_i2_T_1 @[pp_compressor4_2.scala 58:26]
    csa4_2_1.input_i3 <= _csa4_2_input_i3_T_1 @[pp_compressor4_2.scala 59:26]
    csa4_2_1.input_i4 <= _csa4_2_input_i4_T_1 @[pp_compressor4_2.scala 60:26]
    csa4_2_1.input_cin <= c_temp_1 @[pp_compressor4_2.scala 61:26]
    csa4_2_2.clock <= clock
    csa4_2_2.reset <= reset
    csa4_2_2.input_i1 <= _csa4_2_input_i1_T_2 @[pp_compressor4_2.scala 57:26]
    csa4_2_2.input_i2 <= _csa4_2_input_i2_T_2 @[pp_compressor4_2.scala 58:26]
    csa4_2_2.input_i3 <= _csa4_2_input_i3_T_2 @[pp_compressor4_2.scala 59:26]
    csa4_2_2.input_i4 <= _csa4_2_input_i4_T_2 @[pp_compressor4_2.scala 60:26]
    csa4_2_2.input_cin <= c_temp_2 @[pp_compressor4_2.scala 61:26]
    csa4_2_3.clock <= clock
    csa4_2_3.reset <= reset
    csa4_2_3.input_i1 <= _csa4_2_input_i1_T_3 @[pp_compressor4_2.scala 57:26]
    csa4_2_3.input_i2 <= _csa4_2_input_i2_T_3 @[pp_compressor4_2.scala 58:26]
    csa4_2_3.input_i3 <= _csa4_2_input_i3_T_3 @[pp_compressor4_2.scala 59:26]
    csa4_2_3.input_i4 <= _csa4_2_input_i4_T_3 @[pp_compressor4_2.scala 60:26]
    csa4_2_3.input_cin <= c_temp_3 @[pp_compressor4_2.scala 61:26]
    csa4_2_4.clock <= clock
    csa4_2_4.reset <= reset
    csa4_2_4.input_i1 <= _csa4_2_input_i1_T_4 @[pp_compressor4_2.scala 57:26]
    csa4_2_4.input_i2 <= _csa4_2_input_i2_T_4 @[pp_compressor4_2.scala 58:26]
    csa4_2_4.input_i3 <= _csa4_2_input_i3_T_4 @[pp_compressor4_2.scala 59:26]
    csa4_2_4.input_i4 <= _csa4_2_input_i4_T_4 @[pp_compressor4_2.scala 60:26]
    csa4_2_4.input_cin <= c_temp_4 @[pp_compressor4_2.scala 61:26]
    csa4_2_5.clock <= clock
    csa4_2_5.reset <= reset
    csa4_2_5.input_i1 <= _csa4_2_input_i1_T_5 @[pp_compressor4_2.scala 57:26]
    csa4_2_5.input_i2 <= _csa4_2_input_i2_T_5 @[pp_compressor4_2.scala 58:26]
    csa4_2_5.input_i3 <= _csa4_2_input_i3_T_5 @[pp_compressor4_2.scala 59:26]
    csa4_2_5.input_i4 <= _csa4_2_input_i4_T_5 @[pp_compressor4_2.scala 60:26]
    csa4_2_5.input_cin <= c_temp_5 @[pp_compressor4_2.scala 61:26]
    csa4_2_6.clock <= clock
    csa4_2_6.reset <= reset
    csa4_2_6.input_i1 <= _csa4_2_input_i1_T_6 @[pp_compressor4_2.scala 57:26]
    csa4_2_6.input_i2 <= _csa4_2_input_i2_T_6 @[pp_compressor4_2.scala 58:26]
    csa4_2_6.input_i3 <= _csa4_2_input_i3_T_6 @[pp_compressor4_2.scala 59:26]
    csa4_2_6.input_i4 <= _csa4_2_input_i4_T_6 @[pp_compressor4_2.scala 60:26]
    csa4_2_6.input_cin <= c_temp_6 @[pp_compressor4_2.scala 61:26]
    csa4_2_7.clock <= clock
    csa4_2_7.reset <= reset
    csa4_2_7.input_i1 <= _csa4_2_input_i1_T_7 @[pp_compressor4_2.scala 57:26]
    csa4_2_7.input_i2 <= _csa4_2_input_i2_T_7 @[pp_compressor4_2.scala 58:26]
    csa4_2_7.input_i3 <= _csa4_2_input_i3_T_7 @[pp_compressor4_2.scala 59:26]
    csa4_2_7.input_i4 <= _csa4_2_input_i4_T_7 @[pp_compressor4_2.scala 60:26]
    csa4_2_7.input_cin <= c_temp_7 @[pp_compressor4_2.scala 61:26]
    csa4_2_8.clock <= clock
    csa4_2_8.reset <= reset
    csa4_2_8.input_i1 <= _csa4_2_input_i1_T_8 @[pp_compressor4_2.scala 57:26]
    csa4_2_8.input_i2 <= _csa4_2_input_i2_T_8 @[pp_compressor4_2.scala 58:26]
    csa4_2_8.input_i3 <= _csa4_2_input_i3_T_8 @[pp_compressor4_2.scala 59:26]
    csa4_2_8.input_i4 <= _csa4_2_input_i4_T_8 @[pp_compressor4_2.scala 60:26]
    csa4_2_8.input_cin <= c_temp_8 @[pp_compressor4_2.scala 61:26]
    csa4_2_9.clock <= clock
    csa4_2_9.reset <= reset
    csa4_2_9.input_i1 <= _csa4_2_input_i1_T_9 @[pp_compressor4_2.scala 57:26]
    csa4_2_9.input_i2 <= _csa4_2_input_i2_T_9 @[pp_compressor4_2.scala 58:26]
    csa4_2_9.input_i3 <= _csa4_2_input_i3_T_9 @[pp_compressor4_2.scala 59:26]
    csa4_2_9.input_i4 <= _csa4_2_input_i4_T_9 @[pp_compressor4_2.scala 60:26]
    csa4_2_9.input_cin <= c_temp_9 @[pp_compressor4_2.scala 61:26]
    csa4_2_10.clock <= clock
    csa4_2_10.reset <= reset
    csa4_2_10.input_i1 <= _csa4_2_input_i1_T_10 @[pp_compressor4_2.scala 57:26]
    csa4_2_10.input_i2 <= _csa4_2_input_i2_T_10 @[pp_compressor4_2.scala 58:26]
    csa4_2_10.input_i3 <= _csa4_2_input_i3_T_10 @[pp_compressor4_2.scala 59:26]
    csa4_2_10.input_i4 <= _csa4_2_input_i4_T_10 @[pp_compressor4_2.scala 60:26]
    csa4_2_10.input_cin <= c_temp_10 @[pp_compressor4_2.scala 61:26]
    csa4_2_11.clock <= clock
    csa4_2_11.reset <= reset
    csa4_2_11.input_i1 <= _csa4_2_input_i1_T_11 @[pp_compressor4_2.scala 57:26]
    csa4_2_11.input_i2 <= _csa4_2_input_i2_T_11 @[pp_compressor4_2.scala 58:26]
    csa4_2_11.input_i3 <= _csa4_2_input_i3_T_11 @[pp_compressor4_2.scala 59:26]
    csa4_2_11.input_i4 <= _csa4_2_input_i4_T_11 @[pp_compressor4_2.scala 60:26]
    csa4_2_11.input_cin <= c_temp_11 @[pp_compressor4_2.scala 61:26]
    csa4_2_12.clock <= clock
    csa4_2_12.reset <= reset
    csa4_2_12.input_i1 <= _csa4_2_input_i1_T_12 @[pp_compressor4_2.scala 57:26]
    csa4_2_12.input_i2 <= _csa4_2_input_i2_T_12 @[pp_compressor4_2.scala 58:26]
    csa4_2_12.input_i3 <= _csa4_2_input_i3_T_12 @[pp_compressor4_2.scala 59:26]
    csa4_2_12.input_i4 <= _csa4_2_input_i4_T_12 @[pp_compressor4_2.scala 60:26]
    csa4_2_12.input_cin <= c_temp_12 @[pp_compressor4_2.scala 61:26]
    csa4_2_13.clock <= clock
    csa4_2_13.reset <= reset
    csa4_2_13.input_i1 <= _csa4_2_input_i1_T_13 @[pp_compressor4_2.scala 57:26]
    csa4_2_13.input_i2 <= _csa4_2_input_i2_T_13 @[pp_compressor4_2.scala 58:26]
    csa4_2_13.input_i3 <= _csa4_2_input_i3_T_13 @[pp_compressor4_2.scala 59:26]
    csa4_2_13.input_i4 <= _csa4_2_input_i4_T_13 @[pp_compressor4_2.scala 60:26]
    csa4_2_13.input_cin <= c_temp_13 @[pp_compressor4_2.scala 61:26]
    csa4_2_14.clock <= clock
    csa4_2_14.reset <= reset
    csa4_2_14.input_i1 <= _csa4_2_input_i1_T_14 @[pp_compressor4_2.scala 57:26]
    csa4_2_14.input_i2 <= _csa4_2_input_i2_T_14 @[pp_compressor4_2.scala 58:26]
    csa4_2_14.input_i3 <= _csa4_2_input_i3_T_14 @[pp_compressor4_2.scala 59:26]
    csa4_2_14.input_i4 <= _csa4_2_input_i4_T_14 @[pp_compressor4_2.scala 60:26]
    csa4_2_14.input_cin <= c_temp_14 @[pp_compressor4_2.scala 61:26]
    csa4_2_15.clock <= clock
    csa4_2_15.reset <= reset
    csa4_2_15.input_i1 <= _csa4_2_input_i1_T_15 @[pp_compressor4_2.scala 57:26]
    csa4_2_15.input_i2 <= _csa4_2_input_i2_T_15 @[pp_compressor4_2.scala 58:26]
    csa4_2_15.input_i3 <= _csa4_2_input_i3_T_15 @[pp_compressor4_2.scala 59:26]
    csa4_2_15.input_i4 <= _csa4_2_input_i4_T_15 @[pp_compressor4_2.scala 60:26]
    csa4_2_15.input_cin <= c_temp_15 @[pp_compressor4_2.scala 61:26]

  module pp_compressor3_2 :
    input clock : Clock
    input reset : UInt<1>
    input input_pp0_in : UInt<16>
    input input_pp1_in : UInt<16>
    input input_pp2_in : UInt<16>
    output output_S : UInt<16>
    output output_C : UInt<16>

    node _g_comb_0_T = bits(input_pp0_in, 0, 0) @[pp_compressor3_2.scala 28:35]
    node _g_comb_0_T_1 = bits(input_pp1_in, 0, 0) @[pp_compressor3_2.scala 28:53]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_0_T = bits(input_pp0_in, 0, 0) @[pp_compressor3_2.scala 29:35]
    node _p_comb_0_T_1 = bits(input_pp1_in, 0, 0) @[pp_compressor3_2.scala 29:53]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_0_T = bits(input_pp2_in, 0, 0) @[pp_compressor3_2.scala 30:46]
    node _s_comb_0_T_1 = bits(_s_comb_0_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_0 = _p_comb_0_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_0_T_2 = xor(p_comb_0, _s_comb_0_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_0_T = bits(input_pp2_in, 0, 0) @[pp_compressor3_2.scala 31:34]
    node _c_comb_0_T_1 = bits(_c_comb_0_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_0_T_2 = and(_c_comb_0_T_1, p_comb_0) @[pp_compressor3_2.scala 31:45]
    node g_comb_0 = _g_comb_0_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_0_T_3 = or(_c_comb_0_T_2, g_comb_0) @[pp_compressor3_2.scala 31:57]
    node _g_comb_1_T = bits(input_pp0_in, 1, 1) @[pp_compressor3_2.scala 28:35]
    node _g_comb_1_T_1 = bits(input_pp1_in, 1, 1) @[pp_compressor3_2.scala 28:53]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_1_T = bits(input_pp0_in, 1, 1) @[pp_compressor3_2.scala 29:35]
    node _p_comb_1_T_1 = bits(input_pp1_in, 1, 1) @[pp_compressor3_2.scala 29:53]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_1_T = bits(input_pp2_in, 1, 1) @[pp_compressor3_2.scala 30:46]
    node _s_comb_1_T_1 = bits(_s_comb_1_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_1 = _p_comb_1_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_1_T_2 = xor(p_comb_1, _s_comb_1_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_1_T = bits(input_pp2_in, 1, 1) @[pp_compressor3_2.scala 31:34]
    node _c_comb_1_T_1 = bits(_c_comb_1_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_1_T_2 = and(_c_comb_1_T_1, p_comb_1) @[pp_compressor3_2.scala 31:45]
    node g_comb_1 = _g_comb_1_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_1_T_3 = or(_c_comb_1_T_2, g_comb_1) @[pp_compressor3_2.scala 31:57]
    node _g_comb_2_T = bits(input_pp0_in, 2, 2) @[pp_compressor3_2.scala 28:35]
    node _g_comb_2_T_1 = bits(input_pp1_in, 2, 2) @[pp_compressor3_2.scala 28:53]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_2_T = bits(input_pp0_in, 2, 2) @[pp_compressor3_2.scala 29:35]
    node _p_comb_2_T_1 = bits(input_pp1_in, 2, 2) @[pp_compressor3_2.scala 29:53]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_2_T = bits(input_pp2_in, 2, 2) @[pp_compressor3_2.scala 30:46]
    node _s_comb_2_T_1 = bits(_s_comb_2_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_2 = _p_comb_2_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_2_T_2 = xor(p_comb_2, _s_comb_2_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_2_T = bits(input_pp2_in, 2, 2) @[pp_compressor3_2.scala 31:34]
    node _c_comb_2_T_1 = bits(_c_comb_2_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_2_T_2 = and(_c_comb_2_T_1, p_comb_2) @[pp_compressor3_2.scala 31:45]
    node g_comb_2 = _g_comb_2_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_2_T_3 = or(_c_comb_2_T_2, g_comb_2) @[pp_compressor3_2.scala 31:57]
    node _g_comb_3_T = bits(input_pp0_in, 3, 3) @[pp_compressor3_2.scala 28:35]
    node _g_comb_3_T_1 = bits(input_pp1_in, 3, 3) @[pp_compressor3_2.scala 28:53]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_3_T = bits(input_pp0_in, 3, 3) @[pp_compressor3_2.scala 29:35]
    node _p_comb_3_T_1 = bits(input_pp1_in, 3, 3) @[pp_compressor3_2.scala 29:53]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_3_T = bits(input_pp2_in, 3, 3) @[pp_compressor3_2.scala 30:46]
    node _s_comb_3_T_1 = bits(_s_comb_3_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_3 = _p_comb_3_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_3_T_2 = xor(p_comb_3, _s_comb_3_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_3_T = bits(input_pp2_in, 3, 3) @[pp_compressor3_2.scala 31:34]
    node _c_comb_3_T_1 = bits(_c_comb_3_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_3_T_2 = and(_c_comb_3_T_1, p_comb_3) @[pp_compressor3_2.scala 31:45]
    node g_comb_3 = _g_comb_3_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_3_T_3 = or(_c_comb_3_T_2, g_comb_3) @[pp_compressor3_2.scala 31:57]
    node _g_comb_4_T = bits(input_pp0_in, 4, 4) @[pp_compressor3_2.scala 28:35]
    node _g_comb_4_T_1 = bits(input_pp1_in, 4, 4) @[pp_compressor3_2.scala 28:53]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_4_T = bits(input_pp0_in, 4, 4) @[pp_compressor3_2.scala 29:35]
    node _p_comb_4_T_1 = bits(input_pp1_in, 4, 4) @[pp_compressor3_2.scala 29:53]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_4_T = bits(input_pp2_in, 4, 4) @[pp_compressor3_2.scala 30:46]
    node _s_comb_4_T_1 = bits(_s_comb_4_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_4 = _p_comb_4_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_4_T_2 = xor(p_comb_4, _s_comb_4_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_4_T = bits(input_pp2_in, 4, 4) @[pp_compressor3_2.scala 31:34]
    node _c_comb_4_T_1 = bits(_c_comb_4_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_4_T_2 = and(_c_comb_4_T_1, p_comb_4) @[pp_compressor3_2.scala 31:45]
    node g_comb_4 = _g_comb_4_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_4_T_3 = or(_c_comb_4_T_2, g_comb_4) @[pp_compressor3_2.scala 31:57]
    node _g_comb_5_T = bits(input_pp0_in, 5, 5) @[pp_compressor3_2.scala 28:35]
    node _g_comb_5_T_1 = bits(input_pp1_in, 5, 5) @[pp_compressor3_2.scala 28:53]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_5_T = bits(input_pp0_in, 5, 5) @[pp_compressor3_2.scala 29:35]
    node _p_comb_5_T_1 = bits(input_pp1_in, 5, 5) @[pp_compressor3_2.scala 29:53]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_5_T = bits(input_pp2_in, 5, 5) @[pp_compressor3_2.scala 30:46]
    node _s_comb_5_T_1 = bits(_s_comb_5_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_5 = _p_comb_5_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_5_T_2 = xor(p_comb_5, _s_comb_5_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_5_T = bits(input_pp2_in, 5, 5) @[pp_compressor3_2.scala 31:34]
    node _c_comb_5_T_1 = bits(_c_comb_5_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_5_T_2 = and(_c_comb_5_T_1, p_comb_5) @[pp_compressor3_2.scala 31:45]
    node g_comb_5 = _g_comb_5_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_5_T_3 = or(_c_comb_5_T_2, g_comb_5) @[pp_compressor3_2.scala 31:57]
    node _g_comb_6_T = bits(input_pp0_in, 6, 6) @[pp_compressor3_2.scala 28:35]
    node _g_comb_6_T_1 = bits(input_pp1_in, 6, 6) @[pp_compressor3_2.scala 28:53]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_6_T = bits(input_pp0_in, 6, 6) @[pp_compressor3_2.scala 29:35]
    node _p_comb_6_T_1 = bits(input_pp1_in, 6, 6) @[pp_compressor3_2.scala 29:53]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_6_T = bits(input_pp2_in, 6, 6) @[pp_compressor3_2.scala 30:46]
    node _s_comb_6_T_1 = bits(_s_comb_6_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_6 = _p_comb_6_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_6_T_2 = xor(p_comb_6, _s_comb_6_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_6_T = bits(input_pp2_in, 6, 6) @[pp_compressor3_2.scala 31:34]
    node _c_comb_6_T_1 = bits(_c_comb_6_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_6_T_2 = and(_c_comb_6_T_1, p_comb_6) @[pp_compressor3_2.scala 31:45]
    node g_comb_6 = _g_comb_6_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_6_T_3 = or(_c_comb_6_T_2, g_comb_6) @[pp_compressor3_2.scala 31:57]
    node _g_comb_7_T = bits(input_pp0_in, 7, 7) @[pp_compressor3_2.scala 28:35]
    node _g_comb_7_T_1 = bits(input_pp1_in, 7, 7) @[pp_compressor3_2.scala 28:53]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_7_T = bits(input_pp0_in, 7, 7) @[pp_compressor3_2.scala 29:35]
    node _p_comb_7_T_1 = bits(input_pp1_in, 7, 7) @[pp_compressor3_2.scala 29:53]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_7_T = bits(input_pp2_in, 7, 7) @[pp_compressor3_2.scala 30:46]
    node _s_comb_7_T_1 = bits(_s_comb_7_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_7 = _p_comb_7_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_7_T_2 = xor(p_comb_7, _s_comb_7_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_7_T = bits(input_pp2_in, 7, 7) @[pp_compressor3_2.scala 31:34]
    node _c_comb_7_T_1 = bits(_c_comb_7_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_7_T_2 = and(_c_comb_7_T_1, p_comb_7) @[pp_compressor3_2.scala 31:45]
    node g_comb_7 = _g_comb_7_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_7_T_3 = or(_c_comb_7_T_2, g_comb_7) @[pp_compressor3_2.scala 31:57]
    node _g_comb_8_T = bits(input_pp0_in, 8, 8) @[pp_compressor3_2.scala 28:35]
    node _g_comb_8_T_1 = bits(input_pp1_in, 8, 8) @[pp_compressor3_2.scala 28:53]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_8_T = bits(input_pp0_in, 8, 8) @[pp_compressor3_2.scala 29:35]
    node _p_comb_8_T_1 = bits(input_pp1_in, 8, 8) @[pp_compressor3_2.scala 29:53]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_8_T = bits(input_pp2_in, 8, 8) @[pp_compressor3_2.scala 30:46]
    node _s_comb_8_T_1 = bits(_s_comb_8_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_8 = _p_comb_8_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_8_T_2 = xor(p_comb_8, _s_comb_8_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_8_T = bits(input_pp2_in, 8, 8) @[pp_compressor3_2.scala 31:34]
    node _c_comb_8_T_1 = bits(_c_comb_8_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_8_T_2 = and(_c_comb_8_T_1, p_comb_8) @[pp_compressor3_2.scala 31:45]
    node g_comb_8 = _g_comb_8_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_8_T_3 = or(_c_comb_8_T_2, g_comb_8) @[pp_compressor3_2.scala 31:57]
    node _g_comb_9_T = bits(input_pp0_in, 9, 9) @[pp_compressor3_2.scala 28:35]
    node _g_comb_9_T_1 = bits(input_pp1_in, 9, 9) @[pp_compressor3_2.scala 28:53]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_9_T = bits(input_pp0_in, 9, 9) @[pp_compressor3_2.scala 29:35]
    node _p_comb_9_T_1 = bits(input_pp1_in, 9, 9) @[pp_compressor3_2.scala 29:53]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_9_T = bits(input_pp2_in, 9, 9) @[pp_compressor3_2.scala 30:46]
    node _s_comb_9_T_1 = bits(_s_comb_9_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_9 = _p_comb_9_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_9_T_2 = xor(p_comb_9, _s_comb_9_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_9_T = bits(input_pp2_in, 9, 9) @[pp_compressor3_2.scala 31:34]
    node _c_comb_9_T_1 = bits(_c_comb_9_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_9_T_2 = and(_c_comb_9_T_1, p_comb_9) @[pp_compressor3_2.scala 31:45]
    node g_comb_9 = _g_comb_9_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_9_T_3 = or(_c_comb_9_T_2, g_comb_9) @[pp_compressor3_2.scala 31:57]
    node _g_comb_10_T = bits(input_pp0_in, 10, 10) @[pp_compressor3_2.scala 28:35]
    node _g_comb_10_T_1 = bits(input_pp1_in, 10, 10) @[pp_compressor3_2.scala 28:53]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_10_T = bits(input_pp0_in, 10, 10) @[pp_compressor3_2.scala 29:35]
    node _p_comb_10_T_1 = bits(input_pp1_in, 10, 10) @[pp_compressor3_2.scala 29:53]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_10_T = bits(input_pp2_in, 10, 10) @[pp_compressor3_2.scala 30:46]
    node _s_comb_10_T_1 = bits(_s_comb_10_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_10 = _p_comb_10_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_10_T_2 = xor(p_comb_10, _s_comb_10_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_10_T = bits(input_pp2_in, 10, 10) @[pp_compressor3_2.scala 31:34]
    node _c_comb_10_T_1 = bits(_c_comb_10_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_10_T_2 = and(_c_comb_10_T_1, p_comb_10) @[pp_compressor3_2.scala 31:45]
    node g_comb_10 = _g_comb_10_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_10_T_3 = or(_c_comb_10_T_2, g_comb_10) @[pp_compressor3_2.scala 31:57]
    node _g_comb_11_T = bits(input_pp0_in, 11, 11) @[pp_compressor3_2.scala 28:35]
    node _g_comb_11_T_1 = bits(input_pp1_in, 11, 11) @[pp_compressor3_2.scala 28:53]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_11_T = bits(input_pp0_in, 11, 11) @[pp_compressor3_2.scala 29:35]
    node _p_comb_11_T_1 = bits(input_pp1_in, 11, 11) @[pp_compressor3_2.scala 29:53]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_11_T = bits(input_pp2_in, 11, 11) @[pp_compressor3_2.scala 30:46]
    node _s_comb_11_T_1 = bits(_s_comb_11_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_11 = _p_comb_11_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_11_T_2 = xor(p_comb_11, _s_comb_11_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_11_T = bits(input_pp2_in, 11, 11) @[pp_compressor3_2.scala 31:34]
    node _c_comb_11_T_1 = bits(_c_comb_11_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_11_T_2 = and(_c_comb_11_T_1, p_comb_11) @[pp_compressor3_2.scala 31:45]
    node g_comb_11 = _g_comb_11_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_11_T_3 = or(_c_comb_11_T_2, g_comb_11) @[pp_compressor3_2.scala 31:57]
    node _g_comb_12_T = bits(input_pp0_in, 12, 12) @[pp_compressor3_2.scala 28:35]
    node _g_comb_12_T_1 = bits(input_pp1_in, 12, 12) @[pp_compressor3_2.scala 28:53]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_12_T = bits(input_pp0_in, 12, 12) @[pp_compressor3_2.scala 29:35]
    node _p_comb_12_T_1 = bits(input_pp1_in, 12, 12) @[pp_compressor3_2.scala 29:53]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_12_T = bits(input_pp2_in, 12, 12) @[pp_compressor3_2.scala 30:46]
    node _s_comb_12_T_1 = bits(_s_comb_12_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_12 = _p_comb_12_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_12_T_2 = xor(p_comb_12, _s_comb_12_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_12_T = bits(input_pp2_in, 12, 12) @[pp_compressor3_2.scala 31:34]
    node _c_comb_12_T_1 = bits(_c_comb_12_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_12_T_2 = and(_c_comb_12_T_1, p_comb_12) @[pp_compressor3_2.scala 31:45]
    node g_comb_12 = _g_comb_12_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_12_T_3 = or(_c_comb_12_T_2, g_comb_12) @[pp_compressor3_2.scala 31:57]
    node _g_comb_13_T = bits(input_pp0_in, 13, 13) @[pp_compressor3_2.scala 28:35]
    node _g_comb_13_T_1 = bits(input_pp1_in, 13, 13) @[pp_compressor3_2.scala 28:53]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_13_T = bits(input_pp0_in, 13, 13) @[pp_compressor3_2.scala 29:35]
    node _p_comb_13_T_1 = bits(input_pp1_in, 13, 13) @[pp_compressor3_2.scala 29:53]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_13_T = bits(input_pp2_in, 13, 13) @[pp_compressor3_2.scala 30:46]
    node _s_comb_13_T_1 = bits(_s_comb_13_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_13 = _p_comb_13_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_13_T_2 = xor(p_comb_13, _s_comb_13_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_13_T = bits(input_pp2_in, 13, 13) @[pp_compressor3_2.scala 31:34]
    node _c_comb_13_T_1 = bits(_c_comb_13_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_13_T_2 = and(_c_comb_13_T_1, p_comb_13) @[pp_compressor3_2.scala 31:45]
    node g_comb_13 = _g_comb_13_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_13_T_3 = or(_c_comb_13_T_2, g_comb_13) @[pp_compressor3_2.scala 31:57]
    node _g_comb_14_T = bits(input_pp0_in, 14, 14) @[pp_compressor3_2.scala 28:35]
    node _g_comb_14_T_1 = bits(input_pp1_in, 14, 14) @[pp_compressor3_2.scala 28:53]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_14_T = bits(input_pp0_in, 14, 14) @[pp_compressor3_2.scala 29:35]
    node _p_comb_14_T_1 = bits(input_pp1_in, 14, 14) @[pp_compressor3_2.scala 29:53]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_14_T = bits(input_pp2_in, 14, 14) @[pp_compressor3_2.scala 30:46]
    node _s_comb_14_T_1 = bits(_s_comb_14_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_14 = _p_comb_14_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_14_T_2 = xor(p_comb_14, _s_comb_14_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_14_T = bits(input_pp2_in, 14, 14) @[pp_compressor3_2.scala 31:34]
    node _c_comb_14_T_1 = bits(_c_comb_14_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_14_T_2 = and(_c_comb_14_T_1, p_comb_14) @[pp_compressor3_2.scala 31:45]
    node g_comb_14 = _g_comb_14_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_14_T_3 = or(_c_comb_14_T_2, g_comb_14) @[pp_compressor3_2.scala 31:57]
    node _g_comb_15_T = bits(input_pp0_in, 15, 15) @[pp_compressor3_2.scala 28:35]
    node _g_comb_15_T_1 = bits(input_pp1_in, 15, 15) @[pp_compressor3_2.scala 28:53]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[pp_compressor3_2.scala 28:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 28:58]
    node _p_comb_15_T = bits(input_pp0_in, 15, 15) @[pp_compressor3_2.scala 29:35]
    node _p_comb_15_T_1 = bits(input_pp1_in, 15, 15) @[pp_compressor3_2.scala 29:53]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[pp_compressor3_2.scala 29:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[pp_compressor3_2.scala 29:58]
    node _s_comb_15_T = bits(input_pp2_in, 15, 15) @[pp_compressor3_2.scala 30:46]
    node _s_comb_15_T_1 = bits(_s_comb_15_T, 0, 0) @[pp_compressor3_2.scala 30:50]
    node p_comb_15 = _p_comb_15_T_3 @[pp_compressor3_2.scala 23:22 29:19]
    node _s_comb_15_T_2 = xor(p_comb_15, _s_comb_15_T_1) @[pp_compressor3_2.scala 30:32]
    node _c_comb_15_T = bits(input_pp2_in, 15, 15) @[pp_compressor3_2.scala 31:34]
    node _c_comb_15_T_1 = bits(_c_comb_15_T, 0, 0) @[pp_compressor3_2.scala 31:38]
    node _c_comb_15_T_2 = and(_c_comb_15_T_1, p_comb_15) @[pp_compressor3_2.scala 31:45]
    node g_comb_15 = _g_comb_15_T_3 @[pp_compressor3_2.scala 22:22 28:19]
    node _c_comb_15_T_3 = or(_c_comb_15_T_2, g_comb_15) @[pp_compressor3_2.scala 31:57]
    node s_comb_1 = _s_comb_1_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node s_comb_0 = _s_comb_0_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node output_S_lo_lo_lo = cat(s_comb_1, s_comb_0) @[pp_compressor3_2.scala 34:24]
    node s_comb_3 = _s_comb_3_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node s_comb_2 = _s_comb_2_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node output_S_lo_lo_hi = cat(s_comb_3, s_comb_2) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[pp_compressor3_2.scala 34:24]
    node s_comb_5 = _s_comb_5_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node s_comb_4 = _s_comb_4_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node output_S_lo_hi_lo = cat(s_comb_5, s_comb_4) @[pp_compressor3_2.scala 34:24]
    node s_comb_7 = _s_comb_7_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node s_comb_6 = _s_comb_6_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node output_S_lo_hi_hi = cat(s_comb_7, s_comb_6) @[pp_compressor3_2.scala 34:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[pp_compressor3_2.scala 34:24]
    node s_comb_9 = _s_comb_9_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node s_comb_8 = _s_comb_8_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node output_S_hi_lo_lo = cat(s_comb_9, s_comb_8) @[pp_compressor3_2.scala 34:24]
    node s_comb_11 = _s_comb_11_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node s_comb_10 = _s_comb_10_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node output_S_hi_lo_hi = cat(s_comb_11, s_comb_10) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[pp_compressor3_2.scala 34:24]
    node s_comb_13 = _s_comb_13_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node s_comb_12 = _s_comb_12_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node output_S_hi_hi_lo = cat(s_comb_13, s_comb_12) @[pp_compressor3_2.scala 34:24]
    node s_comb_15 = _s_comb_15_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node s_comb_14 = _s_comb_14_T_2 @[pp_compressor3_2.scala 24:22 30:19]
    node output_S_hi_hi_hi = cat(s_comb_15, s_comb_14) @[pp_compressor3_2.scala 34:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[pp_compressor3_2.scala 34:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[pp_compressor3_2.scala 34:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[pp_compressor3_2.scala 34:24]
    node c_comb_1 = _c_comb_1_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node c_comb_0 = _c_comb_0_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node output_C_lo_lo_lo = cat(c_comb_1, c_comb_0) @[pp_compressor3_2.scala 35:29]
    node c_comb_3 = _c_comb_3_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node c_comb_2 = _c_comb_2_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node output_C_lo_lo_hi = cat(c_comb_3, c_comb_2) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_lo = cat(output_C_lo_lo_hi, output_C_lo_lo_lo) @[pp_compressor3_2.scala 35:29]
    node c_comb_5 = _c_comb_5_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node c_comb_4 = _c_comb_4_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node output_C_lo_hi_lo = cat(c_comb_5, c_comb_4) @[pp_compressor3_2.scala 35:29]
    node c_comb_7 = _c_comb_7_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node c_comb_6 = _c_comb_6_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node output_C_lo_hi_hi = cat(c_comb_7, c_comb_6) @[pp_compressor3_2.scala 35:29]
    node output_C_lo_hi = cat(output_C_lo_hi_hi, output_C_lo_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_lo = cat(output_C_lo_hi, output_C_lo_lo) @[pp_compressor3_2.scala 35:29]
    node c_comb_9 = _c_comb_9_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node c_comb_8 = _c_comb_8_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node output_C_hi_lo_lo = cat(c_comb_9, c_comb_8) @[pp_compressor3_2.scala 35:29]
    node c_comb_11 = _c_comb_11_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node c_comb_10 = _c_comb_10_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node output_C_hi_lo_hi = cat(c_comb_11, c_comb_10) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_lo = cat(output_C_hi_lo_hi, output_C_hi_lo_lo) @[pp_compressor3_2.scala 35:29]
    node c_comb_13 = _c_comb_13_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node c_comb_12 = _c_comb_12_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node output_C_hi_hi_lo = cat(c_comb_13, c_comb_12) @[pp_compressor3_2.scala 35:29]
    node c_comb_15 = _c_comb_15_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node c_comb_14 = _c_comb_14_T_3 @[pp_compressor3_2.scala 25:22 31:19]
    node output_C_hi_hi_hi = cat(c_comb_15, c_comb_14) @[pp_compressor3_2.scala 35:29]
    node output_C_hi_hi = cat(output_C_hi_hi_hi, output_C_hi_hi_lo) @[pp_compressor3_2.scala 35:29]
    node output_C_hi = cat(output_C_hi_hi, output_C_hi_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T = cat(output_C_hi, output_C_lo) @[pp_compressor3_2.scala 35:29]
    node _output_C_T_1 = bits(_output_C_T, 14, 0) @[pp_compressor3_2.scala 35:36]
    node _output_C_T_2 = cat(_output_C_T_1, UInt<1>("h0")) @[Cat.scala 33:92]
    output_S <= _output_S_T @[pp_compressor3_2.scala 34:14]
    output_C <= _output_C_T_2 @[pp_compressor3_2.scala 35:14]

  module RCA :
    input clock : Clock
    input reset : UInt<1>
    input input_a_in : UInt<16>
    input input_b_in : UInt<16>
    input input_c_in : UInt<1>
    output output_S : UInt<16>
    output output_C : UInt<16>

    node _c_comb_0_T = bits(input_c_in, 0, 0) @[rca.scala 27:29]
    node _g_comb_0_T = bits(input_a_in, 0, 0) @[rca.scala 30:35]
    node _g_comb_0_T_1 = bits(input_b_in, 0, 0) @[rca.scala 30:51]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[rca.scala 30:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_0_T = bits(input_a_in, 0, 0) @[rca.scala 31:35]
    node _p_comb_0_T_1 = bits(input_b_in, 0, 0) @[rca.scala 31:51]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[rca.scala 31:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_0 = _p_comb_0_T_3 @[rca.scala 23:22 31:21]
    node c_comb_0 = _c_comb_0_T @[rca.scala 25:22 27:15]
    node _s_comb_0_T = xor(p_comb_0, c_comb_0) @[rca.scala 32:34]
    node _c_comb_1_T = and(c_comb_0, p_comb_0) @[rca.scala 33:34]
    node g_comb_0 = _g_comb_0_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_1_T_1 = or(_c_comb_1_T, g_comb_0) @[rca.scala 33:46]
    node _g_comb_1_T = bits(input_a_in, 1, 1) @[rca.scala 30:35]
    node _g_comb_1_T_1 = bits(input_b_in, 1, 1) @[rca.scala 30:51]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[rca.scala 30:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_1_T = bits(input_a_in, 1, 1) @[rca.scala 31:35]
    node _p_comb_1_T_1 = bits(input_b_in, 1, 1) @[rca.scala 31:51]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[rca.scala 31:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_1 = _p_comb_1_T_3 @[rca.scala 23:22 31:21]
    node c_comb_1 = _c_comb_1_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_1_T = xor(p_comb_1, c_comb_1) @[rca.scala 32:34]
    node _c_comb_2_T = and(c_comb_1, p_comb_1) @[rca.scala 33:34]
    node g_comb_1 = _g_comb_1_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_2_T_1 = or(_c_comb_2_T, g_comb_1) @[rca.scala 33:46]
    node _g_comb_2_T = bits(input_a_in, 2, 2) @[rca.scala 30:35]
    node _g_comb_2_T_1 = bits(input_b_in, 2, 2) @[rca.scala 30:51]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[rca.scala 30:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_2_T = bits(input_a_in, 2, 2) @[rca.scala 31:35]
    node _p_comb_2_T_1 = bits(input_b_in, 2, 2) @[rca.scala 31:51]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[rca.scala 31:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_2 = _p_comb_2_T_3 @[rca.scala 23:22 31:21]
    node c_comb_2 = _c_comb_2_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_2_T = xor(p_comb_2, c_comb_2) @[rca.scala 32:34]
    node _c_comb_3_T = and(c_comb_2, p_comb_2) @[rca.scala 33:34]
    node g_comb_2 = _g_comb_2_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_3_T_1 = or(_c_comb_3_T, g_comb_2) @[rca.scala 33:46]
    node _g_comb_3_T = bits(input_a_in, 3, 3) @[rca.scala 30:35]
    node _g_comb_3_T_1 = bits(input_b_in, 3, 3) @[rca.scala 30:51]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[rca.scala 30:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_3_T = bits(input_a_in, 3, 3) @[rca.scala 31:35]
    node _p_comb_3_T_1 = bits(input_b_in, 3, 3) @[rca.scala 31:51]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[rca.scala 31:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_3 = _p_comb_3_T_3 @[rca.scala 23:22 31:21]
    node c_comb_3 = _c_comb_3_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_3_T = xor(p_comb_3, c_comb_3) @[rca.scala 32:34]
    node _c_comb_4_T = and(c_comb_3, p_comb_3) @[rca.scala 33:34]
    node g_comb_3 = _g_comb_3_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_4_T_1 = or(_c_comb_4_T, g_comb_3) @[rca.scala 33:46]
    node _g_comb_4_T = bits(input_a_in, 4, 4) @[rca.scala 30:35]
    node _g_comb_4_T_1 = bits(input_b_in, 4, 4) @[rca.scala 30:51]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[rca.scala 30:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_4_T = bits(input_a_in, 4, 4) @[rca.scala 31:35]
    node _p_comb_4_T_1 = bits(input_b_in, 4, 4) @[rca.scala 31:51]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[rca.scala 31:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_4 = _p_comb_4_T_3 @[rca.scala 23:22 31:21]
    node c_comb_4 = _c_comb_4_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_4_T = xor(p_comb_4, c_comb_4) @[rca.scala 32:34]
    node _c_comb_5_T = and(c_comb_4, p_comb_4) @[rca.scala 33:34]
    node g_comb_4 = _g_comb_4_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_5_T_1 = or(_c_comb_5_T, g_comb_4) @[rca.scala 33:46]
    node _g_comb_5_T = bits(input_a_in, 5, 5) @[rca.scala 30:35]
    node _g_comb_5_T_1 = bits(input_b_in, 5, 5) @[rca.scala 30:51]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[rca.scala 30:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_5_T = bits(input_a_in, 5, 5) @[rca.scala 31:35]
    node _p_comb_5_T_1 = bits(input_b_in, 5, 5) @[rca.scala 31:51]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[rca.scala 31:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_5 = _p_comb_5_T_3 @[rca.scala 23:22 31:21]
    node c_comb_5 = _c_comb_5_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_5_T = xor(p_comb_5, c_comb_5) @[rca.scala 32:34]
    node _c_comb_6_T = and(c_comb_5, p_comb_5) @[rca.scala 33:34]
    node g_comb_5 = _g_comb_5_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_6_T_1 = or(_c_comb_6_T, g_comb_5) @[rca.scala 33:46]
    node _g_comb_6_T = bits(input_a_in, 6, 6) @[rca.scala 30:35]
    node _g_comb_6_T_1 = bits(input_b_in, 6, 6) @[rca.scala 30:51]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[rca.scala 30:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_6_T = bits(input_a_in, 6, 6) @[rca.scala 31:35]
    node _p_comb_6_T_1 = bits(input_b_in, 6, 6) @[rca.scala 31:51]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[rca.scala 31:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_6 = _p_comb_6_T_3 @[rca.scala 23:22 31:21]
    node c_comb_6 = _c_comb_6_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_6_T = xor(p_comb_6, c_comb_6) @[rca.scala 32:34]
    node _c_comb_7_T = and(c_comb_6, p_comb_6) @[rca.scala 33:34]
    node g_comb_6 = _g_comb_6_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_7_T_1 = or(_c_comb_7_T, g_comb_6) @[rca.scala 33:46]
    node _g_comb_7_T = bits(input_a_in, 7, 7) @[rca.scala 30:35]
    node _g_comb_7_T_1 = bits(input_b_in, 7, 7) @[rca.scala 30:51]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[rca.scala 30:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_7_T = bits(input_a_in, 7, 7) @[rca.scala 31:35]
    node _p_comb_7_T_1 = bits(input_b_in, 7, 7) @[rca.scala 31:51]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[rca.scala 31:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_7 = _p_comb_7_T_3 @[rca.scala 23:22 31:21]
    node c_comb_7 = _c_comb_7_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_7_T = xor(p_comb_7, c_comb_7) @[rca.scala 32:34]
    node _c_comb_8_T = and(c_comb_7, p_comb_7) @[rca.scala 33:34]
    node g_comb_7 = _g_comb_7_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_8_T_1 = or(_c_comb_8_T, g_comb_7) @[rca.scala 33:46]
    node _g_comb_8_T = bits(input_a_in, 8, 8) @[rca.scala 30:35]
    node _g_comb_8_T_1 = bits(input_b_in, 8, 8) @[rca.scala 30:51]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[rca.scala 30:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_8_T = bits(input_a_in, 8, 8) @[rca.scala 31:35]
    node _p_comb_8_T_1 = bits(input_b_in, 8, 8) @[rca.scala 31:51]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[rca.scala 31:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_8 = _p_comb_8_T_3 @[rca.scala 23:22 31:21]
    node c_comb_8 = _c_comb_8_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_8_T = xor(p_comb_8, c_comb_8) @[rca.scala 32:34]
    node _c_comb_9_T = and(c_comb_8, p_comb_8) @[rca.scala 33:34]
    node g_comb_8 = _g_comb_8_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_9_T_1 = or(_c_comb_9_T, g_comb_8) @[rca.scala 33:46]
    node _g_comb_9_T = bits(input_a_in, 9, 9) @[rca.scala 30:35]
    node _g_comb_9_T_1 = bits(input_b_in, 9, 9) @[rca.scala 30:51]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[rca.scala 30:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_9_T = bits(input_a_in, 9, 9) @[rca.scala 31:35]
    node _p_comb_9_T_1 = bits(input_b_in, 9, 9) @[rca.scala 31:51]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[rca.scala 31:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_9 = _p_comb_9_T_3 @[rca.scala 23:22 31:21]
    node c_comb_9 = _c_comb_9_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_9_T = xor(p_comb_9, c_comb_9) @[rca.scala 32:34]
    node _c_comb_10_T = and(c_comb_9, p_comb_9) @[rca.scala 33:34]
    node g_comb_9 = _g_comb_9_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_10_T_1 = or(_c_comb_10_T, g_comb_9) @[rca.scala 33:46]
    node _g_comb_10_T = bits(input_a_in, 10, 10) @[rca.scala 30:35]
    node _g_comb_10_T_1 = bits(input_b_in, 10, 10) @[rca.scala 30:51]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[rca.scala 30:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_10_T = bits(input_a_in, 10, 10) @[rca.scala 31:35]
    node _p_comb_10_T_1 = bits(input_b_in, 10, 10) @[rca.scala 31:51]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[rca.scala 31:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_10 = _p_comb_10_T_3 @[rca.scala 23:22 31:21]
    node c_comb_10 = _c_comb_10_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_10_T = xor(p_comb_10, c_comb_10) @[rca.scala 32:34]
    node _c_comb_11_T = and(c_comb_10, p_comb_10) @[rca.scala 33:34]
    node g_comb_10 = _g_comb_10_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_11_T_1 = or(_c_comb_11_T, g_comb_10) @[rca.scala 33:46]
    node _g_comb_11_T = bits(input_a_in, 11, 11) @[rca.scala 30:35]
    node _g_comb_11_T_1 = bits(input_b_in, 11, 11) @[rca.scala 30:51]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[rca.scala 30:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_11_T = bits(input_a_in, 11, 11) @[rca.scala 31:35]
    node _p_comb_11_T_1 = bits(input_b_in, 11, 11) @[rca.scala 31:51]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[rca.scala 31:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_11 = _p_comb_11_T_3 @[rca.scala 23:22 31:21]
    node c_comb_11 = _c_comb_11_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_11_T = xor(p_comb_11, c_comb_11) @[rca.scala 32:34]
    node _c_comb_12_T = and(c_comb_11, p_comb_11) @[rca.scala 33:34]
    node g_comb_11 = _g_comb_11_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_12_T_1 = or(_c_comb_12_T, g_comb_11) @[rca.scala 33:46]
    node _g_comb_12_T = bits(input_a_in, 12, 12) @[rca.scala 30:35]
    node _g_comb_12_T_1 = bits(input_b_in, 12, 12) @[rca.scala 30:51]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[rca.scala 30:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_12_T = bits(input_a_in, 12, 12) @[rca.scala 31:35]
    node _p_comb_12_T_1 = bits(input_b_in, 12, 12) @[rca.scala 31:51]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[rca.scala 31:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_12 = _p_comb_12_T_3 @[rca.scala 23:22 31:21]
    node c_comb_12 = _c_comb_12_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_12_T = xor(p_comb_12, c_comb_12) @[rca.scala 32:34]
    node _c_comb_13_T = and(c_comb_12, p_comb_12) @[rca.scala 33:34]
    node g_comb_12 = _g_comb_12_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_13_T_1 = or(_c_comb_13_T, g_comb_12) @[rca.scala 33:46]
    node _g_comb_13_T = bits(input_a_in, 13, 13) @[rca.scala 30:35]
    node _g_comb_13_T_1 = bits(input_b_in, 13, 13) @[rca.scala 30:51]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[rca.scala 30:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_13_T = bits(input_a_in, 13, 13) @[rca.scala 31:35]
    node _p_comb_13_T_1 = bits(input_b_in, 13, 13) @[rca.scala 31:51]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[rca.scala 31:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_13 = _p_comb_13_T_3 @[rca.scala 23:22 31:21]
    node c_comb_13 = _c_comb_13_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_13_T = xor(p_comb_13, c_comb_13) @[rca.scala 32:34]
    node _c_comb_14_T = and(c_comb_13, p_comb_13) @[rca.scala 33:34]
    node g_comb_13 = _g_comb_13_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_14_T_1 = or(_c_comb_14_T, g_comb_13) @[rca.scala 33:46]
    node _g_comb_14_T = bits(input_a_in, 14, 14) @[rca.scala 30:35]
    node _g_comb_14_T_1 = bits(input_b_in, 14, 14) @[rca.scala 30:51]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[rca.scala 30:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_14_T = bits(input_a_in, 14, 14) @[rca.scala 31:35]
    node _p_comb_14_T_1 = bits(input_b_in, 14, 14) @[rca.scala 31:51]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[rca.scala 31:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_14 = _p_comb_14_T_3 @[rca.scala 23:22 31:21]
    node c_comb_14 = _c_comb_14_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_14_T = xor(p_comb_14, c_comb_14) @[rca.scala 32:34]
    node _c_comb_15_T = and(c_comb_14, p_comb_14) @[rca.scala 33:34]
    node g_comb_14 = _g_comb_14_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_15_T_1 = or(_c_comb_15_T, g_comb_14) @[rca.scala 33:46]
    node _g_comb_15_T = bits(input_a_in, 15, 15) @[rca.scala 30:35]
    node _g_comb_15_T_1 = bits(input_b_in, 15, 15) @[rca.scala 30:51]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[rca.scala 30:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_15_T = bits(input_a_in, 15, 15) @[rca.scala 31:35]
    node _p_comb_15_T_1 = bits(input_b_in, 15, 15) @[rca.scala 31:51]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[rca.scala 31:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_15 = _p_comb_15_T_3 @[rca.scala 23:22 31:21]
    node c_comb_15 = _c_comb_15_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_15_T = xor(p_comb_15, c_comb_15) @[rca.scala 32:34]
    node _c_comb_16_T = and(c_comb_15, p_comb_15) @[rca.scala 33:34]
    node g_comb_15 = _g_comb_15_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_16_T_1 = or(_c_comb_16_T, g_comb_15) @[rca.scala 33:46]
    node s_comb_1 = _s_comb_1_T @[rca.scala 24:22 32:21]
    node s_comb_0 = _s_comb_0_T @[rca.scala 24:22 32:21]
    node output_S_lo_lo_lo = cat(s_comb_1, s_comb_0) @[rca.scala 36:24]
    node s_comb_3 = _s_comb_3_T @[rca.scala 24:22 32:21]
    node s_comb_2 = _s_comb_2_T @[rca.scala 24:22 32:21]
    node output_S_lo_lo_hi = cat(s_comb_3, s_comb_2) @[rca.scala 36:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[rca.scala 36:24]
    node s_comb_5 = _s_comb_5_T @[rca.scala 24:22 32:21]
    node s_comb_4 = _s_comb_4_T @[rca.scala 24:22 32:21]
    node output_S_lo_hi_lo = cat(s_comb_5, s_comb_4) @[rca.scala 36:24]
    node s_comb_7 = _s_comb_7_T @[rca.scala 24:22 32:21]
    node s_comb_6 = _s_comb_6_T @[rca.scala 24:22 32:21]
    node output_S_lo_hi_hi = cat(s_comb_7, s_comb_6) @[rca.scala 36:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[rca.scala 36:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[rca.scala 36:24]
    node s_comb_9 = _s_comb_9_T @[rca.scala 24:22 32:21]
    node s_comb_8 = _s_comb_8_T @[rca.scala 24:22 32:21]
    node output_S_hi_lo_lo = cat(s_comb_9, s_comb_8) @[rca.scala 36:24]
    node s_comb_11 = _s_comb_11_T @[rca.scala 24:22 32:21]
    node s_comb_10 = _s_comb_10_T @[rca.scala 24:22 32:21]
    node output_S_hi_lo_hi = cat(s_comb_11, s_comb_10) @[rca.scala 36:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[rca.scala 36:24]
    node s_comb_13 = _s_comb_13_T @[rca.scala 24:22 32:21]
    node s_comb_12 = _s_comb_12_T @[rca.scala 24:22 32:21]
    node output_S_hi_hi_lo = cat(s_comb_13, s_comb_12) @[rca.scala 36:24]
    node s_comb_15 = _s_comb_15_T @[rca.scala 24:22 32:21]
    node s_comb_14 = _s_comb_14_T @[rca.scala 24:22 32:21]
    node output_S_hi_hi_hi = cat(s_comb_15, s_comb_14) @[rca.scala 36:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[rca.scala 36:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[rca.scala 36:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[rca.scala 36:24]
    node c_comb_16 = _c_comb_16_T_1 @[rca.scala 25:22 33:21]
    output_S <= _output_S_T @[rca.scala 36:14]
    output_C <= pad(c_comb_16, 16) @[rca.scala 37:14]

  module Multiplier :
    input clock : Clock
    input reset : UInt<1>
    input input_multiplicand : UInt<8>
    input input_multiplier : UInt<8>
    output output_product : UInt<16>

    inst booth2_encoder of booth2Encoder @[multiplier.scala 21:34]
    inst pp_generator of ppGenerator @[multiplier.scala 22:34]
    inst pp_compressor4_2 of pp_compressor4_2 @[multiplier.scala 23:34]
    inst pp_compressor3_2 of pp_compressor3_2 @[multiplier.scala 24:34]
    inst rca of RCA @[multiplier.scala 25:34]
    output_product <= rca.output_S @[multiplier.scala 47:41]
    booth2_encoder.clock <= clock
    booth2_encoder.reset <= reset
    booth2_encoder.input_multiplier <= input_multiplier @[multiplier.scala 27:37]
    pp_generator.clock <= clock
    pp_generator.reset <= reset
    pp_generator.inputData_multiplicand <= input_multiplicand @[multiplier.scala 29:41]
    pp_generator.inputCtrl_X2 <= booth2_encoder.output_X2 @[multiplier.scala 30:41]
    pp_generator.inputCtrl_inv <= booth2_encoder.output_inv @[multiplier.scala 31:41]
    pp_generator.inputCtrl_Set0 <= booth2_encoder.output_set0 @[multiplier.scala 32:41]
    pp_compressor4_2.clock <= clock
    pp_compressor4_2.reset <= reset
    pp_compressor4_2.input_pp0_in <= pp_generator.outputData_pp0_out @[multiplier.scala 34:41]
    pp_compressor4_2.input_pp1_in <= pp_generator.outputData_pp1_out @[multiplier.scala 35:41]
    pp_compressor4_2.input_pp2_in <= pp_generator.outputData_pp2_out @[multiplier.scala 36:41]
    pp_compressor4_2.input_pp3_in <= pp_generator.outputData_pp3_out @[multiplier.scala 37:41]
    pp_compressor3_2.clock <= clock
    pp_compressor3_2.reset <= reset
    pp_compressor3_2.input_pp0_in <= pp_compressor4_2.output_S @[multiplier.scala 39:41]
    pp_compressor3_2.input_pp1_in <= pp_compressor4_2.output_C @[multiplier.scala 40:41]
    pp_compressor3_2.input_pp2_in <= pp_generator.outputData_sig_out @[multiplier.scala 41:41]
    rca.clock <= clock
    rca.reset <= reset
    rca.input_a_in <= pp_compressor3_2.output_S @[multiplier.scala 43:41]
    rca.input_b_in <= pp_compressor3_2.output_C @[multiplier.scala 44:41]
    rca.input_c_in <= UInt<1>("h0") @[multiplier.scala 45:41]

  module RCA_1 :
    input clock : Clock
    input reset : UInt<1>
    input input_a_in : UInt<32>
    input input_b_in : UInt<32>
    input input_c_in : UInt<1>
    output output_S : UInt<32>
    output output_C : UInt<32>

    node _c_comb_0_T = bits(input_c_in, 0, 0) @[rca.scala 27:29]
    node _g_comb_0_T = bits(input_a_in, 0, 0) @[rca.scala 30:35]
    node _g_comb_0_T_1 = bits(input_b_in, 0, 0) @[rca.scala 30:51]
    node _g_comb_0_T_2 = and(_g_comb_0_T, _g_comb_0_T_1) @[rca.scala 30:39]
    node _g_comb_0_T_3 = bits(_g_comb_0_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_0_T = bits(input_a_in, 0, 0) @[rca.scala 31:35]
    node _p_comb_0_T_1 = bits(input_b_in, 0, 0) @[rca.scala 31:51]
    node _p_comb_0_T_2 = xor(_p_comb_0_T, _p_comb_0_T_1) @[rca.scala 31:39]
    node _p_comb_0_T_3 = bits(_p_comb_0_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_0 = _p_comb_0_T_3 @[rca.scala 23:22 31:21]
    node c_comb_0 = _c_comb_0_T @[rca.scala 25:22 27:15]
    node _s_comb_0_T = xor(p_comb_0, c_comb_0) @[rca.scala 32:34]
    node _c_comb_1_T = and(c_comb_0, p_comb_0) @[rca.scala 33:34]
    node g_comb_0 = _g_comb_0_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_1_T_1 = or(_c_comb_1_T, g_comb_0) @[rca.scala 33:46]
    node _g_comb_1_T = bits(input_a_in, 1, 1) @[rca.scala 30:35]
    node _g_comb_1_T_1 = bits(input_b_in, 1, 1) @[rca.scala 30:51]
    node _g_comb_1_T_2 = and(_g_comb_1_T, _g_comb_1_T_1) @[rca.scala 30:39]
    node _g_comb_1_T_3 = bits(_g_comb_1_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_1_T = bits(input_a_in, 1, 1) @[rca.scala 31:35]
    node _p_comb_1_T_1 = bits(input_b_in, 1, 1) @[rca.scala 31:51]
    node _p_comb_1_T_2 = xor(_p_comb_1_T, _p_comb_1_T_1) @[rca.scala 31:39]
    node _p_comb_1_T_3 = bits(_p_comb_1_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_1 = _p_comb_1_T_3 @[rca.scala 23:22 31:21]
    node c_comb_1 = _c_comb_1_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_1_T = xor(p_comb_1, c_comb_1) @[rca.scala 32:34]
    node _c_comb_2_T = and(c_comb_1, p_comb_1) @[rca.scala 33:34]
    node g_comb_1 = _g_comb_1_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_2_T_1 = or(_c_comb_2_T, g_comb_1) @[rca.scala 33:46]
    node _g_comb_2_T = bits(input_a_in, 2, 2) @[rca.scala 30:35]
    node _g_comb_2_T_1 = bits(input_b_in, 2, 2) @[rca.scala 30:51]
    node _g_comb_2_T_2 = and(_g_comb_2_T, _g_comb_2_T_1) @[rca.scala 30:39]
    node _g_comb_2_T_3 = bits(_g_comb_2_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_2_T = bits(input_a_in, 2, 2) @[rca.scala 31:35]
    node _p_comb_2_T_1 = bits(input_b_in, 2, 2) @[rca.scala 31:51]
    node _p_comb_2_T_2 = xor(_p_comb_2_T, _p_comb_2_T_1) @[rca.scala 31:39]
    node _p_comb_2_T_3 = bits(_p_comb_2_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_2 = _p_comb_2_T_3 @[rca.scala 23:22 31:21]
    node c_comb_2 = _c_comb_2_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_2_T = xor(p_comb_2, c_comb_2) @[rca.scala 32:34]
    node _c_comb_3_T = and(c_comb_2, p_comb_2) @[rca.scala 33:34]
    node g_comb_2 = _g_comb_2_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_3_T_1 = or(_c_comb_3_T, g_comb_2) @[rca.scala 33:46]
    node _g_comb_3_T = bits(input_a_in, 3, 3) @[rca.scala 30:35]
    node _g_comb_3_T_1 = bits(input_b_in, 3, 3) @[rca.scala 30:51]
    node _g_comb_3_T_2 = and(_g_comb_3_T, _g_comb_3_T_1) @[rca.scala 30:39]
    node _g_comb_3_T_3 = bits(_g_comb_3_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_3_T = bits(input_a_in, 3, 3) @[rca.scala 31:35]
    node _p_comb_3_T_1 = bits(input_b_in, 3, 3) @[rca.scala 31:51]
    node _p_comb_3_T_2 = xor(_p_comb_3_T, _p_comb_3_T_1) @[rca.scala 31:39]
    node _p_comb_3_T_3 = bits(_p_comb_3_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_3 = _p_comb_3_T_3 @[rca.scala 23:22 31:21]
    node c_comb_3 = _c_comb_3_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_3_T = xor(p_comb_3, c_comb_3) @[rca.scala 32:34]
    node _c_comb_4_T = and(c_comb_3, p_comb_3) @[rca.scala 33:34]
    node g_comb_3 = _g_comb_3_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_4_T_1 = or(_c_comb_4_T, g_comb_3) @[rca.scala 33:46]
    node _g_comb_4_T = bits(input_a_in, 4, 4) @[rca.scala 30:35]
    node _g_comb_4_T_1 = bits(input_b_in, 4, 4) @[rca.scala 30:51]
    node _g_comb_4_T_2 = and(_g_comb_4_T, _g_comb_4_T_1) @[rca.scala 30:39]
    node _g_comb_4_T_3 = bits(_g_comb_4_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_4_T = bits(input_a_in, 4, 4) @[rca.scala 31:35]
    node _p_comb_4_T_1 = bits(input_b_in, 4, 4) @[rca.scala 31:51]
    node _p_comb_4_T_2 = xor(_p_comb_4_T, _p_comb_4_T_1) @[rca.scala 31:39]
    node _p_comb_4_T_3 = bits(_p_comb_4_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_4 = _p_comb_4_T_3 @[rca.scala 23:22 31:21]
    node c_comb_4 = _c_comb_4_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_4_T = xor(p_comb_4, c_comb_4) @[rca.scala 32:34]
    node _c_comb_5_T = and(c_comb_4, p_comb_4) @[rca.scala 33:34]
    node g_comb_4 = _g_comb_4_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_5_T_1 = or(_c_comb_5_T, g_comb_4) @[rca.scala 33:46]
    node _g_comb_5_T = bits(input_a_in, 5, 5) @[rca.scala 30:35]
    node _g_comb_5_T_1 = bits(input_b_in, 5, 5) @[rca.scala 30:51]
    node _g_comb_5_T_2 = and(_g_comb_5_T, _g_comb_5_T_1) @[rca.scala 30:39]
    node _g_comb_5_T_3 = bits(_g_comb_5_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_5_T = bits(input_a_in, 5, 5) @[rca.scala 31:35]
    node _p_comb_5_T_1 = bits(input_b_in, 5, 5) @[rca.scala 31:51]
    node _p_comb_5_T_2 = xor(_p_comb_5_T, _p_comb_5_T_1) @[rca.scala 31:39]
    node _p_comb_5_T_3 = bits(_p_comb_5_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_5 = _p_comb_5_T_3 @[rca.scala 23:22 31:21]
    node c_comb_5 = _c_comb_5_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_5_T = xor(p_comb_5, c_comb_5) @[rca.scala 32:34]
    node _c_comb_6_T = and(c_comb_5, p_comb_5) @[rca.scala 33:34]
    node g_comb_5 = _g_comb_5_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_6_T_1 = or(_c_comb_6_T, g_comb_5) @[rca.scala 33:46]
    node _g_comb_6_T = bits(input_a_in, 6, 6) @[rca.scala 30:35]
    node _g_comb_6_T_1 = bits(input_b_in, 6, 6) @[rca.scala 30:51]
    node _g_comb_6_T_2 = and(_g_comb_6_T, _g_comb_6_T_1) @[rca.scala 30:39]
    node _g_comb_6_T_3 = bits(_g_comb_6_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_6_T = bits(input_a_in, 6, 6) @[rca.scala 31:35]
    node _p_comb_6_T_1 = bits(input_b_in, 6, 6) @[rca.scala 31:51]
    node _p_comb_6_T_2 = xor(_p_comb_6_T, _p_comb_6_T_1) @[rca.scala 31:39]
    node _p_comb_6_T_3 = bits(_p_comb_6_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_6 = _p_comb_6_T_3 @[rca.scala 23:22 31:21]
    node c_comb_6 = _c_comb_6_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_6_T = xor(p_comb_6, c_comb_6) @[rca.scala 32:34]
    node _c_comb_7_T = and(c_comb_6, p_comb_6) @[rca.scala 33:34]
    node g_comb_6 = _g_comb_6_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_7_T_1 = or(_c_comb_7_T, g_comb_6) @[rca.scala 33:46]
    node _g_comb_7_T = bits(input_a_in, 7, 7) @[rca.scala 30:35]
    node _g_comb_7_T_1 = bits(input_b_in, 7, 7) @[rca.scala 30:51]
    node _g_comb_7_T_2 = and(_g_comb_7_T, _g_comb_7_T_1) @[rca.scala 30:39]
    node _g_comb_7_T_3 = bits(_g_comb_7_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_7_T = bits(input_a_in, 7, 7) @[rca.scala 31:35]
    node _p_comb_7_T_1 = bits(input_b_in, 7, 7) @[rca.scala 31:51]
    node _p_comb_7_T_2 = xor(_p_comb_7_T, _p_comb_7_T_1) @[rca.scala 31:39]
    node _p_comb_7_T_3 = bits(_p_comb_7_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_7 = _p_comb_7_T_3 @[rca.scala 23:22 31:21]
    node c_comb_7 = _c_comb_7_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_7_T = xor(p_comb_7, c_comb_7) @[rca.scala 32:34]
    node _c_comb_8_T = and(c_comb_7, p_comb_7) @[rca.scala 33:34]
    node g_comb_7 = _g_comb_7_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_8_T_1 = or(_c_comb_8_T, g_comb_7) @[rca.scala 33:46]
    node _g_comb_8_T = bits(input_a_in, 8, 8) @[rca.scala 30:35]
    node _g_comb_8_T_1 = bits(input_b_in, 8, 8) @[rca.scala 30:51]
    node _g_comb_8_T_2 = and(_g_comb_8_T, _g_comb_8_T_1) @[rca.scala 30:39]
    node _g_comb_8_T_3 = bits(_g_comb_8_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_8_T = bits(input_a_in, 8, 8) @[rca.scala 31:35]
    node _p_comb_8_T_1 = bits(input_b_in, 8, 8) @[rca.scala 31:51]
    node _p_comb_8_T_2 = xor(_p_comb_8_T, _p_comb_8_T_1) @[rca.scala 31:39]
    node _p_comb_8_T_3 = bits(_p_comb_8_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_8 = _p_comb_8_T_3 @[rca.scala 23:22 31:21]
    node c_comb_8 = _c_comb_8_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_8_T = xor(p_comb_8, c_comb_8) @[rca.scala 32:34]
    node _c_comb_9_T = and(c_comb_8, p_comb_8) @[rca.scala 33:34]
    node g_comb_8 = _g_comb_8_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_9_T_1 = or(_c_comb_9_T, g_comb_8) @[rca.scala 33:46]
    node _g_comb_9_T = bits(input_a_in, 9, 9) @[rca.scala 30:35]
    node _g_comb_9_T_1 = bits(input_b_in, 9, 9) @[rca.scala 30:51]
    node _g_comb_9_T_2 = and(_g_comb_9_T, _g_comb_9_T_1) @[rca.scala 30:39]
    node _g_comb_9_T_3 = bits(_g_comb_9_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_9_T = bits(input_a_in, 9, 9) @[rca.scala 31:35]
    node _p_comb_9_T_1 = bits(input_b_in, 9, 9) @[rca.scala 31:51]
    node _p_comb_9_T_2 = xor(_p_comb_9_T, _p_comb_9_T_1) @[rca.scala 31:39]
    node _p_comb_9_T_3 = bits(_p_comb_9_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_9 = _p_comb_9_T_3 @[rca.scala 23:22 31:21]
    node c_comb_9 = _c_comb_9_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_9_T = xor(p_comb_9, c_comb_9) @[rca.scala 32:34]
    node _c_comb_10_T = and(c_comb_9, p_comb_9) @[rca.scala 33:34]
    node g_comb_9 = _g_comb_9_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_10_T_1 = or(_c_comb_10_T, g_comb_9) @[rca.scala 33:46]
    node _g_comb_10_T = bits(input_a_in, 10, 10) @[rca.scala 30:35]
    node _g_comb_10_T_1 = bits(input_b_in, 10, 10) @[rca.scala 30:51]
    node _g_comb_10_T_2 = and(_g_comb_10_T, _g_comb_10_T_1) @[rca.scala 30:39]
    node _g_comb_10_T_3 = bits(_g_comb_10_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_10_T = bits(input_a_in, 10, 10) @[rca.scala 31:35]
    node _p_comb_10_T_1 = bits(input_b_in, 10, 10) @[rca.scala 31:51]
    node _p_comb_10_T_2 = xor(_p_comb_10_T, _p_comb_10_T_1) @[rca.scala 31:39]
    node _p_comb_10_T_3 = bits(_p_comb_10_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_10 = _p_comb_10_T_3 @[rca.scala 23:22 31:21]
    node c_comb_10 = _c_comb_10_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_10_T = xor(p_comb_10, c_comb_10) @[rca.scala 32:34]
    node _c_comb_11_T = and(c_comb_10, p_comb_10) @[rca.scala 33:34]
    node g_comb_10 = _g_comb_10_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_11_T_1 = or(_c_comb_11_T, g_comb_10) @[rca.scala 33:46]
    node _g_comb_11_T = bits(input_a_in, 11, 11) @[rca.scala 30:35]
    node _g_comb_11_T_1 = bits(input_b_in, 11, 11) @[rca.scala 30:51]
    node _g_comb_11_T_2 = and(_g_comb_11_T, _g_comb_11_T_1) @[rca.scala 30:39]
    node _g_comb_11_T_3 = bits(_g_comb_11_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_11_T = bits(input_a_in, 11, 11) @[rca.scala 31:35]
    node _p_comb_11_T_1 = bits(input_b_in, 11, 11) @[rca.scala 31:51]
    node _p_comb_11_T_2 = xor(_p_comb_11_T, _p_comb_11_T_1) @[rca.scala 31:39]
    node _p_comb_11_T_3 = bits(_p_comb_11_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_11 = _p_comb_11_T_3 @[rca.scala 23:22 31:21]
    node c_comb_11 = _c_comb_11_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_11_T = xor(p_comb_11, c_comb_11) @[rca.scala 32:34]
    node _c_comb_12_T = and(c_comb_11, p_comb_11) @[rca.scala 33:34]
    node g_comb_11 = _g_comb_11_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_12_T_1 = or(_c_comb_12_T, g_comb_11) @[rca.scala 33:46]
    node _g_comb_12_T = bits(input_a_in, 12, 12) @[rca.scala 30:35]
    node _g_comb_12_T_1 = bits(input_b_in, 12, 12) @[rca.scala 30:51]
    node _g_comb_12_T_2 = and(_g_comb_12_T, _g_comb_12_T_1) @[rca.scala 30:39]
    node _g_comb_12_T_3 = bits(_g_comb_12_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_12_T = bits(input_a_in, 12, 12) @[rca.scala 31:35]
    node _p_comb_12_T_1 = bits(input_b_in, 12, 12) @[rca.scala 31:51]
    node _p_comb_12_T_2 = xor(_p_comb_12_T, _p_comb_12_T_1) @[rca.scala 31:39]
    node _p_comb_12_T_3 = bits(_p_comb_12_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_12 = _p_comb_12_T_3 @[rca.scala 23:22 31:21]
    node c_comb_12 = _c_comb_12_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_12_T = xor(p_comb_12, c_comb_12) @[rca.scala 32:34]
    node _c_comb_13_T = and(c_comb_12, p_comb_12) @[rca.scala 33:34]
    node g_comb_12 = _g_comb_12_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_13_T_1 = or(_c_comb_13_T, g_comb_12) @[rca.scala 33:46]
    node _g_comb_13_T = bits(input_a_in, 13, 13) @[rca.scala 30:35]
    node _g_comb_13_T_1 = bits(input_b_in, 13, 13) @[rca.scala 30:51]
    node _g_comb_13_T_2 = and(_g_comb_13_T, _g_comb_13_T_1) @[rca.scala 30:39]
    node _g_comb_13_T_3 = bits(_g_comb_13_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_13_T = bits(input_a_in, 13, 13) @[rca.scala 31:35]
    node _p_comb_13_T_1 = bits(input_b_in, 13, 13) @[rca.scala 31:51]
    node _p_comb_13_T_2 = xor(_p_comb_13_T, _p_comb_13_T_1) @[rca.scala 31:39]
    node _p_comb_13_T_3 = bits(_p_comb_13_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_13 = _p_comb_13_T_3 @[rca.scala 23:22 31:21]
    node c_comb_13 = _c_comb_13_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_13_T = xor(p_comb_13, c_comb_13) @[rca.scala 32:34]
    node _c_comb_14_T = and(c_comb_13, p_comb_13) @[rca.scala 33:34]
    node g_comb_13 = _g_comb_13_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_14_T_1 = or(_c_comb_14_T, g_comb_13) @[rca.scala 33:46]
    node _g_comb_14_T = bits(input_a_in, 14, 14) @[rca.scala 30:35]
    node _g_comb_14_T_1 = bits(input_b_in, 14, 14) @[rca.scala 30:51]
    node _g_comb_14_T_2 = and(_g_comb_14_T, _g_comb_14_T_1) @[rca.scala 30:39]
    node _g_comb_14_T_3 = bits(_g_comb_14_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_14_T = bits(input_a_in, 14, 14) @[rca.scala 31:35]
    node _p_comb_14_T_1 = bits(input_b_in, 14, 14) @[rca.scala 31:51]
    node _p_comb_14_T_2 = xor(_p_comb_14_T, _p_comb_14_T_1) @[rca.scala 31:39]
    node _p_comb_14_T_3 = bits(_p_comb_14_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_14 = _p_comb_14_T_3 @[rca.scala 23:22 31:21]
    node c_comb_14 = _c_comb_14_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_14_T = xor(p_comb_14, c_comb_14) @[rca.scala 32:34]
    node _c_comb_15_T = and(c_comb_14, p_comb_14) @[rca.scala 33:34]
    node g_comb_14 = _g_comb_14_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_15_T_1 = or(_c_comb_15_T, g_comb_14) @[rca.scala 33:46]
    node _g_comb_15_T = bits(input_a_in, 15, 15) @[rca.scala 30:35]
    node _g_comb_15_T_1 = bits(input_b_in, 15, 15) @[rca.scala 30:51]
    node _g_comb_15_T_2 = and(_g_comb_15_T, _g_comb_15_T_1) @[rca.scala 30:39]
    node _g_comb_15_T_3 = bits(_g_comb_15_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_15_T = bits(input_a_in, 15, 15) @[rca.scala 31:35]
    node _p_comb_15_T_1 = bits(input_b_in, 15, 15) @[rca.scala 31:51]
    node _p_comb_15_T_2 = xor(_p_comb_15_T, _p_comb_15_T_1) @[rca.scala 31:39]
    node _p_comb_15_T_3 = bits(_p_comb_15_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_15 = _p_comb_15_T_3 @[rca.scala 23:22 31:21]
    node c_comb_15 = _c_comb_15_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_15_T = xor(p_comb_15, c_comb_15) @[rca.scala 32:34]
    node _c_comb_16_T = and(c_comb_15, p_comb_15) @[rca.scala 33:34]
    node g_comb_15 = _g_comb_15_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_16_T_1 = or(_c_comb_16_T, g_comb_15) @[rca.scala 33:46]
    node _g_comb_16_T = bits(input_a_in, 16, 16) @[rca.scala 30:35]
    node _g_comb_16_T_1 = bits(input_b_in, 16, 16) @[rca.scala 30:51]
    node _g_comb_16_T_2 = and(_g_comb_16_T, _g_comb_16_T_1) @[rca.scala 30:39]
    node _g_comb_16_T_3 = bits(_g_comb_16_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_16_T = bits(input_a_in, 16, 16) @[rca.scala 31:35]
    node _p_comb_16_T_1 = bits(input_b_in, 16, 16) @[rca.scala 31:51]
    node _p_comb_16_T_2 = xor(_p_comb_16_T, _p_comb_16_T_1) @[rca.scala 31:39]
    node _p_comb_16_T_3 = bits(_p_comb_16_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_16 = _p_comb_16_T_3 @[rca.scala 23:22 31:21]
    node c_comb_16 = _c_comb_16_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_16_T = xor(p_comb_16, c_comb_16) @[rca.scala 32:34]
    node _c_comb_17_T = and(c_comb_16, p_comb_16) @[rca.scala 33:34]
    node g_comb_16 = _g_comb_16_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_17_T_1 = or(_c_comb_17_T, g_comb_16) @[rca.scala 33:46]
    node _g_comb_17_T = bits(input_a_in, 17, 17) @[rca.scala 30:35]
    node _g_comb_17_T_1 = bits(input_b_in, 17, 17) @[rca.scala 30:51]
    node _g_comb_17_T_2 = and(_g_comb_17_T, _g_comb_17_T_1) @[rca.scala 30:39]
    node _g_comb_17_T_3 = bits(_g_comb_17_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_17_T = bits(input_a_in, 17, 17) @[rca.scala 31:35]
    node _p_comb_17_T_1 = bits(input_b_in, 17, 17) @[rca.scala 31:51]
    node _p_comb_17_T_2 = xor(_p_comb_17_T, _p_comb_17_T_1) @[rca.scala 31:39]
    node _p_comb_17_T_3 = bits(_p_comb_17_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_17 = _p_comb_17_T_3 @[rca.scala 23:22 31:21]
    node c_comb_17 = _c_comb_17_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_17_T = xor(p_comb_17, c_comb_17) @[rca.scala 32:34]
    node _c_comb_18_T = and(c_comb_17, p_comb_17) @[rca.scala 33:34]
    node g_comb_17 = _g_comb_17_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_18_T_1 = or(_c_comb_18_T, g_comb_17) @[rca.scala 33:46]
    node _g_comb_18_T = bits(input_a_in, 18, 18) @[rca.scala 30:35]
    node _g_comb_18_T_1 = bits(input_b_in, 18, 18) @[rca.scala 30:51]
    node _g_comb_18_T_2 = and(_g_comb_18_T, _g_comb_18_T_1) @[rca.scala 30:39]
    node _g_comb_18_T_3 = bits(_g_comb_18_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_18_T = bits(input_a_in, 18, 18) @[rca.scala 31:35]
    node _p_comb_18_T_1 = bits(input_b_in, 18, 18) @[rca.scala 31:51]
    node _p_comb_18_T_2 = xor(_p_comb_18_T, _p_comb_18_T_1) @[rca.scala 31:39]
    node _p_comb_18_T_3 = bits(_p_comb_18_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_18 = _p_comb_18_T_3 @[rca.scala 23:22 31:21]
    node c_comb_18 = _c_comb_18_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_18_T = xor(p_comb_18, c_comb_18) @[rca.scala 32:34]
    node _c_comb_19_T = and(c_comb_18, p_comb_18) @[rca.scala 33:34]
    node g_comb_18 = _g_comb_18_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_19_T_1 = or(_c_comb_19_T, g_comb_18) @[rca.scala 33:46]
    node _g_comb_19_T = bits(input_a_in, 19, 19) @[rca.scala 30:35]
    node _g_comb_19_T_1 = bits(input_b_in, 19, 19) @[rca.scala 30:51]
    node _g_comb_19_T_2 = and(_g_comb_19_T, _g_comb_19_T_1) @[rca.scala 30:39]
    node _g_comb_19_T_3 = bits(_g_comb_19_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_19_T = bits(input_a_in, 19, 19) @[rca.scala 31:35]
    node _p_comb_19_T_1 = bits(input_b_in, 19, 19) @[rca.scala 31:51]
    node _p_comb_19_T_2 = xor(_p_comb_19_T, _p_comb_19_T_1) @[rca.scala 31:39]
    node _p_comb_19_T_3 = bits(_p_comb_19_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_19 = _p_comb_19_T_3 @[rca.scala 23:22 31:21]
    node c_comb_19 = _c_comb_19_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_19_T = xor(p_comb_19, c_comb_19) @[rca.scala 32:34]
    node _c_comb_20_T = and(c_comb_19, p_comb_19) @[rca.scala 33:34]
    node g_comb_19 = _g_comb_19_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_20_T_1 = or(_c_comb_20_T, g_comb_19) @[rca.scala 33:46]
    node _g_comb_20_T = bits(input_a_in, 20, 20) @[rca.scala 30:35]
    node _g_comb_20_T_1 = bits(input_b_in, 20, 20) @[rca.scala 30:51]
    node _g_comb_20_T_2 = and(_g_comb_20_T, _g_comb_20_T_1) @[rca.scala 30:39]
    node _g_comb_20_T_3 = bits(_g_comb_20_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_20_T = bits(input_a_in, 20, 20) @[rca.scala 31:35]
    node _p_comb_20_T_1 = bits(input_b_in, 20, 20) @[rca.scala 31:51]
    node _p_comb_20_T_2 = xor(_p_comb_20_T, _p_comb_20_T_1) @[rca.scala 31:39]
    node _p_comb_20_T_3 = bits(_p_comb_20_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_20 = _p_comb_20_T_3 @[rca.scala 23:22 31:21]
    node c_comb_20 = _c_comb_20_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_20_T = xor(p_comb_20, c_comb_20) @[rca.scala 32:34]
    node _c_comb_21_T = and(c_comb_20, p_comb_20) @[rca.scala 33:34]
    node g_comb_20 = _g_comb_20_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_21_T_1 = or(_c_comb_21_T, g_comb_20) @[rca.scala 33:46]
    node _g_comb_21_T = bits(input_a_in, 21, 21) @[rca.scala 30:35]
    node _g_comb_21_T_1 = bits(input_b_in, 21, 21) @[rca.scala 30:51]
    node _g_comb_21_T_2 = and(_g_comb_21_T, _g_comb_21_T_1) @[rca.scala 30:39]
    node _g_comb_21_T_3 = bits(_g_comb_21_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_21_T = bits(input_a_in, 21, 21) @[rca.scala 31:35]
    node _p_comb_21_T_1 = bits(input_b_in, 21, 21) @[rca.scala 31:51]
    node _p_comb_21_T_2 = xor(_p_comb_21_T, _p_comb_21_T_1) @[rca.scala 31:39]
    node _p_comb_21_T_3 = bits(_p_comb_21_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_21 = _p_comb_21_T_3 @[rca.scala 23:22 31:21]
    node c_comb_21 = _c_comb_21_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_21_T = xor(p_comb_21, c_comb_21) @[rca.scala 32:34]
    node _c_comb_22_T = and(c_comb_21, p_comb_21) @[rca.scala 33:34]
    node g_comb_21 = _g_comb_21_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_22_T_1 = or(_c_comb_22_T, g_comb_21) @[rca.scala 33:46]
    node _g_comb_22_T = bits(input_a_in, 22, 22) @[rca.scala 30:35]
    node _g_comb_22_T_1 = bits(input_b_in, 22, 22) @[rca.scala 30:51]
    node _g_comb_22_T_2 = and(_g_comb_22_T, _g_comb_22_T_1) @[rca.scala 30:39]
    node _g_comb_22_T_3 = bits(_g_comb_22_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_22_T = bits(input_a_in, 22, 22) @[rca.scala 31:35]
    node _p_comb_22_T_1 = bits(input_b_in, 22, 22) @[rca.scala 31:51]
    node _p_comb_22_T_2 = xor(_p_comb_22_T, _p_comb_22_T_1) @[rca.scala 31:39]
    node _p_comb_22_T_3 = bits(_p_comb_22_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_22 = _p_comb_22_T_3 @[rca.scala 23:22 31:21]
    node c_comb_22 = _c_comb_22_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_22_T = xor(p_comb_22, c_comb_22) @[rca.scala 32:34]
    node _c_comb_23_T = and(c_comb_22, p_comb_22) @[rca.scala 33:34]
    node g_comb_22 = _g_comb_22_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_23_T_1 = or(_c_comb_23_T, g_comb_22) @[rca.scala 33:46]
    node _g_comb_23_T = bits(input_a_in, 23, 23) @[rca.scala 30:35]
    node _g_comb_23_T_1 = bits(input_b_in, 23, 23) @[rca.scala 30:51]
    node _g_comb_23_T_2 = and(_g_comb_23_T, _g_comb_23_T_1) @[rca.scala 30:39]
    node _g_comb_23_T_3 = bits(_g_comb_23_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_23_T = bits(input_a_in, 23, 23) @[rca.scala 31:35]
    node _p_comb_23_T_1 = bits(input_b_in, 23, 23) @[rca.scala 31:51]
    node _p_comb_23_T_2 = xor(_p_comb_23_T, _p_comb_23_T_1) @[rca.scala 31:39]
    node _p_comb_23_T_3 = bits(_p_comb_23_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_23 = _p_comb_23_T_3 @[rca.scala 23:22 31:21]
    node c_comb_23 = _c_comb_23_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_23_T = xor(p_comb_23, c_comb_23) @[rca.scala 32:34]
    node _c_comb_24_T = and(c_comb_23, p_comb_23) @[rca.scala 33:34]
    node g_comb_23 = _g_comb_23_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_24_T_1 = or(_c_comb_24_T, g_comb_23) @[rca.scala 33:46]
    node _g_comb_24_T = bits(input_a_in, 24, 24) @[rca.scala 30:35]
    node _g_comb_24_T_1 = bits(input_b_in, 24, 24) @[rca.scala 30:51]
    node _g_comb_24_T_2 = and(_g_comb_24_T, _g_comb_24_T_1) @[rca.scala 30:39]
    node _g_comb_24_T_3 = bits(_g_comb_24_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_24_T = bits(input_a_in, 24, 24) @[rca.scala 31:35]
    node _p_comb_24_T_1 = bits(input_b_in, 24, 24) @[rca.scala 31:51]
    node _p_comb_24_T_2 = xor(_p_comb_24_T, _p_comb_24_T_1) @[rca.scala 31:39]
    node _p_comb_24_T_3 = bits(_p_comb_24_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_24 = _p_comb_24_T_3 @[rca.scala 23:22 31:21]
    node c_comb_24 = _c_comb_24_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_24_T = xor(p_comb_24, c_comb_24) @[rca.scala 32:34]
    node _c_comb_25_T = and(c_comb_24, p_comb_24) @[rca.scala 33:34]
    node g_comb_24 = _g_comb_24_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_25_T_1 = or(_c_comb_25_T, g_comb_24) @[rca.scala 33:46]
    node _g_comb_25_T = bits(input_a_in, 25, 25) @[rca.scala 30:35]
    node _g_comb_25_T_1 = bits(input_b_in, 25, 25) @[rca.scala 30:51]
    node _g_comb_25_T_2 = and(_g_comb_25_T, _g_comb_25_T_1) @[rca.scala 30:39]
    node _g_comb_25_T_3 = bits(_g_comb_25_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_25_T = bits(input_a_in, 25, 25) @[rca.scala 31:35]
    node _p_comb_25_T_1 = bits(input_b_in, 25, 25) @[rca.scala 31:51]
    node _p_comb_25_T_2 = xor(_p_comb_25_T, _p_comb_25_T_1) @[rca.scala 31:39]
    node _p_comb_25_T_3 = bits(_p_comb_25_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_25 = _p_comb_25_T_3 @[rca.scala 23:22 31:21]
    node c_comb_25 = _c_comb_25_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_25_T = xor(p_comb_25, c_comb_25) @[rca.scala 32:34]
    node _c_comb_26_T = and(c_comb_25, p_comb_25) @[rca.scala 33:34]
    node g_comb_25 = _g_comb_25_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_26_T_1 = or(_c_comb_26_T, g_comb_25) @[rca.scala 33:46]
    node _g_comb_26_T = bits(input_a_in, 26, 26) @[rca.scala 30:35]
    node _g_comb_26_T_1 = bits(input_b_in, 26, 26) @[rca.scala 30:51]
    node _g_comb_26_T_2 = and(_g_comb_26_T, _g_comb_26_T_1) @[rca.scala 30:39]
    node _g_comb_26_T_3 = bits(_g_comb_26_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_26_T = bits(input_a_in, 26, 26) @[rca.scala 31:35]
    node _p_comb_26_T_1 = bits(input_b_in, 26, 26) @[rca.scala 31:51]
    node _p_comb_26_T_2 = xor(_p_comb_26_T, _p_comb_26_T_1) @[rca.scala 31:39]
    node _p_comb_26_T_3 = bits(_p_comb_26_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_26 = _p_comb_26_T_3 @[rca.scala 23:22 31:21]
    node c_comb_26 = _c_comb_26_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_26_T = xor(p_comb_26, c_comb_26) @[rca.scala 32:34]
    node _c_comb_27_T = and(c_comb_26, p_comb_26) @[rca.scala 33:34]
    node g_comb_26 = _g_comb_26_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_27_T_1 = or(_c_comb_27_T, g_comb_26) @[rca.scala 33:46]
    node _g_comb_27_T = bits(input_a_in, 27, 27) @[rca.scala 30:35]
    node _g_comb_27_T_1 = bits(input_b_in, 27, 27) @[rca.scala 30:51]
    node _g_comb_27_T_2 = and(_g_comb_27_T, _g_comb_27_T_1) @[rca.scala 30:39]
    node _g_comb_27_T_3 = bits(_g_comb_27_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_27_T = bits(input_a_in, 27, 27) @[rca.scala 31:35]
    node _p_comb_27_T_1 = bits(input_b_in, 27, 27) @[rca.scala 31:51]
    node _p_comb_27_T_2 = xor(_p_comb_27_T, _p_comb_27_T_1) @[rca.scala 31:39]
    node _p_comb_27_T_3 = bits(_p_comb_27_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_27 = _p_comb_27_T_3 @[rca.scala 23:22 31:21]
    node c_comb_27 = _c_comb_27_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_27_T = xor(p_comb_27, c_comb_27) @[rca.scala 32:34]
    node _c_comb_28_T = and(c_comb_27, p_comb_27) @[rca.scala 33:34]
    node g_comb_27 = _g_comb_27_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_28_T_1 = or(_c_comb_28_T, g_comb_27) @[rca.scala 33:46]
    node _g_comb_28_T = bits(input_a_in, 28, 28) @[rca.scala 30:35]
    node _g_comb_28_T_1 = bits(input_b_in, 28, 28) @[rca.scala 30:51]
    node _g_comb_28_T_2 = and(_g_comb_28_T, _g_comb_28_T_1) @[rca.scala 30:39]
    node _g_comb_28_T_3 = bits(_g_comb_28_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_28_T = bits(input_a_in, 28, 28) @[rca.scala 31:35]
    node _p_comb_28_T_1 = bits(input_b_in, 28, 28) @[rca.scala 31:51]
    node _p_comb_28_T_2 = xor(_p_comb_28_T, _p_comb_28_T_1) @[rca.scala 31:39]
    node _p_comb_28_T_3 = bits(_p_comb_28_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_28 = _p_comb_28_T_3 @[rca.scala 23:22 31:21]
    node c_comb_28 = _c_comb_28_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_28_T = xor(p_comb_28, c_comb_28) @[rca.scala 32:34]
    node _c_comb_29_T = and(c_comb_28, p_comb_28) @[rca.scala 33:34]
    node g_comb_28 = _g_comb_28_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_29_T_1 = or(_c_comb_29_T, g_comb_28) @[rca.scala 33:46]
    node _g_comb_29_T = bits(input_a_in, 29, 29) @[rca.scala 30:35]
    node _g_comb_29_T_1 = bits(input_b_in, 29, 29) @[rca.scala 30:51]
    node _g_comb_29_T_2 = and(_g_comb_29_T, _g_comb_29_T_1) @[rca.scala 30:39]
    node _g_comb_29_T_3 = bits(_g_comb_29_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_29_T = bits(input_a_in, 29, 29) @[rca.scala 31:35]
    node _p_comb_29_T_1 = bits(input_b_in, 29, 29) @[rca.scala 31:51]
    node _p_comb_29_T_2 = xor(_p_comb_29_T, _p_comb_29_T_1) @[rca.scala 31:39]
    node _p_comb_29_T_3 = bits(_p_comb_29_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_29 = _p_comb_29_T_3 @[rca.scala 23:22 31:21]
    node c_comb_29 = _c_comb_29_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_29_T = xor(p_comb_29, c_comb_29) @[rca.scala 32:34]
    node _c_comb_30_T = and(c_comb_29, p_comb_29) @[rca.scala 33:34]
    node g_comb_29 = _g_comb_29_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_30_T_1 = or(_c_comb_30_T, g_comb_29) @[rca.scala 33:46]
    node _g_comb_30_T = bits(input_a_in, 30, 30) @[rca.scala 30:35]
    node _g_comb_30_T_1 = bits(input_b_in, 30, 30) @[rca.scala 30:51]
    node _g_comb_30_T_2 = and(_g_comb_30_T, _g_comb_30_T_1) @[rca.scala 30:39]
    node _g_comb_30_T_3 = bits(_g_comb_30_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_30_T = bits(input_a_in, 30, 30) @[rca.scala 31:35]
    node _p_comb_30_T_1 = bits(input_b_in, 30, 30) @[rca.scala 31:51]
    node _p_comb_30_T_2 = xor(_p_comb_30_T, _p_comb_30_T_1) @[rca.scala 31:39]
    node _p_comb_30_T_3 = bits(_p_comb_30_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_30 = _p_comb_30_T_3 @[rca.scala 23:22 31:21]
    node c_comb_30 = _c_comb_30_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_30_T = xor(p_comb_30, c_comb_30) @[rca.scala 32:34]
    node _c_comb_31_T = and(c_comb_30, p_comb_30) @[rca.scala 33:34]
    node g_comb_30 = _g_comb_30_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_31_T_1 = or(_c_comb_31_T, g_comb_30) @[rca.scala 33:46]
    node _g_comb_31_T = bits(input_a_in, 31, 31) @[rca.scala 30:35]
    node _g_comb_31_T_1 = bits(input_b_in, 31, 31) @[rca.scala 30:51]
    node _g_comb_31_T_2 = and(_g_comb_31_T, _g_comb_31_T_1) @[rca.scala 30:39]
    node _g_comb_31_T_3 = bits(_g_comb_31_T_2, 0, 0) @[rca.scala 30:56]
    node _p_comb_31_T = bits(input_a_in, 31, 31) @[rca.scala 31:35]
    node _p_comb_31_T_1 = bits(input_b_in, 31, 31) @[rca.scala 31:51]
    node _p_comb_31_T_2 = xor(_p_comb_31_T, _p_comb_31_T_1) @[rca.scala 31:39]
    node _p_comb_31_T_3 = bits(_p_comb_31_T_2, 0, 0) @[rca.scala 31:56]
    node p_comb_31 = _p_comb_31_T_3 @[rca.scala 23:22 31:21]
    node c_comb_31 = _c_comb_31_T_1 @[rca.scala 25:22 33:21]
    node _s_comb_31_T = xor(p_comb_31, c_comb_31) @[rca.scala 32:34]
    node _c_comb_32_T = and(c_comb_31, p_comb_31) @[rca.scala 33:34]
    node g_comb_31 = _g_comb_31_T_3 @[rca.scala 22:22 30:21]
    node _c_comb_32_T_1 = or(_c_comb_32_T, g_comb_31) @[rca.scala 33:46]
    node s_comb_1 = _s_comb_1_T @[rca.scala 24:22 32:21]
    node s_comb_0 = _s_comb_0_T @[rca.scala 24:22 32:21]
    node output_S_lo_lo_lo_lo = cat(s_comb_1, s_comb_0) @[rca.scala 36:24]
    node s_comb_3 = _s_comb_3_T @[rca.scala 24:22 32:21]
    node s_comb_2 = _s_comb_2_T @[rca.scala 24:22 32:21]
    node output_S_lo_lo_lo_hi = cat(s_comb_3, s_comb_2) @[rca.scala 36:24]
    node output_S_lo_lo_lo = cat(output_S_lo_lo_lo_hi, output_S_lo_lo_lo_lo) @[rca.scala 36:24]
    node s_comb_5 = _s_comb_5_T @[rca.scala 24:22 32:21]
    node s_comb_4 = _s_comb_4_T @[rca.scala 24:22 32:21]
    node output_S_lo_lo_hi_lo = cat(s_comb_5, s_comb_4) @[rca.scala 36:24]
    node s_comb_7 = _s_comb_7_T @[rca.scala 24:22 32:21]
    node s_comb_6 = _s_comb_6_T @[rca.scala 24:22 32:21]
    node output_S_lo_lo_hi_hi = cat(s_comb_7, s_comb_6) @[rca.scala 36:24]
    node output_S_lo_lo_hi = cat(output_S_lo_lo_hi_hi, output_S_lo_lo_hi_lo) @[rca.scala 36:24]
    node output_S_lo_lo = cat(output_S_lo_lo_hi, output_S_lo_lo_lo) @[rca.scala 36:24]
    node s_comb_9 = _s_comb_9_T @[rca.scala 24:22 32:21]
    node s_comb_8 = _s_comb_8_T @[rca.scala 24:22 32:21]
    node output_S_lo_hi_lo_lo = cat(s_comb_9, s_comb_8) @[rca.scala 36:24]
    node s_comb_11 = _s_comb_11_T @[rca.scala 24:22 32:21]
    node s_comb_10 = _s_comb_10_T @[rca.scala 24:22 32:21]
    node output_S_lo_hi_lo_hi = cat(s_comb_11, s_comb_10) @[rca.scala 36:24]
    node output_S_lo_hi_lo = cat(output_S_lo_hi_lo_hi, output_S_lo_hi_lo_lo) @[rca.scala 36:24]
    node s_comb_13 = _s_comb_13_T @[rca.scala 24:22 32:21]
    node s_comb_12 = _s_comb_12_T @[rca.scala 24:22 32:21]
    node output_S_lo_hi_hi_lo = cat(s_comb_13, s_comb_12) @[rca.scala 36:24]
    node s_comb_15 = _s_comb_15_T @[rca.scala 24:22 32:21]
    node s_comb_14 = _s_comb_14_T @[rca.scala 24:22 32:21]
    node output_S_lo_hi_hi_hi = cat(s_comb_15, s_comb_14) @[rca.scala 36:24]
    node output_S_lo_hi_hi = cat(output_S_lo_hi_hi_hi, output_S_lo_hi_hi_lo) @[rca.scala 36:24]
    node output_S_lo_hi = cat(output_S_lo_hi_hi, output_S_lo_hi_lo) @[rca.scala 36:24]
    node output_S_lo = cat(output_S_lo_hi, output_S_lo_lo) @[rca.scala 36:24]
    node s_comb_17 = _s_comb_17_T @[rca.scala 24:22 32:21]
    node s_comb_16 = _s_comb_16_T @[rca.scala 24:22 32:21]
    node output_S_hi_lo_lo_lo = cat(s_comb_17, s_comb_16) @[rca.scala 36:24]
    node s_comb_19 = _s_comb_19_T @[rca.scala 24:22 32:21]
    node s_comb_18 = _s_comb_18_T @[rca.scala 24:22 32:21]
    node output_S_hi_lo_lo_hi = cat(s_comb_19, s_comb_18) @[rca.scala 36:24]
    node output_S_hi_lo_lo = cat(output_S_hi_lo_lo_hi, output_S_hi_lo_lo_lo) @[rca.scala 36:24]
    node s_comb_21 = _s_comb_21_T @[rca.scala 24:22 32:21]
    node s_comb_20 = _s_comb_20_T @[rca.scala 24:22 32:21]
    node output_S_hi_lo_hi_lo = cat(s_comb_21, s_comb_20) @[rca.scala 36:24]
    node s_comb_23 = _s_comb_23_T @[rca.scala 24:22 32:21]
    node s_comb_22 = _s_comb_22_T @[rca.scala 24:22 32:21]
    node output_S_hi_lo_hi_hi = cat(s_comb_23, s_comb_22) @[rca.scala 36:24]
    node output_S_hi_lo_hi = cat(output_S_hi_lo_hi_hi, output_S_hi_lo_hi_lo) @[rca.scala 36:24]
    node output_S_hi_lo = cat(output_S_hi_lo_hi, output_S_hi_lo_lo) @[rca.scala 36:24]
    node s_comb_25 = _s_comb_25_T @[rca.scala 24:22 32:21]
    node s_comb_24 = _s_comb_24_T @[rca.scala 24:22 32:21]
    node output_S_hi_hi_lo_lo = cat(s_comb_25, s_comb_24) @[rca.scala 36:24]
    node s_comb_27 = _s_comb_27_T @[rca.scala 24:22 32:21]
    node s_comb_26 = _s_comb_26_T @[rca.scala 24:22 32:21]
    node output_S_hi_hi_lo_hi = cat(s_comb_27, s_comb_26) @[rca.scala 36:24]
    node output_S_hi_hi_lo = cat(output_S_hi_hi_lo_hi, output_S_hi_hi_lo_lo) @[rca.scala 36:24]
    node s_comb_29 = _s_comb_29_T @[rca.scala 24:22 32:21]
    node s_comb_28 = _s_comb_28_T @[rca.scala 24:22 32:21]
    node output_S_hi_hi_hi_lo = cat(s_comb_29, s_comb_28) @[rca.scala 36:24]
    node s_comb_31 = _s_comb_31_T @[rca.scala 24:22 32:21]
    node s_comb_30 = _s_comb_30_T @[rca.scala 24:22 32:21]
    node output_S_hi_hi_hi_hi = cat(s_comb_31, s_comb_30) @[rca.scala 36:24]
    node output_S_hi_hi_hi = cat(output_S_hi_hi_hi_hi, output_S_hi_hi_hi_lo) @[rca.scala 36:24]
    node output_S_hi_hi = cat(output_S_hi_hi_hi, output_S_hi_hi_lo) @[rca.scala 36:24]
    node output_S_hi = cat(output_S_hi_hi, output_S_hi_lo) @[rca.scala 36:24]
    node _output_S_T = cat(output_S_hi, output_S_lo) @[rca.scala 36:24]
    node c_comb_32 = _c_comb_32_T_1 @[rca.scala 25:22 33:21]
    output_S <= _output_S_T @[rca.scala 36:14]
    output_C <= pad(c_comb_32, 32) @[rca.scala 37:14]

  module MacUnit :
    input clock : Clock
    input reset : UInt<1>
    input io_in_a : UInt<8>
    input io_in_b : UInt<8>
    input io_in_c : UInt<32>
    output io_out_c : UInt<32>

    inst mul of Multiplier @[MacUnit.scala 15:19]
    inst rca of RCA_1 @[MacUnit.scala 16:19]
    node _rca_input_a_in_T = bits(mul.output_product, 15, 15) @[MacUnit.scala 21:71]
    node _rca_input_a_in_T_1 = bits(_rca_input_a_in_T, 0, 0) @[Bitwise.scala 77:15]
    node _rca_input_a_in_T_2 = mux(_rca_input_a_in_T_1, UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
    node _rca_input_a_in_T_3 = cat(_rca_input_a_in_T_2, mul.output_product) @[Cat.scala 33:92]
    io_out_c <= rca.output_S @[MacUnit.scala 24:19]
    mul.clock <= clock
    mul.reset <= reset
    mul.input_multiplicand <= io_in_a @[MacUnit.scala 18:26]
    mul.input_multiplier <= io_in_b @[MacUnit.scala 19:26]
    rca.clock <= clock
    rca.reset <= reset
    rca.input_a_in <= _rca_input_a_in_T_3 @[MacUnit.scala 21:19]
    rca.input_b_in <= io_in_c @[MacUnit.scala 22:19]
    rca.input_c_in <= UInt<1>("h0") @[MacUnit.scala 23:19]

  module PE :
    input clock : Clock
    input reset : UInt<1>
    input io_in_control_done : UInt<1>
    input io_in_a : UInt<8>
    input io_in_b : UInt<8>
    input io_in_c : UInt<32>
    output io_out_control_done : UInt<1>
    output io_out_a : UInt<8>
    output io_out_b : UInt<8>
    output io_out_c : UInt<32>

    inst mac of MacUnit @[PE.scala 28:19]
    reg a_reg : UInt<8>, clock with :
      reset => (UInt<1>("h0"), a_reg) @[PE.scala 24:22]
    reg b_reg : UInt<8>, clock with :
      reset => (UInt<1>("h0"), b_reg) @[PE.scala 25:22]
    reg c_reg : UInt<32>, clock with :
      reset => (UInt<1>("h0"), c_reg) @[PE.scala 26:22]
    node _c_reg_T = eq(io_in_control_done, UInt<1>("h1")) @[PE.scala 36:35]
    node _c_reg_T_1 = mux(_c_reg_T, io_in_c, mac.io_out_c) @[PE.scala 36:15]
    io_out_control_done <= io_in_control_done @[PE.scala 42:18]
    io_out_a <= a_reg @[PE.scala 38:12]
    io_out_b <= b_reg @[PE.scala 39:12]
    io_out_c <= c_reg @[PE.scala 40:12]
    a_reg <= mux(reset, UInt<8>("h0"), io_in_a) @[PE.scala 24:{22,22} 33:9]
    b_reg <= mux(reset, UInt<8>("h0"), io_in_b) @[PE.scala 25:{22,22} 34:9]
    c_reg <= mux(reset, UInt<32>("h0"), _c_reg_T_1) @[PE.scala 26:{22,22} 36:9]
    mac.clock <= clock
    mac.reset <= reset
    mac.io_in_a <= io_in_a @[PE.scala 29:15]
    mac.io_in_b <= io_in_b @[PE.scala 30:15]
    mac.io_in_c <= c_reg @[PE.scala 31:15]

  module PE_12 :
    input clock : Clock
    input reset : UInt<1>
    input io_in_control_done : UInt<1>
    input io_in_a : UInt<8>
    input io_in_b : UInt<8>
    input io_in_c : UInt<32>
    output io_out_control_done : UInt<1>
    output io_out_a : UInt<8>
    output io_out_b : UInt<8>
    output io_out_c : UInt<32>

    inst mac of MacUnit @[PE.scala 28:19]
    reg a_reg : UInt<8>, clock with :
      reset => (UInt<1>("h0"), a_reg) @[PE.scala 24:22]
    reg b_reg : UInt<8>, clock with :
      reset => (UInt<1>("h0"), b_reg) @[PE.scala 25:22]
    reg c_reg : UInt<32>, clock with :
      reset => (UInt<1>("h0"), c_reg) @[PE.scala 26:22]
    node _c_reg_T = eq(io_in_control_done, UInt<1>("h1")) @[PE.scala 36:35]
    node _c_reg_T_1 = mux(_c_reg_T, io_in_c, mac.io_out_c) @[PE.scala 36:15]
    io_out_control_done <= io_in_control_done @[PE.scala 42:18]
    io_out_a <= a_reg @[PE.scala 38:12]
    io_out_b <= b_reg @[PE.scala 39:12]
    io_out_c <= c_reg @[PE.scala 40:12]
    a_reg <= mux(reset, UInt<8>("h0"), io_in_a) @[PE.scala 24:{22,22} 33:9]
    b_reg <= mux(reset, UInt<8>("h0"), io_in_b) @[PE.scala 25:{22,22} 34:9]
    c_reg <= mux(reset, UInt<32>("h0"), _c_reg_T_1) @[PE.scala 26:{22,22} 36:9]
    mac.clock <= clock
    mac.reset <= reset
    mac.io_in_a <= io_in_a @[PE.scala 29:15]
    mac.io_in_b <= io_in_b @[PE.scala 30:15]
    mac.io_in_c <= c_reg @[PE.scala 31:15]

  module SystolicArray :
    input clock : Clock
    input reset : UInt<1>
    input io_in_control_0_done : UInt<1>
    input io_in_control_1_done : UInt<1>
    input io_in_control_2_done : UInt<1>
    input io_in_control_3_done : UInt<1>
    input io_in_a_0 : UInt<8>
    input io_in_a_1 : UInt<8>
    input io_in_a_2 : UInt<8>
    input io_in_a_3 : UInt<8>
    input io_in_b_0 : UInt<8>
    input io_in_b_1 : UInt<8>
    input io_in_b_2 : UInt<8>
    input io_in_b_3 : UInt<8>
    input io_in_c_0 : UInt<32>
    input io_in_c_1 : UInt<32>
    input io_in_c_2 : UInt<32>
    input io_in_c_3 : UInt<32>
    output io_out_control_0_done : UInt<1>
    output io_out_control_1_done : UInt<1>
    output io_out_control_2_done : UInt<1>
    output io_out_control_3_done : UInt<1>
    output io_out_a_0 : UInt<8>
    output io_out_a_1 : UInt<8>
    output io_out_a_2 : UInt<8>
    output io_out_a_3 : UInt<8>
    output io_out_b_0 : UInt<8>
    output io_out_b_1 : UInt<8>
    output io_out_b_2 : UInt<8>
    output io_out_b_3 : UInt<8>
    output io_out_c_0 : UInt<32>
    output io_out_c_1 : UInt<32>
    output io_out_c_2 : UInt<32>
    output io_out_c_3 : UInt<32>

    inst sa_0_0 of PE @[SystolicArray.scala 22:45]
    inst sa_0_1 of PE @[SystolicArray.scala 22:45]
    inst sa_0_2 of PE @[SystolicArray.scala 22:45]
    inst sa_0_3 of PE @[SystolicArray.scala 22:45]
    inst sa_1_0 of PE @[SystolicArray.scala 22:45]
    inst sa_1_1 of PE @[SystolicArray.scala 22:45]
    inst sa_1_2 of PE @[SystolicArray.scala 22:45]
    inst sa_1_3 of PE @[SystolicArray.scala 22:45]
    inst sa_2_0 of PE @[SystolicArray.scala 22:45]
    inst sa_2_1 of PE @[SystolicArray.scala 22:45]
    inst sa_2_2 of PE @[SystolicArray.scala 22:45]
    inst sa_2_3 of PE @[SystolicArray.scala 22:45]
    inst sa_3_0 of PE_12 @[SystolicArray.scala 22:45]
    inst sa_3_1 of PE_12 @[SystolicArray.scala 22:45]
    inst sa_3_2 of PE_12 @[SystolicArray.scala 22:45]
    inst sa_3_3 of PE_12 @[SystolicArray.scala 22:45]
    io_out_control_0_done <= sa_3_0.io_out_control_done @[SystolicArray.scala 61:23]
    io_out_control_1_done <= sa_3_1.io_out_control_done @[SystolicArray.scala 61:23]
    io_out_control_2_done <= sa_3_2.io_out_control_done @[SystolicArray.scala 61:23]
    io_out_control_3_done <= sa_3_3.io_out_control_done @[SystolicArray.scala 61:23]
    io_out_a_0 <= sa_0_3.io_out_a @[SystolicArray.scala 65:17]
    io_out_a_1 <= sa_1_3.io_out_a @[SystolicArray.scala 65:17]
    io_out_a_2 <= sa_2_3.io_out_a @[SystolicArray.scala 65:17]
    io_out_a_3 <= sa_3_3.io_out_a @[SystolicArray.scala 65:17]
    io_out_b_0 <= sa_3_0.io_out_b @[SystolicArray.scala 59:17]
    io_out_b_1 <= sa_3_1.io_out_b @[SystolicArray.scala 59:17]
    io_out_b_2 <= sa_3_2.io_out_b @[SystolicArray.scala 59:17]
    io_out_b_3 <= sa_3_3.io_out_b @[SystolicArray.scala 59:17]
    io_out_c_0 <= sa_3_0.io_out_c @[SystolicArray.scala 60:17]
    io_out_c_1 <= sa_3_1.io_out_c @[SystolicArray.scala 60:17]
    io_out_c_2 <= sa_3_2.io_out_c @[SystolicArray.scala 60:17]
    io_out_c_3 <= sa_3_3.io_out_c @[SystolicArray.scala 60:17]
    sa_0_0.clock <= clock
    sa_0_0.reset <= reset
    sa_0_0.io_in_control_done <= io_in_control_0_done @[SystolicArray.scala 53:26]
    sa_0_0.io_in_a <= io_in_a_0 @[SystolicArray.scala 28:20]
    sa_0_0.io_in_b <= io_in_b_0 @[SystolicArray.scala 36:20]
    sa_0_0.io_in_c <= io_in_c_0 @[SystolicArray.scala 44:20]
    sa_0_1.clock <= clock
    sa_0_1.reset <= reset
    sa_0_1.io_in_control_done <= io_in_control_1_done @[SystolicArray.scala 53:26]
    sa_0_1.io_in_a <= sa_0_0.io_out_a @[SystolicArray.scala 28:20]
    sa_0_1.io_in_b <= io_in_b_1 @[SystolicArray.scala 36:20]
    sa_0_1.io_in_c <= io_in_c_1 @[SystolicArray.scala 44:20]
    sa_0_2.clock <= clock
    sa_0_2.reset <= reset
    sa_0_2.io_in_control_done <= io_in_control_2_done @[SystolicArray.scala 53:26]
    sa_0_2.io_in_a <= sa_0_1.io_out_a @[SystolicArray.scala 28:20]
    sa_0_2.io_in_b <= io_in_b_2 @[SystolicArray.scala 36:20]
    sa_0_2.io_in_c <= io_in_c_2 @[SystolicArray.scala 44:20]
    sa_0_3.clock <= clock
    sa_0_3.reset <= reset
    sa_0_3.io_in_control_done <= io_in_control_3_done @[SystolicArray.scala 53:26]
    sa_0_3.io_in_a <= sa_0_2.io_out_a @[SystolicArray.scala 28:20]
    sa_0_3.io_in_b <= io_in_b_3 @[SystolicArray.scala 36:20]
    sa_0_3.io_in_c <= io_in_c_3 @[SystolicArray.scala 44:20]
    sa_1_0.clock <= clock
    sa_1_0.reset <= reset
    sa_1_0.io_in_control_done <= sa_0_0.io_out_control_done @[SystolicArray.scala 53:26]
    sa_1_0.io_in_a <= io_in_a_1 @[SystolicArray.scala 28:20]
    sa_1_0.io_in_b <= sa_0_0.io_out_b @[SystolicArray.scala 36:20]
    sa_1_0.io_in_c <= sa_0_0.io_out_c @[SystolicArray.scala 44:20]
    sa_1_1.clock <= clock
    sa_1_1.reset <= reset
    sa_1_1.io_in_control_done <= sa_0_1.io_out_control_done @[SystolicArray.scala 53:26]
    sa_1_1.io_in_a <= sa_1_0.io_out_a @[SystolicArray.scala 28:20]
    sa_1_1.io_in_b <= sa_0_1.io_out_b @[SystolicArray.scala 36:20]
    sa_1_1.io_in_c <= sa_0_1.io_out_c @[SystolicArray.scala 44:20]
    sa_1_2.clock <= clock
    sa_1_2.reset <= reset
    sa_1_2.io_in_control_done <= sa_0_2.io_out_control_done @[SystolicArray.scala 53:26]
    sa_1_2.io_in_a <= sa_1_1.io_out_a @[SystolicArray.scala 28:20]
    sa_1_2.io_in_b <= sa_0_2.io_out_b @[SystolicArray.scala 36:20]
    sa_1_2.io_in_c <= sa_0_2.io_out_c @[SystolicArray.scala 44:20]
    sa_1_3.clock <= clock
    sa_1_3.reset <= reset
    sa_1_3.io_in_control_done <= sa_0_3.io_out_control_done @[SystolicArray.scala 53:26]
    sa_1_3.io_in_a <= sa_1_2.io_out_a @[SystolicArray.scala 28:20]
    sa_1_3.io_in_b <= sa_0_3.io_out_b @[SystolicArray.scala 36:20]
    sa_1_3.io_in_c <= sa_0_3.io_out_c @[SystolicArray.scala 44:20]
    sa_2_0.clock <= clock
    sa_2_0.reset <= reset
    sa_2_0.io_in_control_done <= sa_1_0.io_out_control_done @[SystolicArray.scala 53:26]
    sa_2_0.io_in_a <= io_in_a_2 @[SystolicArray.scala 28:20]
    sa_2_0.io_in_b <= sa_1_0.io_out_b @[SystolicArray.scala 36:20]
    sa_2_0.io_in_c <= sa_1_0.io_out_c @[SystolicArray.scala 44:20]
    sa_2_1.clock <= clock
    sa_2_1.reset <= reset
    sa_2_1.io_in_control_done <= sa_1_1.io_out_control_done @[SystolicArray.scala 53:26]
    sa_2_1.io_in_a <= sa_2_0.io_out_a @[SystolicArray.scala 28:20]
    sa_2_1.io_in_b <= sa_1_1.io_out_b @[SystolicArray.scala 36:20]
    sa_2_1.io_in_c <= sa_1_1.io_out_c @[SystolicArray.scala 44:20]
    sa_2_2.clock <= clock
    sa_2_2.reset <= reset
    sa_2_2.io_in_control_done <= sa_1_2.io_out_control_done @[SystolicArray.scala 53:26]
    sa_2_2.io_in_a <= sa_2_1.io_out_a @[SystolicArray.scala 28:20]
    sa_2_2.io_in_b <= sa_1_2.io_out_b @[SystolicArray.scala 36:20]
    sa_2_2.io_in_c <= sa_1_2.io_out_c @[SystolicArray.scala 44:20]
    sa_2_3.clock <= clock
    sa_2_3.reset <= reset
    sa_2_3.io_in_control_done <= sa_1_3.io_out_control_done @[SystolicArray.scala 53:26]
    sa_2_3.io_in_a <= sa_2_2.io_out_a @[SystolicArray.scala 28:20]
    sa_2_3.io_in_b <= sa_1_3.io_out_b @[SystolicArray.scala 36:20]
    sa_2_3.io_in_c <= sa_1_3.io_out_c @[SystolicArray.scala 44:20]
    sa_3_0.clock <= clock
    sa_3_0.reset <= reset
    sa_3_0.io_in_control_done <= sa_2_0.io_out_control_done @[SystolicArray.scala 53:26]
    sa_3_0.io_in_a <= io_in_a_3 @[SystolicArray.scala 28:20]
    sa_3_0.io_in_b <= sa_2_0.io_out_b @[SystolicArray.scala 36:20]
    sa_3_0.io_in_c <= sa_2_0.io_out_c @[SystolicArray.scala 44:20]
    sa_3_1.clock <= clock
    sa_3_1.reset <= reset
    sa_3_1.io_in_control_done <= sa_2_1.io_out_control_done @[SystolicArray.scala 53:26]
    sa_3_1.io_in_a <= sa_3_0.io_out_a @[SystolicArray.scala 28:20]
    sa_3_1.io_in_b <= sa_2_1.io_out_b @[SystolicArray.scala 36:20]
    sa_3_1.io_in_c <= sa_2_1.io_out_c @[SystolicArray.scala 44:20]
    sa_3_2.clock <= clock
    sa_3_2.reset <= reset
    sa_3_2.io_in_control_done <= sa_2_2.io_out_control_done @[SystolicArray.scala 53:26]
    sa_3_2.io_in_a <= sa_3_1.io_out_a @[SystolicArray.scala 28:20]
    sa_3_2.io_in_b <= sa_2_2.io_out_b @[SystolicArray.scala 36:20]
    sa_3_2.io_in_c <= sa_2_2.io_out_c @[SystolicArray.scala 44:20]
    sa_3_3.clock <= clock
    sa_3_3.reset <= reset
    sa_3_3.io_in_control_done <= sa_2_3.io_out_control_done @[SystolicArray.scala 53:26]
    sa_3_3.io_in_a <= sa_3_2.io_out_a @[SystolicArray.scala 28:20]
    sa_3_3.io_in_b <= sa_2_3.io_out_b @[SystolicArray.scala 36:20]
    sa_3_3.io_in_c <= sa_2_3.io_out_c @[SystolicArray.scala 44:20]

  module GlobalCounter :
    input clock : Clock
    input reset : UInt<1>
    input io_start : UInt<1>
    output io_tick : UInt<1>

    reg count : UInt<4>, clock with :
      reset => (UInt<1>("h0"), count) @[Controller.scala 13:22]
    node tick = eq(count, UInt<4>("ha")) @[Controller.scala 14:20]
    reg enable : UInt<1>, clock with :
      reset => (UInt<1>("h0"), enable) @[Controller.scala 16:23]
    node _GEN_0 = mux(tick, UInt<1>("h0"), enable) @[Controller.scala 19:20 20:12 16:23]
    node _GEN_1 = mux(io_start, UInt<1>("h1"), _GEN_0) @[Controller.scala 17:18 18:12]
    node _T = neq(count, UInt<4>("ha")) @[Controller.scala 24:16]
    node _count_T = add(count, UInt<1>("h1")) @[Controller.scala 25:22]
    node _count_T_1 = tail(_count_T, 1) @[Controller.scala 25:22]
    node _GEN_2 = mux(_T, _count_T_1, UInt<1>("h0")) @[Controller.scala 24:37 25:13 27:13]
    node _GEN_3 = mux(enable, _GEN_2, count) @[Controller.scala 23:16 13:22]
    io_tick <= tick @[Controller.scala 31:11]
    count <= mux(reset, UInt<4>("h0"), _GEN_3) @[Controller.scala 13:{22,22}]
    enable <= mux(reset, UInt<1>("h0"), _GEN_1) @[Controller.scala 16:{23,23}]

  module GlobalCounter_1 :
    input clock : Clock
    input reset : UInt<1>
    input io_start : UInt<1>
    output io_tick : UInt<1>

    reg count : UInt<2>, clock with :
      reset => (UInt<1>("h0"), count) @[Controller.scala 13:22]
    node tick = eq(count, UInt<2>("h3")) @[Controller.scala 14:20]
    reg enable : UInt<1>, clock with :
      reset => (UInt<1>("h0"), enable) @[Controller.scala 16:23]
    node _GEN_0 = mux(tick, UInt<1>("h0"), enable) @[Controller.scala 19:20 20:12 16:23]
    node _GEN_1 = mux(io_start, UInt<1>("h1"), _GEN_0) @[Controller.scala 17:18 18:12]
    node _T = neq(count, UInt<2>("h3")) @[Controller.scala 24:16]
    node _count_T = add(count, UInt<1>("h1")) @[Controller.scala 25:22]
    node _count_T_1 = tail(_count_T, 1) @[Controller.scala 25:22]
    node _GEN_2 = mux(_T, _count_T_1, UInt<1>("h0")) @[Controller.scala 24:37 25:13 27:13]
    node _GEN_3 = mux(enable, _GEN_2, count) @[Controller.scala 23:16 13:22]
    io_tick <= tick @[Controller.scala 31:11]
    count <= mux(reset, UInt<2>("h0"), _GEN_3) @[Controller.scala 13:{22,22}]
    enable <= mux(reset, UInt<1>("h0"), _GEN_1) @[Controller.scala 16:{23,23}]

  module Controller :
    input clock : Clock
    input reset : UInt<1>
    input io_ctrl_cal_start : UInt<1>
    input io_ctrl_in_done : UInt<1>
    input io_ctrl_ob_empty : UInt<1>
    output io_ctrl_data_out : UInt<1>
    output io_ctrl_cal_done : UInt<1>
    output io_ctrl_cal_valid : UInt<1>
    output io_ctrl_out_done : UInt<1>

    inst cal_gc of GlobalCounter @[Controller.scala 79:28]
    inst out_gc of GlobalCounter_1 @[Controller.scala 93:28]
    reg state : UInt<2>, clock with :
      reset => (UInt<1>("h0"), state) @[Controller.scala 50:22]
    reg in_done_r : UInt<1>, clock with :
      reset => (UInt<1>("h0"), in_done_r) @[Controller.scala 53:29]
    reg isIdle : UInt<1>, clock with :
      reset => (UInt<1>("h0"), isIdle) @[Controller.scala 54:29]
    reg delay_ctrl_data_out : UInt<1>, clock with :
      reset => (UInt<1>("h0"), delay_ctrl_data_out) @[Controller.scala 57:36]
    reg cal_done_r : UInt<1>, clock with :
      reset => (UInt<1>("h0"), cal_done_r) @[Controller.scala 60:29]
    reg out_done_r : UInt<1>, clock with :
      reset => (UInt<1>("h0"), out_done_r) @[Controller.scala 61:29]
    reg delay_cal_done : UInt<1>, clock with :
      reset => (UInt<1>("h0"), delay_cal_done) @[Controller.scala 63:31]
    node _GEN_0 = mux(io_ctrl_data_out, UInt<1>("h0"), in_done_r) @[Controller.scala 70:32 71:15 53:29]
    node _GEN_1 = mux(io_ctrl_in_done, UInt<1>("h1"), _GEN_0) @[Controller.scala 68:25 69:15]
    node _ctrl_data_out_w_T = and(in_done_r, isIdle) @[Controller.scala 73:32]
    node _ctrl_data_out_w_T_1 = and(_ctrl_data_out_w_T, io_ctrl_ob_empty) @[Controller.scala 73:41]
    node _ctrl_data_out_edge_T = eq(delay_ctrl_data_out, UInt<1>("h0")) @[Controller.scala 75:25]
    node ctrl_data_out_w = _ctrl_data_out_w_T_1
    node _ctrl_data_out_edge_T_1 = and(_ctrl_data_out_edge_T, ctrl_data_out_w) @[Controller.scala 75:46]
    node _GEN_2 = mux(cal_gc.io_tick, UInt<1>("h1"), cal_done_r) @[Controller.scala 81:24 82:20 60:29]
    node _cal_done_edge_T = eq(delay_cal_done, UInt<1>("h0")) @[Controller.scala 89:22]
    node _cal_done_edge_T_1 = and(_cal_done_edge_T, cal_done_r) @[Controller.scala 89:38]
    node _GEN_3 = mux(out_gc.io_tick, UInt<1>("h1"), out_done_r) @[Controller.scala 95:24 96:20 61:29]
    node _T = eq(state, UInt<2>("h0")) @[Controller.scala 101:14]
    node _GEN_4 = mux(io_ctrl_cal_start, UInt<2>("h1"), state) @[Controller.scala 102:29 103:13 50:22]
    node _GEN_5 = mux(io_ctrl_cal_start, UInt<1>("h0"), isIdle) @[Controller.scala 102:29 104:14 54:29]
    node _T_1 = eq(state, UInt<2>("h1")) @[Controller.scala 106:20]
    node _GEN_6 = mux(cal_done_r, UInt<2>("h2"), state) @[Controller.scala 107:22 108:13 50:22]
    node _T_2 = eq(state, UInt<2>("h2")) @[Controller.scala 110:20]
    node _GEN_7 = mux(out_done_r, UInt<2>("h0"), state) @[Controller.scala 111:22 112:13 50:22]
    node _GEN_8 = mux(out_done_r, UInt<1>("h1"), isIdle) @[Controller.scala 111:22 113:14 54:29]
    node _GEN_9 = mux(out_done_r, UInt<1>("h0"), _GEN_2) @[Controller.scala 111:22 114:18]
    node _GEN_10 = mux(out_done_r, UInt<1>("h0"), _GEN_3) @[Controller.scala 111:22 115:18]
    node _GEN_11 = mux(_T_2, _GEN_7, state) @[Controller.scala 110:35 50:22]
    node _GEN_12 = mux(_T_2, _GEN_8, isIdle) @[Controller.scala 110:35 54:29]
    node _GEN_13 = mux(_T_2, _GEN_9, _GEN_2) @[Controller.scala 110:35]
    node _GEN_14 = mux(_T_2, _GEN_10, _GEN_3) @[Controller.scala 110:35]
    node _GEN_15 = mux(_T_1, _GEN_6, _GEN_11) @[Controller.scala 106:33]
    node _GEN_16 = mux(_T_1, isIdle, _GEN_12) @[Controller.scala 106:33 54:29]
    node _GEN_17 = mux(_T_1, _GEN_2, _GEN_13) @[Controller.scala 106:33]
    node _GEN_18 = mux(_T_1, _GEN_3, _GEN_14) @[Controller.scala 106:33]
    node _GEN_19 = mux(_T, _GEN_4, _GEN_15) @[Controller.scala 101:24]
    node _GEN_20 = mux(_T, _GEN_5, _GEN_16) @[Controller.scala 101:24]
    node _GEN_21 = mux(_T, _GEN_2, _GEN_17) @[Controller.scala 101:24]
    node _GEN_22 = mux(_T, _GEN_3, _GEN_18) @[Controller.scala 101:24]
    node ctrl_data_out_edge = _ctrl_data_out_edge_T_1
    node cal_done_edge = _cal_done_edge_T_1
    io_ctrl_data_out <= ctrl_data_out_edge @[Controller.scala 76:20]
    io_ctrl_cal_done <= cal_done_r @[Controller.scala 88:24]
    io_ctrl_cal_valid <= cal_done_edge @[Controller.scala 90:24]
    io_ctrl_out_done <= out_done_r @[Controller.scala 98:24]
    state <= mux(reset, UInt<2>("h0"), _GEN_19) @[Controller.scala 50:{22,22}]
    in_done_r <= mux(reset, UInt<1>("h0"), _GEN_1) @[Controller.scala 53:{29,29}]
    isIdle <= mux(reset, UInt<1>("h1"), _GEN_20) @[Controller.scala 54:{29,29}]
    delay_ctrl_data_out <= mux(reset, UInt<1>("h0"), ctrl_data_out_w) @[Controller.scala 57:{36,36} 74:23]
    cal_done_r <= mux(reset, UInt<1>("h0"), _GEN_21) @[Controller.scala 60:{29,29}]
    out_done_r <= mux(reset, UInt<1>("h0"), _GEN_22) @[Controller.scala 61:{29,29}]
    delay_cal_done <= mux(reset, UInt<1>("h0"), cal_done_r) @[Controller.scala 63:{31,31} 87:19]
    cal_gc.clock <= clock
    cal_gc.reset <= reset
    cal_gc.io_start <= io_ctrl_cal_start @[Controller.scala 80:19]
    out_gc.clock <= clock
    out_gc.reset <= reset
    out_gc.io_start <= cal_gc.io_tick @[Controller.scala 94:19]

  module SyncFIFO :
    input clock : Clock
    input reset : UInt<1>
    input io_enq : UInt<1>
    input io_deq : UInt<1>
    input io_enqData : UInt<8>
    output io_full : UInt<1>
    output io_empty : UInt<1>
    output io_deqData : UInt<8>

    reg mem_0 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), mem_0) @[SyncFIFO.scala 17:20]
    reg mem_1 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), mem_1) @[SyncFIFO.scala 17:20]
    reg mem_2 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), mem_2) @[SyncFIFO.scala 17:20]
    reg mem_3 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), mem_3) @[SyncFIFO.scala 17:20]
    reg readPtr : UInt<3>, clock with :
      reset => (UInt<1>("h0"), readPtr) @[SyncFIFO.scala 20:24]
    reg writePtr : UInt<3>, clock with :
      reset => (UInt<1>("h0"), writePtr) @[SyncFIFO.scala 21:25]
    node _isEmpty_T = eq(readPtr, writePtr) @[SyncFIFO.scala 29:22]
    node _isFull_T = bits(writePtr, 2, 2) @[SyncFIFO.scala 30:38]
    node _isFull_T_1 = not(_isFull_T) @[SyncFIFO.scala 30:29]
    node _isFull_T_2 = bits(writePtr, 1, 0) @[SyncFIFO.scala 30:60]
    node _isFull_T_3 = cat(_isFull_T_1, _isFull_T_2) @[Cat.scala 33:92]
    node _isFull_T_4 = eq(readPtr, _isFull_T_3) @[SyncFIFO.scala 30:21]
    node isFull = _isFull_T_4
    node _T = eq(isFull, UInt<1>("h0")) @[SyncFIFO.scala 34:18]
    node _T_1 = and(io_enq, _T) @[SyncFIFO.scala 34:15]
    node _T_2 = bits(writePtr, 1, 0)
    node _mem_T_2 = io_enqData @[SyncFIFO.scala 35:{19,19}]
    node _GEN_0 = mux(eq(UInt<1>("h0"), _T_2), _mem_T_2, mem_0) @[SyncFIFO.scala 35:{19,19} 17:20]
    node _GEN_1 = mux(eq(UInt<1>("h1"), _T_2), _mem_T_2, mem_1) @[SyncFIFO.scala 35:{19,19} 17:20]
    node _GEN_2 = mux(eq(UInt<2>("h2"), _T_2), _mem_T_2, mem_2) @[SyncFIFO.scala 35:{19,19} 17:20]
    node _GEN_3 = mux(eq(UInt<2>("h3"), _T_2), _mem_T_2, mem_3) @[SyncFIFO.scala 35:{19,19} 17:20]
    node _writePtr_T = add(writePtr, UInt<1>("h1")) @[SyncFIFO.scala 36:26]
    node _writePtr_T_1 = tail(_writePtr_T, 1) @[SyncFIFO.scala 36:26]
    node _GEN_4 = mux(_T_1, _GEN_0, mem_0) @[SyncFIFO.scala 17:20 34:27]
    node _GEN_5 = mux(_T_1, _GEN_1, mem_1) @[SyncFIFO.scala 17:20 34:27]
    node _GEN_6 = mux(_T_1, _GEN_2, mem_2) @[SyncFIFO.scala 17:20 34:27]
    node _GEN_7 = mux(_T_1, _GEN_3, mem_3) @[SyncFIFO.scala 17:20 34:27]
    node _GEN_8 = mux(_T_1, _writePtr_T_1, writePtr) @[SyncFIFO.scala 34:27 36:14 21:25]
    node isEmpty = _isEmpty_T
    node _T_3 = eq(isEmpty, UInt<1>("h0")) @[SyncFIFO.scala 39:18]
    node _T_4 = and(io_deq, _T_3) @[SyncFIFO.scala 39:15]
    node _deqData_T = bits(readPtr, 1, 0)
    node _GEN_9 = validif(eq(UInt<1>("h0"), _deqData_T), mem_0) @[SyncFIFO.scala 40:{13,13}]
    node _GEN_10 = mux(eq(UInt<1>("h1"), _deqData_T), mem_1, _GEN_9) @[SyncFIFO.scala 40:{13,13}]
    node _GEN_11 = mux(eq(UInt<2>("h2"), _deqData_T), mem_2, _GEN_10) @[SyncFIFO.scala 40:{13,13}]
    node _GEN_12 = mux(eq(UInt<2>("h3"), _deqData_T), mem_3, _GEN_11) @[SyncFIFO.scala 40:{13,13}]
    node _readPtr_T = add(readPtr, UInt<1>("h1")) @[SyncFIFO.scala 41:24]
    node _readPtr_T_1 = tail(_readPtr_T, 1) @[SyncFIFO.scala 41:24]
    node _mem_deqData_T = _GEN_12 @[SyncFIFO.scala 40:13]
    node _GEN_13 = mux(_T_4, _mem_deqData_T, UInt<8>("h0")) @[SyncFIFO.scala 39:28 40:13]
    node _GEN_14 = mux(_T_4, _readPtr_T_1, readPtr) @[SyncFIFO.scala 39:28 41:13 20:24]
    node _mem_WIRE_0 = UInt<8>("h0") @[SyncFIFO.scala 17:{28,28}]
    node _mem_WIRE_1 = UInt<8>("h0") @[SyncFIFO.scala 17:{28,28}]
    node _mem_WIRE_2 = UInt<8>("h0") @[SyncFIFO.scala 17:{28,28}]
    node _mem_WIRE_3 = UInt<8>("h0") @[SyncFIFO.scala 17:{28,28}]
    node deqData = _GEN_13
    io_full <= isFull @[SyncFIFO.scala 31:11]
    io_empty <= isEmpty @[SyncFIFO.scala 32:12]
    io_deqData <= deqData @[SyncFIFO.scala 44:14]
    mem_0 <= mux(reset, _mem_WIRE_0, _GEN_4) @[SyncFIFO.scala 17:{20,20}]
    mem_1 <= mux(reset, _mem_WIRE_1, _GEN_5) @[SyncFIFO.scala 17:{20,20}]
    mem_2 <= mux(reset, _mem_WIRE_2, _GEN_6) @[SyncFIFO.scala 17:{20,20}]
    mem_3 <= mux(reset, _mem_WIRE_3, _GEN_7) @[SyncFIFO.scala 17:{20,20}]
    readPtr <= mux(reset, UInt<3>("h0"), _GEN_14) @[SyncFIFO.scala 20:{24,24}]
    writePtr <= mux(reset, UInt<3>("h0"), _GEN_8) @[SyncFIFO.scala 21:{25,25}]

  module InputBuffer :
    input clock : Clock
    input reset : UInt<1>
    input io_ctrl_data_in : UInt<1>
    input io_ctrl_data_out : UInt<1>
    input io_data_in_0 : UInt<8>
    input io_data_in_1 : UInt<8>
    input io_data_in_2 : UInt<8>
    input io_data_in_3 : UInt<8>
    output io_data_out_0 : UInt<8>
    output io_data_out_1 : UInt<8>
    output io_data_out_2 : UInt<8>
    output io_data_out_3 : UInt<8>
    output io_data_in_done : UInt<1>
    output io_cal_start : UInt<1>
    output io_data_out_done : UInt<1>

    inst data_queue_0 of SyncFIFO @[InputBuffer.scala 19:46]
    inst data_queue_1 of SyncFIFO @[InputBuffer.scala 19:46]
    inst data_queue_2 of SyncFIFO @[InputBuffer.scala 19:46]
    inst data_queue_3 of SyncFIFO @[InputBuffer.scala 19:46]
    reg delay_count_0 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), delay_count_0) @[InputBuffer.scala 24:24]
    reg delay_count_1 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), delay_count_1) @[InputBuffer.scala 24:24]
    reg delay_count_2 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), delay_count_2) @[InputBuffer.scala 24:24]
    reg delay_count_3 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), delay_count_3) @[InputBuffer.scala 24:24]
    reg deq_count_0 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), deq_count_0) @[InputBuffer.scala 25:22]
    reg deq_count_1 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), deq_count_1) @[InputBuffer.scala 25:22]
    reg deq_count_2 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), deq_count_2) @[InputBuffer.scala 25:22]
    reg deq_count_3 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), deq_count_3) @[InputBuffer.scala 25:22]
    reg state : UInt<2>, clock with :
      reset => (UInt<1>("h0"), state) @[InputBuffer.scala 28:22]
    reg cal_start_r : UInt<1>, clock with :
      reset => (UInt<1>("h0"), cal_start_r) @[InputBuffer.scala 30:28]
    node _data_queue_0_io_enq_T = eq(state, UInt<2>("h0")) @[InputBuffer.scala 45:36]
    node _data_queue_0_io_enq_T_1 = and(_data_queue_0_io_enq_T, io_ctrl_data_in) @[InputBuffer.scala 45:45]
    node _data_queue_0_io_enq_T_2 = eq(state, UInt<2>("h1")) @[InputBuffer.scala 45:74]
    node _data_queue_0_io_enq_T_3 = or(_data_queue_0_io_enq_T_1, _data_queue_0_io_enq_T_2) @[InputBuffer.scala 45:65]
    node _data_queue_0_io_deq_T = eq(state, UInt<2>("h2")) @[InputBuffer.scala 46:35]
    node _data_queue_0_io_deq_T_1 = eq(delay_count_0, UInt<1>("h0")) @[InputBuffer.scala 46:66]
    node _data_queue_0_io_deq_T_2 = and(_data_queue_0_io_deq_T, _data_queue_0_io_deq_T_1) @[InputBuffer.scala 46:48]
    node _canDeq_0_T = eq(state, UInt<2>("h2")) @[InputBuffer.scala 47:24]
    node _canDeq_0_T_1 = eq(delay_count_0, UInt<1>("h0")) @[InputBuffer.scala 47:55]
    node _canDeq_0_T_2 = and(_canDeq_0_T, _canDeq_0_T_1) @[InputBuffer.scala 47:37]
    node canDeq_0 = _canDeq_0_T_2
    node _io_data_out_0_T = mux(canDeq_0, data_queue_0.io_deqData, UInt<1>("h0")) @[InputBuffer.scala 49:26]
    node _data_queue_1_io_enq_T = eq(state, UInt<2>("h0")) @[InputBuffer.scala 45:36]
    node _data_queue_1_io_enq_T_1 = and(_data_queue_1_io_enq_T, io_ctrl_data_in) @[InputBuffer.scala 45:45]
    node _data_queue_1_io_enq_T_2 = eq(state, UInt<2>("h1")) @[InputBuffer.scala 45:74]
    node _data_queue_1_io_enq_T_3 = or(_data_queue_1_io_enq_T_1, _data_queue_1_io_enq_T_2) @[InputBuffer.scala 45:65]
    node _data_queue_1_io_deq_T = eq(state, UInt<2>("h2")) @[InputBuffer.scala 46:35]
    node _data_queue_1_io_deq_T_1 = eq(delay_count_1, UInt<1>("h0")) @[InputBuffer.scala 46:66]
    node _data_queue_1_io_deq_T_2 = and(_data_queue_1_io_deq_T, _data_queue_1_io_deq_T_1) @[InputBuffer.scala 46:48]
    node _canDeq_1_T = eq(state, UInt<2>("h2")) @[InputBuffer.scala 47:24]
    node _canDeq_1_T_1 = eq(delay_count_1, UInt<1>("h0")) @[InputBuffer.scala 47:55]
    node _canDeq_1_T_2 = and(_canDeq_1_T, _canDeq_1_T_1) @[InputBuffer.scala 47:37]
    node canDeq_1 = _canDeq_1_T_2
    node _io_data_out_1_T = mux(canDeq_1, data_queue_1.io_deqData, UInt<1>("h0")) @[InputBuffer.scala 49:26]
    node _data_queue_2_io_enq_T = eq(state, UInt<2>("h0")) @[InputBuffer.scala 45:36]
    node _data_queue_2_io_enq_T_1 = and(_data_queue_2_io_enq_T, io_ctrl_data_in) @[InputBuffer.scala 45:45]
    node _data_queue_2_io_enq_T_2 = eq(state, UInt<2>("h1")) @[InputBuffer.scala 45:74]
    node _data_queue_2_io_enq_T_3 = or(_data_queue_2_io_enq_T_1, _data_queue_2_io_enq_T_2) @[InputBuffer.scala 45:65]
    node _data_queue_2_io_deq_T = eq(state, UInt<2>("h2")) @[InputBuffer.scala 46:35]
    node _data_queue_2_io_deq_T_1 = eq(delay_count_2, UInt<1>("h0")) @[InputBuffer.scala 46:66]
    node _data_queue_2_io_deq_T_2 = and(_data_queue_2_io_deq_T, _data_queue_2_io_deq_T_1) @[InputBuffer.scala 46:48]
    node _canDeq_2_T = eq(state, UInt<2>("h2")) @[InputBuffer.scala 47:24]
    node _canDeq_2_T_1 = eq(delay_count_2, UInt<1>("h0")) @[InputBuffer.scala 47:55]
    node _canDeq_2_T_2 = and(_canDeq_2_T, _canDeq_2_T_1) @[InputBuffer.scala 47:37]
    node canDeq_2 = _canDeq_2_T_2
    node _io_data_out_2_T = mux(canDeq_2, data_queue_2.io_deqData, UInt<1>("h0")) @[InputBuffer.scala 49:26]
    node _data_queue_3_io_enq_T = eq(state, UInt<2>("h0")) @[InputBuffer.scala 45:36]
    node _data_queue_3_io_enq_T_1 = and(_data_queue_3_io_enq_T, io_ctrl_data_in) @[InputBuffer.scala 45:45]
    node _data_queue_3_io_enq_T_2 = eq(state, UInt<2>("h1")) @[InputBuffer.scala 45:74]
    node _data_queue_3_io_enq_T_3 = or(_data_queue_3_io_enq_T_1, _data_queue_3_io_enq_T_2) @[InputBuffer.scala 45:65]
    node _data_queue_3_io_deq_T = eq(state, UInt<2>("h2")) @[InputBuffer.scala 46:35]
    node _data_queue_3_io_deq_T_1 = eq(delay_count_3, UInt<1>("h0")) @[InputBuffer.scala 46:66]
    node _data_queue_3_io_deq_T_2 = and(_data_queue_3_io_deq_T, _data_queue_3_io_deq_T_1) @[InputBuffer.scala 46:48]
    node _canDeq_3_T = eq(state, UInt<2>("h2")) @[InputBuffer.scala 47:24]
    node _canDeq_3_T_1 = eq(delay_count_3, UInt<1>("h0")) @[InputBuffer.scala 47:55]
    node _canDeq_3_T_2 = and(_canDeq_3_T, _canDeq_3_T_1) @[InputBuffer.scala 47:37]
    node canDeq_3 = _canDeq_3_T_2
    node _io_data_out_3_T = mux(canDeq_3, data_queue_3.io_deqData, UInt<1>("h0")) @[InputBuffer.scala 49:26]
    node _allFull_T = and(data_queue_0.io_full, data_queue_1.io_full) @[InputBuffer.scala 52:66]
    node _allFull_T_1 = and(_allFull_T, data_queue_2.io_full) @[InputBuffer.scala 52:66]
    node _allFull_T_2 = and(_allFull_T_1, data_queue_3.io_full) @[InputBuffer.scala 52:66]
    node _allEmpty_T = and(data_queue_0.io_empty, data_queue_1.io_empty) @[InputBuffer.scala 53:68]
    node _allEmpty_T_1 = and(_allEmpty_T, data_queue_2.io_empty) @[InputBuffer.scala 53:68]
    node _allEmpty_T_2 = and(_allEmpty_T_1, data_queue_3.io_empty) @[InputBuffer.scala 53:68]
    node _T = eq(state, UInt<2>("h0")) @[InputBuffer.scala 56:14]
    node _GEN_0 = mux(io_ctrl_data_out, UInt<2>("h2"), state) @[InputBuffer.scala 60:34 61:13 28:22]
    node _GEN_1 = mux(io_ctrl_data_in, UInt<2>("h1"), _GEN_0) @[InputBuffer.scala 58:27 59:13]
    node _T_1 = eq(state, UInt<2>("h1")) @[InputBuffer.scala 69:20]
    node _state_T = mux(io_ctrl_data_out, UInt<2>("h2"), UInt<2>("h0")) @[InputBuffer.scala 73:19]
    node allFull = _allFull_T_2
    node _GEN_2 = mux(allFull, UInt<1>("h1"), UInt<1>("h0")) @[InputBuffer.scala 71:20 72:20]
    node _GEN_3 = mux(allFull, _state_T, state) @[InputBuffer.scala 71:20 73:13 28:22]
    node allEmpty = _allEmpty_T_2
    node _GEN_4 = mux(allEmpty, UInt<1>("h1"), UInt<1>("h0")) @[InputBuffer.scala 78:20 79:21]
    node _GEN_5 = mux(allEmpty, UInt<2>("h0"), state) @[InputBuffer.scala 78:20 80:13 28:22]
    node _T_2 = neq(delay_count_0, UInt<1>("h0")) @[InputBuffer.scala 84:27]
    node _delay_count_0_T = sub(delay_count_0, UInt<1>("h1")) @[InputBuffer.scala 85:42]
    node _delay_count_0_T_1 = tail(_delay_count_0_T, 1) @[InputBuffer.scala 85:42]
    node _T_3 = neq(deq_count_0, UInt<1>("h0")) @[InputBuffer.scala 86:31]
    node _deq_count_0_T = sub(deq_count_0, UInt<1>("h1")) @[InputBuffer.scala 87:38]
    node _deq_count_0_T_1 = tail(_deq_count_0_T, 1) @[InputBuffer.scala 87:38]
    node _GEN_6 = mux(_T_3, _deq_count_0_T_1, deq_count_0) @[InputBuffer.scala 25:22 86:40 87:22]
    node _GEN_7 = mux(_T_2, _delay_count_0_T_1, delay_count_0) @[InputBuffer.scala 24:24 84:36 85:24]
    node _GEN_8 = mux(_T_2, deq_count_0, _GEN_6) @[InputBuffer.scala 25:22 84:36]
    node _T_4 = neq(delay_count_1, UInt<1>("h0")) @[InputBuffer.scala 84:27]
    node _delay_count_1_T = sub(delay_count_1, UInt<1>("h1")) @[InputBuffer.scala 85:42]
    node _delay_count_1_T_1 = tail(_delay_count_1_T, 1) @[InputBuffer.scala 85:42]
    node _T_5 = neq(deq_count_1, UInt<1>("h0")) @[InputBuffer.scala 86:31]
    node _deq_count_1_T = sub(deq_count_1, UInt<1>("h1")) @[InputBuffer.scala 87:38]
    node _deq_count_1_T_1 = tail(_deq_count_1_T, 1) @[InputBuffer.scala 87:38]
    node _GEN_9 = mux(_T_5, _deq_count_1_T_1, deq_count_1) @[InputBuffer.scala 25:22 86:40 87:22]
    node _GEN_10 = mux(_T_4, _delay_count_1_T_1, delay_count_1) @[InputBuffer.scala 24:24 84:36 85:24]
    node _GEN_11 = mux(_T_4, deq_count_1, _GEN_9) @[InputBuffer.scala 25:22 84:36]
    node _T_6 = neq(delay_count_2, UInt<1>("h0")) @[InputBuffer.scala 84:27]
    node _delay_count_2_T = sub(delay_count_2, UInt<1>("h1")) @[InputBuffer.scala 85:42]
    node _delay_count_2_T_1 = tail(_delay_count_2_T, 1) @[InputBuffer.scala 85:42]
    node _T_7 = neq(deq_count_2, UInt<1>("h0")) @[InputBuffer.scala 86:31]
    node _deq_count_2_T = sub(deq_count_2, UInt<1>("h1")) @[InputBuffer.scala 87:38]
    node _deq_count_2_T_1 = tail(_deq_count_2_T, 1) @[InputBuffer.scala 87:38]
    node _GEN_12 = mux(_T_7, _deq_count_2_T_1, deq_count_2) @[InputBuffer.scala 25:22 86:40 87:22]
    node _GEN_13 = mux(_T_6, _delay_count_2_T_1, delay_count_2) @[InputBuffer.scala 24:24 84:36 85:24]
    node _GEN_14 = mux(_T_6, deq_count_2, _GEN_12) @[InputBuffer.scala 25:22 84:36]
    node _T_8 = neq(delay_count_3, UInt<1>("h0")) @[InputBuffer.scala 84:27]
    node _delay_count_3_T = sub(delay_count_3, UInt<1>("h1")) @[InputBuffer.scala 85:42]
    node _delay_count_3_T_1 = tail(_delay_count_3_T, 1) @[InputBuffer.scala 85:42]
    node _T_9 = neq(deq_count_3, UInt<1>("h0")) @[InputBuffer.scala 86:31]
    node _deq_count_3_T = sub(deq_count_3, UInt<1>("h1")) @[InputBuffer.scala 87:38]
    node _deq_count_3_T_1 = tail(_deq_count_3_T, 1) @[InputBuffer.scala 87:38]
    node _GEN_15 = mux(_T_9, _deq_count_3_T_1, deq_count_3) @[InputBuffer.scala 25:22 86:40 87:22]
    node _GEN_16 = mux(_T_8, _delay_count_3_T_1, delay_count_3) @[InputBuffer.scala 24:24 84:36 85:24]
    node _GEN_17 = mux(_T_8, deq_count_3, _GEN_15) @[InputBuffer.scala 25:22 84:36]
    node _GEN_18 = mux(_T_1, _GEN_2, UInt<1>("h0")) @[InputBuffer.scala 69:33]
    node _GEN_19 = mux(_T_1, _GEN_3, _GEN_5) @[InputBuffer.scala 69:33]
    node _GEN_20 = mux(_T_1, UInt<1>("h0"), _GEN_4) @[InputBuffer.scala 69:33]
    node _GEN_21 = mux(_T_1, delay_count_0, _GEN_7) @[InputBuffer.scala 24:24 69:33]
    node _GEN_22 = mux(_T_1, deq_count_0, _GEN_8) @[InputBuffer.scala 25:22 69:33]
    node _GEN_23 = mux(_T_1, delay_count_1, _GEN_10) @[InputBuffer.scala 24:24 69:33]
    node _GEN_24 = mux(_T_1, deq_count_1, _GEN_11) @[InputBuffer.scala 25:22 69:33]
    node _GEN_25 = mux(_T_1, delay_count_2, _GEN_13) @[InputBuffer.scala 24:24 69:33]
    node _GEN_26 = mux(_T_1, deq_count_2, _GEN_14) @[InputBuffer.scala 25:22 69:33]
    node _GEN_27 = mux(_T_1, delay_count_3, _GEN_16) @[InputBuffer.scala 24:24 69:33]
    node _GEN_28 = mux(_T_1, deq_count_3, _GEN_17) @[InputBuffer.scala 25:22 69:33]
    node _GEN_29 = mux(_T, _GEN_1, _GEN_19) @[InputBuffer.scala 56:24]
    node _GEN_30 = mux(_T, UInt<1>("h0"), _GEN_21) @[InputBuffer.scala 56:24 65:22]
    node _GEN_31 = mux(_T, UInt<3>("h4"), _GEN_22) @[InputBuffer.scala 56:24 66:20]
    node _GEN_32 = mux(_T, UInt<1>("h1"), _GEN_23) @[InputBuffer.scala 56:24 65:22]
    node _GEN_33 = mux(_T, UInt<3>("h4"), _GEN_24) @[InputBuffer.scala 56:24 66:20]
    node _GEN_34 = mux(_T, UInt<2>("h2"), _GEN_25) @[InputBuffer.scala 56:24 65:22]
    node _GEN_35 = mux(_T, UInt<3>("h4"), _GEN_26) @[InputBuffer.scala 56:24 66:20]
    node _GEN_36 = mux(_T, UInt<2>("h3"), _GEN_27) @[InputBuffer.scala 56:24 65:22]
    node _GEN_37 = mux(_T, UInt<3>("h4"), _GEN_28) @[InputBuffer.scala 56:24 66:20]
    node _GEN_38 = mux(_T, UInt<1>("h0"), _GEN_18) @[InputBuffer.scala 56:24]
    node _GEN_39 = mux(_T, UInt<1>("h0"), _GEN_20) @[InputBuffer.scala 56:24]
    node data_in_done = _GEN_38
    node data_out_done = _GEN_39
    node _canDeq_WIRE_0 = UInt<1>("h0") @[InputBuffer.scala 42:{32,32}]
    node _canDeq_WIRE_1 = UInt<1>("h0") @[InputBuffer.scala 42:{32,32}]
    node _canDeq_WIRE_2 = UInt<1>("h0") @[InputBuffer.scala 42:{32,32}]
    node _canDeq_WIRE_3 = UInt<1>("h0") @[InputBuffer.scala 42:{32,32}]
    io_data_out_0 <= _io_data_out_0_T @[InputBuffer.scala 49:20]
    io_data_out_1 <= _io_data_out_1_T @[InputBuffer.scala 49:20]
    io_data_out_2 <= _io_data_out_2_T @[InputBuffer.scala 49:20]
    io_data_out_3 <= _io_data_out_3_T @[InputBuffer.scala 49:20]
    io_data_in_done <= data_in_done @[InputBuffer.scala 39:19]
    io_cal_start <= cal_start_r @[InputBuffer.scala 32:16]
    io_data_out_done <= data_out_done @[InputBuffer.scala 40:20]
    data_queue_0.clock <= clock
    data_queue_0.reset <= reset
    data_queue_0.io_enq <= _data_queue_0_io_enq_T_3 @[InputBuffer.scala 45:26]
    data_queue_0.io_deq <= _data_queue_0_io_deq_T_2 @[InputBuffer.scala 46:26]
    data_queue_0.io_enqData <= io_data_in_0 @[InputBuffer.scala 48:30]
    data_queue_1.clock <= clock
    data_queue_1.reset <= reset
    data_queue_1.io_enq <= _data_queue_1_io_enq_T_3 @[InputBuffer.scala 45:26]
    data_queue_1.io_deq <= _data_queue_1_io_deq_T_2 @[InputBuffer.scala 46:26]
    data_queue_1.io_enqData <= io_data_in_1 @[InputBuffer.scala 48:30]
    data_queue_2.clock <= clock
    data_queue_2.reset <= reset
    data_queue_2.io_enq <= _data_queue_2_io_enq_T_3 @[InputBuffer.scala 45:26]
    data_queue_2.io_deq <= _data_queue_2_io_deq_T_2 @[InputBuffer.scala 46:26]
    data_queue_2.io_enqData <= io_data_in_2 @[InputBuffer.scala 48:30]
    data_queue_3.clock <= clock
    data_queue_3.reset <= reset
    data_queue_3.io_enq <= _data_queue_3_io_enq_T_3 @[InputBuffer.scala 45:26]
    data_queue_3.io_deq <= _data_queue_3_io_deq_T_2 @[InputBuffer.scala 46:26]
    data_queue_3.io_enqData <= io_data_in_3 @[InputBuffer.scala 48:30]
    delay_count_0 <= _GEN_30
    delay_count_1 <= _GEN_32
    delay_count_2 <= _GEN_34
    delay_count_3 <= _GEN_36
    deq_count_0 <= _GEN_31
    deq_count_1 <= _GEN_33
    deq_count_2 <= _GEN_35
    deq_count_3 <= _GEN_37
    state <= mux(reset, UInt<2>("h0"), _GEN_29) @[InputBuffer.scala 28:{22,22}]
    cal_start_r <= mux(reset, UInt<1>("h0"), io_ctrl_data_out) @[InputBuffer.scala 30:{28,28} 31:15]

  module SyncFIFO_8 :
    input clock : Clock
    input reset : UInt<1>
    input io_enq : UInt<1>
    input io_deq : UInt<1>
    input io_enqData : UInt<32>
    output io_full : UInt<1>
    output io_empty : UInt<1>
    output io_deqData : UInt<32>

    reg mem_0 : UInt<32>, clock with :
      reset => (UInt<1>("h0"), mem_0) @[SyncFIFO.scala 17:20]
    reg mem_1 : UInt<32>, clock with :
      reset => (UInt<1>("h0"), mem_1) @[SyncFIFO.scala 17:20]
    reg mem_2 : UInt<32>, clock with :
      reset => (UInt<1>("h0"), mem_2) @[SyncFIFO.scala 17:20]
    reg mem_3 : UInt<32>, clock with :
      reset => (UInt<1>("h0"), mem_3) @[SyncFIFO.scala 17:20]
    reg readPtr : UInt<3>, clock with :
      reset => (UInt<1>("h0"), readPtr) @[SyncFIFO.scala 20:24]
    reg writePtr : UInt<3>, clock with :
      reset => (UInt<1>("h0"), writePtr) @[SyncFIFO.scala 21:25]
    node _isEmpty_T = eq(readPtr, writePtr) @[SyncFIFO.scala 29:22]
    node _isFull_T = bits(writePtr, 2, 2) @[SyncFIFO.scala 30:38]
    node _isFull_T_1 = not(_isFull_T) @[SyncFIFO.scala 30:29]
    node _isFull_T_2 = bits(writePtr, 1, 0) @[SyncFIFO.scala 30:60]
    node _isFull_T_3 = cat(_isFull_T_1, _isFull_T_2) @[Cat.scala 33:92]
    node _isFull_T_4 = eq(readPtr, _isFull_T_3) @[SyncFIFO.scala 30:21]
    node isFull = _isFull_T_4
    node _T = eq(isFull, UInt<1>("h0")) @[SyncFIFO.scala 34:18]
    node _T_1 = and(io_enq, _T) @[SyncFIFO.scala 34:15]
    node _T_2 = bits(writePtr, 1, 0)
    node _mem_T_2 = io_enqData @[SyncFIFO.scala 35:{19,19}]
    node _GEN_0 = mux(eq(UInt<1>("h0"), _T_2), _mem_T_2, mem_0) @[SyncFIFO.scala 35:{19,19} 17:20]
    node _GEN_1 = mux(eq(UInt<1>("h1"), _T_2), _mem_T_2, mem_1) @[SyncFIFO.scala 35:{19,19} 17:20]
    node _GEN_2 = mux(eq(UInt<2>("h2"), _T_2), _mem_T_2, mem_2) @[SyncFIFO.scala 35:{19,19} 17:20]
    node _GEN_3 = mux(eq(UInt<2>("h3"), _T_2), _mem_T_2, mem_3) @[SyncFIFO.scala 35:{19,19} 17:20]
    node _writePtr_T = add(writePtr, UInt<1>("h1")) @[SyncFIFO.scala 36:26]
    node _writePtr_T_1 = tail(_writePtr_T, 1) @[SyncFIFO.scala 36:26]
    node _GEN_4 = mux(_T_1, _GEN_0, mem_0) @[SyncFIFO.scala 17:20 34:27]
    node _GEN_5 = mux(_T_1, _GEN_1, mem_1) @[SyncFIFO.scala 17:20 34:27]
    node _GEN_6 = mux(_T_1, _GEN_2, mem_2) @[SyncFIFO.scala 17:20 34:27]
    node _GEN_7 = mux(_T_1, _GEN_3, mem_3) @[SyncFIFO.scala 17:20 34:27]
    node _GEN_8 = mux(_T_1, _writePtr_T_1, writePtr) @[SyncFIFO.scala 34:27 36:14 21:25]
    node isEmpty = _isEmpty_T
    node _T_3 = eq(isEmpty, UInt<1>("h0")) @[SyncFIFO.scala 39:18]
    node _T_4 = and(io_deq, _T_3) @[SyncFIFO.scala 39:15]
    node _deqData_T = bits(readPtr, 1, 0)
    node _GEN_9 = validif(eq(UInt<1>("h0"), _deqData_T), mem_0) @[SyncFIFO.scala 40:{13,13}]
    node _GEN_10 = mux(eq(UInt<1>("h1"), _deqData_T), mem_1, _GEN_9) @[SyncFIFO.scala 40:{13,13}]
    node _GEN_11 = mux(eq(UInt<2>("h2"), _deqData_T), mem_2, _GEN_10) @[SyncFIFO.scala 40:{13,13}]
    node _GEN_12 = mux(eq(UInt<2>("h3"), _deqData_T), mem_3, _GEN_11) @[SyncFIFO.scala 40:{13,13}]
    node _readPtr_T = add(readPtr, UInt<1>("h1")) @[SyncFIFO.scala 41:24]
    node _readPtr_T_1 = tail(_readPtr_T, 1) @[SyncFIFO.scala 41:24]
    node _mem_deqData_T = _GEN_12 @[SyncFIFO.scala 40:13]
    node _GEN_13 = mux(_T_4, _mem_deqData_T, UInt<32>("h0")) @[SyncFIFO.scala 39:28 40:13]
    node _GEN_14 = mux(_T_4, _readPtr_T_1, readPtr) @[SyncFIFO.scala 39:28 41:13 20:24]
    node _mem_WIRE_0 = UInt<32>("h0") @[SyncFIFO.scala 17:{28,28}]
    node _mem_WIRE_1 = UInt<32>("h0") @[SyncFIFO.scala 17:{28,28}]
    node _mem_WIRE_2 = UInt<32>("h0") @[SyncFIFO.scala 17:{28,28}]
    node _mem_WIRE_3 = UInt<32>("h0") @[SyncFIFO.scala 17:{28,28}]
    node deqData = _GEN_13
    io_full <= isFull @[SyncFIFO.scala 31:11]
    io_empty <= isEmpty @[SyncFIFO.scala 32:12]
    io_deqData <= deqData @[SyncFIFO.scala 44:14]
    mem_0 <= mux(reset, _mem_WIRE_0, _GEN_4) @[SyncFIFO.scala 17:{20,20}]
    mem_1 <= mux(reset, _mem_WIRE_1, _GEN_5) @[SyncFIFO.scala 17:{20,20}]
    mem_2 <= mux(reset, _mem_WIRE_2, _GEN_6) @[SyncFIFO.scala 17:{20,20}]
    mem_3 <= mux(reset, _mem_WIRE_3, _GEN_7) @[SyncFIFO.scala 17:{20,20}]
    readPtr <= mux(reset, UInt<3>("h0"), _GEN_14) @[SyncFIFO.scala 20:{24,24}]
    writePtr <= mux(reset, UInt<3>("h0"), _GEN_8) @[SyncFIFO.scala 21:{25,25}]

  module OutputBuffer :
    input clock : Clock
    input reset : UInt<1>
    input io_ctrl_data_in : UInt<1>
    input io_ctrl_data_out : UInt<1>
    input io_data_in_0 : UInt<32>
    input io_data_in_1 : UInt<32>
    input io_data_in_2 : UInt<32>
    input io_data_in_3 : UInt<32>
    output io_data_out_0 : UInt<32>
    output io_data_out_1 : UInt<32>
    output io_data_out_2 : UInt<32>
    output io_data_out_3 : UInt<32>
    output io_all_empty : UInt<1>
    output io_data_in_done : UInt<1>
    output io_data_out_done : UInt<1>

    inst data_queue_0 of SyncFIFO_8 @[OutputBuffer.scala 18:46]
    inst data_queue_1 of SyncFIFO_8 @[OutputBuffer.scala 18:46]
    inst data_queue_2 of SyncFIFO_8 @[OutputBuffer.scala 18:46]
    inst data_queue_3 of SyncFIFO_8 @[OutputBuffer.scala 18:46]
    reg deq_count_0 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), deq_count_0) @[OutputBuffer.scala 21:22]
    reg deq_count_1 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), deq_count_1) @[OutputBuffer.scala 21:22]
    reg deq_count_2 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), deq_count_2) @[OutputBuffer.scala 21:22]
    reg deq_count_3 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), deq_count_3) @[OutputBuffer.scala 21:22]
    reg state : UInt<2>, clock with :
      reset => (UInt<1>("h0"), state) @[OutputBuffer.scala 24:22]
    node _data_queue_0_io_enq_T = eq(state, UInt<2>("h0")) @[OutputBuffer.scala 36:36]
    node _data_queue_0_io_enq_T_1 = and(_data_queue_0_io_enq_T, io_ctrl_data_in) @[OutputBuffer.scala 36:45]
    node _data_queue_0_io_enq_T_2 = eq(state, UInt<2>("h1")) @[OutputBuffer.scala 36:74]
    node _data_queue_0_io_enq_T_3 = or(_data_queue_0_io_enq_T_1, _data_queue_0_io_enq_T_2) @[OutputBuffer.scala 36:65]
    node _data_queue_0_io_deq_T = eq(state, UInt<2>("h2")) @[OutputBuffer.scala 37:35]
    node _canDeq_0_T = eq(state, UInt<2>("h2")) @[OutputBuffer.scala 39:24]
    node canDeq_0 = _canDeq_0_T
    node _io_data_out_0_T = mux(canDeq_0, data_queue_0.io_deqData, UInt<1>("h0")) @[OutputBuffer.scala 40:26]
    node _data_queue_1_io_enq_T = eq(state, UInt<2>("h0")) @[OutputBuffer.scala 36:36]
    node _data_queue_1_io_enq_T_1 = and(_data_queue_1_io_enq_T, io_ctrl_data_in) @[OutputBuffer.scala 36:45]
    node _data_queue_1_io_enq_T_2 = eq(state, UInt<2>("h1")) @[OutputBuffer.scala 36:74]
    node _data_queue_1_io_enq_T_3 = or(_data_queue_1_io_enq_T_1, _data_queue_1_io_enq_T_2) @[OutputBuffer.scala 36:65]
    node _data_queue_1_io_deq_T = eq(state, UInt<2>("h2")) @[OutputBuffer.scala 37:35]
    node _canDeq_1_T = eq(state, UInt<2>("h2")) @[OutputBuffer.scala 39:24]
    node canDeq_1 = _canDeq_1_T
    node _io_data_out_1_T = mux(canDeq_1, data_queue_1.io_deqData, UInt<1>("h0")) @[OutputBuffer.scala 40:26]
    node _data_queue_2_io_enq_T = eq(state, UInt<2>("h0")) @[OutputBuffer.scala 36:36]
    node _data_queue_2_io_enq_T_1 = and(_data_queue_2_io_enq_T, io_ctrl_data_in) @[OutputBuffer.scala 36:45]
    node _data_queue_2_io_enq_T_2 = eq(state, UInt<2>("h1")) @[OutputBuffer.scala 36:74]
    node _data_queue_2_io_enq_T_3 = or(_data_queue_2_io_enq_T_1, _data_queue_2_io_enq_T_2) @[OutputBuffer.scala 36:65]
    node _data_queue_2_io_deq_T = eq(state, UInt<2>("h2")) @[OutputBuffer.scala 37:35]
    node _canDeq_2_T = eq(state, UInt<2>("h2")) @[OutputBuffer.scala 39:24]
    node canDeq_2 = _canDeq_2_T
    node _io_data_out_2_T = mux(canDeq_2, data_queue_2.io_deqData, UInt<1>("h0")) @[OutputBuffer.scala 40:26]
    node _data_queue_3_io_enq_T = eq(state, UInt<2>("h0")) @[OutputBuffer.scala 36:36]
    node _data_queue_3_io_enq_T_1 = and(_data_queue_3_io_enq_T, io_ctrl_data_in) @[OutputBuffer.scala 36:45]
    node _data_queue_3_io_enq_T_2 = eq(state, UInt<2>("h1")) @[OutputBuffer.scala 36:74]
    node _data_queue_3_io_enq_T_3 = or(_data_queue_3_io_enq_T_1, _data_queue_3_io_enq_T_2) @[OutputBuffer.scala 36:65]
    node _data_queue_3_io_deq_T = eq(state, UInt<2>("h2")) @[OutputBuffer.scala 37:35]
    node _canDeq_3_T = eq(state, UInt<2>("h2")) @[OutputBuffer.scala 39:24]
    node canDeq_3 = _canDeq_3_T
    node _io_data_out_3_T = mux(canDeq_3, data_queue_3.io_deqData, UInt<1>("h0")) @[OutputBuffer.scala 40:26]
    node _allFull_T = and(data_queue_0.io_full, data_queue_1.io_full) @[OutputBuffer.scala 44:66]
    node _allFull_T_1 = and(_allFull_T, data_queue_2.io_full) @[OutputBuffer.scala 44:66]
    node _allFull_T_2 = and(_allFull_T_1, data_queue_3.io_full) @[OutputBuffer.scala 44:66]
    node _allEmpty_T = and(data_queue_0.io_empty, data_queue_1.io_empty) @[OutputBuffer.scala 45:68]
    node _allEmpty_T_1 = and(_allEmpty_T, data_queue_2.io_empty) @[OutputBuffer.scala 45:68]
    node _allEmpty_T_2 = and(_allEmpty_T_1, data_queue_3.io_empty) @[OutputBuffer.scala 45:68]
    node _T = eq(state, UInt<2>("h0")) @[OutputBuffer.scala 49:14]
    node _GEN_0 = mux(io_ctrl_data_out, UInt<2>("h2"), state) @[OutputBuffer.scala 53:34 54:13 24:22]
    node _GEN_1 = mux(io_ctrl_data_in, UInt<2>("h1"), _GEN_0) @[OutputBuffer.scala 51:27 52:13]
    node _T_1 = eq(state, UInt<2>("h1")) @[OutputBuffer.scala 60:20]
    node _state_T = mux(io_ctrl_data_out, UInt<2>("h2"), UInt<2>("h0")) @[OutputBuffer.scala 64:19]
    node allFull = _allFull_T_2
    node _GEN_2 = mux(allFull, UInt<1>("h1"), UInt<1>("h0")) @[OutputBuffer.scala 62:19 63:20]
    node _GEN_3 = mux(allFull, _state_T, state) @[OutputBuffer.scala 62:19 64:13 24:22]
    node allEmpty = _allEmpty_T_2
    node _GEN_4 = mux(allEmpty, UInt<1>("h1"), UInt<1>("h0")) @[OutputBuffer.scala 69:20 70:21]
    node _GEN_5 = mux(allEmpty, UInt<2>("h0"), state) @[OutputBuffer.scala 69:20 71:13 24:22]
    node _T_2 = neq(deq_count_0, UInt<1>("h0")) @[OutputBuffer.scala 76:25]
    node _deq_count_0_T = sub(deq_count_0, UInt<1>("h1")) @[OutputBuffer.scala 77:38]
    node _deq_count_0_T_1 = tail(_deq_count_0_T, 1) @[OutputBuffer.scala 77:38]
    node _GEN_6 = mux(_T_2, _deq_count_0_T_1, deq_count_0) @[OutputBuffer.scala 21:22 76:34 77:22]
    node _T_3 = neq(deq_count_1, UInt<1>("h0")) @[OutputBuffer.scala 76:25]
    node _deq_count_1_T = sub(deq_count_1, UInt<1>("h1")) @[OutputBuffer.scala 77:38]
    node _deq_count_1_T_1 = tail(_deq_count_1_T, 1) @[OutputBuffer.scala 77:38]
    node _GEN_7 = mux(_T_3, _deq_count_1_T_1, deq_count_1) @[OutputBuffer.scala 21:22 76:34 77:22]
    node _T_4 = neq(deq_count_2, UInt<1>("h0")) @[OutputBuffer.scala 76:25]
    node _deq_count_2_T = sub(deq_count_2, UInt<1>("h1")) @[OutputBuffer.scala 77:38]
    node _deq_count_2_T_1 = tail(_deq_count_2_T, 1) @[OutputBuffer.scala 77:38]
    node _GEN_8 = mux(_T_4, _deq_count_2_T_1, deq_count_2) @[OutputBuffer.scala 21:22 76:34 77:22]
    node _T_5 = neq(deq_count_3, UInt<1>("h0")) @[OutputBuffer.scala 76:25]
    node _deq_count_3_T = sub(deq_count_3, UInt<1>("h1")) @[OutputBuffer.scala 77:38]
    node _deq_count_3_T_1 = tail(_deq_count_3_T, 1) @[OutputBuffer.scala 77:38]
    node _GEN_9 = mux(_T_5, _deq_count_3_T_1, deq_count_3) @[OutputBuffer.scala 21:22 76:34 77:22]
    node _GEN_10 = mux(_T_1, _GEN_2, UInt<1>("h0")) @[OutputBuffer.scala 60:33]
    node _GEN_11 = mux(_T_1, _GEN_3, _GEN_5) @[OutputBuffer.scala 60:33]
    node _GEN_12 = mux(_T_1, UInt<1>("h0"), _GEN_4) @[OutputBuffer.scala 60:33]
    node _GEN_13 = mux(_T_1, deq_count_0, _GEN_6) @[OutputBuffer.scala 21:22 60:33]
    node _GEN_14 = mux(_T_1, deq_count_1, _GEN_7) @[OutputBuffer.scala 21:22 60:33]
    node _GEN_15 = mux(_T_1, deq_count_2, _GEN_8) @[OutputBuffer.scala 21:22 60:33]
    node _GEN_16 = mux(_T_1, deq_count_3, _GEN_9) @[OutputBuffer.scala 21:22 60:33]
    node _GEN_17 = mux(_T, _GEN_1, _GEN_11) @[OutputBuffer.scala 49:24]
    node _GEN_18 = mux(_T, UInt<3>("h4"), _GEN_13) @[OutputBuffer.scala 49:24 58:20]
    node _GEN_19 = mux(_T, UInt<3>("h4"), _GEN_14) @[OutputBuffer.scala 49:24 58:20]
    node _GEN_20 = mux(_T, UInt<3>("h4"), _GEN_15) @[OutputBuffer.scala 49:24 58:20]
    node _GEN_21 = mux(_T, UInt<3>("h4"), _GEN_16) @[OutputBuffer.scala 49:24 58:20]
    node _GEN_22 = mux(_T, UInt<1>("h0"), _GEN_10) @[OutputBuffer.scala 49:24]
    node _GEN_23 = mux(_T, UInt<1>("h0"), _GEN_12) @[OutputBuffer.scala 49:24]
    node _canDeq_WIRE_0 = UInt<1>("h0") @[OutputBuffer.scala 26:{32,32}]
    node _canDeq_WIRE_1 = UInt<1>("h0") @[OutputBuffer.scala 26:{32,32}]
    node _canDeq_WIRE_2 = UInt<1>("h0") @[OutputBuffer.scala 26:{32,32}]
    node _canDeq_WIRE_3 = UInt<1>("h0") @[OutputBuffer.scala 26:{32,32}]
    node data_in_done = _GEN_22
    node data_out_done = _GEN_23
    io_data_out_0 <= _io_data_out_0_T @[OutputBuffer.scala 40:20]
    io_data_out_1 <= _io_data_out_1_T @[OutputBuffer.scala 40:20]
    io_data_out_2 <= _io_data_out_2_T @[OutputBuffer.scala 40:20]
    io_data_out_3 <= _io_data_out_3_T @[OutputBuffer.scala 40:20]
    io_all_empty <= allEmpty @[OutputBuffer.scala 46:16]
    io_data_in_done <= data_in_done @[OutputBuffer.scala 32:19]
    io_data_out_done <= data_out_done @[OutputBuffer.scala 33:20]
    data_queue_0.clock <= clock
    data_queue_0.reset <= reset
    data_queue_0.io_enq <= _data_queue_0_io_enq_T_3 @[OutputBuffer.scala 36:26]
    data_queue_0.io_deq <= _data_queue_0_io_deq_T @[OutputBuffer.scala 37:26]
    data_queue_0.io_enqData <= io_data_in_0 @[OutputBuffer.scala 38:30]
    data_queue_1.clock <= clock
    data_queue_1.reset <= reset
    data_queue_1.io_enq <= _data_queue_1_io_enq_T_3 @[OutputBuffer.scala 36:26]
    data_queue_1.io_deq <= _data_queue_1_io_deq_T @[OutputBuffer.scala 37:26]
    data_queue_1.io_enqData <= io_data_in_1 @[OutputBuffer.scala 38:30]
    data_queue_2.clock <= clock
    data_queue_2.reset <= reset
    data_queue_2.io_enq <= _data_queue_2_io_enq_T_3 @[OutputBuffer.scala 36:26]
    data_queue_2.io_deq <= _data_queue_2_io_deq_T @[OutputBuffer.scala 37:26]
    data_queue_2.io_enqData <= io_data_in_2 @[OutputBuffer.scala 38:30]
    data_queue_3.clock <= clock
    data_queue_3.reset <= reset
    data_queue_3.io_enq <= _data_queue_3_io_enq_T_3 @[OutputBuffer.scala 36:26]
    data_queue_3.io_deq <= _data_queue_3_io_deq_T @[OutputBuffer.scala 37:26]
    data_queue_3.io_enqData <= io_data_in_3 @[OutputBuffer.scala 38:30]
    deq_count_0 <= _GEN_18
    deq_count_1 <= _GEN_19
    deq_count_2 <= _GEN_20
    deq_count_3 <= _GEN_21
    state <= mux(reset, UInt<2>("h0"), _GEN_17) @[OutputBuffer.scala 24:{22,22}]

  module top :
    input clock : Clock
    input reset : UInt<1>
    input io_start : UInt<1>
    input io_in_a_0 : UInt<8>
    input io_in_a_1 : UInt<8>
    input io_in_a_2 : UInt<8>
    input io_in_a_3 : UInt<8>
    input io_in_b_0 : UInt<8>
    input io_in_b_1 : UInt<8>
    input io_in_b_2 : UInt<8>
    input io_in_b_3 : UInt<8>
    input io_in_c_0 : UInt<32>
    input io_in_c_1 : UInt<32>
    input io_in_c_2 : UInt<32>
    input io_in_c_3 : UInt<32>
    output io_valid : UInt<1>
    output io_done : UInt<1>
    output io_out_c_0 : UInt<32>
    output io_out_c_1 : UInt<32>
    output io_out_c_2 : UInt<32>
    output io_out_c_3 : UInt<32>

    inst sa of SystolicArray @[top.scala 21:18]
    inst controller of Controller @[top.scala 22:26]
    inst inBuffer_h of InputBuffer @[top.scala 24:28]
    inst inBuffer_v of InputBuffer @[top.scala 25:27]
    inst outBuffer of OutputBuffer @[top.scala 26:26]
    node _controller_io_ctrl_cal_start_T = and(inBuffer_h.io_cal_start, inBuffer_v.io_cal_start) @[top.scala 41:59]
    node _controller_io_ctrl_in_done_T = and(inBuffer_h.io_data_in_done, inBuffer_v.io_data_in_done) @[top.scala 42:60]
    io_valid <= outBuffer.io_data_in_done @[top.scala 56:12]
    io_done <= outBuffer.io_data_out_done @[top.scala 57:12]
    io_out_c_0 <= outBuffer.io_data_out_0 @[top.scala 58:12]
    io_out_c_1 <= outBuffer.io_data_out_1 @[top.scala 58:12]
    io_out_c_2 <= outBuffer.io_data_out_2 @[top.scala 58:12]
    io_out_c_3 <= outBuffer.io_data_out_3 @[top.scala 58:12]
    sa.clock <= clock
    sa.reset <= reset
    sa.io_in_control_0_done <= controller.io_ctrl_cal_done @[top.scala 39:30]
    sa.io_in_control_1_done <= controller.io_ctrl_cal_done @[top.scala 39:30]
    sa.io_in_control_2_done <= controller.io_ctrl_cal_done @[top.scala 39:30]
    sa.io_in_control_3_done <= controller.io_ctrl_cal_done @[top.scala 39:30]
    sa.io_in_a_0 <= inBuffer_h.io_data_out_0 @[top.scala 32:14]
    sa.io_in_a_1 <= inBuffer_h.io_data_out_1 @[top.scala 32:14]
    sa.io_in_a_2 <= inBuffer_h.io_data_out_2 @[top.scala 32:14]
    sa.io_in_a_3 <= inBuffer_h.io_data_out_3 @[top.scala 32:14]
    sa.io_in_b_0 <= inBuffer_v.io_data_out_0 @[top.scala 33:14]
    sa.io_in_b_1 <= inBuffer_v.io_data_out_1 @[top.scala 33:14]
    sa.io_in_b_2 <= inBuffer_v.io_data_out_2 @[top.scala 33:14]
    sa.io_in_b_3 <= inBuffer_v.io_data_out_3 @[top.scala 33:14]
    sa.io_in_c_0 <= io_in_c_0 @[top.scala 34:14]
    sa.io_in_c_1 <= io_in_c_1 @[top.scala 34:14]
    sa.io_in_c_2 <= io_in_c_2 @[top.scala 34:14]
    sa.io_in_c_3 <= io_in_c_3 @[top.scala 34:14]
    controller.clock <= clock
    controller.reset <= reset
    controller.io_ctrl_cal_start <= _controller_io_ctrl_cal_start_T @[top.scala 41:32]
    controller.io_ctrl_in_done <= _controller_io_ctrl_in_done_T @[top.scala 42:30]
    controller.io_ctrl_ob_empty <= outBuffer.io_all_empty @[top.scala 43:31]
    inBuffer_h.clock <= clock
    inBuffer_h.reset <= reset
    inBuffer_h.io_ctrl_data_in <= io_start @[top.scala 46:30]
    inBuffer_h.io_ctrl_data_out <= controller.io_ctrl_data_out @[top.scala 47:31]
    inBuffer_h.io_data_in_0 <= io_in_a_0 @[top.scala 29:25]
    inBuffer_h.io_data_in_1 <= io_in_a_1 @[top.scala 29:25]
    inBuffer_h.io_data_in_2 <= io_in_a_2 @[top.scala 29:25]
    inBuffer_h.io_data_in_3 <= io_in_a_3 @[top.scala 29:25]
    inBuffer_v.clock <= clock
    inBuffer_v.reset <= reset
    inBuffer_v.io_ctrl_data_in <= io_start @[top.scala 48:30]
    inBuffer_v.io_ctrl_data_out <= controller.io_ctrl_data_out @[top.scala 49:31]
    inBuffer_v.io_data_in_0 <= io_in_b_0 @[top.scala 30:25]
    inBuffer_v.io_data_in_1 <= io_in_b_1 @[top.scala 30:25]
    inBuffer_v.io_data_in_2 <= io_in_b_2 @[top.scala 30:25]
    inBuffer_v.io_data_in_3 <= io_in_b_3 @[top.scala 30:25]
    outBuffer.clock <= clock
    outBuffer.reset <= reset
    outBuffer.io_ctrl_data_in <= controller.io_ctrl_cal_valid @[top.scala 52:29]
    outBuffer.io_ctrl_data_out <= controller.io_ctrl_out_done @[top.scala 53:30]
    outBuffer.io_data_in_0 <= sa.io_out_c_0 @[top.scala 54:24]
    outBuffer.io_data_in_1 <= sa.io_out_c_1 @[top.scala 54:24]
    outBuffer.io_data_in_2 <= sa.io_out_c_2 @[top.scala 54:24]
    outBuffer.io_data_in_3 <= sa.io_out_c_3 @[top.scala 54:24]
